//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Api error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiError
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The Api error details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ApiErrorBase[] Details { get; set; }
		
		/// <summary>
		/// Inner error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innererror")]
		public InnerError Innererror { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Api error base.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiErrorBase
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// An error response from the Compute service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// Api error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ApiError Error { get; set; }
	}
	
	/// <summary>
	/// Describes the disallowed disk types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Disallowed
	{
		
		/// <summary>
		/// A list of disk types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskTypes")]
		public string[] DiskTypes { get; set; }
	}
	
	/// <summary>
	/// Specifies information about the Shared Image Gallery that you want to create or update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Gallery : Resource
	{
		
		/// <summary>
		/// Describes the properties of a Shared Image Gallery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Specifies information about the gallery Application Definition that you want to create or update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryApplication : Resource
	{
		
		/// <summary>
		/// Describes the properties of a gallery Application Definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryApplicationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List Gallery Applications operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryApplicationList
	{
		
		/// <summary>
		/// The uri to fetch the next page of Application Definitions in the Application Gallery. Call ListNext() with this to fetch the next page of gallery Application Definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of Gallery Applications.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GalleryApplication[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a gallery Application Definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryApplicationProperties
	{
		
		/// <summary>
		/// The description of this gallery Application Definition resource. This property is updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfLifeDate")]
		public System.Nullable<System.DateTimeOffset> EndOfLifeDate { get; set; }
		
		/// <summary>
		/// The Eula agreement for the gallery Application Definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eula")]
		public string Eula { get; set; }
		
		/// <summary>
		/// The privacy statement uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyStatementUri")]
		public string PrivacyStatementUri { get; set; }
		
		/// <summary>
		/// The release note uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseNoteUri")]
		public string ReleaseNoteUri { get; set; }
		
		/// <summary>
		/// This property allows you to specify the supported type of the OS that application is built for. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supportedOSType")]
		public GalleryApplicationPropertiesSupportedOSType SupportedOSType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GalleryApplicationPropertiesSupportedOSType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 1,
	}
	
	/// <summary>
	/// Specifies information about the gallery Application Definition that you want to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryApplicationUpdate : UpdateResource
	{
		
		/// <summary>
		/// Describes the properties of a gallery Application Definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryApplicationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Specifies information about the gallery Application Version that you want to create or update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryApplicationVersion : Resource
	{
		
		/// <summary>
		/// Describes the properties of a gallery Image Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryApplicationVersionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List Gallery Application version operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryApplicationVersionList
	{
		
		/// <summary>
		/// The uri to fetch the next page of gallery Application Versions. Call ListNext() with this to fetch the next page of gallery Application Versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of gallery Application Versions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GalleryApplicationVersion[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a gallery Image Version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryApplicationVersionProperties
	{
		
		/// <summary>
		/// The provisioning state, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<GalleryApplicationVersionPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The publishing profile of a gallery Image Version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publishingProfile")]
		public GalleryApplicationVersionPublishingProfile PublishingProfile { get; set; }
		
		/// <summary>
		/// This is the replication status of the gallery Image Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationStatus")]
		public ReplicationStatus ReplicationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GalleryApplicationVersionPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Migrating = 5,
	}
	
	/// <summary>
	/// The publishing profile of a gallery Image Version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryApplicationVersionPublishingProfile : GalleryArtifactPublishingProfileBase
	{
		
		/// <summary>
		/// Optional. May be used to help process this file. The type of file contained in the source, e.g. zip, json, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Optional. Whether or not this application reports health.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableHealthCheck")]
		public System.Nullable<System.Boolean> EnableHealthCheck { get; set; }
		
		/// <summary>
		/// The source image from which the Image Version is going to be created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public UserArtifactSource Source { get; set; }
	}
	
	/// <summary>
	/// Specifies information about the gallery Application Version that you want to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryApplicationVersionUpdate : UpdateResource
	{
		
		/// <summary>
		/// Describes the properties of a gallery Image Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryApplicationVersionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes the basic gallery artifact publishing profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryArtifactPublishingProfileBase
	{
		
		/// <summary>
		/// The end of life date of the gallery Image Version. This property can be used for decommissioning purposes. This property is updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfLifeDate")]
		public System.Nullable<System.DateTimeOffset> EndOfLifeDate { get; set; }
		
		/// <summary>
		/// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeFromLatest")]
		public System.Nullable<System.Boolean> ExcludeFromLatest { get; set; }
		
		/// <summary>
		/// The timestamp for when the gallery Image Version is published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedDate")]
		public System.Nullable<System.DateTimeOffset> PublishedDate { get; set; }
		
		/// <summary>
		/// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaCount")]
		public System.Nullable<System.Int32> ReplicaCount { get; set; }
		
		/// <summary>
		/// Specifies the storage account type to be used to store the image. This property is not updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountType")]
		public System.Nullable<GalleryArtifactPublishingProfileBaseStorageAccountType> StorageAccountType { get; set; }
		
		/// <summary>
		/// The target regions where the Image Version is going to be replicated to. This property is updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetRegions")]
		public TargetRegion[] TargetRegions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GalleryArtifactPublishingProfileBaseStorageAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_LRS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_ZRS = 1,
	}
	
	/// <summary>
	/// Describes the target region information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TargetRegion
	{
		
		/// <summary>
		/// The name of the region.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of replicas of the Image Version to be created per region. This property is updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalReplicaCount")]
		public System.Nullable<System.Int32> RegionalReplicaCount { get; set; }
		
		/// <summary>
		/// Specifies the storage account type to be used to store the image. This property is not updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountType")]
		public GalleryArtifactPublishingProfileBaseStorageAccountType StorageAccountType { get; set; }
	}
	
	/// <summary>
	/// The source image from which the Image Version is going to be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryArtifactSource
	{
		
		/// <summary>
		/// The managed artifact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="managedImage")]
		public ManagedArtifact ManagedImage { get; set; }
	}
	
	/// <summary>
	/// The gallery artifact version source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryArtifactVersionSource
	{
		
		/// <summary>
		/// The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, or user image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// This is the data disk image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryDataDiskImage : GalleryDiskImage
	{
		
		/// <summary>
		/// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lun")]
		public int Lun { get; set; }
	}
	
	/// <summary>
	/// This is the disk image base class.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryDiskImage
	{
		
		/// <summary>
		/// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostCaching")]
		public System.Nullable<GalleryDiskImageHostCaching> HostCaching { get; set; }
		
		/// <summary>
		/// This property indicates the size of the VHD to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeInGB")]
		public System.Nullable<System.Int32> SizeInGB { get; set; }
		
		/// <summary>
		/// The gallery artifact version source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public GalleryArtifactVersionSource Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GalleryDiskImageHostCaching
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadWrite = 2,
	}
	
	/// <summary>
	/// Describes the gallery unique name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryIdentifier
	{
		
		/// <summary>
		/// The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueName")]
		public string UniqueName { get; set; }
	}
	
	/// <summary>
	/// Specifies information about the gallery Image Definition that you want to create or update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImage : Resource
	{
		
		/// <summary>
		/// Describes the properties of a gallery Image Definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryImageProperties Properties { get; set; }
	}
	
	/// <summary>
	/// This is the gallery Image Definition identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageIdentifier
	{
		
		/// <summary>
		/// The name of the gallery Image Definition offer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// The name of the gallery Image Definition publisher.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The name of the gallery Image Definition SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	/// <summary>
	/// The List Gallery Images operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageList
	{
		
		/// <summary>
		/// The uri to fetch the next page of Image Definitions in the Shared Image Gallery. Call ListNext() with this to fetch the next page of gallery Image Definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of Shared Image Gallery images.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GalleryImage[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a gallery Image Definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageProperties
	{
		
		/// <summary>
		/// The description of this gallery Image Definition resource. This property is updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes the disallowed disk types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disallowed")]
		public Disallowed Disallowed { get; set; }
		
		/// <summary>
		/// The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfLifeDate")]
		public System.Nullable<System.DateTimeOffset> EndOfLifeDate { get; set; }
		
		/// <summary>
		/// The Eula agreement for the gallery Image Definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eula")]
		public string Eula { get; set; }
		
		/// <summary>
		/// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hyperVGeneration")]
		public System.Nullable<GalleryImagePropertiesHyperVGeneration> HyperVGeneration { get; set; }
		
		/// <summary>
		/// This is the gallery Image Definition identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public GalleryImageIdentifier Identifier { get; set; }
		
		/// <summary>
		/// This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="osState")]
		public GalleryImagePropertiesOsState OsState { get; set; }
		
		/// <summary>
		/// This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public GalleryApplicationPropertiesSupportedOSType OsType { get; set; }
		
		/// <summary>
		/// The privacy statement uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyStatementUri")]
		public string PrivacyStatementUri { get; set; }
		
		/// <summary>
		/// The provisioning state, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public GalleryApplicationVersionPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Describes the gallery Image Definition purchase plan. This is used by marketplace images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchasePlan")]
		public ImagePurchasePlan PurchasePlan { get; set; }
		
		/// <summary>
		/// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommended")]
		public RecommendedMachineConfiguration Recommended { get; set; }
		
		/// <summary>
		/// The release note uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseNoteUri")]
		public string ReleaseNoteUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GalleryImagePropertiesHyperVGeneration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GalleryImagePropertiesOsState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Generalized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Specialized = 1,
	}
	
	/// <summary>
	/// Specifies information about the gallery Image Definition that you want to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageUpdate : UpdateResource
	{
		
		/// <summary>
		/// Describes the properties of a gallery Image Definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryImageProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Specifies information about the gallery Image Version that you want to create or update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageVersion : Resource
	{
		
		/// <summary>
		/// Describes the properties of a gallery Image Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryImageVersionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List Gallery Image version operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageVersionList
	{
		
		/// <summary>
		/// The uri to fetch the next page of gallery Image Versions. Call ListNext() with this to fetch the next page of gallery Image Versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of gallery Image Versions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GalleryImageVersion[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a gallery Image Version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageVersionProperties
	{
		
		/// <summary>
		/// The provisioning state, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public GalleryApplicationVersionPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The publishing profile of a gallery Image Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishingProfile")]
		public GalleryImageVersionPublishingProfile PublishingProfile { get; set; }
		
		/// <summary>
		/// This is the replication status of the gallery Image Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationStatus")]
		public ReplicationStatus ReplicationStatus { get; set; }
		
		/// <summary>
		/// This is the storage profile of a Gallery Image Version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageProfile")]
		public GalleryImageVersionStorageProfile StorageProfile { get; set; }
	}
	
	/// <summary>
	/// The publishing profile of a gallery Image Version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageVersionPublishingProfile
	{
	}
	
	/// <summary>
	/// This is the storage profile of a Gallery Image Version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageVersionStorageProfile
	{
		
		/// <summary>
		/// A list of data disk images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskImages")]
		public GalleryDataDiskImage[] DataDiskImages { get; set; }
		
		/// <summary>
		/// This is the OS disk image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osDiskImage")]
		public GalleryOSDiskImage OsDiskImage { get; set; }
		
		/// <summary>
		/// The gallery artifact version source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public GalleryArtifactVersionSource Source { get; set; }
	}
	
	/// <summary>
	/// Specifies information about the gallery Image Version that you want to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageVersionUpdate : UpdateResource
	{
		
		/// <summary>
		/// Describes the properties of a gallery Image Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryImageVersionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List Galleries operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryList
	{
		
		/// <summary>
		/// The uri to fetch the next page of galleries. Call ListNext() with this to fetch the next page of galleries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of galleries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Gallery[] Value { get; set; }
	}
	
	/// <summary>
	/// This is the OS disk image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryOSDiskImage
	{
	}
	
	/// <summary>
	/// Describes the properties of a Shared Image Gallery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryProperties
	{
		
		/// <summary>
		/// The description of this Shared Image Gallery resource. This property is updatable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes the gallery unique name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public GalleryIdentifier Identifier { get; set; }
		
		/// <summary>
		/// The provisioning state, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public GalleryApplicationVersionPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Specifies information about the Shared Image Gallery that you want to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryUpdate : UpdateResource
	{
		
		/// <summary>
		/// Describes the properties of a Shared Image Gallery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes the gallery Image Definition purchase plan. This is used by marketplace images.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImagePurchasePlan
	{
		
		/// <summary>
		/// The plan ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// The publisher ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
	}
	
	/// <summary>
	/// Inner error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InnerError
	{
		
		/// <summary>
		/// The internal error message or exception dump.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errordetail")]
		public string Errordetail { get; set; }
		
		/// <summary>
		/// The exception type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exceptiontype")]
		public string Exceptiontype { get; set; }
	}
	
	/// <summary>
	/// The managed artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedArtifact
	{
		
		/// <summary>
		/// The managed artifact id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedMachineConfiguration
	{
		
		/// <summary>
		/// Describes the resource range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public ResourceRange Memory { get; set; }
		
		/// <summary>
		/// Describes the resource range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vCPUs")]
		public ResourceRange VCPUs { get; set; }
	}
	
	/// <summary>
	/// This is the regional replication status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegionalReplicationStatus
	{
		
		/// <summary>
		/// The details of the replication status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// It indicates progress of the replication job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public System.Nullable<System.Int32> Progress { get; set; }
		
		/// <summary>
		/// The region to which the gallery Image Version is being replicated to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// This is the regional replication state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<RegionalReplicationStatusState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegionalReplicationStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Replicating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// This is the replication status of the gallery Image Version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReplicationStatus
	{
		
		/// <summary>
		/// This is the aggregated replication status based on all the regional replication status flags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregatedState")]
		public System.Nullable<ReplicationStatusAggregatedState> AggregatedState { get; set; }
		
		/// <summary>
		/// This is a summary of replication status for each region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public RegionalReplicationStatus[] Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ReplicationStatusAggregatedState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// The Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Describes the resource range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceRange
	{
		
		/// <summary>
		/// The maximum number of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Int32> Max { get; set; }
		
		/// <summary>
		/// The minimum number of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Int32> Min { get; set; }
	}
	
	/// <summary>
	/// The Update Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateResource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The source image from which the Image Version is going to be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserArtifactSource
	{
		
		/// <summary>
		/// Required. The fileName of the artifact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// Required. The mediaLink of the artifact, must be a readable storage blob.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mediaLink")]
		public string MediaLink { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List galleries under a subscription.
		/// Galleries_List subscriptions/{subscriptionId}/providers/Microsoft.Compute/galleries
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryList> Galleries_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Compute/galleries&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List galleries under a resource group.
		/// Galleries_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryList> Galleries_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a Shared Image Gallery.
		/// Galleries_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<Gallery> Galleries_GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Gallery>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a Shared Image Gallery.
		/// Galleries_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery. The allowed characters are alphabets and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the create or update Shared Image Gallery operation.</param>
		/// <returns>OK</returns>
		public async Task<Gallery> Galleries_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version, Gallery requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Gallery>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Shared Image Gallery.
		/// Galleries_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery to be deleted.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task Galleries_DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Shared Image Gallery.
		/// Galleries_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery. The allowed characters are alphabets and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the update Shared Image Gallery operation.</param>
		/// <returns>OK</returns>
		public async Task<Gallery> Galleries_UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version, GalleryUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Gallery>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List gallery Application Definitions in a gallery.
		/// GalleryApplications_ListByGallery subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery from which Application Definitions are to be listed.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryApplicationList> GalleryApplications_ListByGalleryAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryApplicationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a gallery Application Definition.
		/// GalleryApplications_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery from which the Application Definitions are to be retrieved.</param>
		/// <param name="galleryApplicationName">The name of the gallery Application Definition to be retrieved.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryApplication> GalleryApplications_GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications/"+ (galleryApplicationName==null? "" : System.Uri.EscapeDataString(galleryApplicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryApplication>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a gallery Application Definition.
		/// GalleryApplications_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition is to be created.</param>
		/// <param name="galleryApplicationName">The name of the gallery Application Definition to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the create or update gallery Application operation.</param>
		/// <returns>OK</returns>
		public async Task<GalleryApplication> GalleryApplications_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version, GalleryApplication requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications/"+ (galleryApplicationName==null? "" : System.Uri.EscapeDataString(galleryApplicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryApplication>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a gallery Application.
		/// GalleryApplications_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition is to be deleted.</param>
		/// <param name="galleryApplicationName">The name of the gallery Application Definition to be deleted.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task GalleryApplications_DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications/"+ (galleryApplicationName==null? "" : System.Uri.EscapeDataString(galleryApplicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a gallery Application Definition.
		/// GalleryApplications_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition is to be updated.</param>
		/// <param name="galleryApplicationName">The name of the gallery Application Definition to be updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the update gallery Application operation.</param>
		/// <returns>OK</returns>
		public async Task<GalleryApplication> GalleryApplications_UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version, GalleryApplicationUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications/"+ (galleryApplicationName==null? "" : System.Uri.EscapeDataString(galleryApplicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryApplication>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List gallery Application Versions in a gallery Application Definition.
		/// GalleryApplicationVersions_ListByGalleryApplication subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
		/// <param name="galleryApplicationName">The name of the Shared Application Gallery Application Definition from which the Application Versions are to be listed.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryApplicationVersionList> GalleryApplicationVersions_ListByGalleryApplicationAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications/"+ (galleryApplicationName==null? "" : System.Uri.EscapeDataString(galleryApplicationName))+"/versions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryApplicationVersionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a gallery Application Version.
		/// GalleryApplicationVersions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
		/// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version resides.</param>
		/// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be retrieved.</param>
		/// <param name="expand">The expand expression to apply on the operation.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryApplicationVersion> GalleryApplicationVersions_GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, GalleryApplicationVersions_GetExpand expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications/"+ (galleryApplicationName==null? "" : System.Uri.EscapeDataString(galleryApplicationName))+"/versions/"+ (galleryApplicationVersionName==null? "" : System.Uri.EscapeDataString(galleryApplicationVersionName))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryApplicationVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a gallery Application Version.
		/// GalleryApplicationVersions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
		/// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version is to be created.</param>
		/// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be created. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch></param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the create or update gallery Application Version operation.</param>
		/// <returns>OK</returns>
		public async Task<GalleryApplicationVersion> GalleryApplicationVersions_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, string api_version, GalleryApplicationVersion requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications/"+ (galleryApplicationName==null? "" : System.Uri.EscapeDataString(galleryApplicationName))+"/versions/"+ (galleryApplicationVersionName==null? "" : System.Uri.EscapeDataString(galleryApplicationVersionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryApplicationVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a gallery Application Version.
		/// GalleryApplicationVersions_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
		/// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version resides.</param>
		/// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be deleted.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task GalleryApplicationVersions_DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications/"+ (galleryApplicationName==null? "" : System.Uri.EscapeDataString(galleryApplicationName))+"/versions/"+ (galleryApplicationVersionName==null? "" : System.Uri.EscapeDataString(galleryApplicationVersionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a gallery Application Version.
		/// GalleryApplicationVersions_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
		/// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version is to be updated.</param>
		/// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be updated. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch></param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the update gallery Application Version operation.</param>
		/// <returns>OK</returns>
		public async Task<GalleryApplicationVersion> GalleryApplicationVersions_UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, string api_version, GalleryApplicationVersionUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/applications/"+ (galleryApplicationName==null? "" : System.Uri.EscapeDataString(galleryApplicationName))+"/versions/"+ (galleryApplicationVersionName==null? "" : System.Uri.EscapeDataString(galleryApplicationVersionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryApplicationVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List gallery Image Definitions in a gallery.
		/// GalleryImages_ListByGallery subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery from which Image Definitions are to be listed.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryImageList> GalleryImages_ListByGalleryAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryImageList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a gallery Image Definition.
		/// GalleryImages_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery from which the Image Definitions are to be retrieved.</param>
		/// <param name="galleryImageName">The name of the gallery Image Definition to be retrieved.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryImage> GalleryImages_GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images/"+ (galleryImageName==null? "" : System.Uri.EscapeDataString(galleryImageName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryImage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a gallery Image Definition.
		/// GalleryImages_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition is to be created.</param>
		/// <param name="galleryImageName">The name of the gallery Image Definition to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the create or update gallery image operation.</param>
		/// <returns>OK</returns>
		public async Task<GalleryImage> GalleryImages_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version, GalleryImage requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images/"+ (galleryImageName==null? "" : System.Uri.EscapeDataString(galleryImageName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryImage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a gallery image.
		/// GalleryImages_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition is to be deleted.</param>
		/// <param name="galleryImageName">The name of the gallery Image Definition to be deleted.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task GalleryImages_DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images/"+ (galleryImageName==null? "" : System.Uri.EscapeDataString(galleryImageName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a gallery Image Definition.
		/// GalleryImages_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition is to be updated.</param>
		/// <param name="galleryImageName">The name of the gallery Image Definition to be updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the update gallery image operation.</param>
		/// <returns>OK</returns>
		public async Task<GalleryImage> GalleryImages_UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version, GalleryImageUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images/"+ (galleryImageName==null? "" : System.Uri.EscapeDataString(galleryImageName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryImage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List gallery Image Versions in a gallery Image Definition.
		/// GalleryImageVersions_ListByGalleryImage subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
		/// <param name="galleryImageName">The name of the Shared Image Gallery Image Definition from which the Image Versions are to be listed.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryImageVersionList> GalleryImageVersions_ListByGalleryImageAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images/"+ (galleryImageName==null? "" : System.Uri.EscapeDataString(galleryImageName))+"/versions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryImageVersionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a gallery Image Version.
		/// GalleryImageVersions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
		/// <param name="galleryImageName">The name of the gallery Image Definition in which the Image Version resides.</param>
		/// <param name="galleryImageVersionName">The name of the gallery Image Version to be retrieved.</param>
		/// <param name="expand">The expand expression to apply on the operation.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryImageVersion> GalleryImageVersions_GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, GalleryApplicationVersions_GetExpand expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images/"+ (galleryImageName==null? "" : System.Uri.EscapeDataString(galleryImageName))+"/versions/"+ (galleryImageVersionName==null? "" : System.Uri.EscapeDataString(galleryImageVersionName))+"&$expand=" + expand+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryImageVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a gallery Image Version.
		/// GalleryImageVersions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
		/// <param name="galleryImageName">The name of the gallery Image Definition in which the Image Version is to be created.</param>
		/// <param name="galleryImageVersionName">The name of the gallery Image Version to be created. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch></param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the create or update gallery Image Version operation.</param>
		/// <returns>OK</returns>
		public async Task<GalleryImageVersion> GalleryImageVersions_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, string api_version, GalleryImageVersion requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images/"+ (galleryImageName==null? "" : System.Uri.EscapeDataString(galleryImageName))+"/versions/"+ (galleryImageVersionName==null? "" : System.Uri.EscapeDataString(galleryImageVersionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryImageVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a gallery Image Version.
		/// GalleryImageVersions_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
		/// <param name="galleryImageName">The name of the gallery Image Definition in which the Image Version resides.</param>
		/// <param name="galleryImageVersionName">The name of the gallery Image Version to be deleted.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task GalleryImageVersions_DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images/"+ (galleryImageName==null? "" : System.Uri.EscapeDataString(galleryImageName))+"/versions/"+ (galleryImageVersionName==null? "" : System.Uri.EscapeDataString(galleryImageVersionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a gallery Image Version.
		/// GalleryImageVersions_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
		/// <param name="galleryImageName">The name of the gallery Image Definition in which the Image Version is to be updated.</param>
		/// <param name="galleryImageVersionName">The name of the gallery Image Version to be updated. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch></param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the update gallery Image Version operation.</param>
		/// <returns>OK</returns>
		public async Task<GalleryImageVersion> GalleryImageVersions_UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, string api_version, GalleryImageVersionUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Compute/galleries/"+ (galleryName==null? "" : System.Uri.EscapeDataString(galleryName))+"/images/"+ (galleryImageName==null? "" : System.Uri.EscapeDataString(galleryImageName))+"/versions/"+ (galleryImageVersionName==null? "" : System.Uri.EscapeDataString(galleryImageVersionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryImageVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GalleryApplicationVersions_GetExpand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReplicationStatus = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
