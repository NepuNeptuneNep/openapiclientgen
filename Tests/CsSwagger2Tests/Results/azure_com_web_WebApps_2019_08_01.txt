//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Description of site key vault references.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiKVReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityType")]
		public System.Nullable<ApiKVReferenceIdentityType> IdentityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public System.Nullable<ApiKVReferenceLocation> Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		public string SecretName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretVersion")]
		public string SecretVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<ApiKVReferenceSource> Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ApiKVReferenceStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vaultName")]
		public string VaultName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiKVReferenceIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiKVReferenceLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationSetting = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiKVReferenceSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyVault = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiKVReferenceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initialized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resolved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSyntax = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSINotEnabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VaultNotFound = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecretNotFound = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecretVersionNotFound = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessToKeyVaultDenied = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OtherReasons = 8,
	}
	
	/// <summary>
	/// Application logs configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationLogsConfig
	{
		
		/// <summary>
		/// Application logs azure blob storage configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureBlobStorage")]
		public AzureBlobStorageApplicationLogsConfig AzureBlobStorage { get; set; }
		
		/// <summary>
		/// Application logs to Azure table storage configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureTableStorage")]
		public AzureTableStorageApplicationLogsConfig AzureTableStorage { get; set; }
		
		/// <summary>
		/// Application logs to file system configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSystem")]
		public FileSystemApplicationLogsConfig FileSystem { get; set; }
	}
	
	/// <summary>
	/// Application logs azure blob storage configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureBlobStorageApplicationLogsConfig
	{
		
		/// <summary>
		/// Log level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<AzureBlobStorageApplicationLogsConfigLevel> Level { get; set; }
		
		/// <summary>
		/// Retention in days.
		///Remove blobs older than X days.
		///0 or lower means no retention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionInDays")]
		public System.Nullable<System.Int32> RetentionInDays { get; set; }
		
		/// <summary>
		/// SAS url to a azure blob container with read/write/list/delete permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasUrl")]
		public string SasUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureBlobStorageApplicationLogsConfigLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Off = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verbose = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Information = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 4,
	}
	
	/// <summary>
	/// Application logs to Azure table storage configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureTableStorageApplicationLogsConfig
	{
		
		/// <summary>
		/// Log level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public AzureBlobStorageApplicationLogsConfigLevel Level { get; set; }
		
		/// <summary>
		/// SAS URL to an Azure table with add/query/delete permissions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sasUrl")]
		public string SasUrl { get; set; }
	}
	
	/// <summary>
	/// Application logs to file system configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileSystemApplicationLogsConfig
	{
		
		/// <summary>
		/// Log level.
		/// </summary>
		[System.ComponentModel.DefaultValue(AzureBlobStorageApplicationLogsConfigLevel.Off)]
		[System.Runtime.Serialization.DataMember(Name="level")]
		public AzureBlobStorageApplicationLogsConfigLevel Level { get; set; } = AzureBlobStorageApplicationLogsConfigLevel.Off;
	}
	
	/// <summary>
	/// Http logs to azure blob storage configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureBlobStorageHttpLogsConfig
	{
		
		/// <summary>
		/// True if configuration is enabled, false if it is disabled and null if configuration is not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Retention in days.
		///Remove blobs older than X days.
		///0 or lower means no retention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionInDays")]
		public System.Nullable<System.Int32> RetentionInDays { get; set; }
		
		/// <summary>
		/// SAS url to a azure blob container with read/write/list/delete permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasUrl")]
		public string SasUrl { get; set; }
	}
	
	/// <summary>
	/// Azure Files or Blob Storage access information value for dictionary storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureStorageInfoValue
	{
		
		/// <summary>
		/// Access key for the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessKey")]
		public string AccessKey { get; set; }
		
		/// <summary>
		/// Name of the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Path to mount the storage within the site's runtime environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPath")]
		public string MountPath { get; set; }
		
		/// <summary>
		/// Name of the file share (container name, for Blob storage).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareName")]
		public string ShareName { get; set; }
		
		/// <summary>
		/// State of the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AzureStorageInfoValueState> State { get; set; }
		
		/// <summary>
		/// Type of storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AzureStorageInfoValueType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureStorageInfoValueState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ok = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidCredentials = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidShare = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureStorageInfoValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureFiles = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureBlob = 1,
	}
	
	/// <summary>
	/// AzureStorageInfo dictionary resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureStoragePropertyDictionaryResource
	{
		
		/// <summary>
		/// Azure storage accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, AzureStorageInfoValue> Properties { get; set; }
	}
	
	/// <summary>
	/// Backup description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BackupItem
	{
		
		/// <summary>
		/// BackupItem resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of backup items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BackupItemCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BackupItem[] Value { get; set; }
	}
	
	/// <summary>
	/// Description of a backup which will be performed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BackupRequest
	{
		
		/// <summary>
		/// BackupRequest resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BackupSchedule
	{
		
		/// <summary>
		/// How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(7)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequencyInterval")]
		public int FrequencyInterval { get; set; } = 7;
		
		/// <summary>
		/// The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(BackupScheduleFrequencyUnit.Day)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequencyUnit")]
		public BackupScheduleFrequencyUnit FrequencyUnit { get; set; } = BackupScheduleFrequencyUnit.Day;
		
		/// <summary>
		/// True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keepAtLeastOneBackup")]
		public bool KeepAtLeastOneBackup { get; set; } = true;
		
		/// <summary>
		/// Last time when this schedule was triggered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastExecutionTime")]
		public System.Nullable<System.DateTimeOffset> LastExecutionTime { get; set; }
		
		/// <summary>
		/// After how many days backups should be deleted.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(30)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retentionPeriodInDays")]
		public int RetentionPeriodInDays { get; set; } = 30;
		
		/// <summary>
		/// When the schedule should start working.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BackupScheduleFrequencyUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 1,
	}
	
	/// <summary>
	/// Database connection string value to type pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnStringValueTypePair
	{
		
		/// <summary>
		/// Type of database.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ConnStringValueTypePairType Type { get; set; }
		
		/// <summary>
		/// Value of pair.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnStringValueTypePairType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MySql = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLServer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLAzure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationHub = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceBus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventHub = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApiHub = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DocDb = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RedisCache = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PostgreSQL = 10,
	}
	
	/// <summary>
	/// String dictionary resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectionStringDictionary
	{
		
		/// <summary>
		/// Connection strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, ConnStringValueTypePair> Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerCpuStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpuUsage")]
		public ContainerCpuUsage CpuUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineCpuCount")]
		public System.Nullable<System.Int32> OnlineCpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemCpuUsage")]
		public System.Nullable<System.Int64> SystemCpuUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throttlingData")]
		public ContainerThrottlingData ThrottlingData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerCpuUsage
	{
		
		[System.Runtime.Serialization.DataMember(Name="kernelModeUsage")]
		public System.Nullable<System.Int64> KernelModeUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perCpuUsage")]
		public int[] PerCpuUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalUsage")]
		public System.Nullable<System.Int64> TotalUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModeUsage")]
		public System.Nullable<System.Int64> UserModeUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerThrottlingData
	{
		
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public System.Nullable<System.Int32> Periods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throttledPeriods")]
		public System.Nullable<System.Int32> ThrottledPeriods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throttledTime")]
		public System.Nullable<System.Int32> ThrottledTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentCpuStats")]
		public ContainerCpuStatistics CurrentCpuStats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentTimeStamp")]
		public System.Nullable<System.DateTimeOffset> CurrentTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eth0")]
		public ContainerNetworkInterfaceStatistics Eth0 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoryStats")]
		public ContainerMemoryStatistics MemoryStats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousCpuStats")]
		public ContainerCpuStatistics PreviousCpuStats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousTimeStamp")]
		public System.Nullable<System.DateTimeOffset> PreviousTimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerNetworkInterfaceStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="rxBytes")]
		public System.Nullable<System.Int64> RxBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rxDropped")]
		public System.Nullable<System.Int64> RxDropped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rxErrors")]
		public System.Nullable<System.Int64> RxErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rxPackets")]
		public System.Nullable<System.Int64> RxPackets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txBytes")]
		public System.Nullable<System.Int64> TxBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txDropped")]
		public System.Nullable<System.Int64> TxDropped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txErrors")]
		public System.Nullable<System.Int64> TxErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="txPackets")]
		public System.Nullable<System.Int64> TxPackets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerMemoryStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxUsage")]
		public System.Nullable<System.Int64> MaxUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Nullable<System.Int64> Usage { get; set; }
	}
	
	/// <summary>
	/// Continuous Web Job Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContinuousWebJob
	{
		
		/// <summary>
		/// ContinuousWebJob resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Kudu continuous web job information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContinuousWebJobCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ContinuousWebJob[] Value { get; set; }
	}
	
	/// <summary>
	/// Copy deployment slot parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CsmCopySlotEntity
	{
		
		/// <summary>
		/// Configuration of an App Service app.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="siteConfig")]
		public CsmCopySlotEntitySiteConfig SiteConfig { get; set; }
		
		/// <summary>
		/// Destination deployment slot during copy operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetSlot")]
		public string TargetSlot { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfig
	{
		
		/// <summary>
		/// <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alwaysOn")]
		public System.Nullable<System.Boolean> AlwaysOn { get; set; }
		
		/// <summary>
		/// Information about the formal API definition for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiDefinition")]
		public CsmCopySlotEntitySiteConfigApiDefinition ApiDefinition { get; set; }
		
		/// <summary>
		/// Azure API management (APIM) configuration linked to the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiManagementConfig")]
		public CsmCopySlotEntitySiteConfigApiManagementConfig ApiManagementConfig { get; set; }
		
		/// <summary>
		/// App command line to launch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appCommandLine")]
		public string AppCommandLine { get; set; }
		
		/// <summary>
		/// Application settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appSettings")]
		public CsmCopySlotEntitySiteConfigAppSettings[] CsmCopySlotEntitySiteConfigAppSettings { get; set; }
		
		/// <summary>
		/// <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoHealEnabled")]
		public System.Nullable<System.Boolean> AutoHealEnabled { get; set; }
		
		/// <summary>
		/// Rules that can be defined for auto-heal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoHealRules")]
		public CsmCopySlotEntitySiteConfigAutoHealRules AutoHealRules { get; set; }
		
		/// <summary>
		/// Auto-swap slot name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoSwapSlotName")]
		public string AutoSwapSlotName { get; set; }
		
		/// <summary>
		/// Connection strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionStrings")]
		public CsmCopySlotEntitySiteConfigConnectionStrings[] CsmCopySlotEntitySiteConfigConnectionStrings { get; set; }
		
		/// <summary>
		/// Cross-Origin Resource Sharing (CORS) settings for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cors")]
		public CsmCopySlotEntitySiteConfigCors Cors { get; set; }
		
		/// <summary>
		/// Default documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultDocuments")]
		public string[] DefaultDocuments { get; set; }
		
		/// <summary>
		/// <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailedErrorLoggingEnabled")]
		public System.Nullable<System.Boolean> DetailedErrorLoggingEnabled { get; set; }
		
		/// <summary>
		/// Document root.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentRoot")]
		public string DocumentRoot { get; set; }
		
		/// <summary>
		/// Routing rules in production experiments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experiments")]
		public CsmCopySlotEntitySiteConfigExperiments Experiments { get; set; }
		
		/// <summary>
		/// State of FTP / FTPS service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ftpsState")]
		public System.Nullable<CsmCopySlotEntitySiteConfigFtpsState> FtpsState { get; set; }
		
		/// <summary>
		/// Handler mappings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handlerMappings")]
		public CsmCopySlotEntitySiteConfigHandlerMappings[] CsmCopySlotEntitySiteConfigHandlerMappings { get; set; }
		
		/// <summary>
		/// Health check path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthCheckPath")]
		public string HealthCheckPath { get; set; }
		
		/// <summary>
		/// Http20Enabled: configures a web site to allow clients to connect over http2.0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="http20Enabled")]
		public System.Nullable<System.Boolean> Http20Enabled { get; set; }
		
		/// <summary>
		/// <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpLoggingEnabled")]
		public System.Nullable<System.Boolean> HttpLoggingEnabled { get; set; }
		
		/// <summary>
		/// IP security restrictions for main.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipSecurityRestrictions")]
		public CsmCopySlotEntitySiteConfigIpSecurityRestrictions[] CsmCopySlotEntitySiteConfigIpSecurityRestrictions { get; set; }
		
		/// <summary>
		/// Java container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="javaContainer")]
		public string JavaContainer { get; set; }
		
		/// <summary>
		/// Java container version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="javaContainerVersion")]
		public string JavaContainerVersion { get; set; }
		
		/// <summary>
		/// Java version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="javaVersion")]
		public string JavaVersion { get; set; }
		
		/// <summary>
		/// Metric limits set on an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limits")]
		public CsmCopySlotEntitySiteConfigLimits Limits { get; set; }
		
		/// <summary>
		/// Linux App Framework and version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linuxFxVersion")]
		public string LinuxFxVersion { get; set; }
		
		/// <summary>
		/// Site load balancing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancing")]
		public System.Nullable<CsmCopySlotEntitySiteConfigLoadBalancing> LoadBalancing { get; set; }
		
		/// <summary>
		/// <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localMySqlEnabled")]
		public System.Nullable<System.Boolean> LocalMySqlEnabled { get; set; }
		
		/// <summary>
		/// HTTP logs directory size limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsDirectorySizeLimit")]
		public System.Nullable<System.Int32> LogsDirectorySizeLimit { get; set; }
		
		/// <summary>
		/// MachineKey of an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineKey")]
		public CsmCopySlotEntitySiteConfigMachineKey MachineKey { get; set; }
		
		/// <summary>
		/// Managed pipeline mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedPipelineMode")]
		public System.Nullable<CsmCopySlotEntitySiteConfigManagedPipelineMode> ManagedPipelineMode { get; set; }
		
		/// <summary>
		/// Managed Service Identity Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedServiceIdentityId")]
		public System.Nullable<System.Int32> ManagedServiceIdentityId { get; set; }
		
		/// <summary>
		/// MinTlsVersion: configures the minimum version of TLS required for SSL requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTlsVersion")]
		public System.Nullable<CsmCopySlotEntitySiteConfigMinTlsVersion> MinTlsVersion { get; set; }
		
		/// <summary>
		/// .NET Framework version.
		/// </summary>
		[System.ComponentModel.DefaultValue("v4.6")]
		[System.Runtime.Serialization.DataMember(Name="netFrameworkVersion")]
		public string NetFrameworkVersion { get; set; } = "v4.6";
		
		/// <summary>
		/// Version of Node.js.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeVersion")]
		public string NodeVersion { get; set; }
		
		/// <summary>
		/// Number of workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfWorkers")]
		public System.Nullable<System.Int32> NumberOfWorkers { get; set; }
		
		/// <summary>
		/// Version of PHP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phpVersion")]
		public string PhpVersion { get; set; }
		
		/// <summary>
		/// Number of preWarmed instances.
		///This setting only applies to the Consumption and Elastic Plans
		/// Minimum: 0
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preWarmedInstanceCount")]
		[System.ComponentModel.DataAnnotations.Range(0, 10)]
		public System.Nullable<System.Int32> PreWarmedInstanceCount { get; set; }
		
		/// <summary>
		/// Publishing user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishingUsername")]
		public string PublishingUsername { get; set; }
		
		/// <summary>
		/// Push settings for the App.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="push")]
		public CsmCopySlotEntitySiteConfigPush Push { get; set; }
		
		/// <summary>
		/// Version of Python.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonVersion")]
		public string PythonVersion { get; set; }
		
		/// <summary>
		/// <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteDebuggingEnabled")]
		public System.Nullable<System.Boolean> RemoteDebuggingEnabled { get; set; }
		
		/// <summary>
		/// Remote debugging version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteDebuggingVersion")]
		public string RemoteDebuggingVersion { get; set; }
		
		/// <summary>
		/// <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTracingEnabled")]
		public System.Nullable<System.Boolean> RequestTracingEnabled { get; set; }
		
		/// <summary>
		/// Request tracing expiration time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTracingExpirationTime")]
		public System.Nullable<System.DateTimeOffset> RequestTracingExpirationTime { get; set; }
		
		/// <summary>
		/// IP security restrictions for scm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scmIpSecurityRestrictions")]
		public CsmCopySlotEntitySiteConfigScmIpSecurityRestrictions[] CsmCopySlotEntitySiteConfigScmIpSecurityRestrictions { get; set; }
		
		/// <summary>
		/// IP security restrictions for scm to use main.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scmIpSecurityRestrictionsUseMain")]
		public System.Nullable<System.Boolean> ScmIpSecurityRestrictionsUseMain { get; set; }
		
		/// <summary>
		/// SCM type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scmType")]
		public System.Nullable<CsmCopySlotEntitySiteConfigScmType> ScmType { get; set; }
		
		/// <summary>
		/// Tracing options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracingOptions")]
		public string TracingOptions { get; set; }
		
		/// <summary>
		/// <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="use32BitWorkerProcess")]
		public System.Nullable<System.Boolean> Use32BitWorkerProcess { get; set; }
		
		/// <summary>
		/// Virtual applications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualApplications")]
		public CsmCopySlotEntitySiteConfigVirtualApplications[] CsmCopySlotEntitySiteConfigVirtualApplications { get; set; }
		
		/// <summary>
		/// Virtual Network name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetName")]
		public string VnetName { get; set; }
		
		/// <summary>
		/// <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webSocketsEnabled")]
		public System.Nullable<System.Boolean> WebSocketsEnabled { get; set; }
		
		/// <summary>
		/// Xenon App Framework and version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsFxVersion")]
		public string WindowsFxVersion { get; set; }
		
		/// <summary>
		/// Explicit Managed Service Identity Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xManagedServiceIdentityId")]
		public System.Nullable<System.Int32> XManagedServiceIdentityId { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigApiDefinition
	{
		
		/// <summary>
		/// The URL of the API definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigApiManagementConfig
	{
		
		/// <summary>
		/// APIM-Api Identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigAppSettings
	{
		
		/// <summary>
		/// Pair name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pair value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigAutoHealRules
	{
		
		/// <summary>
		/// Actions which to take by the auto-heal module when a rule is triggered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public CsmCopySlotEntitySiteConfigAutoHealRulesActions Actions { get; set; }
		
		/// <summary>
		/// Triggers for auto-heal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public CsmCopySlotEntitySiteConfigAutoHealRulesTriggers Triggers { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigAutoHealRulesActions
	{
		
		/// <summary>
		/// Predefined action to be taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public System.Nullable<CsmCopySlotEntitySiteConfigAutoHealRulesActionsActionType> ActionType { get; set; }
		
		/// <summary>
		/// Custom action to be executed
		///when an auto heal rule is triggered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAction")]
		public CsmCopySlotEntitySiteConfigAutoHealRulesActionsCustomAction CustomAction { get; set; }
		
		/// <summary>
		/// Minimum time the process must execute
		///before taking the action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minProcessExecutionTime")]
		public string MinProcessExecutionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CsmCopySlotEntitySiteConfigAutoHealRulesActionsActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recycle = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LogEvent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomAction = 2,
	}
	
	public class CsmCopySlotEntitySiteConfigAutoHealRulesActionsCustomAction
	{
		
		/// <summary>
		/// Executable to be run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exe")]
		public string Exe { get; set; }
		
		/// <summary>
		/// Parameters for the executable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigAutoHealRulesTriggers
	{
		
		/// <summary>
		/// A rule based on private bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBytesInKB")]
		public System.Nullable<System.Int32> PrivateBytesInKB { get; set; }
		
		/// <summary>
		/// Trigger based on total requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public CsmCopySlotEntitySiteConfigAutoHealRulesTriggersRequests Requests { get; set; }
		
		/// <summary>
		/// Trigger based on request execution time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slowRequests")]
		public CsmCopySlotEntitySiteConfigAutoHealRulesTriggersSlowRequests SlowRequests { get; set; }
		
		/// <summary>
		/// A rule based on status codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCodes")]
		public CsmCopySlotEntitySiteConfigAutoHealRulesTriggersStatusCodes[] CsmCopySlotEntitySiteConfigAutoHealRulesTriggersStatusCodes { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigAutoHealRulesTriggersRequests
	{
		
		/// <summary>
		/// Request Count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInterval")]
		public string TimeInterval { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigAutoHealRulesTriggersSlowRequests
	{
		
		/// <summary>
		/// Request Count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInterval")]
		public string TimeInterval { get; set; }
		
		/// <summary>
		/// Time taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeTaken")]
		public string TimeTaken { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigAutoHealRulesTriggersStatusCodes
	{
		
		/// <summary>
		/// Request Count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// HTTP status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// Request Sub Status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subStatus")]
		public System.Nullable<System.Int32> SubStatus { get; set; }
		
		/// <summary>
		/// Time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInterval")]
		public string TimeInterval { get; set; }
		
		/// <summary>
		/// Win32 error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="win32Status")]
		public System.Nullable<System.Int32> Win32Status { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigConnectionStrings
	{
		
		/// <summary>
		/// Connection string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// Name of connection string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ConnStringValueTypePairType Type { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigCors
	{
		
		/// <summary>
		/// Gets or sets the list of origins that should be allowed to make cross-origin
		///calls (for example: http://example.com:12345). Use "*" to allow all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedOrigins")]
		public string[] AllowedOrigins { get; set; }
		
		/// <summary>
		/// Gets or sets whether CORS requests with credentials are allowed. See 
		///https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials
		///for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportCredentials")]
		public System.Nullable<System.Boolean> SupportCredentials { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigExperiments
	{
		
		/// <summary>
		/// List of ramp-up rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rampUpRules")]
		public CsmCopySlotEntitySiteConfigExperimentsRampUpRules[] CsmCopySlotEntitySiteConfigExperimentsRampUpRules { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigExperimentsRampUpRules
	{
		
		/// <summary>
		/// Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionHostName")]
		public string ActionHostName { get; set; }
		
		/// <summary>
		/// Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.
		///https://www.siteextensions.net/packages/TiPCallback/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeDecisionCallbackUrl")]
		public string ChangeDecisionCallbackUrl { get; set; }
		
		/// <summary>
		/// Specifies interval in minutes to reevaluate ReroutePercentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeIntervalInMinutes")]
		public System.Nullable<System.Int32> ChangeIntervalInMinutes { get; set; }
		
		/// <summary>
		/// In auto ramp up scenario this is the step to add/remove from <code>ReroutePercentage</code> until it reaches \n<code>MinReroutePercentage</code> or 
		///<code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specified in <code>ChangeIntervalInMinutes</code>.\nCustom decision algorithm 
		///can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeStep")]
		public System.Nullable<System.Double> ChangeStep { get; set; }
		
		/// <summary>
		/// Specifies upper boundary below which ReroutePercentage will stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxReroutePercentage")]
		public System.Nullable<System.Double> MaxReroutePercentage { get; set; }
		
		/// <summary>
		/// Specifies lower boundary above which ReroutePercentage will stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minReroutePercentage")]
		public System.Nullable<System.Double> MinReroutePercentage { get; set; }
		
		/// <summary>
		/// Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Percentage of the traffic which will be redirected to <code>ActionHostName</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reroutePercentage")]
		public System.Nullable<System.Double> ReroutePercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CsmCopySlotEntitySiteConfigFtpsState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllAllowed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FtpsOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	public class CsmCopySlotEntitySiteConfigHandlerMappings
	{
		
		/// <summary>
		/// Command-line arguments to be passed to the script processor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string Arguments { get; set; }
		
		/// <summary>
		/// Requests with this extension will be handled using the specified FastCGI application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public string Extension { get; set; }
		
		/// <summary>
		/// The absolute path to the FastCGI application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptProcessor")]
		public string ScriptProcessor { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigIpSecurityRestrictions
	{
		
		/// <summary>
		/// Allow or Deny access for this IP range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// IP restriction rule description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// IP address the security restriction is valid for.
		///It can be in form of pure ipv4 address (required SubnetMask property) or
		///CIDR notation such as ipv4/mask (leading bit match). For CIDR,
		///SubnetMask property must not be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// IP restriction rule name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Priority of IP restriction rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Subnet mask for the range of IP addresses the restriction is valid for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetMask")]
		public string SubnetMask { get; set; }
		
		/// <summary>
		/// (internal) Subnet traffic tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetTrafficTag")]
		public System.Nullable<System.Int32> SubnetTrafficTag { get; set; }
		
		/// <summary>
		/// Defines what this IP filter will be used for. This is to support IP filtering on proxies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public System.Nullable<CsmCopySlotEntitySiteConfigIpSecurityRestrictionsTag> Tag { get; set; }
		
		/// <summary>
		/// Virtual network resource id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetSubnetResourceId")]
		public string VnetSubnetResourceId { get; set; }
		
		/// <summary>
		/// (internal) Vnet traffic tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetTrafficTag")]
		public System.Nullable<System.Int32> VnetTrafficTag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CsmCopySlotEntitySiteConfigIpSecurityRestrictionsTag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XffProxy = 1,
	}
	
	public class CsmCopySlotEntitySiteConfigLimits
	{
		
		/// <summary>
		/// Maximum allowed disk size usage in MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDiskSizeInMb")]
		public System.Nullable<System.Int64> MaxDiskSizeInMb { get; set; }
		
		/// <summary>
		/// Maximum allowed memory usage in MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxMemoryInMb")]
		public System.Nullable<System.Int64> MaxMemoryInMb { get; set; }
		
		/// <summary>
		/// Maximum allowed CPU usage percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPercentageCpu")]
		public System.Nullable<System.Double> MaxPercentageCpu { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CsmCopySlotEntitySiteConfigLoadBalancing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WeightedRoundRobin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LeastRequests = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LeastResponseTime = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WeightedTotalTraffic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestHash = 4,
	}
	
	public class CsmCopySlotEntitySiteConfigMachineKey
	{
		
		/// <summary>
		/// Algorithm used for decryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decryption")]
		public string Decryption { get; set; }
		
		/// <summary>
		/// Decryption key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decryptionKey")]
		public string DecryptionKey { get; set; }
		
		/// <summary>
		/// MachineKey validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation")]
		public string Validation { get; set; }
		
		/// <summary>
		/// Validation key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationKey")]
		public string ValidationKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CsmCopySlotEntitySiteConfigManagedPipelineMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Integrated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Classic = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CsmCopySlotEntitySiteConfigMinTlsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1.0")]
		_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1.1")]
		_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1.2")]
		_1_2 = 2,
	}
	
	public class CsmCopySlotEntitySiteConfigPush
	{
		
		/// <summary>
		/// PushSettings resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigScmIpSecurityRestrictions
	{
		
		/// <summary>
		/// Allow or Deny access for this IP range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// IP restriction rule description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// IP address the security restriction is valid for.
		///It can be in form of pure ipv4 address (required SubnetMask property) or
		///CIDR notation such as ipv4/mask (leading bit match). For CIDR,
		///SubnetMask property must not be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// IP restriction rule name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Priority of IP restriction rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Subnet mask for the range of IP addresses the restriction is valid for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetMask")]
		public string SubnetMask { get; set; }
		
		/// <summary>
		/// (internal) Subnet traffic tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetTrafficTag")]
		public System.Nullable<System.Int32> SubnetTrafficTag { get; set; }
		
		/// <summary>
		/// Defines what this IP filter will be used for. This is to support IP filtering on proxies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public CsmCopySlotEntitySiteConfigIpSecurityRestrictionsTag Tag { get; set; }
		
		/// <summary>
		/// Virtual network resource id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetSubnetResourceId")]
		public string VnetSubnetResourceId { get; set; }
		
		/// <summary>
		/// (internal) Vnet traffic tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetTrafficTag")]
		public System.Nullable<System.Int32> VnetTrafficTag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CsmCopySlotEntitySiteConfigScmType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dropbox = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tfs = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocalGit = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodePlexGit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodePlexHg = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BitbucketGit = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BitbucketHg = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalGit = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalHg = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneDrive = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSO = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSTSRM = 13,
	}
	
	public class CsmCopySlotEntitySiteConfigVirtualApplications
	{
		
		/// <summary>
		/// Physical path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalPath")]
		public string PhysicalPath { get; set; }
		
		/// <summary>
		/// <code>true</code> if preloading is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preloadEnabled")]
		public System.Nullable<System.Boolean> PreloadEnabled { get; set; }
		
		/// <summary>
		/// Virtual directories for virtual application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualDirectories")]
		public CsmCopySlotEntitySiteConfigVirtualApplicationsVirtualDirectories[] CsmCopySlotEntitySiteConfigVirtualApplicationsVirtualDirectories { get; set; }
		
		/// <summary>
		/// Virtual path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualPath")]
		public string VirtualPath { get; set; }
	}
	
	public class CsmCopySlotEntitySiteConfigVirtualApplicationsVirtualDirectories
	{
		
		/// <summary>
		/// Physical path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalPath")]
		public string PhysicalPath { get; set; }
		
		/// <summary>
		/// Path to virtual application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualPath")]
		public string VirtualPath { get; set; }
	}
	
	/// <summary>
	/// Publishing options for requested profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CsmPublishingProfileOptions
	{
		
		/// <summary>
		/// Name of the format. Valid values are: 
		///FileZilla3
		///WebDeploy -- default
		///Ftp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<CsmPublishingProfileOptionsFormat> Format { get; set; }
		
		/// <summary>
		/// Include the DisasterRecover endpoint if true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeDisasterRecoveryEndpoints")]
		public System.Nullable<System.Boolean> IncludeDisasterRecoveryEndpoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CsmPublishingProfileOptionsFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FileZilla3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebDeploy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ftp = 2,
	}
	
	/// <summary>
	/// Deployment slot parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CsmSlotEntity
	{
		
		/// <summary>
		/// <code>true</code> to preserve Virtual Network to the slot during swap; otherwise, <code>false</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preserveVnet")]
		public bool PreserveVnet { get; set; }
		
		/// <summary>
		/// Destination deployment slot during swap operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetSlot")]
		public string TargetSlot { get; set; }
	}
	
	/// <summary>
	/// Custom domain analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomHostnameAnalysisResult
	{
		
		/// <summary>
		/// CustomHostnameAnalysisResult resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Database backup settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseBackupSetting
	{
		
		/// <summary>
		/// Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
		///This is used during restore with overwrite connection strings options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionStringName")]
		public string ConnectionStringName { get; set; }
		
		/// <summary>
		/// Database type (e.g. SqlAzure / MySql).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseType")]
		public DatabaseBackupSettingDatabaseType DatabaseType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabaseBackupSettingDatabaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SqlAzure = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MySql = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocalMySql = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PostgreSql = 3,
	}
	
	/// <summary>
	/// Details about restoring a deleted app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeletedAppRestoreRequest
	{
		
		/// <summary>
		/// DeletedAppRestoreRequest resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// User credentials used for publishing activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Deployment
	{
		
		/// <summary>
		/// Deployment resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of app deployments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Deployment[] Value { get; set; }
	}
	
	/// <summary>
	/// Enabled configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnabledConfig
	{
		
		/// <summary>
		/// True if configuration is enabled, false if it is disabled and null if configuration is not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorEntity
	{
	}
	
	/// <summary>
	/// Http logs to file system configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileSystemHttpLogsConfig
	{
		
		/// <summary>
		/// True if configuration is enabled, false if it is disabled and null if configuration is not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Retention in days.
		///Remove files older than X days.
		///0 or lower means no retention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionInDays")]
		public System.Nullable<System.Int32> RetentionInDays { get; set; }
		
		/// <summary>
		/// Maximum size in megabytes that http log files can use.
		///When reached old log files will be removed to make space for new ones.
		///Value can range between 25 and 100.
		/// Minimum: 25
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionInMb")]
		[System.ComponentModel.DataAnnotations.Range(25, 100)]
		public System.Nullable<System.Int32> RetentionInMb { get; set; }
	}
	
	/// <summary>
	/// Function information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FunctionEnvelope
	{
		
		/// <summary>
		/// FunctionEnvelope resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Kudu function information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FunctionEnvelopeCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public FunctionEnvelope[] Value { get; set; }
	}
	
	/// <summary>
	/// Function secrets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FunctionSecrets
	{
		
		/// <summary>
		/// FunctionSecrets resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Functions host level keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HostKeys
	{
		
		/// <summary>
		/// Host level function keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionKeys")]
		public System.Collections.Generic.Dictionary<string, string> FunctionKeys { get; set; }
		
		/// <summary>
		/// Secret key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterKey")]
		public string MasterKey { get; set; }
		
		/// <summary>
		/// System keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemKeys")]
		public System.Collections.Generic.Dictionary<string, string> SystemKeys { get; set; }
	}
	
	/// <summary>
	/// A hostname binding object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HostNameBinding
	{
		
		/// <summary>
		/// HostNameBinding resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of hostname bindings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HostNameBindingCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public HostNameBinding[] Value { get; set; }
	}
	
	/// <summary>
	/// Http logs configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HttpLogsConfig
	{
		
		/// <summary>
		/// Http logs to azure blob storage configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureBlobStorage")]
		public AzureBlobStorageHttpLogsConfig AzureBlobStorage { get; set; }
		
		/// <summary>
		/// Http logs to file system configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSystem")]
		public FileSystemHttpLogsConfig FileSystem { get; set; }
	}
	
	/// <summary>
	/// Function key info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyInfo
	{
		
		/// <summary>
		/// Key name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Key value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Web app key vault reference and status ARM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultReferenceCollection
	{
		
		/// <summary>
		/// KeyVaultReferenceCollection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Web app key vault reference and status ARM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultReferenceResource
	{
		
		/// <summary>
		/// Description of site key vault references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApiKVReference Properties { get; set; }
	}
	
	/// <summary>
	/// MSDeploy ARM PUT information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MSDeploy
	{
		
		/// <summary>
		/// MSDeploy ARM PUT core information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MSDeployCore Properties { get; set; }
	}
	
	/// <summary>
	/// MSDeploy ARM PUT core information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MSDeployCore
	{
		
		/// <summary>
		/// Sets the AppOffline rule while the MSDeploy operation executes.
		///Setting is <code>false</code> by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appOffline")]
		public System.Nullable<System.Boolean> AppOffline { get; set; }
		
		/// <summary>
		/// SQL Connection String
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// Database Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dbType")]
		public string DbType { get; set; }
		
		/// <summary>
		/// Package URI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		/// <summary>
		/// MSDeploy Parameters. Must not be set if SetParametersXmlFileUri is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setParameters")]
		public System.Collections.Generic.Dictionary<string, string> SetParameters { get; set; }
		
		/// <summary>
		/// URI of MSDeploy Parameters file. Must not be set if SetParameters is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setParametersXmlFileUri")]
		public string SetParametersXmlFileUri { get; set; }
		
		/// <summary>
		/// Controls whether the MSDeploy operation skips the App_Data directory.
		///If set to <code>true</code>, the existing App_Data directory on the destination
		///will not be deleted, and any App_Data directory in the source will be ignored.
		///Setting is <code>false</code> by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipAppData")]
		public System.Nullable<System.Boolean> SkipAppData { get; set; }
	}
	
	/// <summary>
	/// MSDeploy log
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MSDeployLog
	{
		
		/// <summary>
		/// MSDeployLog resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// MSDeploy log entry
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MSDeployLogEntry
	{
		
		/// <summary>
		/// Log entry message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Timestamp of log entry
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
		
		/// <summary>
		/// Log entry type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MSDeployLogEntryType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MSDeployLogEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Message = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 2,
	}
	
	/// <summary>
	/// MSDeploy ARM response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MSDeployStatus
	{
		
		/// <summary>
		/// MSDeployStatus resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// MySQL migration request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MigrateMySqlRequest
	{
		
		/// <summary>
		/// MigrateMySqlRequest resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// MySQL migration status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MigrateMySqlStatus
	{
		
		/// <summary>
		/// MigrateMySqlStatus resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Full view of network features for an app (presently VNET integration and Hybrid Connections).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkFeatures
	{
		
		/// <summary>
		/// NetworkFeatures resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Network trace
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkTrace
	{
		
		/// <summary>
		/// Detailed message of a network trace operation, e.g. error message in case of failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Local file path for the captured network trace file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Current status of the network trace operation, same as Operation.Status (InProgress/Succeeded/Failed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Collection of performance monitor counters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PerfMonCounterCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PerfMonResponse[] Value { get; set; }
	}
	
	/// <summary>
	/// Performance monitor API response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PerfMonResponse
	{
		
		/// <summary>
		/// The response code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Metric information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public PerfMonSet Data { get; set; }
		
		/// <summary>
		/// The message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Metric information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PerfMonSet
	{
		
		/// <summary>
		/// End time of the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Unique key name of the counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start time of the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Presented time grain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
		
		/// <summary>
		/// Collection of workers that are active during this time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public PerfMonSample[] Values { get; set; }
	}
	
	/// <summary>
	/// Performance monitor sample in a set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PerfMonSample
	{
		
		/// <summary>
		/// Name of the server on which the measurement is made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		/// <summary>
		/// Point in time for which counter was measured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
		
		/// <summary>
		/// Value of counter at a certain time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Premier add-on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PremierAddOn
	{
		
		/// <summary>
		/// PremierAddOn resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// ARM resource for a PremierAddOn.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PremierAddOnPatchResource
	{
		
		/// <summary>
		/// PremierAddOnPatchResource resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Description of the parameters of Private Access for a Web Site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateAccess
	{
		
		/// <summary>
		/// PrivateAccess resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Description of a Virtual Network subnet that is useable for private site access.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateAccessSubnet
	{
		
		/// <summary>
		/// The key (ID) of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		/// <summary>
		/// The name of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Description of a Virtual Network that is useable for private site access.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateAccessVirtualNetwork
	{
		
		/// <summary>
		/// The key (ID) of the Virtual Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		/// <summary>
		/// The name of the Virtual Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ARM uri of the Virtual Network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// A List of subnets that access is allowed to on this Virtual Network. An empty array (but not null) is interpreted to mean that all subnets are allowed within this Virtual Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnets")]
		public PrivateAccessSubnet[] Subnets { get; set; }
	}
	
	/// <summary>
	/// Process Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProcessInfo
	{
		
		/// <summary>
		/// ProcessInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Kudu process information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProcessInfoCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProcessInfo[] Value { get; set; }
	}
	
	/// <summary>
	/// Process Module Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProcessModuleInfo
	{
		
		/// <summary>
		/// ProcessModuleInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Kudu thread information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProcessModuleInfoCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProcessModuleInfo[] Value { get; set; }
	}
	
	/// <summary>
	/// Process Thread Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProcessThreadInfo
	{
		
		/// <summary>
		/// ProcessThreadInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Kudu thread information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProcessThreadInfoCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProcessThreadInfo[] Value { get; set; }
	}
	
	/// <summary>
	/// Public certificate object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PublicCertificate
	{
		
		/// <summary>
		/// PublicCertificate resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of public certificates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PublicCertificateCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PublicCertificate[] Value { get; set; }
	}
	
	/// <summary>
	/// Hybrid Connection for an App Service app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelayServiceConnectionEntity
	{
		
		/// <summary>
		/// RelayServiceConnectionEntity resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Description of a restore request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestoreRequest
	{
		
		/// <summary>
		/// RestoreRequest resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Configuration settings for the Azure App Service Authentication / Authorization feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteAuthSettings
	{
		
		/// <summary>
		/// SiteAuthSettings resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Represents whether or not an app is cloneable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteCloneability
	{
		
		/// <summary>
		/// List of blocking application characteristics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockingCharacteristics")]
		public SiteCloneabilityCriterion[] BlockingCharacteristics { get; set; }
		
		/// <summary>
		/// List of features enabled on app that prevent cloning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockingFeatures")]
		public SiteCloneabilityCriterion[] BlockingFeatures { get; set; }
		
		/// <summary>
		/// Name of app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<SiteCloneabilityResult> Result { get; set; }
		
		/// <summary>
		/// List of features enabled on app that are non-blocking but cannot be cloned. The app can still be cloned
		///but the features in this list will not be set up on cloned app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsupportedFeatures")]
		public SiteCloneabilityCriterion[] UnsupportedFeatures { get; set; }
	}
	
	/// <summary>
	/// An app cloneability criterion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteCloneabilityCriterion
	{
		
		/// <summary>
		/// Description of criterion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of criterion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SiteCloneabilityResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cloneable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartiallyCloneable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotCloneable = 2,
	}
	
	/// <summary>
	/// Web app configuration ARM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteConfigResource
	{
		
		/// <summary>
		/// Configuration of an App Service app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SiteConfigResourceProperties Properties { get; set; }
	}
	
	public class SiteConfigResourceProperties
	{
		
		/// <summary>
		/// <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alwaysOn")]
		public System.Nullable<System.Boolean> AlwaysOn { get; set; }
		
		/// <summary>
		/// Information about the formal API definition for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiDefinition")]
		public SiteConfigResourcePropertiesApiDefinition ApiDefinition { get; set; }
		
		/// <summary>
		/// Azure API management (APIM) configuration linked to the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiManagementConfig")]
		public SiteConfigResourcePropertiesApiManagementConfig ApiManagementConfig { get; set; }
		
		/// <summary>
		/// App command line to launch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appCommandLine")]
		public string AppCommandLine { get; set; }
		
		/// <summary>
		/// Application settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appSettings")]
		public SiteConfigResourcePropertiesAppSettings[] SiteConfigResourcePropertiesAppSettings { get; set; }
		
		/// <summary>
		/// <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoHealEnabled")]
		public System.Nullable<System.Boolean> AutoHealEnabled { get; set; }
		
		/// <summary>
		/// Rules that can be defined for auto-heal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoHealRules")]
		public SiteConfigResourcePropertiesAutoHealRules AutoHealRules { get; set; }
		
		/// <summary>
		/// Auto-swap slot name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoSwapSlotName")]
		public string AutoSwapSlotName { get; set; }
		
		/// <summary>
		/// Connection strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionStrings")]
		public SiteConfigResourcePropertiesConnectionStrings[] SiteConfigResourcePropertiesConnectionStrings { get; set; }
		
		/// <summary>
		/// Cross-Origin Resource Sharing (CORS) settings for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cors")]
		public SiteConfigResourcePropertiesCors Cors { get; set; }
		
		/// <summary>
		/// Default documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultDocuments")]
		public string[] DefaultDocuments { get; set; }
		
		/// <summary>
		/// <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailedErrorLoggingEnabled")]
		public System.Nullable<System.Boolean> DetailedErrorLoggingEnabled { get; set; }
		
		/// <summary>
		/// Document root.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentRoot")]
		public string DocumentRoot { get; set; }
		
		/// <summary>
		/// Routing rules in production experiments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experiments")]
		public SiteConfigResourcePropertiesExperiments Experiments { get; set; }
		
		/// <summary>
		/// State of FTP / FTPS service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ftpsState")]
		public CsmCopySlotEntitySiteConfigFtpsState FtpsState { get; set; }
		
		/// <summary>
		/// Handler mappings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handlerMappings")]
		public SiteConfigResourcePropertiesHandlerMappings[] SiteConfigResourcePropertiesHandlerMappings { get; set; }
		
		/// <summary>
		/// Health check path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthCheckPath")]
		public string HealthCheckPath { get; set; }
		
		/// <summary>
		/// Http20Enabled: configures a web site to allow clients to connect over http2.0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="http20Enabled")]
		public System.Nullable<System.Boolean> Http20Enabled { get; set; }
		
		/// <summary>
		/// <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpLoggingEnabled")]
		public System.Nullable<System.Boolean> HttpLoggingEnabled { get; set; }
		
		/// <summary>
		/// IP security restrictions for main.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipSecurityRestrictions")]
		public SiteConfigResourcePropertiesIpSecurityRestrictions[] SiteConfigResourcePropertiesIpSecurityRestrictions { get; set; }
		
		/// <summary>
		/// Java container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="javaContainer")]
		public string JavaContainer { get; set; }
		
		/// <summary>
		/// Java container version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="javaContainerVersion")]
		public string JavaContainerVersion { get; set; }
		
		/// <summary>
		/// Java version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="javaVersion")]
		public string JavaVersion { get; set; }
		
		/// <summary>
		/// Metric limits set on an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limits")]
		public SiteConfigResourcePropertiesLimits Limits { get; set; }
		
		/// <summary>
		/// Linux App Framework and version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linuxFxVersion")]
		public string LinuxFxVersion { get; set; }
		
		/// <summary>
		/// Site load balancing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancing")]
		public CsmCopySlotEntitySiteConfigLoadBalancing LoadBalancing { get; set; }
		
		/// <summary>
		/// <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localMySqlEnabled")]
		public System.Nullable<System.Boolean> LocalMySqlEnabled { get; set; }
		
		/// <summary>
		/// HTTP logs directory size limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsDirectorySizeLimit")]
		public System.Nullable<System.Int32> LogsDirectorySizeLimit { get; set; }
		
		/// <summary>
		/// MachineKey of an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineKey")]
		public SiteConfigResourcePropertiesMachineKey MachineKey { get; set; }
		
		/// <summary>
		/// Managed pipeline mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedPipelineMode")]
		public CsmCopySlotEntitySiteConfigManagedPipelineMode ManagedPipelineMode { get; set; }
		
		/// <summary>
		/// Managed Service Identity Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedServiceIdentityId")]
		public System.Nullable<System.Int32> ManagedServiceIdentityId { get; set; }
		
		/// <summary>
		/// MinTlsVersion: configures the minimum version of TLS required for SSL requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTlsVersion")]
		public System.Nullable<SiteConfigResourcePropertiesMinTlsVersion> MinTlsVersion { get; set; }
		
		/// <summary>
		/// .NET Framework version.
		/// </summary>
		[System.ComponentModel.DefaultValue("v4.6")]
		[System.Runtime.Serialization.DataMember(Name="netFrameworkVersion")]
		public string NetFrameworkVersion { get; set; } = "v4.6";
		
		/// <summary>
		/// Version of Node.js.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeVersion")]
		public string NodeVersion { get; set; }
		
		/// <summary>
		/// Number of workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfWorkers")]
		public System.Nullable<System.Int32> NumberOfWorkers { get; set; }
		
		/// <summary>
		/// Version of PHP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phpVersion")]
		public string PhpVersion { get; set; }
		
		/// <summary>
		/// Number of preWarmed instances.
		///This setting only applies to the Consumption and Elastic Plans
		/// Minimum: 0
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preWarmedInstanceCount")]
		[System.ComponentModel.DataAnnotations.Range(0, 10)]
		public System.Nullable<System.Int32> PreWarmedInstanceCount { get; set; }
		
		/// <summary>
		/// Publishing user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishingUsername")]
		public string PublishingUsername { get; set; }
		
		/// <summary>
		/// Push settings for the App.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="push")]
		public SiteConfigResourcePropertiesPush Push { get; set; }
		
		/// <summary>
		/// Version of Python.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonVersion")]
		public string PythonVersion { get; set; }
		
		/// <summary>
		/// <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteDebuggingEnabled")]
		public System.Nullable<System.Boolean> RemoteDebuggingEnabled { get; set; }
		
		/// <summary>
		/// Remote debugging version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteDebuggingVersion")]
		public string RemoteDebuggingVersion { get; set; }
		
		/// <summary>
		/// <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTracingEnabled")]
		public System.Nullable<System.Boolean> RequestTracingEnabled { get; set; }
		
		/// <summary>
		/// Request tracing expiration time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTracingExpirationTime")]
		public System.Nullable<System.DateTimeOffset> RequestTracingExpirationTime { get; set; }
		
		/// <summary>
		/// IP security restrictions for scm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scmIpSecurityRestrictions")]
		public SiteConfigResourcePropertiesScmIpSecurityRestrictions[] SiteConfigResourcePropertiesScmIpSecurityRestrictions { get; set; }
		
		/// <summary>
		/// IP security restrictions for scm to use main.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scmIpSecurityRestrictionsUseMain")]
		public System.Nullable<System.Boolean> ScmIpSecurityRestrictionsUseMain { get; set; }
		
		/// <summary>
		/// SCM type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scmType")]
		public CsmCopySlotEntitySiteConfigScmType ScmType { get; set; }
		
		/// <summary>
		/// Tracing options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracingOptions")]
		public string TracingOptions { get; set; }
		
		/// <summary>
		/// <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="use32BitWorkerProcess")]
		public System.Nullable<System.Boolean> Use32BitWorkerProcess { get; set; }
		
		/// <summary>
		/// Virtual applications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualApplications")]
		public SiteConfigResourcePropertiesVirtualApplications[] SiteConfigResourcePropertiesVirtualApplications { get; set; }
		
		/// <summary>
		/// Virtual Network name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetName")]
		public string VnetName { get; set; }
		
		/// <summary>
		/// <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webSocketsEnabled")]
		public System.Nullable<System.Boolean> WebSocketsEnabled { get; set; }
		
		/// <summary>
		/// Xenon App Framework and version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsFxVersion")]
		public string WindowsFxVersion { get; set; }
		
		/// <summary>
		/// Explicit Managed Service Identity Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xManagedServiceIdentityId")]
		public System.Nullable<System.Int32> XManagedServiceIdentityId { get; set; }
	}
	
	public class SiteConfigResourcePropertiesApiDefinition
	{
		
		/// <summary>
		/// The URL of the API definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class SiteConfigResourcePropertiesApiManagementConfig
	{
		
		/// <summary>
		/// APIM-Api Identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class SiteConfigResourcePropertiesAppSettings
	{
		
		/// <summary>
		/// Pair name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pair value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class SiteConfigResourcePropertiesAutoHealRules
	{
		
		/// <summary>
		/// Actions which to take by the auto-heal module when a rule is triggered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public SiteConfigResourcePropertiesAutoHealRulesActions Actions { get; set; }
		
		/// <summary>
		/// Triggers for auto-heal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public SiteConfigResourcePropertiesAutoHealRulesTriggers Triggers { get; set; }
	}
	
	public class SiteConfigResourcePropertiesAutoHealRulesActions
	{
		
		/// <summary>
		/// Predefined action to be taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public CsmCopySlotEntitySiteConfigAutoHealRulesActionsActionType ActionType { get; set; }
		
		/// <summary>
		/// Custom action to be executed
		///when an auto heal rule is triggered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAction")]
		public SiteConfigResourcePropertiesAutoHealRulesActionsCustomAction CustomAction { get; set; }
		
		/// <summary>
		/// Minimum time the process must execute
		///before taking the action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minProcessExecutionTime")]
		public string MinProcessExecutionTime { get; set; }
	}
	
	public class SiteConfigResourcePropertiesAutoHealRulesActionsCustomAction
	{
		
		/// <summary>
		/// Executable to be run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exe")]
		public string Exe { get; set; }
		
		/// <summary>
		/// Parameters for the executable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
	}
	
	public class SiteConfigResourcePropertiesAutoHealRulesTriggers
	{
		
		/// <summary>
		/// A rule based on private bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBytesInKB")]
		public System.Nullable<System.Int32> PrivateBytesInKB { get; set; }
		
		/// <summary>
		/// Trigger based on total requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public SiteConfigResourcePropertiesAutoHealRulesTriggersRequests Requests { get; set; }
		
		/// <summary>
		/// Trigger based on request execution time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slowRequests")]
		public SiteConfigResourcePropertiesAutoHealRulesTriggersSlowRequests SlowRequests { get; set; }
		
		/// <summary>
		/// A rule based on status codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCodes")]
		public SiteConfigResourcePropertiesAutoHealRulesTriggersStatusCodes[] SiteConfigResourcePropertiesAutoHealRulesTriggersStatusCodes { get; set; }
	}
	
	public class SiteConfigResourcePropertiesAutoHealRulesTriggersRequests
	{
		
		/// <summary>
		/// Request Count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInterval")]
		public string TimeInterval { get; set; }
	}
	
	public class SiteConfigResourcePropertiesAutoHealRulesTriggersSlowRequests
	{
		
		/// <summary>
		/// Request Count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInterval")]
		public string TimeInterval { get; set; }
		
		/// <summary>
		/// Time taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeTaken")]
		public string TimeTaken { get; set; }
	}
	
	public class SiteConfigResourcePropertiesAutoHealRulesTriggersStatusCodes
	{
		
		/// <summary>
		/// Request Count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// HTTP status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// Request Sub Status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subStatus")]
		public System.Nullable<System.Int32> SubStatus { get; set; }
		
		/// <summary>
		/// Time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInterval")]
		public string TimeInterval { get; set; }
		
		/// <summary>
		/// Win32 error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="win32Status")]
		public System.Nullable<System.Int32> Win32Status { get; set; }
	}
	
	public class SiteConfigResourcePropertiesConnectionStrings
	{
		
		/// <summary>
		/// Connection string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// Name of connection string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ConnStringValueTypePairType Type { get; set; }
	}
	
	public class SiteConfigResourcePropertiesCors
	{
		
		/// <summary>
		/// Gets or sets the list of origins that should be allowed to make cross-origin
		///calls (for example: http://example.com:12345). Use "*" to allow all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedOrigins")]
		public string[] AllowedOrigins { get; set; }
		
		/// <summary>
		/// Gets or sets whether CORS requests with credentials are allowed. See 
		///https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials
		///for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportCredentials")]
		public System.Nullable<System.Boolean> SupportCredentials { get; set; }
	}
	
	public class SiteConfigResourcePropertiesExperiments
	{
		
		/// <summary>
		/// List of ramp-up rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rampUpRules")]
		public SiteConfigResourcePropertiesExperimentsRampUpRules[] SiteConfigResourcePropertiesExperimentsRampUpRules { get; set; }
	}
	
	public class SiteConfigResourcePropertiesExperimentsRampUpRules
	{
		
		/// <summary>
		/// Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionHostName")]
		public string ActionHostName { get; set; }
		
		/// <summary>
		/// Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.
		///https://www.siteextensions.net/packages/TiPCallback/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeDecisionCallbackUrl")]
		public string ChangeDecisionCallbackUrl { get; set; }
		
		/// <summary>
		/// Specifies interval in minutes to reevaluate ReroutePercentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeIntervalInMinutes")]
		public System.Nullable<System.Int32> ChangeIntervalInMinutes { get; set; }
		
		/// <summary>
		/// In auto ramp up scenario this is the step to add/remove from <code>ReroutePercentage</code> until it reaches \n<code>MinReroutePercentage</code> or 
		///<code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specified in <code>ChangeIntervalInMinutes</code>.\nCustom decision algorithm 
		///can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeStep")]
		public System.Nullable<System.Double> ChangeStep { get; set; }
		
		/// <summary>
		/// Specifies upper boundary below which ReroutePercentage will stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxReroutePercentage")]
		public System.Nullable<System.Double> MaxReroutePercentage { get; set; }
		
		/// <summary>
		/// Specifies lower boundary above which ReroutePercentage will stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minReroutePercentage")]
		public System.Nullable<System.Double> MinReroutePercentage { get; set; }
		
		/// <summary>
		/// Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Percentage of the traffic which will be redirected to <code>ActionHostName</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reroutePercentage")]
		public System.Nullable<System.Double> ReroutePercentage { get; set; }
	}
	
	public class SiteConfigResourcePropertiesHandlerMappings
	{
		
		/// <summary>
		/// Command-line arguments to be passed to the script processor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string Arguments { get; set; }
		
		/// <summary>
		/// Requests with this extension will be handled using the specified FastCGI application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public string Extension { get; set; }
		
		/// <summary>
		/// The absolute path to the FastCGI application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptProcessor")]
		public string ScriptProcessor { get; set; }
	}
	
	public class SiteConfigResourcePropertiesIpSecurityRestrictions
	{
		
		/// <summary>
		/// Allow or Deny access for this IP range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// IP restriction rule description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// IP address the security restriction is valid for.
		///It can be in form of pure ipv4 address (required SubnetMask property) or
		///CIDR notation such as ipv4/mask (leading bit match). For CIDR,
		///SubnetMask property must not be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// IP restriction rule name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Priority of IP restriction rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Subnet mask for the range of IP addresses the restriction is valid for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetMask")]
		public string SubnetMask { get; set; }
		
		/// <summary>
		/// (internal) Subnet traffic tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetTrafficTag")]
		public System.Nullable<System.Int32> SubnetTrafficTag { get; set; }
		
		/// <summary>
		/// Defines what this IP filter will be used for. This is to support IP filtering on proxies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public CsmCopySlotEntitySiteConfigIpSecurityRestrictionsTag Tag { get; set; }
		
		/// <summary>
		/// Virtual network resource id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetSubnetResourceId")]
		public string VnetSubnetResourceId { get; set; }
		
		/// <summary>
		/// (internal) Vnet traffic tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetTrafficTag")]
		public System.Nullable<System.Int32> VnetTrafficTag { get; set; }
	}
	
	public class SiteConfigResourcePropertiesLimits
	{
		
		/// <summary>
		/// Maximum allowed disk size usage in MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDiskSizeInMb")]
		public System.Nullable<System.Int64> MaxDiskSizeInMb { get; set; }
		
		/// <summary>
		/// Maximum allowed memory usage in MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxMemoryInMb")]
		public System.Nullable<System.Int64> MaxMemoryInMb { get; set; }
		
		/// <summary>
		/// Maximum allowed CPU usage percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPercentageCpu")]
		public System.Nullable<System.Double> MaxPercentageCpu { get; set; }
	}
	
	public class SiteConfigResourcePropertiesMachineKey
	{
		
		/// <summary>
		/// Algorithm used for decryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decryption")]
		public string Decryption { get; set; }
		
		/// <summary>
		/// Decryption key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decryptionKey")]
		public string DecryptionKey { get; set; }
		
		/// <summary>
		/// MachineKey validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation")]
		public string Validation { get; set; }
		
		/// <summary>
		/// Validation key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationKey")]
		public string ValidationKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SiteConfigResourcePropertiesMinTlsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1.0")]
		_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1.1")]
		_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1.2")]
		_1_2 = 2,
	}
	
	public class SiteConfigResourcePropertiesPush
	{
		
		/// <summary>
		/// PushSettings resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class SiteConfigResourcePropertiesScmIpSecurityRestrictions
	{
		
		/// <summary>
		/// Allow or Deny access for this IP range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// IP restriction rule description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// IP address the security restriction is valid for.
		///It can be in form of pure ipv4 address (required SubnetMask property) or
		///CIDR notation such as ipv4/mask (leading bit match). For CIDR,
		///SubnetMask property must not be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// IP restriction rule name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Priority of IP restriction rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Subnet mask for the range of IP addresses the restriction is valid for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetMask")]
		public string SubnetMask { get; set; }
		
		/// <summary>
		/// (internal) Subnet traffic tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetTrafficTag")]
		public System.Nullable<System.Int32> SubnetTrafficTag { get; set; }
		
		/// <summary>
		/// Defines what this IP filter will be used for. This is to support IP filtering on proxies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public CsmCopySlotEntitySiteConfigIpSecurityRestrictionsTag Tag { get; set; }
		
		/// <summary>
		/// Virtual network resource id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetSubnetResourceId")]
		public string VnetSubnetResourceId { get; set; }
		
		/// <summary>
		/// (internal) Vnet traffic tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetTrafficTag")]
		public System.Nullable<System.Int32> VnetTrafficTag { get; set; }
	}
	
	public class SiteConfigResourcePropertiesVirtualApplications
	{
		
		/// <summary>
		/// Physical path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalPath")]
		public string PhysicalPath { get; set; }
		
		/// <summary>
		/// <code>true</code> if preloading is enabled; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preloadEnabled")]
		public System.Nullable<System.Boolean> PreloadEnabled { get; set; }
		
		/// <summary>
		/// Virtual directories for virtual application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualDirectories")]
		public SiteConfigResourcePropertiesVirtualApplicationsVirtualDirectories[] SiteConfigResourcePropertiesVirtualApplicationsVirtualDirectories { get; set; }
		
		/// <summary>
		/// Virtual path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualPath")]
		public string VirtualPath { get; set; }
	}
	
	public class SiteConfigResourcePropertiesVirtualApplicationsVirtualDirectories
	{
		
		/// <summary>
		/// Physical path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalPath")]
		public string PhysicalPath { get; set; }
		
		/// <summary>
		/// Path to virtual application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualPath")]
		public string VirtualPath { get; set; }
	}
	
	/// <summary>
	/// Collection of site configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteConfigResourceCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SiteConfigResource[] Value { get; set; }
	}
	
	/// <summary>
	/// A snapshot of a web app configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteConfigurationSnapshotInfo
	{
		
		/// <summary>
		/// SiteConfigurationSnapshotInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of metadata for the app configuration snapshots that can be restored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteConfigurationSnapshotInfoCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SiteConfigurationSnapshotInfo[] Value { get; set; }
	}
	
	/// <summary>
	/// Site Extension Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteExtensionInfo
	{
		
		/// <summary>
		/// SiteExtensionInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Kudu site extension information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteExtensionInfoCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SiteExtensionInfo[] Value { get; set; }
	}
	
	/// <summary>
	/// Instance of an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteInstance
	{
		
		/// <summary>
		/// SiteInstance resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Configuration of App Service site logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteLogsConfig
	{
		
		/// <summary>
		/// SiteLogsConfig resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// ARM resource for a site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SitePatchResource
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public SitePatchResourceIdentity Identity { get; set; }
		
		/// <summary>
		/// SitePatchResource resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class SitePatchResourceIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, SitePatchResourceIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class SitePatchResourceIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// Used for getting PHP error logging flag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SitePhpErrorLogFlag
	{
		
		/// <summary>
		/// SitePhpErrorLogFlag resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Source control configuration for an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SiteSourceControl
	{
		
		/// <summary>
		/// SiteSourceControl resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Names for connection strings, application settings, and external Azure storage account configuration
	///identifiers to be marked as sticky to the deployment slot and not moved during a swap operation.
	///This is valid for all deployment slots in an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SlotConfigNames
	{
		
		/// <summary>
		/// List of application settings names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appSettingNames")]
		public string[] AppSettingNames { get; set; }
		
		/// <summary>
		/// List of external Azure storage account identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureStorageConfigNames")]
		public string[] AzureStorageConfigNames { get; set; }
		
		/// <summary>
		/// List of connection string names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionStringNames")]
		public string[] ConnectionStringNames { get; set; }
	}
	
	/// <summary>
	/// Slot Config names azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SlotConfigNamesResource
	{
		
		/// <summary>
		/// Names for connection strings, application settings, and external Azure storage account configuration
		///identifiers to be marked as sticky to the deployment slot and not moved during a swap operation.
		///This is valid for all deployment slots in an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SlotConfigNames Properties { get; set; }
	}
	
	/// <summary>
	/// A setting difference between two deployment slots of an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SlotDifference
	{
		
		/// <summary>
		/// SlotDifference resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of slot differences.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SlotDifferenceCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SlotDifference[] Value { get; set; }
	}
	
	/// <summary>
	/// Collection of snapshots which can be used to revert an app to a previous time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SnapshotCollectionValue[] SnapshotCollectionValue { get; set; }
	}
	
	public class SnapshotCollectionValue
	{
		
		/// <summary>
		/// Snapshot resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Specifies the web app that snapshot contents will be retrieved from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotRecoverySource
	{
		
		/// <summary>
		/// ARM resource ID of the source app. 
		/// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and 
		/// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Geographical location of the source web app, e.g. SouthEastAsia, SouthCentralUS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	/// <summary>
	/// Details about app recovery operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotRestoreRequest
	{
		
		/// <summary>
		/// SnapshotRestoreRequest resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Options for app content migration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageMigrationOptions
	{
		
		/// <summary>
		/// StorageMigrationOptions resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Response for a migration of app content request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageMigrationResponse
	{
		
		/// <summary>
		/// StorageMigrationResponse resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// String dictionary resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StringDictionary
	{
		
		/// <summary>
		/// Settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	/// <summary>
	/// Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SwiftVirtualNetwork
	{
		
		/// <summary>
		/// SwiftVirtualNetwork resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Triggered Web Job History. List of Triggered Web Job Run Information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggeredJobHistory
	{
		
		/// <summary>
		/// TriggeredJobHistory resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Kudu continuous web job information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggeredJobHistoryCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TriggeredJobHistory[] Value { get; set; }
	}
	
	/// <summary>
	/// Triggered Web Job Run Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggeredJobRun
	{
		
		/// <summary>
		/// TriggeredJobRun resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Triggered Web Job Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggeredWebJob
	{
		
		/// <summary>
		/// TriggeredWebJob resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Kudu continuous web job information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggeredWebJobCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TriggeredWebJob[] Value { get; set; }
	}
	
	/// <summary>
	/// Collection of app instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebAppInstanceCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SiteInstance[] Value { get; set; }
	}
	
	/// <summary>
	/// Web Job Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebJob
	{
		
		/// <summary>
		/// WebJob resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Kudu web job information elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebJobCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WebJob[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebSiteInstanceStatus
	{
		
		/// <summary>
		/// WebSiteInstanceStatus resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all apps for a subscription.
		/// Description for Get all apps for a subscription.
		/// WebApps_List subscriptions/{subscriptionId}/providers/Microsoft.Web/sites
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListReturn> WebApps_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/sites&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all web, mobile, and API apps in the specified resource group.
		/// Description for Gets all web, mobile, and API apps in the specified resource group.
		/// WebApps_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="includeSlots">Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListByResourceGroupReturn> WebApps_ListByResourceGroupAsync(string resourceGroupName, bool includeSlots, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites&includeSlots="+includeSlots+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListByResourceGroupReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details of a web, mobile, or API app.
		/// Description for Gets the details of a web, mobile, or API app.
		/// WebApps_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<WebApps_GetReturn> WebApps_GetAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
		/// Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
		/// WebApps_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the app properties. See example.</param>
		/// <returns>OK.</returns>
		public async Task<WebApps_CreateOrUpdateReturn> WebApps_CreateOrUpdateAsync(string resourceGroupName, string name, string subscriptionId, string api_version, WebApps_CreateOrUpdatePutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a web, mobile, or API app, or one of the deployment slots.
		/// Description for Deletes a web, mobile, or API app, or one of the deployment slots.
		/// WebApps_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app to delete.</param>
		/// <param name="deleteMetrics">If true, web app metrics are also deleted.</param>
		/// <param name="deleteEmptyServerFarm">Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted web app.</returns>
		public async Task WebApps_DeleteAsync(string resourceGroupName, string name, bool deleteMetrics, bool deleteEmptyServerFarm, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&deleteMetrics="+deleteMetrics+"&deleteEmptyServerFarm="+deleteEmptyServerFarm+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
		/// Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
		/// WebApps_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the app properties. See example.</param>
		/// <returns>OK.</returns>
		public async Task<WebApps_UpdateReturn> WebApps_UpdateAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SitePatchResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Analyze a custom hostname.
		/// Description for Analyze a custom hostname.
		/// WebApps_AnalyzeCustomHostname subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="hostName">Custom hostname.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<CustomHostnameAnalysisResult> WebApps_AnalyzeCustomHostnameAsync(string resourceGroupName, string name, string hostName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/analyzeCustomHostname&hostName=" + (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomHostnameAnalysisResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies the configuration settings from the target slot onto the current slot.
		/// Description for Applies the configuration settings from the target slot onto the current slot.
		/// WebApps_ApplySlotConfigToProduction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON object that contains the target slot name. See example.</param>
		/// <returns>OK.</returns>
		public async Task WebApps_ApplySlotConfigToProductionAsync(string resourceGroupName, string name, string subscriptionId, string api_version, CsmSlotEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/applySlotConfig&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a backup of an app.
		/// Description for Creates a backup of an app.
		/// WebApps_Backup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Backup configuration. You can use the JSON response from the POST action as input here.</param>
		/// <returns>OK</returns>
		public async Task<BackupItem> WebApps_BackupAsync(string resourceGroupName, string name, string subscriptionId, string api_version, BackupRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/backup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets existing backups of an app.
		/// Description for Gets existing backups of an app.
		/// WebApps_ListBackups subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<BackupItemCollection> WebApps_ListBackupsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/backups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItemCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a backup of an app by its ID.
		/// Description for Gets a backup of an app by its ID.
		/// WebApps_GetBackupStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="backupId">ID of the backup.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<BackupItem> WebApps_GetBackupStatusAsync(string resourceGroupName, string name, string backupId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/backups/"+ (backupId==null? "" : System.Uri.EscapeDataString(backupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a backup of an app by its ID.
		/// Description for Deletes a backup of an app by its ID.
		/// WebApps_DeleteBackup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="backupId">ID of the backup.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted web app backup item.</returns>
		public async Task WebApps_DeleteBackupAsync(string resourceGroupName, string name, string backupId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/backups/"+ (backupId==null? "" : System.Uri.EscapeDataString(backupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
		/// Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
		/// WebApps_ListBackupStatusSecrets subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="backupId">ID of backup.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Information on backup request.</param>
		/// <returns>OK</returns>
		public async Task<BackupItem> WebApps_ListBackupStatusSecretsAsync(string resourceGroupName, string name, string backupId, string subscriptionId, string api_version, BackupRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/backups/"+ (backupId==null? "" : System.Uri.EscapeDataString(backupId))+"/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a specific backup to another app (or deployment slot, if specified).
		/// Description for Restores a specific backup to another app (or deployment slot, if specified).
		/// WebApps_Restore subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="backupId">ID of the backup.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Information on restore request .</param>
		/// <returns>Restore operation started.</returns>
		public async Task WebApps_RestoreAsync(string resourceGroupName, string name, string backupId, string subscriptionId, string api_version, RestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/backups/"+ (backupId==null? "" : System.Uri.EscapeDataString(backupId))+"/restore&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the configurations of an app
		/// Description for List the configurations of an app
		/// WebApps_ListConfigurations subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResourceCollection> WebApps_ListConfigurationsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the application settings of an app.
		/// Description for Replaces the application settings of an app.
		/// WebApps_UpdateApplicationSettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Application settings of the app.</param>
		/// <returns>OK</returns>
		public async Task<StringDictionary> WebApps_UpdateApplicationSettingsAsync(string resourceGroupName, string name, string subscriptionId, string api_version, StringDictionary requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/appsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the application settings of an app.
		/// Description for Gets the application settings of an app.
		/// WebApps_ListApplicationSettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<StringDictionary> WebApps_ListApplicationSettingsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/appsettings/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Authentication / Authorization settings associated with web app.
		/// Description for Updates the Authentication / Authorization settings associated with web app.
		/// WebApps_UpdateAuthSettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Auth settings associated with web app.</param>
		/// <returns>OK</returns>
		public async Task<SiteAuthSettings> WebApps_UpdateAuthSettingsAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SiteAuthSettings requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/authsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteAuthSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Authentication/Authorization settings of an app.
		/// Description for Gets the Authentication/Authorization settings of an app.
		/// WebApps_GetAuthSettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteAuthSettings> WebApps_GetAuthSettingsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/authsettings/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteAuthSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Azure storage account configurations of an app.
		/// Description for Updates the Azure storage account configurations of an app.
		/// WebApps_UpdateAzureStorageAccounts subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Azure storage accounts of the app.</param>
		/// <returns>OK</returns>
		public async Task<AzureStoragePropertyDictionaryResource> WebApps_UpdateAzureStorageAccountsAsync(string resourceGroupName, string name, string subscriptionId, string api_version, AzureStoragePropertyDictionaryResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/azurestorageaccounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AzureStoragePropertyDictionaryResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Azure storage account configurations of an app.
		/// Description for Gets the Azure storage account configurations of an app.
		/// WebApps_ListAzureStorageAccounts subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AzureStoragePropertyDictionaryResource> WebApps_ListAzureStorageAccountsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/azurestorageaccounts/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AzureStoragePropertyDictionaryResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the backup configuration of an app.
		/// Description for Updates the backup configuration of an app.
		/// WebApps_UpdateBackupConfiguration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Edited backup configuration.</param>
		/// <returns>OK</returns>
		public async Task<BackupRequest> WebApps_UpdateBackupConfigurationAsync(string resourceGroupName, string name, string subscriptionId, string api_version, BackupRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/backup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupRequest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the backup configuration of an app.
		/// Description for Deletes the backup configuration of an app.
		/// WebApps_DeleteBackupConfiguration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted backup configuration.</returns>
		public async Task WebApps_DeleteBackupConfigurationAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/backup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the backup configuration of an app.
		/// Description for Gets the backup configuration of an app.
		/// WebApps_GetBackupConfiguration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<BackupRequest> WebApps_GetBackupConfigurationAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/backup/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupRequest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the config reference app settings and status of an app
		/// Description for Gets the config reference app settings and status of an app
		/// WebApps_GetAppSettingsKeyVaultReferences subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<KeyVaultReferenceCollection> WebApps_GetAppSettingsKeyVaultReferencesAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/configreferences/appsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<KeyVaultReferenceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the config reference and status of an app
		/// Description for Gets the config reference and status of an app
		/// WebApps_GetAppSettingKeyVaultReference subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings/{appSettingKey}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="appSettingKey">App Setting key name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<KeyVaultReferenceResource> WebApps_GetAppSettingKeyVaultReferenceAsync(string resourceGroupName, string name, string appSettingKey, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/configreferences/appsettings/"+ (appSettingKey==null? "" : System.Uri.EscapeDataString(appSettingKey))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<KeyVaultReferenceResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the connection strings of an app.
		/// Description for Replaces the connection strings of an app.
		/// WebApps_UpdateConnectionStrings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Connection strings of the app or deployment slot. See example.</param>
		/// <returns>OK</returns>
		public async Task<ConnectionStringDictionary> WebApps_UpdateConnectionStringsAsync(string resourceGroupName, string name, string subscriptionId, string api_version, ConnectionStringDictionary requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/connectionstrings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConnectionStringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the connection strings of an app.
		/// Description for Gets the connection strings of an app.
		/// WebApps_ListConnectionStrings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<ConnectionStringDictionary> WebApps_ListConnectionStringsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/connectionstrings/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConnectionStringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the logging configuration of an app.
		/// Description for Gets the logging configuration of an app.
		/// WebApps_GetDiagnosticLogsConfiguration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteLogsConfig> WebApps_GetDiagnosticLogsConfigurationAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/logs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteLogsConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the logging configuration of an app.
		/// Description for Updates the logging configuration of an app.
		/// WebApps_UpdateDiagnosticLogsConfig subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.</param>
		/// <returns>OK</returns>
		public async Task<SiteLogsConfig> WebApps_UpdateDiagnosticLogsConfigAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SiteLogsConfig requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/logs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteLogsConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the metadata of an app.
		/// Description for Replaces the metadata of an app.
		/// WebApps_UpdateMetadata subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Edited metadata of the app or deployment slot. See example.</param>
		/// <returns>OK</returns>
		public async Task<StringDictionary> WebApps_UpdateMetadataAsync(string resourceGroupName, string name, string subscriptionId, string api_version, StringDictionary requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/metadata&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the metadata of an app.
		/// Description for Gets the metadata of an app.
		/// WebApps_ListMetadata subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<StringDictionary> WebApps_ListMetadataAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/metadata/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Git/FTP publishing credentials of an app.
		/// Description for Gets the Git/FTP publishing credentials of an app.
		/// WebApps_ListPublishingCredentials subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListPublishingCredentialsReturn> WebApps_ListPublishingCredentialsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/publishingcredentials/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListPublishingCredentialsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Push settings associated with web app.
		/// Description for Updates the Push settings associated with web app.
		/// WebApps_UpdateSitePushSettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Push settings associated with web app.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateSitePushSettingsReturn> WebApps_UpdateSitePushSettingsAsync(string resourceGroupName, string name, string subscriptionId, string api_version, WebApps_UpdateSitePushSettingsPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/pushsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateSitePushSettingsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Push settings associated with web app.
		/// Description for Gets the Push settings associated with web app.
		/// WebApps_ListSitePushSettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListSitePushSettingsReturn> WebApps_ListSitePushSettingsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/pushsettings/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListSitePushSettingsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the names of app settings and connection strings that stick to the slot (not swapped).
		/// Description for Gets the names of app settings and connection strings that stick to the slot (not swapped).
		/// WebApps_ListSlotConfigurationNames subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SlotConfigNamesResource> WebApps_ListSlotConfigurationNamesAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/slotConfigNames&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlotConfigNamesResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the names of application settings and connection string that remain with the slot during swap operation.
		/// Description for Updates the names of application settings and connection string that remain with the slot during swap operation.
		/// WebApps_UpdateSlotConfigurationNames subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Names of application settings and connection strings. See example.</param>
		/// <returns>OK</returns>
		public async Task<SlotConfigNamesResource> WebApps_UpdateSlotConfigurationNamesAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SlotConfigNamesResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/slotConfigNames&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlotConfigNamesResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
		/// Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
		/// WebApps_GetConfiguration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResource> WebApps_GetConfigurationAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an app.
		/// Description for Updates the configuration of an app.
		/// WebApps_CreateOrUpdateConfiguration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON representation of a SiteConfig object. See example.</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResource> WebApps_CreateOrUpdateConfigurationAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SiteConfigResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an app.
		/// Description for Updates the configuration of an app.
		/// WebApps_UpdateConfiguration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON representation of a SiteConfig object. See example.</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResource> WebApps_UpdateConfigurationAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SiteConfigResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
		/// Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
		/// WebApps_ListConfigurationSnapshotInfo subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigurationSnapshotInfoCollection> WebApps_ListConfigurationSnapshotInfoAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/web/snapshots&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigurationSnapshotInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a snapshot of the configuration of an app at a previous point in time.
		/// Description for Gets a snapshot of the configuration of an app at a previous point in time.
		/// WebApps_GetConfigurationSnapshot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="snapshotId">The ID of the snapshot to read.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResource> WebApps_GetConfigurationSnapshotAsync(string resourceGroupName, string name, string snapshotId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/web/snapshots/"+ (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reverts the configuration of an app to a previous snapshot.
		/// Description for Reverts the configuration of an app to a previous snapshot.
		/// WebApps_RecoverSiteConfigurationSnapshot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="snapshotId">The ID of the snapshot to read.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_RecoverSiteConfigurationSnapshotAsync(string resourceGroupName, string name, string snapshotId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/config/web/snapshots/"+ (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId))+"/recover&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the last lines of docker logs for the given site
		/// Description for Gets the last lines of docker logs for the given site
		/// WebApps_GetWebSiteContainerLogs subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task WebApps_GetWebSiteContainerLogsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/containerlogs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the ZIP archived docker log files for the given site
		/// Description for Gets the ZIP archived docker log files for the given site
		/// WebApps_GetContainerLogsZip subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task WebApps_GetContainerLogsZipAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/containerlogs/zip/download&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List continuous web jobs for an app, or a deployment slot.
		/// Description for List continuous web jobs for an app, or a deployment slot.
		/// WebApps_ListContinuousWebJobs subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<ContinuousWebJobCollection> WebApps_ListContinuousWebJobsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/continuouswebjobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContinuousWebJobCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a continuous web job by its ID for an app, or a deployment slot.
		/// Description for Gets a continuous web job by its ID for an app, or a deployment slot.
		/// WebApps_GetContinuousWebJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task<ContinuousWebJob> WebApps_GetContinuousWebJobAsync(string resourceGroupName, string name, string webJobName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/continuouswebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContinuousWebJob>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a continuous web job by its ID for an app, or a deployment slot.
		/// Description for Delete a continuous web job by its ID for an app, or a deployment slot.
		/// WebApps_DeleteContinuousWebJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted continuous web job.</returns>
		public async Task WebApps_DeleteContinuousWebJobAsync(string resourceGroupName, string name, string webJobName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/continuouswebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start a continuous web job for an app, or a deployment slot.
		/// Description for Start a continuous web job for an app, or a deployment slot.
		/// WebApps_StartContinuousWebJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task WebApps_StartContinuousWebJobAsync(string resourceGroupName, string name, string webJobName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/continuouswebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop a continuous web job for an app, or a deployment slot.
		/// Description for Stop a continuous web job for an app, or a deployment slot.
		/// WebApps_StopContinuousWebJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task WebApps_StopContinuousWebJobAsync(string resourceGroupName, string name, string webJobName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/continuouswebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List deployments for an app, or a deployment slot.
		/// Description for List deployments for an app, or a deployment slot.
		/// WebApps_ListDeployments subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DeploymentCollection> WebApps_ListDeploymentsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/deployments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeploymentCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a deployment by its ID for an app, or a deployment slot.
		/// Description for Get a deployment by its ID for an app, or a deployment slot.
		/// WebApps_GetDeployment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="id">Deployment ID.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<Deployment> WebApps_GetDeploymentAsync(string resourceGroupName, string name, string id, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/deployments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deployment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a deployment for an app, or a deployment slot.
		/// Description for Create a deployment for an app, or a deployment slot.
		/// WebApps_CreateDeployment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="id">ID of an existing deployment.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Deployment details.</param>
		/// <returns>OK</returns>
		public async Task<Deployment> WebApps_CreateDeploymentAsync(string resourceGroupName, string name, string id, string subscriptionId, string api_version, Deployment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/deployments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deployment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a deployment by its ID for an app, or a deployment slot.
		/// Description for Delete a deployment by its ID for an app, or a deployment slot.
		/// WebApps_DeleteDeployment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="id">Deployment ID.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted deployment.</returns>
		public async Task WebApps_DeleteDeploymentAsync(string resourceGroupName, string name, string id, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/deployments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List deployment log for specific deployment for an app, or a deployment slot.
		/// Description for List deployment log for specific deployment for an app, or a deployment slot.
		/// WebApps_ListDeploymentLog subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="id">The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<Deployment> WebApps_ListDeploymentLogAsync(string resourceGroupName, string name, string id, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/deployments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/log&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deployment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
		/// Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
		/// WebApps_DiscoverBackup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.</param>
		/// <returns>OK</returns>
		public async Task<RestoreRequest> WebApps_DiscoverBackupAsync(string resourceGroupName, string name, string subscriptionId, string api_version, RestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/discoverbackup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RestoreRequest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists ownership identifiers for domain associated with web app.
		/// Description for Lists ownership identifiers for domain associated with web app.
		/// WebApps_ListDomainOwnershipIdentifiers subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListDomainOwnershipIdentifiersReturn> WebApps_ListDomainOwnershipIdentifiersAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/domainOwnershipIdentifiers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListDomainOwnershipIdentifiersReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get domain ownership identifier for web app.
		/// Description for Get domain ownership identifier for web app.
		/// WebApps_GetDomainOwnershipIdentifier subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="domainOwnershipIdentifierName">Name of domain ownership identifier.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_GetDomainOwnershipIdentifierReturn> WebApps_GetDomainOwnershipIdentifierAsync(string resourceGroupName, string name, string domainOwnershipIdentifierName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/domainOwnershipIdentifiers/"+ (domainOwnershipIdentifierName==null? "" : System.Uri.EscapeDataString(domainOwnershipIdentifierName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetDomainOwnershipIdentifierReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
		/// Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
		/// WebApps_CreateOrUpdateDomainOwnershipIdentifier subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="domainOwnershipIdentifierName">Name of domain ownership identifier.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the domain ownership properties.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_CreateOrUpdateDomainOwnershipIdentifierReturn> WebApps_CreateOrUpdateDomainOwnershipIdentifierAsync(string resourceGroupName, string name, string domainOwnershipIdentifierName, string subscriptionId, string api_version, WebApps_CreateOrUpdateDomainOwnershipIdentifierPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/domainOwnershipIdentifiers/"+ (domainOwnershipIdentifierName==null? "" : System.Uri.EscapeDataString(domainOwnershipIdentifierName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateDomainOwnershipIdentifierReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a domain ownership identifier for a web app.
		/// Description for Deletes a domain ownership identifier for a web app.
		/// WebApps_DeleteDomainOwnershipIdentifier subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="domainOwnershipIdentifierName">Name of domain ownership identifier.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted domain ownership identifier.</returns>
		public async Task WebApps_DeleteDomainOwnershipIdentifierAsync(string resourceGroupName, string name, string domainOwnershipIdentifierName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/domainOwnershipIdentifiers/"+ (domainOwnershipIdentifierName==null? "" : System.Uri.EscapeDataString(domainOwnershipIdentifierName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
		/// Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
		/// WebApps_UpdateDomainOwnershipIdentifier subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="domainOwnershipIdentifierName">Name of domain ownership identifier.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the domain ownership properties.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateDomainOwnershipIdentifierReturn> WebApps_UpdateDomainOwnershipIdentifierAsync(string resourceGroupName, string name, string domainOwnershipIdentifierName, string subscriptionId, string api_version, WebApps_UpdateDomainOwnershipIdentifierPatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/domainOwnershipIdentifiers/"+ (domainOwnershipIdentifierName==null? "" : System.Uri.EscapeDataString(domainOwnershipIdentifierName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateDomainOwnershipIdentifierReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the status of the last MSDeploy operation.
		/// Description for Get the status of the last MSDeploy operation.
		/// WebApps_GetMSDeployStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<MSDeployStatus> WebApps_GetMSDeployStatusAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/extensions/MSDeploy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MSDeployStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invoke the MSDeploy web app extension.
		/// Description for Invoke the MSDeploy web app extension.
		/// WebApps_CreateMSDeployOperation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of MSDeploy operation</param>
		public async Task WebApps_CreateMSDeployOperationAsync(string resourceGroupName, string name, string subscriptionId, string api_version, MSDeploy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/extensions/MSDeploy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the MSDeploy Log for the last MSDeploy operation.
		/// Description for Get the MSDeploy Log for the last MSDeploy operation.
		/// WebApps_GetMSDeployLog subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>MSDeploy log returned.</returns>
		public async Task<MSDeployLog> WebApps_GetMSDeployLogAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/extensions/MSDeploy/log&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MSDeployLog>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the functions for a web site, or a deployment slot.
		/// Description for List the functions for a web site, or a deployment slot.
		/// WebApps_ListFunctions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Function information returned.</returns>
		public async Task<FunctionEnvelopeCollection> WebApps_ListFunctionsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/functions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FunctionEnvelopeCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch a short lived token that can be exchanged for a master key.
		/// Description for Fetch a short lived token that can be exchanged for a master key.
		/// WebApps_GetFunctionsAdminToken subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<string> WebApps_GetFunctionsAdminTokenAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/functions/admin/token&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get function information by its ID for web site, or a deployment slot.
		/// Description for Get function information by its ID for web site, or a deployment slot.
		/// WebApps_GetFunction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Function information returned.</returns>
		public async Task<FunctionEnvelope> WebApps_GetFunctionAsync(string resourceGroupName, string name, string functionName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FunctionEnvelope>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create function for web site, or a deployment slot.
		/// Description for Create function for web site, or a deployment slot.
		/// WebApps_CreateFunction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Function details.</param>
		public async Task WebApps_CreateFunctionAsync(string resourceGroupName, string name, string functionName, string subscriptionId, string api_version, FunctionEnvelope requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a function for web site, or a deployment slot.
		/// Description for Delete a function for web site, or a deployment slot.
		/// WebApps_DeleteFunction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteFunctionAsync(string resourceGroupName, string name, string functionName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or update a function secret.
		/// Description for Add or update a function secret.
		/// WebApps_CreateOrUpdateFunctionSecret subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">The name of the function.</param>
		/// <param name="keyName">The name of the key.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The key to create or update</param>
		/// <returns>Key was updated.</returns>
		public async Task<KeyInfo> WebApps_CreateOrUpdateFunctionSecretAsync(string resourceGroupName, string name, string functionName, string keyName, string subscriptionId, string api_version, KeyInfo requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"/keys/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<KeyInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a function secret.
		/// Description for Delete a function secret.
		/// WebApps_DeleteFunctionSecret subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">The name of the function.</param>
		/// <param name="keyName">The name of the key.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteFunctionSecretAsync(string resourceGroupName, string name, string functionName, string keyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"/keys/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get function keys for a function in a web site, or a deployment slot.
		/// Description for Get function keys for a function in a web site, or a deployment slot.
		/// WebApps_ListFunctionKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listkeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Function keys returned.</returns>
		public async Task<StringDictionary> WebApps_ListFunctionKeysAsync(string resourceGroupName, string name, string functionName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"/listkeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get function secrets for a function in a web site, or a deployment slot.
		/// Description for Get function secrets for a function in a web site, or a deployment slot.
		/// WebApps_ListFunctionSecrets subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Function secrets returned.</returns>
		public async Task<FunctionSecrets> WebApps_ListFunctionSecretsAsync(string resourceGroupName, string name, string functionName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"/listsecrets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FunctionSecrets>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get host secrets for a function app.
		/// Description for Get host secrets for a function app.
		/// WebApps_ListHostKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listkeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Host secrets returned.</returns>
		public async Task<HostKeys> WebApps_ListHostKeysAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/host/default/listkeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HostKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This is to allow calling via powershell and ARM template.
		/// Description for This is to allow calling via powershell and ARM template.
		/// WebApps_ListSyncStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listsyncstatus
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_ListSyncStatusAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/host/default/listsyncstatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Syncs function trigger metadata to the management database
		/// Description for Syncs function trigger metadata to the management database
		/// WebApps_SyncFunctions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/sync
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_SyncFunctionsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/host/default/sync&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or update a host level secret.
		/// Description for Add or update a host level secret.
		/// WebApps_CreateOrUpdateHostSecret subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="keyType">The type of host key.</param>
		/// <param name="keyName">The name of the key.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The key to create or update</param>
		/// <returns>Key was updated.</returns>
		public async Task<KeyInfo> WebApps_CreateOrUpdateHostSecretAsync(string resourceGroupName, string name, string keyType, string keyName, string subscriptionId, string api_version, KeyInfo requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/host/default/"+ (keyType==null? "" : System.Uri.EscapeDataString(keyType))+"/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<KeyInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a host level secret.
		/// Description for Delete a host level secret.
		/// WebApps_DeleteHostSecret subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="keyType">The type of host key.</param>
		/// <param name="keyName">The name of the key.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteHostSecretAsync(string resourceGroupName, string name, string keyType, string keyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/host/default/"+ (keyType==null? "" : System.Uri.EscapeDataString(keyType))+"/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get hostname bindings for an app or a deployment slot.
		/// Description for Get hostname bindings for an app or a deployment slot.
		/// WebApps_ListHostNameBindings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<HostNameBindingCollection> WebApps_ListHostNameBindingsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hostNameBindings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HostNameBindingCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the named hostname binding for an app (or deployment slot, if specified).
		/// Description for Get the named hostname binding for an app (or deployment slot, if specified).
		/// WebApps_GetHostNameBinding subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="hostName">Hostname in the hostname binding.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<HostNameBinding> WebApps_GetHostNameBindingAsync(string resourceGroupName, string name, string hostName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hostNameBindings/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HostNameBinding>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a hostname binding for an app.
		/// Description for Creates a hostname binding for an app.
		/// WebApps_CreateOrUpdateHostNameBinding subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="hostName">Hostname in the hostname binding.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Binding details. This is the JSON representation of a HostNameBinding object.</param>
		/// <returns>OK</returns>
		public async Task<HostNameBinding> WebApps_CreateOrUpdateHostNameBindingAsync(string resourceGroupName, string name, string hostName, string subscriptionId, string api_version, HostNameBinding requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hostNameBindings/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HostNameBinding>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a hostname binding for an app.
		/// Description for Deletes a hostname binding for an app.
		/// WebApps_DeleteHostNameBinding subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="hostName">Hostname in the hostname binding.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted hostname binding.</returns>
		public async Task WebApps_DeleteHostNameBindingAsync(string resourceGroupName, string name, string hostName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hostNameBindings/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
		/// Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
		/// WebApps_GetHybridConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="namespaceName">The namespace for this hybrid connection.</param>
		/// <param name="relayName">The relay name for this hybrid connection.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_GetHybridConnectionReturn> WebApps_GetHybridConnectionAsync(string resourceGroupName, string name, string namespaceName, string relayName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetHybridConnectionReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Hybrid Connection using a Service Bus relay.
		/// Description for Creates a new Hybrid Connection using a Service Bus relay.
		/// WebApps_CreateOrUpdateHybridConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="namespaceName">The namespace for this hybrid connection.</param>
		/// <param name="relayName">The relay name for this hybrid connection.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The details of the hybrid connection.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_CreateOrUpdateHybridConnectionReturn> WebApps_CreateOrUpdateHybridConnectionAsync(string resourceGroupName, string name, string namespaceName, string relayName, string subscriptionId, string api_version, WebApps_CreateOrUpdateHybridConnectionPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateHybridConnectionReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a Hybrid Connection from this site.
		/// Description for Removes a Hybrid Connection from this site.
		/// WebApps_DeleteHybridConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="namespaceName">The namespace for this hybrid connection.</param>
		/// <param name="relayName">The relay name for this hybrid connection.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted hybrid connection.</returns>
		public async Task WebApps_DeleteHybridConnectionAsync(string resourceGroupName, string name, string namespaceName, string relayName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Hybrid Connection using a Service Bus relay.
		/// Description for Creates a new Hybrid Connection using a Service Bus relay.
		/// WebApps_UpdateHybridConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="namespaceName">The namespace for this hybrid connection.</param>
		/// <param name="relayName">The relay name for this hybrid connection.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The details of the hybrid connection.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateHybridConnectionReturn> WebApps_UpdateHybridConnectionAsync(string resourceGroupName, string name, string namespaceName, string relayName, string subscriptionId, string api_version, WebApps_UpdateHybridConnectionPatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateHybridConnectionReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves all Service Bus Hybrid Connections used by this Web App.
		/// Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
		/// WebApps_ListHybridConnections subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListHybridConnectionsReturn> WebApps_ListHybridConnectionsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionRelays&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListHybridConnectionsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets hybrid connections configured for an app (or deployment slot, if specified).
		/// Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
		/// WebApps_ListRelayServiceConnections subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RelayServiceConnectionEntity> WebApps_ListRelayServiceConnectionsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridconnection&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RelayServiceConnectionEntity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a hybrid connection configuration by its name.
		/// Description for Gets a hybrid connection configuration by its name.
		/// WebApps_GetRelayServiceConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="entityName">Name of the hybrid connection.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RelayServiceConnectionEntity> WebApps_GetRelayServiceConnectionAsync(string resourceGroupName, string name, string entityName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridconnection/"+ (entityName==null? "" : System.Uri.EscapeDataString(entityName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RelayServiceConnectionEntity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
		/// Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
		/// WebApps_CreateOrUpdateRelayServiceConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="entityName">Name of the hybrid connection configuration.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of the hybrid connection configuration.</param>
		/// <returns>OK</returns>
		public async Task<RelayServiceConnectionEntity> WebApps_CreateOrUpdateRelayServiceConnectionAsync(string resourceGroupName, string name, string entityName, string subscriptionId, string api_version, RelayServiceConnectionEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridconnection/"+ (entityName==null? "" : System.Uri.EscapeDataString(entityName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RelayServiceConnectionEntity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a relay service connection by its name.
		/// Description for Deletes a relay service connection by its name.
		/// WebApps_DeleteRelayServiceConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="entityName">Name of the hybrid connection configuration.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted relay service connection.</returns>
		public async Task WebApps_DeleteRelayServiceConnectionAsync(string resourceGroupName, string name, string entityName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridconnection/"+ (entityName==null? "" : System.Uri.EscapeDataString(entityName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
		/// Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
		/// WebApps_UpdateRelayServiceConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="entityName">Name of the hybrid connection configuration.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of the hybrid connection configuration.</param>
		/// <returns>OK</returns>
		public async Task<RelayServiceConnectionEntity> WebApps_UpdateRelayServiceConnectionAsync(string resourceGroupName, string name, string entityName, string subscriptionId, string api_version, RelayServiceConnectionEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridconnection/"+ (entityName==null? "" : System.Uri.EscapeDataString(entityName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RelayServiceConnectionEntity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all scale-out instances of an app.
		/// Description for Gets all scale-out instances of an app.
		/// WebApps_ListInstanceIdentifiers subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebAppInstanceCollection> WebApps_ListInstanceIdentifiersAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebAppInstanceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all scale-out instances of an app.
		/// Description for Gets all scale-out instances of an app.
		/// WebApps_GetInstanceInfo subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebSiteInstanceStatus> WebApps_GetInstanceInfoAsync(string resourceGroupName, string name, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebSiteInstanceStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the status of the last MSDeploy operation.
		/// Description for Get the status of the last MSDeploy operation.
		/// WebApps_GetInstanceMsDeployStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="instanceId">ID of web app instance.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<MSDeployStatus> WebApps_GetInstanceMsDeployStatusAsync(string resourceGroupName, string name, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/extensions/MSDeploy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MSDeployStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invoke the MSDeploy web app extension.
		/// Description for Invoke the MSDeploy web app extension.
		/// WebApps_CreateInstanceMSDeployOperation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="instanceId">ID of web app instance.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of MSDeploy operation</param>
		public async Task WebApps_CreateInstanceMSDeployOperationAsync(string resourceGroupName, string name, string instanceId, string subscriptionId, string api_version, MSDeploy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/extensions/MSDeploy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the MSDeploy Log for the last MSDeploy operation.
		/// Description for Get the MSDeploy Log for the last MSDeploy operation.
		/// WebApps_GetInstanceMSDeployLog subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="instanceId">ID of web app instance.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>MSDeploy log returned.</returns>
		public async Task<MSDeployLog> WebApps_GetInstanceMSDeployLogAsync(string resourceGroupName, string name, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/extensions/MSDeploy/log&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MSDeployLog>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
		/// Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
		/// WebApps_ListInstanceProcesses subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Process terminated.</returns>
		public async Task<ProcessInfoCollection> WebApps_ListInstanceProcessesAsync(string resourceGroupName, string name, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process information by its ID for a specific scaled-out instance in a web site.
		/// Description for Get process information by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetInstanceProcess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Process information returned.</returns>
		public async Task<ProcessInfo> WebApps_GetInstanceProcessAsync(string resourceGroupName, string name, string processId, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
		/// Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
		/// WebApps_DeleteInstanceProcess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteInstanceProcessAsync(string resourceGroupName, string name, string processId, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
		/// Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetInstanceProcessDump subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<string> WebApps_GetInstanceProcessDumpAsync(string resourceGroupName, string name, string processId, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/dump&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List module information for a process by its ID for a specific scaled-out instance in a web site.
		/// Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_ListInstanceProcessModules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Module information returned.</returns>
		public async Task<ProcessModuleInfoCollection> WebApps_ListInstanceProcessModulesAsync(string resourceGroupName, string name, string processId, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/modules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessModuleInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process information by its ID for a specific scaled-out instance in a web site.
		/// Description for Get process information by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetInstanceProcessModule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="baseAddress">Module base address.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Module information returned.</returns>
		public async Task<ProcessModuleInfo> WebApps_GetInstanceProcessModuleAsync(string resourceGroupName, string name, string processId, string baseAddress, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/modules/"+ (baseAddress==null? "" : System.Uri.EscapeDataString(baseAddress))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessModuleInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the threads in a process by its ID for a specific scaled-out instance in a web site.
		/// Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_ListInstanceProcessThreads subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Thread information returned.</returns>
		public async Task<ProcessThreadInfoCollection> WebApps_ListInstanceProcessThreadsAsync(string resourceGroupName, string name, string processId, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/threads&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessThreadInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shows whether an app can be cloned to another resource group or subscription.
		/// Description for Shows whether an app can be cloned to another resource group or subscription.
		/// WebApps_IsCloneable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<SiteCloneability> WebApps_IsCloneableAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/iscloneable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteCloneability>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets existing backups of an app.
		/// Description for Gets existing backups of an app.
		/// WebApps_ListSiteBackups subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listbackups
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<BackupItemCollection> WebApps_ListSiteBackupsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/listbackups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItemCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This is to allow calling via powershell and ARM template.
		/// Description for This is to allow calling via powershell and ARM template.
		/// WebApps_ListSyncFunctionTriggers subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<FunctionSecrets> WebApps_ListSyncFunctionTriggersAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/listsyncfunctiontriggerstatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FunctionSecrets>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a web app.
		/// Description for Restores a web app.
		/// WebApps_MigrateStorage subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate
		/// </summary>
		/// <param name="subscriptionName">Azure subscription.</param>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Migration migrationOptions.</param>
		/// <returns>OK</returns>
		public async Task<StorageMigrationResponse> WebApps_MigrateStorageAsync(string subscriptionName, string resourceGroupName, string name, string subscriptionId, string api_version, StorageMigrationOptions requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/migrate?subscriptionName=" + (subscriptionName==null? "" : System.Uri.EscapeDataString(subscriptionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StorageMigrationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Migrates a local (in-app) MySql database to a remote MySql database.
		/// Description for Migrates a local (in-app) MySql database to a remote MySql database.
		/// WebApps_MigrateMySql subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">MySql migration options.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_MigrateMySqlReturn> WebApps_MigrateMySqlAsync(string resourceGroupName, string name, string subscriptionId, string api_version, MigrateMySqlRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/migratemysql&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_MigrateMySqlReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
		/// Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
		/// WebApps_GetMigrateMySqlStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<MigrateMySqlStatus> WebApps_GetMigrateMySqlStatusAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/migratemysql/status&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MigrateMySqlStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Swift Virtual Network connection.
		/// Description for Gets a Swift Virtual Network connection.
		/// WebApps_GetSwiftVirtualNetworkConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<SwiftVirtualNetwork> WebApps_GetSwiftVirtualNetworkConnectionAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkConfig/virtualNetwork&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SwiftVirtualNetwork>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
		/// in use by another App Service Plan other than the one this App is in.
		/// Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
		/// in use by another App Service Plan other than the one this App is in.
		/// WebApps_CreateOrUpdateSwiftVirtualNetworkConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Properties of the Virtual Network connection. See example.</param>
		/// <returns>OK</returns>
		public async Task<SwiftVirtualNetwork> WebApps_CreateOrUpdateSwiftVirtualNetworkConnectionAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SwiftVirtualNetwork requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkConfig/virtualNetwork&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SwiftVirtualNetwork>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Swift Virtual Network connection from an app (or deployment slot).
		/// Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
		/// WebApps_DeleteSwiftVirtualNetwork subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted virtual network.</returns>
		public async Task WebApps_DeleteSwiftVirtualNetworkAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkConfig/virtualNetwork&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
		/// in use by another App Service Plan other than the one this App is in.
		/// Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
		/// in use by another App Service Plan other than the one this App is in.
		/// WebApps_UpdateSwiftVirtualNetworkConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Properties of the Virtual Network connection. See example.</param>
		/// <returns>OK</returns>
		public async Task<SwiftVirtualNetwork> WebApps_UpdateSwiftVirtualNetworkConnectionAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SwiftVirtualNetwork requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkConfig/virtualNetwork&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SwiftVirtualNetwork>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all network features used by the app (or deployment slot, if specified).
		/// Description for Gets all network features used by the app (or deployment slot, if specified).
		/// WebApps_ListNetworkFeatures subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="view">The type of view. This can either be "summary" or "detailed".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<NetworkFeatures> WebApps_ListNetworkFeaturesAsync(string resourceGroupName, string name, string view, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkFeatures/"+ (view==null? "" : System.Uri.EscapeDataString(view))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkFeatures>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// WebApps_GetNetworkTraceOperation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="operationId">GUID of the operation.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_GetNetworkTraceOperationAsync(string resourceGroupName, string name, string operationId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkTrace/operationresults/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start capturing network packets for the site (To be deprecated).
		/// Description for Start capturing network packets for the site (To be deprecated).
		/// WebApps_StartWebSiteNetworkTrace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="durationInSeconds">The duration to keep capturing in seconds.</param>
		/// <param name="maxFrameLength">The maximum frame length in bytes (Optional).</param>
		/// <param name="sasUrl">The Blob URL to store capture file.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<string> WebApps_StartWebSiteNetworkTraceAsync(string resourceGroupName, string name, int durationInSeconds, int maxFrameLength, string sasUrl, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkTrace/start&durationInSeconds="+durationInSeconds+"&maxFrameLength="+maxFrameLength+"&sasUrl=" + (sasUrl==null? "" : System.Uri.EscapeDataString(sasUrl))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start capturing network packets for the site.
		/// Description for Start capturing network packets for the site.
		/// WebApps_StartWebSiteNetworkTraceOperation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="durationInSeconds">The duration to keep capturing in seconds.</param>
		/// <param name="maxFrameLength">The maximum frame length in bytes (Optional).</param>
		/// <param name="sasUrl">The Blob URL to store capture file.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_StartWebSiteNetworkTraceOperationAsync(string resourceGroupName, string name, int durationInSeconds, int maxFrameLength, string sasUrl, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkTrace/startOperation&durationInSeconds="+durationInSeconds+"&maxFrameLength="+maxFrameLength+"&sasUrl=" + (sasUrl==null? "" : System.Uri.EscapeDataString(sasUrl))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop ongoing capturing network packets for the site.
		/// Description for Stop ongoing capturing network packets for the site.
		/// WebApps_StopWebSiteNetworkTrace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Stopped.</returns>
		public async Task WebApps_StopWebSiteNetworkTraceAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkTrace/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// WebApps_GetNetworkTraces subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="operationId">GUID of the operation.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_GetNetworkTracesAsync(string resourceGroupName, string name, string operationId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkTrace/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// WebApps_GetNetworkTraceOperationV2 subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="operationId">GUID of the operation.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_GetNetworkTraceOperationV2Async(string resourceGroupName, string name, string operationId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkTraces/current/operationresults/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// WebApps_GetNetworkTracesV2 subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="operationId">GUID of the operation.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_GetNetworkTracesV2Async(string resourceGroupName, string name, string operationId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/networkTraces/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a new publishing password for an app (or deployment slot, if specified).
		/// Description for Generates a new publishing password for an app (or deployment slot, if specified).
		/// WebApps_GenerateNewSitePublishingPassword subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully generate new password.</returns>
		public async Task WebApps_GenerateNewSitePublishingPasswordAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/newpassword&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets perfmon counters for web app.
		/// Description for Gets perfmon counters for web app.
		/// WebApps_ListPerfMonCounters subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="filter">Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PerfMonCounterCollection> WebApps_ListPerfMonCountersAsync(string resourceGroupName, string name, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/perfcounters&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PerfMonCounterCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets web app's event logs.
		/// Description for Gets web app's event logs.
		/// WebApps_GetSitePhpErrorLogFlag subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SitePhpErrorLogFlag> WebApps_GetSitePhpErrorLogFlagAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/phplogging&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SitePhpErrorLogFlag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the premier add-ons of an app.
		/// Description for Gets the premier add-ons of an app.
		/// WebApps_ListPremierAddOns subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PremierAddOn> WebApps_ListPremierAddOnsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/premieraddons&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremierAddOn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named add-on of an app.
		/// Description for Gets a named add-on of an app.
		/// WebApps_GetPremierAddOn subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="premierAddOnName">Add-on name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PremierAddOn> WebApps_GetPremierAddOnAsync(string resourceGroupName, string name, string premierAddOnName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/premieraddons/"+ (premierAddOnName==null? "" : System.Uri.EscapeDataString(premierAddOnName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremierAddOn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a named add-on of an app.
		/// Description for Updates a named add-on of an app.
		/// WebApps_AddPremierAddOn subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="premierAddOnName">Add-on name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the edited premier add-on.</param>
		/// <returns>OK</returns>
		public async Task<PremierAddOn> WebApps_AddPremierAddOnAsync(string resourceGroupName, string name, string premierAddOnName, string subscriptionId, string api_version, PremierAddOn requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/premieraddons/"+ (premierAddOnName==null? "" : System.Uri.EscapeDataString(premierAddOnName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremierAddOn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a premier add-on from an app.
		/// Description for Delete a premier add-on from an app.
		/// WebApps_DeletePremierAddOn subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="premierAddOnName">Add-on name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted premier add-on.</returns>
		public async Task WebApps_DeletePremierAddOnAsync(string resourceGroupName, string name, string premierAddOnName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/premieraddons/"+ (premierAddOnName==null? "" : System.Uri.EscapeDataString(premierAddOnName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a named add-on of an app.
		/// Description for Updates a named add-on of an app.
		/// WebApps_UpdatePremierAddOn subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="premierAddOnName">Add-on name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the edited premier add-on.</param>
		/// <returns>OK</returns>
		public async Task<PremierAddOn> WebApps_UpdatePremierAddOnAsync(string resourceGroupName, string name, string premierAddOnName, string subscriptionId, string api_version, PremierAddOnPatchResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/premieraddons/"+ (premierAddOnName==null? "" : System.Uri.EscapeDataString(premierAddOnName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremierAddOn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets data around private site access enablement and authorized Virtual Networks that can access the site.
		/// Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
		/// WebApps_GetPrivateAccess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PrivateAccess> WebApps_GetPrivateAccessAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/privateAccess/virtualNetworks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateAccess>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets data around private site access enablement and authorized Virtual Networks that can access the site.
		/// Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
		/// WebApps_PutPrivateAccessVnet subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The information for the private access</param>
		/// <returns>OK</returns>
		public async Task<PrivateAccess> WebApps_PutPrivateAccessVnetAsync(string resourceGroupName, string name, string subscriptionId, string api_version, PrivateAccess requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/privateAccess/virtualNetworks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateAccess>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
		/// Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
		/// WebApps_ListProcesses subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Process terminated.</returns>
		public async Task<ProcessInfoCollection> WebApps_ListProcessesAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/processes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process information by its ID for a specific scaled-out instance in a web site.
		/// Description for Get process information by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetProcess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Process information returned.</returns>
		public async Task<ProcessInfo> WebApps_GetProcessAsync(string resourceGroupName, string name, string processId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
		/// Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
		/// WebApps_DeleteProcess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteProcessAsync(string resourceGroupName, string name, string processId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
		/// Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetProcessDump subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<string> WebApps_GetProcessDumpAsync(string resourceGroupName, string name, string processId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/dump&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List module information for a process by its ID for a specific scaled-out instance in a web site.
		/// Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_ListProcessModules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Module information returned.</returns>
		public async Task<ProcessModuleInfoCollection> WebApps_ListProcessModulesAsync(string resourceGroupName, string name, string processId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/modules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessModuleInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process information by its ID for a specific scaled-out instance in a web site.
		/// Description for Get process information by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetProcessModule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="baseAddress">Module base address.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Module information returned.</returns>
		public async Task<ProcessModuleInfo> WebApps_GetProcessModuleAsync(string resourceGroupName, string name, string processId, string baseAddress, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/modules/"+ (baseAddress==null? "" : System.Uri.EscapeDataString(baseAddress))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessModuleInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the threads in a process by its ID for a specific scaled-out instance in a web site.
		/// Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_ListProcessThreads subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Thread information returned.</returns>
		public async Task<ProcessThreadInfoCollection> WebApps_ListProcessThreadsAsync(string resourceGroupName, string name, string processId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/threads&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessThreadInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get public certificates for an app or a deployment slot.
		/// Description for Get public certificates for an app or a deployment slot.
		/// WebApps_ListPublicCertificates subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PublicCertificateCollection> WebApps_ListPublicCertificatesAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/publicCertificates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicCertificateCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the named public certificate for an app (or deployment slot, if specified).
		/// Description for Get the named public certificate for an app (or deployment slot, if specified).
		/// WebApps_GetPublicCertificate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="publicCertificateName">Public certificate name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PublicCertificate> WebApps_GetPublicCertificateAsync(string resourceGroupName, string name, string publicCertificateName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/publicCertificates/"+ (publicCertificateName==null? "" : System.Uri.EscapeDataString(publicCertificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicCertificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a hostname binding for an app.
		/// Description for Creates a hostname binding for an app.
		/// WebApps_CreateOrUpdatePublicCertificate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="publicCertificateName">Public certificate name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Public certificate details. This is the JSON representation of a PublicCertificate object.</param>
		/// <returns>OK</returns>
		public async Task<PublicCertificate> WebApps_CreateOrUpdatePublicCertificateAsync(string resourceGroupName, string name, string publicCertificateName, string subscriptionId, string api_version, PublicCertificate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/publicCertificates/"+ (publicCertificateName==null? "" : System.Uri.EscapeDataString(publicCertificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicCertificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a hostname binding for an app.
		/// Description for Deletes a hostname binding for an app.
		/// WebApps_DeletePublicCertificate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="publicCertificateName">Public certificate name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted hostname binding.</returns>
		public async Task WebApps_DeletePublicCertificateAsync(string resourceGroupName, string name, string publicCertificateName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/publicCertificates/"+ (publicCertificateName==null? "" : System.Uri.EscapeDataString(publicCertificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the publishing profile for an app (or deployment slot, if specified).
		/// Description for Gets the publishing profile for an app (or deployment slot, if specified).
		/// WebApps_ListPublishingProfileXmlWithSecrets subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.</param>
		/// <returns>OK</returns>
		public async Task WebApps_ListPublishingProfileXmlWithSecretsAsync(string resourceGroupName, string name, string subscriptionId, string api_version, CsmPublishingProfileOptions requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/publishxml&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
		/// Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
		/// WebApps_ResetProductionSlotConfig subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task WebApps_ResetProductionSlotConfigAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/resetSlotConfig&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restarts an app (or deployment slot, if specified).
		/// Description for Restarts an app (or deployment slot, if specified).
		/// WebApps_Restart subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="softRestart">Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.</param>
		/// <param name="synchronous">Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully restarted app.</returns>
		public async Task WebApps_RestartAsync(string resourceGroupName, string name, bool softRestart, bool synchronous, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/restart&softRestart="+softRestart+"&synchronous="+synchronous+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores an app from a backup blob in Azure Storage.
		/// Description for Restores an app from a backup blob in Azure Storage.
		/// WebApps_RestoreFromBackupBlob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Information on restore request .</param>
		/// <returns>Restore operation started.</returns>
		public async Task WebApps_RestoreFromBackupBlobAsync(string resourceGroupName, string name, string subscriptionId, string api_version, RestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/restoreFromBackupBlob&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a deleted web app to this web app.
		/// Description for Restores a deleted web app to this web app.
		/// WebApps_RestoreFromDeletedApp subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Deleted web app restore information.</param>
		/// <returns>Restore operation started.</returns>
		public async Task WebApps_RestoreFromDeletedAppAsync(string resourceGroupName, string name, string subscriptionId, string api_version, DeletedAppRestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/restoreFromDeletedApp&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a web app from a snapshot.
		/// Description for Restores a web app from a snapshot.
		/// WebApps_RestoreSnapshot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.</param>
		/// <returns>Restore operation started.</returns>
		public async Task WebApps_RestoreSnapshotAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SnapshotRestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/restoreSnapshot&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of siteextensions for a web site, or a deployment slot.
		/// Description for Get list of siteextensions for a web site, or a deployment slot.
		/// WebApps_ListSiteExtensions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>SiteExtension information returned.</returns>
		public async Task<SiteExtensionInfoCollection> WebApps_ListSiteExtensionsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/siteextensions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteExtensionInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get site extension information by its ID for a web site, or a deployment slot.
		/// Description for Get site extension information by its ID for a web site, or a deployment slot.
		/// WebApps_GetSiteExtension subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="siteExtensionId">Site extension name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>SiteExtension information returned.</returns>
		public async Task<SiteExtensionInfo> WebApps_GetSiteExtensionAsync(string resourceGroupName, string name, string siteExtensionId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/siteextensions/"+ (siteExtensionId==null? "" : System.Uri.EscapeDataString(siteExtensionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteExtensionInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Install site extension on a web site, or a deployment slot.
		/// Description for Install site extension on a web site, or a deployment slot.
		/// WebApps_InstallSiteExtension subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="siteExtensionId">Site extension name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Site Extension created.</returns>
		public async Task<SiteExtensionInfo> WebApps_InstallSiteExtensionAsync(string resourceGroupName, string name, string siteExtensionId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/siteextensions/"+ (siteExtensionId==null? "" : System.Uri.EscapeDataString(siteExtensionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteExtensionInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a site extension from a web site, or a deployment slot.
		/// Description for Remove a site extension from a web site, or a deployment slot.
		/// WebApps_DeleteSiteExtension subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="siteExtensionId">Site extension name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteSiteExtensionAsync(string resourceGroupName, string name, string siteExtensionId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/siteextensions/"+ (siteExtensionId==null? "" : System.Uri.EscapeDataString(siteExtensionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copies a deployment slot to another deployment slot of an app.
		/// Description for Copies a deployment slot to another deployment slot of an app.
		/// WebApps_CopyProductionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotcopy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON object that contains the target slot name and site config properties to override the source slot config. See example.</param>
		/// <returns>OK.</returns>
		public async Task WebApps_CopyProductionSlotAsync(string resourceGroupName, string name, string subscriptionId, string api_version, CsmCopySlotEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slotcopy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an app's deployment slots.
		/// Description for Gets an app's deployment slots.
		/// WebApps_ListSlots subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListSlotsReturn> WebApps_ListSlotsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListSlotsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details of a web, mobile, or API app.
		/// Description for Gets the details of a web, mobile, or API app.
		/// WebApps_GetSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. By default, this API returns the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<WebApps_GetSlotReturn> WebApps_GetSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
		/// Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
		/// WebApps_CreateOrUpdateSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.</param>
		/// <param name="slot">Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the app properties. See example.</param>
		/// <returns>OK.</returns>
		public async Task<WebApps_CreateOrUpdateSlotReturn> WebApps_CreateOrUpdateSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, WebApps_CreateOrUpdateSlotPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a web, mobile, or API app, or one of the deployment slots.
		/// Description for Deletes a web, mobile, or API app, or one of the deployment slots.
		/// WebApps_DeleteSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app to delete.</param>
		/// <param name="slot">Name of the deployment slot to delete. By default, the API deletes the production slot.</param>
		/// <param name="deleteMetrics">If true, web app metrics are also deleted.</param>
		/// <param name="deleteEmptyServerFarm">Specify true if the App Service plan will be empty after app deletion and you want to delete the empty App Service plan. By default, the empty App Service plan is not deleted.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted web app.</returns>
		public async Task WebApps_DeleteSlotAsync(string resourceGroupName, string name, string slot, bool deleteMetrics, bool deleteEmptyServerFarm, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"&deleteMetrics="+deleteMetrics+"&deleteEmptyServerFarm="+deleteEmptyServerFarm+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
		/// Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
		/// WebApps_UpdateSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Unique name of the app to create or update. To create or update a deployment slot, use the {slot} parameter.</param>
		/// <param name="slot">Name of the deployment slot to create or update. By default, this API attempts to create or modify the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the app properties. See example.</param>
		/// <returns>OK.</returns>
		public async Task<WebApps_UpdateSlotReturn> WebApps_UpdateSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SitePatchResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Analyze a custom hostname.
		/// Description for Analyze a custom hostname.
		/// WebApps_AnalyzeCustomHostnameSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="hostName">Custom hostname.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<CustomHostnameAnalysisResult> WebApps_AnalyzeCustomHostnameSlotAsync(string resourceGroupName, string name, string slot, string hostName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/analyzeCustomHostname&hostName=" + (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomHostnameAnalysisResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies the configuration settings from the target slot onto the current slot.
		/// Description for Applies the configuration settings from the target slot onto the current slot.
		/// WebApps_ApplySlotConfigurationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the source slot. If a slot is not specified, the production slot is used as the source slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON object that contains the target slot name. See example.</param>
		/// <returns>OK.</returns>
		public async Task WebApps_ApplySlotConfigurationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, CsmSlotEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/applySlotConfig&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a backup of an app.
		/// Description for Creates a backup of an app.
		/// WebApps_BackupSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Backup configuration. You can use the JSON response from the POST action as input here.</param>
		/// <returns>OK</returns>
		public async Task<BackupItem> WebApps_BackupSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, BackupRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/backup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets existing backups of an app.
		/// Description for Gets existing backups of an app.
		/// WebApps_ListBackupsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<BackupItemCollection> WebApps_ListBackupsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/backups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItemCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a backup of an app by its ID.
		/// Description for Gets a backup of an app by its ID.
		/// WebApps_GetBackupStatusSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="backupId">ID of the backup.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<BackupItem> WebApps_GetBackupStatusSlotAsync(string resourceGroupName, string name, string backupId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/backups/"+ (backupId==null? "" : System.Uri.EscapeDataString(backupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a backup of an app by its ID.
		/// Description for Deletes a backup of an app by its ID.
		/// WebApps_DeleteBackupSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="backupId">ID of the backup.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted web app backup item.</returns>
		public async Task WebApps_DeleteBackupSlotAsync(string resourceGroupName, string name, string backupId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/backups/"+ (backupId==null? "" : System.Uri.EscapeDataString(backupId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
		/// Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
		/// WebApps_ListBackupStatusSecretsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="backupId">ID of backup.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Information on backup request.</param>
		/// <returns>OK</returns>
		public async Task<BackupItem> WebApps_ListBackupStatusSecretsSlotAsync(string resourceGroupName, string name, string backupId, string slot, string subscriptionId, string api_version, BackupRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/backups/"+ (backupId==null? "" : System.Uri.EscapeDataString(backupId))+"/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a specific backup to another app (or deployment slot, if specified).
		/// Description for Restores a specific backup to another app (or deployment slot, if specified).
		/// WebApps_RestoreSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="backupId">ID of the backup.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Information on restore request .</param>
		/// <returns>Restore operation started.</returns>
		public async Task WebApps_RestoreSlotAsync(string resourceGroupName, string name, string backupId, string slot, string subscriptionId, string api_version, RestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/backups/"+ (backupId==null? "" : System.Uri.EscapeDataString(backupId))+"/restore&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the configurations of an app
		/// Description for List the configurations of an app
		/// WebApps_ListConfigurationsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResourceCollection> WebApps_ListConfigurationsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the application settings of an app.
		/// Description for Replaces the application settings of an app.
		/// WebApps_UpdateApplicationSettingsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Application settings of the app.</param>
		/// <returns>OK</returns>
		public async Task<StringDictionary> WebApps_UpdateApplicationSettingsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, StringDictionary requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/appsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the application settings of an app.
		/// Description for Gets the application settings of an app.
		/// WebApps_ListApplicationSettingsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<StringDictionary> WebApps_ListApplicationSettingsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/appsettings/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Authentication / Authorization settings associated with web app.
		/// Description for Updates the Authentication / Authorization settings associated with web app.
		/// WebApps_UpdateAuthSettingsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Auth settings associated with web app.</param>
		/// <returns>OK</returns>
		public async Task<SiteAuthSettings> WebApps_UpdateAuthSettingsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SiteAuthSettings requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/authsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteAuthSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Authentication/Authorization settings of an app.
		/// Description for Gets the Authentication/Authorization settings of an app.
		/// WebApps_GetAuthSettingsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteAuthSettings> WebApps_GetAuthSettingsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/authsettings/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteAuthSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Azure storage account configurations of an app.
		/// Description for Updates the Azure storage account configurations of an app.
		/// WebApps_UpdateAzureStorageAccountsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Azure storage accounts of the app.</param>
		/// <returns>OK</returns>
		public async Task<AzureStoragePropertyDictionaryResource> WebApps_UpdateAzureStorageAccountsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, AzureStoragePropertyDictionaryResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/azurestorageaccounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AzureStoragePropertyDictionaryResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Azure storage account configurations of an app.
		/// Description for Gets the Azure storage account configurations of an app.
		/// WebApps_ListAzureStorageAccountsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AzureStoragePropertyDictionaryResource> WebApps_ListAzureStorageAccountsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/azurestorageaccounts/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AzureStoragePropertyDictionaryResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the backup configuration of an app.
		/// Description for Updates the backup configuration of an app.
		/// WebApps_UpdateBackupConfigurationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Edited backup configuration.</param>
		/// <returns>OK</returns>
		public async Task<BackupRequest> WebApps_UpdateBackupConfigurationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, BackupRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/backup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupRequest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the backup configuration of an app.
		/// Description for Deletes the backup configuration of an app.
		/// WebApps_DeleteBackupConfigurationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted backup configuration.</returns>
		public async Task WebApps_DeleteBackupConfigurationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/backup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the backup configuration of an app.
		/// Description for Gets the backup configuration of an app.
		/// WebApps_GetBackupConfigurationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<BackupRequest> WebApps_GetBackupConfigurationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/backup/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupRequest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the connection strings of an app.
		/// Description for Replaces the connection strings of an app.
		/// WebApps_UpdateConnectionStringsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Connection strings of the app or deployment slot. See example.</param>
		/// <returns>OK</returns>
		public async Task<ConnectionStringDictionary> WebApps_UpdateConnectionStringsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, ConnectionStringDictionary requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/connectionstrings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConnectionStringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the connection strings of an app.
		/// Description for Gets the connection strings of an app.
		/// WebApps_ListConnectionStringsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<ConnectionStringDictionary> WebApps_ListConnectionStringsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/connectionstrings/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConnectionStringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the logging configuration of an app.
		/// Description for Gets the logging configuration of an app.
		/// WebApps_GetDiagnosticLogsConfigurationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteLogsConfig> WebApps_GetDiagnosticLogsConfigurationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/logs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteLogsConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the logging configuration of an app.
		/// Description for Updates the logging configuration of an app.
		/// WebApps_UpdateDiagnosticLogsConfigSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.</param>
		/// <returns>OK</returns>
		public async Task<SiteLogsConfig> WebApps_UpdateDiagnosticLogsConfigSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SiteLogsConfig requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/logs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteLogsConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the metadata of an app.
		/// Description for Replaces the metadata of an app.
		/// WebApps_UpdateMetadataSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Edited metadata of the app or deployment slot. See example.</param>
		/// <returns>OK</returns>
		public async Task<StringDictionary> WebApps_UpdateMetadataSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, StringDictionary requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/metadata&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the metadata of an app.
		/// Description for Gets the metadata of an app.
		/// WebApps_ListMetadataSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<StringDictionary> WebApps_ListMetadataSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/metadata/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Git/FTP publishing credentials of an app.
		/// Description for Gets the Git/FTP publishing credentials of an app.
		/// WebApps_ListPublishingCredentialsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListPublishingCredentialsSlotReturn> WebApps_ListPublishingCredentialsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/publishingcredentials/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListPublishingCredentialsSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Push settings associated with web app.
		/// Description for Updates the Push settings associated with web app.
		/// WebApps_UpdateSitePushSettingsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Push settings associated with web app.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateSitePushSettingsSlotReturn> WebApps_UpdateSitePushSettingsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, WebApps_UpdateSitePushSettingsSlotPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/pushsettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateSitePushSettingsSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Push settings associated with web app.
		/// Description for Gets the Push settings associated with web app.
		/// WebApps_ListSitePushSettingsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListSitePushSettingsSlotReturn> WebApps_ListSitePushSettingsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/pushsettings/list&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListSitePushSettingsSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
		/// Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
		/// WebApps_GetConfigurationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResource> WebApps_GetConfigurationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an app.
		/// Description for Updates the configuration of an app.
		/// WebApps_CreateOrUpdateConfigurationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON representation of a SiteConfig object. See example.</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResource> WebApps_CreateOrUpdateConfigurationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SiteConfigResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an app.
		/// Description for Updates the configuration of an app.
		/// WebApps_UpdateConfigurationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON representation of a SiteConfig object. See example.</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResource> WebApps_UpdateConfigurationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SiteConfigResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
		/// Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
		/// WebApps_ListConfigurationSnapshotInfoSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigurationSnapshotInfoCollection> WebApps_ListConfigurationSnapshotInfoSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/web/snapshots&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigurationSnapshotInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a snapshot of the configuration of an app at a previous point in time.
		/// Description for Gets a snapshot of the configuration of an app at a previous point in time.
		/// WebApps_GetConfigurationSnapshotSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="snapshotId">The ID of the snapshot to read.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SiteConfigResource> WebApps_GetConfigurationSnapshotSlotAsync(string resourceGroupName, string name, string snapshotId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/web/snapshots/"+ (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteConfigResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reverts the configuration of an app to a previous snapshot.
		/// Description for Reverts the configuration of an app to a previous snapshot.
		/// WebApps_RecoverSiteConfigurationSnapshotSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="snapshotId">The ID of the snapshot to read.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_RecoverSiteConfigurationSnapshotSlotAsync(string resourceGroupName, string name, string snapshotId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/config/web/snapshots/"+ (snapshotId==null? "" : System.Uri.EscapeDataString(snapshotId))+"/recover&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the last lines of docker logs for the given site
		/// Description for Gets the last lines of docker logs for the given site
		/// WebApps_GetWebSiteContainerLogsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task WebApps_GetWebSiteContainerLogsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/containerlogs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the ZIP archived docker log files for the given site
		/// Description for Gets the ZIP archived docker log files for the given site
		/// WebApps_GetContainerLogsZipSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task WebApps_GetContainerLogsZipSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/containerlogs/zip/download&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List continuous web jobs for an app, or a deployment slot.
		/// Description for List continuous web jobs for an app, or a deployment slot.
		/// WebApps_ListContinuousWebJobsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<ContinuousWebJobCollection> WebApps_ListContinuousWebJobsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/continuouswebjobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContinuousWebJobCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a continuous web job by its ID for an app, or a deployment slot.
		/// Description for Gets a continuous web job by its ID for an app, or a deployment slot.
		/// WebApps_GetContinuousWebJobSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task<ContinuousWebJob> WebApps_GetContinuousWebJobSlotAsync(string resourceGroupName, string name, string webJobName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/continuouswebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContinuousWebJob>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a continuous web job by its ID for an app, or a deployment slot.
		/// Description for Delete a continuous web job by its ID for an app, or a deployment slot.
		/// WebApps_DeleteContinuousWebJobSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted continuous web job.</returns>
		public async Task WebApps_DeleteContinuousWebJobSlotAsync(string resourceGroupName, string name, string webJobName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/continuouswebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start a continuous web job for an app, or a deployment slot.
		/// Description for Start a continuous web job for an app, or a deployment slot.
		/// WebApps_StartContinuousWebJobSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task WebApps_StartContinuousWebJobSlotAsync(string resourceGroupName, string name, string webJobName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/continuouswebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop a continuous web job for an app, or a deployment slot.
		/// Description for Stop a continuous web job for an app, or a deployment slot.
		/// WebApps_StopContinuousWebJobSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task WebApps_StopContinuousWebJobSlotAsync(string resourceGroupName, string name, string webJobName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/continuouswebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List deployments for an app, or a deployment slot.
		/// Description for List deployments for an app, or a deployment slot.
		/// WebApps_ListDeploymentsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DeploymentCollection> WebApps_ListDeploymentsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/deployments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeploymentCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a deployment by its ID for an app, or a deployment slot.
		/// Description for Get a deployment by its ID for an app, or a deployment slot.
		/// WebApps_GetDeploymentSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="id">Deployment ID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<Deployment> WebApps_GetDeploymentSlotAsync(string resourceGroupName, string name, string id, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/deployments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deployment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a deployment for an app, or a deployment slot.
		/// Description for Create a deployment for an app, or a deployment slot.
		/// WebApps_CreateDeploymentSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="id">ID of an existing deployment.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Deployment details.</param>
		/// <returns>OK</returns>
		public async Task<Deployment> WebApps_CreateDeploymentSlotAsync(string resourceGroupName, string name, string id, string slot, string subscriptionId, string api_version, Deployment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/deployments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deployment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a deployment by its ID for an app, or a deployment slot.
		/// Description for Delete a deployment by its ID for an app, or a deployment slot.
		/// WebApps_DeleteDeploymentSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="id">Deployment ID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted deployment.</returns>
		public async Task WebApps_DeleteDeploymentSlotAsync(string resourceGroupName, string name, string id, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/deployments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List deployment log for specific deployment for an app, or a deployment slot.
		/// Description for List deployment log for specific deployment for an app, or a deployment slot.
		/// WebApps_ListDeploymentLogSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="id">The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<Deployment> WebApps_ListDeploymentLogSlotAsync(string resourceGroupName, string name, string id, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/deployments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/log&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deployment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
		/// Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
		/// WebApps_DiscoverBackupSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.</param>
		/// <returns>OK</returns>
		public async Task<RestoreRequest> WebApps_DiscoverBackupSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, RestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/discoverbackup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RestoreRequest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists ownership identifiers for domain associated with web app.
		/// Description for Lists ownership identifiers for domain associated with web app.
		/// WebApps_ListDomainOwnershipIdentifiersSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListDomainOwnershipIdentifiersSlotReturn> WebApps_ListDomainOwnershipIdentifiersSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/domainOwnershipIdentifiers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListDomainOwnershipIdentifiersSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get domain ownership identifier for web app.
		/// Description for Get domain ownership identifier for web app.
		/// WebApps_GetDomainOwnershipIdentifierSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="domainOwnershipIdentifierName">Name of domain ownership identifier.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_GetDomainOwnershipIdentifierSlotReturn> WebApps_GetDomainOwnershipIdentifierSlotAsync(string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/domainOwnershipIdentifiers/"+ (domainOwnershipIdentifierName==null? "" : System.Uri.EscapeDataString(domainOwnershipIdentifierName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetDomainOwnershipIdentifierSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
		/// Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
		/// WebApps_CreateOrUpdateDomainOwnershipIdentifierSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="domainOwnershipIdentifierName">Name of domain ownership identifier.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the domain ownership properties.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_CreateOrUpdateDomainOwnershipIdentifierSlotReturn> WebApps_CreateOrUpdateDomainOwnershipIdentifierSlotAsync(string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, string subscriptionId, string api_version, WebApps_CreateOrUpdateDomainOwnershipIdentifierSlotPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/domainOwnershipIdentifiers/"+ (domainOwnershipIdentifierName==null? "" : System.Uri.EscapeDataString(domainOwnershipIdentifierName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateDomainOwnershipIdentifierSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a domain ownership identifier for a web app.
		/// Description for Deletes a domain ownership identifier for a web app.
		/// WebApps_DeleteDomainOwnershipIdentifierSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="domainOwnershipIdentifierName">Name of domain ownership identifier.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted domain ownership identifier.</returns>
		public async Task WebApps_DeleteDomainOwnershipIdentifierSlotAsync(string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/domainOwnershipIdentifiers/"+ (domainOwnershipIdentifierName==null? "" : System.Uri.EscapeDataString(domainOwnershipIdentifierName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
		/// Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
		/// WebApps_UpdateDomainOwnershipIdentifierSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="domainOwnershipIdentifierName">Name of domain ownership identifier.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the domain ownership properties.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateDomainOwnershipIdentifierSlotReturn> WebApps_UpdateDomainOwnershipIdentifierSlotAsync(string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, string subscriptionId, string api_version, WebApps_UpdateDomainOwnershipIdentifierSlotPatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/domainOwnershipIdentifiers/"+ (domainOwnershipIdentifierName==null? "" : System.Uri.EscapeDataString(domainOwnershipIdentifierName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateDomainOwnershipIdentifierSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the status of the last MSDeploy operation.
		/// Description for Get the status of the last MSDeploy operation.
		/// WebApps_GetMSDeployStatusSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<MSDeployStatus> WebApps_GetMSDeployStatusSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/extensions/MSDeploy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MSDeployStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invoke the MSDeploy web app extension.
		/// Description for Invoke the MSDeploy web app extension.
		/// WebApps_CreateMSDeployOperationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of MSDeploy operation</param>
		public async Task WebApps_CreateMSDeployOperationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, MSDeploy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/extensions/MSDeploy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the MSDeploy Log for the last MSDeploy operation.
		/// Description for Get the MSDeploy Log for the last MSDeploy operation.
		/// WebApps_GetMSDeployLogSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>MSDeploy log returned.</returns>
		public async Task<MSDeployLog> WebApps_GetMSDeployLogSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/extensions/MSDeploy/log&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MSDeployLog>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the functions for a web site, or a deployment slot.
		/// Description for List the functions for a web site, or a deployment slot.
		/// WebApps_ListInstanceFunctionsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Function information returned.</returns>
		public async Task<FunctionEnvelopeCollection> WebApps_ListInstanceFunctionsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/functions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FunctionEnvelopeCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch a short lived token that can be exchanged for a master key.
		/// Description for Fetch a short lived token that can be exchanged for a master key.
		/// WebApps_GetFunctionsAdminTokenSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<string> WebApps_GetFunctionsAdminTokenSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/functions/admin/token&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get function information by its ID for web site, or a deployment slot.
		/// Description for Get function information by its ID for web site, or a deployment slot.
		/// WebApps_GetInstanceFunctionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Function information returned.</returns>
		public async Task<FunctionEnvelope> WebApps_GetInstanceFunctionSlotAsync(string resourceGroupName, string name, string functionName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FunctionEnvelope>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create function for web site, or a deployment slot.
		/// Description for Create function for web site, or a deployment slot.
		/// WebApps_CreateInstanceFunctionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Function details.</param>
		public async Task WebApps_CreateInstanceFunctionSlotAsync(string resourceGroupName, string name, string functionName, string slot, string subscriptionId, string api_version, FunctionEnvelope requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a function for web site, or a deployment slot.
		/// Description for Delete a function for web site, or a deployment slot.
		/// WebApps_DeleteInstanceFunctionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteInstanceFunctionSlotAsync(string resourceGroupName, string name, string functionName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or update a function secret.
		/// Description for Add or update a function secret.
		/// WebApps_CreateOrUpdateFunctionSecretSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">The name of the function.</param>
		/// <param name="keyName">The name of the key.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The key to create or update</param>
		/// <returns>Key was updated.</returns>
		public async Task<KeyInfo> WebApps_CreateOrUpdateFunctionSecretSlotAsync(string resourceGroupName, string name, string functionName, string keyName, string slot, string subscriptionId, string api_version, KeyInfo requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"/keys/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<KeyInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a function secret.
		/// Description for Delete a function secret.
		/// WebApps_DeleteFunctionSecretSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">The name of the function.</param>
		/// <param name="keyName">The name of the key.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteFunctionSecretSlotAsync(string resourceGroupName, string name, string functionName, string keyName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"/keys/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get function keys for a function in a web site, or a deployment slot.
		/// Description for Get function keys for a function in a web site, or a deployment slot.
		/// WebApps_ListFunctionKeysSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listkeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Function keys returned.</returns>
		public async Task<StringDictionary> WebApps_ListFunctionKeysSlotAsync(string resourceGroupName, string name, string functionName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"/listkeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StringDictionary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get function secrets for a function in a web site, or a deployment slot.
		/// Description for Get function secrets for a function in a web site, or a deployment slot.
		/// WebApps_ListFunctionSecretsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="functionName">Function name.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Function secrets returned.</returns>
		public async Task<FunctionSecrets> WebApps_ListFunctionSecretsSlotAsync(string resourceGroupName, string name, string functionName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/functions/"+ (functionName==null? "" : System.Uri.EscapeDataString(functionName))+"/listsecrets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FunctionSecrets>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get host secrets for a function app.
		/// Description for Get host secrets for a function app.
		/// WebApps_ListHostKeysSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listkeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Host secrets returned.</returns>
		public async Task<HostKeys> WebApps_ListHostKeysSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/host/default/listkeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HostKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This is to allow calling via powershell and ARM template.
		/// Description for This is to allow calling via powershell and ARM template.
		/// WebApps_ListSyncStatusSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listsyncstatus
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_ListSyncStatusSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/host/default/listsyncstatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Syncs function trigger metadata to the management database
		/// Description for Syncs function trigger metadata to the management database
		/// WebApps_SyncFunctionsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/sync
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_SyncFunctionsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/host/default/sync&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or update a host level secret.
		/// Description for Add or update a host level secret.
		/// WebApps_CreateOrUpdateHostSecretSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="keyType">The type of host key.</param>
		/// <param name="keyName">The name of the key.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The key to create or update</param>
		/// <returns>Key was updated.</returns>
		public async Task<KeyInfo> WebApps_CreateOrUpdateHostSecretSlotAsync(string resourceGroupName, string name, string keyType, string keyName, string slot, string subscriptionId, string api_version, KeyInfo requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/host/default/"+ (keyType==null? "" : System.Uri.EscapeDataString(keyType))+"/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<KeyInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a host level secret.
		/// Description for Delete a host level secret.
		/// WebApps_DeleteHostSecretSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="keyType">The type of host key.</param>
		/// <param name="keyName">The name of the key.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteHostSecretSlotAsync(string resourceGroupName, string name, string keyType, string keyName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/host/default/"+ (keyType==null? "" : System.Uri.EscapeDataString(keyType))+"/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get hostname bindings for an app or a deployment slot.
		/// Description for Get hostname bindings for an app or a deployment slot.
		/// WebApps_ListHostNameBindingsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<HostNameBindingCollection> WebApps_ListHostNameBindingsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hostNameBindings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HostNameBindingCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the named hostname binding for an app (or deployment slot, if specified).
		/// Description for Get the named hostname binding for an app (or deployment slot, if specified).
		/// WebApps_GetHostNameBindingSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.</param>
		/// <param name="hostName">Hostname in the hostname binding.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<HostNameBinding> WebApps_GetHostNameBindingSlotAsync(string resourceGroupName, string name, string slot, string hostName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hostNameBindings/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HostNameBinding>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a hostname binding for an app.
		/// Description for Creates a hostname binding for an app.
		/// WebApps_CreateOrUpdateHostNameBindingSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="hostName">Hostname in the hostname binding.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Binding details. This is the JSON representation of a HostNameBinding object.</param>
		/// <returns>OK</returns>
		public async Task<HostNameBinding> WebApps_CreateOrUpdateHostNameBindingSlotAsync(string resourceGroupName, string name, string hostName, string slot, string subscriptionId, string api_version, HostNameBinding requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hostNameBindings/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HostNameBinding>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a hostname binding for an app.
		/// Description for Deletes a hostname binding for an app.
		/// WebApps_DeleteHostNameBindingSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.</param>
		/// <param name="hostName">Hostname in the hostname binding.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted hostname binding.</returns>
		public async Task WebApps_DeleteHostNameBindingSlotAsync(string resourceGroupName, string name, string slot, string hostName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hostNameBindings/"+ (hostName==null? "" : System.Uri.EscapeDataString(hostName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
		/// Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
		/// WebApps_GetHybridConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="namespaceName">The namespace for this hybrid connection.</param>
		/// <param name="relayName">The relay name for this hybrid connection.</param>
		/// <param name="slot">The name of the slot for the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_GetHybridConnectionSlotReturn> WebApps_GetHybridConnectionSlotAsync(string resourceGroupName, string name, string namespaceName, string relayName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetHybridConnectionSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Hybrid Connection using a Service Bus relay.
		/// Description for Creates a new Hybrid Connection using a Service Bus relay.
		/// WebApps_CreateOrUpdateHybridConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="namespaceName">The namespace for this hybrid connection.</param>
		/// <param name="relayName">The relay name for this hybrid connection.</param>
		/// <param name="slot">The name of the slot for the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The details of the hybrid connection.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_CreateOrUpdateHybridConnectionSlotReturn> WebApps_CreateOrUpdateHybridConnectionSlotAsync(string resourceGroupName, string name, string namespaceName, string relayName, string slot, string subscriptionId, string api_version, WebApps_CreateOrUpdateHybridConnectionSlotPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateHybridConnectionSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a Hybrid Connection from this site.
		/// Description for Removes a Hybrid Connection from this site.
		/// WebApps_DeleteHybridConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="namespaceName">The namespace for this hybrid connection.</param>
		/// <param name="relayName">The relay name for this hybrid connection.</param>
		/// <param name="slot">The name of the slot for the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted hybrid connection.</returns>
		public async Task WebApps_DeleteHybridConnectionSlotAsync(string resourceGroupName, string name, string namespaceName, string relayName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Hybrid Connection using a Service Bus relay.
		/// Description for Creates a new Hybrid Connection using a Service Bus relay.
		/// WebApps_UpdateHybridConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="namespaceName">The namespace for this hybrid connection.</param>
		/// <param name="relayName">The relay name for this hybrid connection.</param>
		/// <param name="slot">The name of the slot for the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The details of the hybrid connection.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateHybridConnectionSlotReturn> WebApps_UpdateHybridConnectionSlotAsync(string resourceGroupName, string name, string namespaceName, string relayName, string slot, string subscriptionId, string api_version, WebApps_UpdateHybridConnectionSlotPatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateHybridConnectionSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves all Service Bus Hybrid Connections used by this Web App.
		/// Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
		/// WebApps_ListHybridConnectionsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="slot">The name of the slot for the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListHybridConnectionsSlotReturn> WebApps_ListHybridConnectionsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridConnectionRelays&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListHybridConnectionsSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets hybrid connections configured for an app (or deployment slot, if specified).
		/// Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
		/// WebApps_ListRelayServiceConnectionsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RelayServiceConnectionEntity> WebApps_ListRelayServiceConnectionsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridconnection&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RelayServiceConnectionEntity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a hybrid connection configuration by its name.
		/// Description for Gets a hybrid connection configuration by its name.
		/// WebApps_GetRelayServiceConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="entityName">Name of the hybrid connection.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RelayServiceConnectionEntity> WebApps_GetRelayServiceConnectionSlotAsync(string resourceGroupName, string name, string entityName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridconnection/"+ (entityName==null? "" : System.Uri.EscapeDataString(entityName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RelayServiceConnectionEntity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
		/// Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
		/// WebApps_CreateOrUpdateRelayServiceConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="entityName">Name of the hybrid connection configuration.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of the hybrid connection configuration.</param>
		/// <returns>OK</returns>
		public async Task<RelayServiceConnectionEntity> WebApps_CreateOrUpdateRelayServiceConnectionSlotAsync(string resourceGroupName, string name, string entityName, string slot, string subscriptionId, string api_version, RelayServiceConnectionEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridconnection/"+ (entityName==null? "" : System.Uri.EscapeDataString(entityName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RelayServiceConnectionEntity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a relay service connection by its name.
		/// Description for Deletes a relay service connection by its name.
		/// WebApps_DeleteRelayServiceConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="entityName">Name of the hybrid connection configuration.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted relay service connection.</returns>
		public async Task WebApps_DeleteRelayServiceConnectionSlotAsync(string resourceGroupName, string name, string entityName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridconnection/"+ (entityName==null? "" : System.Uri.EscapeDataString(entityName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
		/// Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
		/// WebApps_UpdateRelayServiceConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="entityName">Name of the hybrid connection configuration.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of the hybrid connection configuration.</param>
		/// <returns>OK</returns>
		public async Task<RelayServiceConnectionEntity> WebApps_UpdateRelayServiceConnectionSlotAsync(string resourceGroupName, string name, string entityName, string slot, string subscriptionId, string api_version, RelayServiceConnectionEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/hybridconnection/"+ (entityName==null? "" : System.Uri.EscapeDataString(entityName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RelayServiceConnectionEntity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all scale-out instances of an app.
		/// Description for Gets all scale-out instances of an app.
		/// WebApps_ListInstanceIdentifiersSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebAppInstanceCollection> WebApps_ListInstanceIdentifiersSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebAppInstanceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all scale-out instances of an app.
		/// Description for Gets all scale-out instances of an app.
		/// WebApps_GetInstanceInfoSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebSiteInstanceStatus> WebApps_GetInstanceInfoSlotAsync(string resourceGroupName, string name, string instanceId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebSiteInstanceStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the status of the last MSDeploy operation.
		/// Description for Get the status of the last MSDeploy operation.
		/// WebApps_GetInstanceMsDeployStatusSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="instanceId">ID of web app instance.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<MSDeployStatus> WebApps_GetInstanceMsDeployStatusSlotAsync(string resourceGroupName, string name, string slot, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/extensions/MSDeploy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MSDeployStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invoke the MSDeploy web app extension.
		/// Description for Invoke the MSDeploy web app extension.
		/// WebApps_CreateInstanceMSDeployOperationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="instanceId">ID of web app instance.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of MSDeploy operation</param>
		public async Task WebApps_CreateInstanceMSDeployOperationSlotAsync(string resourceGroupName, string name, string slot, string instanceId, string subscriptionId, string api_version, MSDeploy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/extensions/MSDeploy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the MSDeploy Log for the last MSDeploy operation.
		/// Description for Get the MSDeploy Log for the last MSDeploy operation.
		/// WebApps_GetInstanceMSDeployLogSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="instanceId">ID of web app instance.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>MSDeploy log returned.</returns>
		public async Task<MSDeployLog> WebApps_GetInstanceMSDeployLogSlotAsync(string resourceGroupName, string name, string slot, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/extensions/MSDeploy/log&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MSDeployLog>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
		/// Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
		/// WebApps_ListInstanceProcessesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Process terminated.</returns>
		public async Task<ProcessInfoCollection> WebApps_ListInstanceProcessesSlotAsync(string resourceGroupName, string name, string slot, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process information by its ID for a specific scaled-out instance in a web site.
		/// Description for Get process information by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetInstanceProcessSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Process information returned.</returns>
		public async Task<ProcessInfo> WebApps_GetInstanceProcessSlotAsync(string resourceGroupName, string name, string processId, string slot, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
		/// Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
		/// WebApps_DeleteInstanceProcessSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteInstanceProcessSlotAsync(string resourceGroupName, string name, string processId, string slot, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
		/// Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetInstanceProcessDumpSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<string> WebApps_GetInstanceProcessDumpSlotAsync(string resourceGroupName, string name, string processId, string slot, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/dump&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List module information for a process by its ID for a specific scaled-out instance in a web site.
		/// Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_ListInstanceProcessModulesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Module information returned.</returns>
		public async Task<ProcessModuleInfoCollection> WebApps_ListInstanceProcessModulesSlotAsync(string resourceGroupName, string name, string processId, string slot, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/modules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessModuleInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process information by its ID for a specific scaled-out instance in a web site.
		/// Description for Get process information by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetInstanceProcessModuleSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="baseAddress">Module base address.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Module information returned.</returns>
		public async Task<ProcessModuleInfo> WebApps_GetInstanceProcessModuleSlotAsync(string resourceGroupName, string name, string processId, string baseAddress, string slot, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/modules/"+ (baseAddress==null? "" : System.Uri.EscapeDataString(baseAddress))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessModuleInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the threads in a process by its ID for a specific scaled-out instance in a web site.
		/// Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_ListInstanceProcessThreadsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="instanceId">ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Thread information returned.</returns>
		public async Task<ProcessThreadInfoCollection> WebApps_ListInstanceProcessThreadsSlotAsync(string resourceGroupName, string name, string processId, string slot, string instanceId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/threads&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessThreadInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shows whether an app can be cloned to another resource group or subscription.
		/// Description for Shows whether an app can be cloned to another resource group or subscription.
		/// WebApps_IsCloneableSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. By default, this API returns information on the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<SiteCloneability> WebApps_IsCloneableSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/iscloneable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteCloneability>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets existing backups of an app.
		/// Description for Gets existing backups of an app.
		/// WebApps_ListSiteBackupsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listbackups
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<BackupItemCollection> WebApps_ListSiteBackupsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/listbackups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BackupItemCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This is to allow calling via powershell and ARM template.
		/// Description for This is to allow calling via powershell and ARM template.
		/// WebApps_ListSyncFunctionTriggersSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<FunctionSecrets> WebApps_ListSyncFunctionTriggersSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/listsyncfunctiontriggerstatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FunctionSecrets>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
		/// Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled
		/// WebApps_GetMigrateMySqlStatusSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<MigrateMySqlStatus> WebApps_GetMigrateMySqlStatusSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/migratemysql/status&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MigrateMySqlStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Swift Virtual Network connection.
		/// Description for Gets a Swift Virtual Network connection.
		/// WebApps_GetSwiftVirtualNetworkConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<SwiftVirtualNetwork> WebApps_GetSwiftVirtualNetworkConnectionSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkConfig/virtualNetwork&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SwiftVirtualNetwork>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
		/// in use by another App Service Plan other than the one this App is in.
		/// Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
		/// in use by another App Service Plan other than the one this App is in.
		/// WebApps_CreateOrUpdateSwiftVirtualNetworkConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Properties of the Virtual Network connection. See example.</param>
		/// <returns>OK</returns>
		public async Task<SwiftVirtualNetwork> WebApps_CreateOrUpdateSwiftVirtualNetworkConnectionSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SwiftVirtualNetwork requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkConfig/virtualNetwork&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SwiftVirtualNetwork>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Swift Virtual Network connection from an app (or deployment slot).
		/// Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
		/// WebApps_DeleteSwiftVirtualNetworkSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted virtual network.</returns>
		public async Task WebApps_DeleteSwiftVirtualNetworkSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkConfig/virtualNetwork&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
		/// in use by another App Service Plan other than the one this App is in.
		/// Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
		/// in use by another App Service Plan other than the one this App is in.
		/// WebApps_UpdateSwiftVirtualNetworkConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Properties of the Virtual Network connection. See example.</param>
		/// <returns>OK</returns>
		public async Task<SwiftVirtualNetwork> WebApps_UpdateSwiftVirtualNetworkConnectionSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SwiftVirtualNetwork requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkConfig/virtualNetwork&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SwiftVirtualNetwork>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all network features used by the app (or deployment slot, if specified).
		/// Description for Gets all network features used by the app (or deployment slot, if specified).
		/// WebApps_ListNetworkFeaturesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="view">The type of view. This can either be "summary" or "detailed".</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<NetworkFeatures> WebApps_ListNetworkFeaturesSlotAsync(string resourceGroupName, string name, string view, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkFeatures/"+ (view==null? "" : System.Uri.EscapeDataString(view))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkFeatures>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// WebApps_GetNetworkTraceOperationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="operationId">GUID of the operation.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_GetNetworkTraceOperationSlotAsync(string resourceGroupName, string name, string operationId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkTrace/operationresults/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start capturing network packets for the site (To be deprecated).
		/// Description for Start capturing network packets for the site (To be deprecated).
		/// WebApps_StartWebSiteNetworkTraceSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="durationInSeconds">The duration to keep capturing in seconds.</param>
		/// <param name="slot">The name of the slot for this web app.</param>
		/// <param name="maxFrameLength">The maximum frame length in bytes (Optional).</param>
		/// <param name="sasUrl">The Blob URL to store capture file.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<string> WebApps_StartWebSiteNetworkTraceSlotAsync(string resourceGroupName, string name, int durationInSeconds, string slot, int maxFrameLength, string sasUrl, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkTrace/start&durationInSeconds="+durationInSeconds+"&maxFrameLength="+maxFrameLength+"&sasUrl=" + (sasUrl==null? "" : System.Uri.EscapeDataString(sasUrl))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start capturing network packets for the site.
		/// Description for Start capturing network packets for the site.
		/// WebApps_StartWebSiteNetworkTraceOperationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="durationInSeconds">The duration to keep capturing in seconds.</param>
		/// <param name="slot">The name of the slot for this web app.</param>
		/// <param name="maxFrameLength">The maximum frame length in bytes (Optional).</param>
		/// <param name="sasUrl">The Blob URL to store capture file.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_StartWebSiteNetworkTraceOperationSlotAsync(string resourceGroupName, string name, int durationInSeconds, string slot, int maxFrameLength, string sasUrl, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkTrace/startOperation&durationInSeconds="+durationInSeconds+"&maxFrameLength="+maxFrameLength+"&sasUrl=" + (sasUrl==null? "" : System.Uri.EscapeDataString(sasUrl))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop ongoing capturing network packets for the site.
		/// Description for Stop ongoing capturing network packets for the site.
		/// WebApps_StopWebSiteNetworkTraceSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="slot">The name of the slot for this web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Stopped.</returns>
		public async Task WebApps_StopWebSiteNetworkTraceSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkTrace/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// WebApps_GetNetworkTracesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="operationId">GUID of the operation.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_GetNetworkTracesSlotAsync(string resourceGroupName, string name, string operationId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkTrace/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// WebApps_GetNetworkTraceOperationSlotV2 subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="operationId">GUID of the operation.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_GetNetworkTraceOperationSlotV2Async(string resourceGroupName, string name, string operationId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkTraces/current/operationresults/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
		/// WebApps_GetNetworkTracesSlotV2 subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="operationId">GUID of the operation.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_GetNetworkTracesSlotV2Async(string resourceGroupName, string name, string operationId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/networkTraces/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a new publishing password for an app (or deployment slot, if specified).
		/// Description for Generates a new publishing password for an app (or deployment slot, if specified).
		/// WebApps_GenerateNewSitePublishingPasswordSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully generate new password.</returns>
		public async Task WebApps_GenerateNewSitePublishingPasswordSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/newpassword&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets perfmon counters for web app.
		/// Description for Gets perfmon counters for web app.
		/// WebApps_ListPerfMonCountersSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="filter">Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PerfMonCounterCollection> WebApps_ListPerfMonCountersSlotAsync(string resourceGroupName, string name, string slot, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/perfcounters&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PerfMonCounterCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets web app's event logs.
		/// Description for Gets web app's event logs.
		/// WebApps_GetSitePhpErrorLogFlagSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SitePhpErrorLogFlag> WebApps_GetSitePhpErrorLogFlagSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/phplogging&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SitePhpErrorLogFlag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the premier add-ons of an app.
		/// Description for Gets the premier add-ons of an app.
		/// WebApps_ListPremierAddOnsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PremierAddOn> WebApps_ListPremierAddOnsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/premieraddons&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremierAddOn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a named add-on of an app.
		/// Description for Gets a named add-on of an app.
		/// WebApps_GetPremierAddOnSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="premierAddOnName">Add-on name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PremierAddOn> WebApps_GetPremierAddOnSlotAsync(string resourceGroupName, string name, string premierAddOnName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/premieraddons/"+ (premierAddOnName==null? "" : System.Uri.EscapeDataString(premierAddOnName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremierAddOn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a named add-on of an app.
		/// Description for Updates a named add-on of an app.
		/// WebApps_AddPremierAddOnSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="premierAddOnName">Add-on name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the edited premier add-on.</param>
		/// <returns>OK</returns>
		public async Task<PremierAddOn> WebApps_AddPremierAddOnSlotAsync(string resourceGroupName, string name, string premierAddOnName, string slot, string subscriptionId, string api_version, PremierAddOn requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/premieraddons/"+ (premierAddOnName==null? "" : System.Uri.EscapeDataString(premierAddOnName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremierAddOn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a premier add-on from an app.
		/// Description for Delete a premier add-on from an app.
		/// WebApps_DeletePremierAddOnSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="premierAddOnName">Add-on name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted premier add-on.</returns>
		public async Task WebApps_DeletePremierAddOnSlotAsync(string resourceGroupName, string name, string premierAddOnName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/premieraddons/"+ (premierAddOnName==null? "" : System.Uri.EscapeDataString(premierAddOnName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a named add-on of an app.
		/// Description for Updates a named add-on of an app.
		/// WebApps_UpdatePremierAddOnSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="premierAddOnName">Add-on name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">A JSON representation of the edited premier add-on.</param>
		/// <returns>OK</returns>
		public async Task<PremierAddOn> WebApps_UpdatePremierAddOnSlotAsync(string resourceGroupName, string name, string premierAddOnName, string slot, string subscriptionId, string api_version, PremierAddOnPatchResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/premieraddons/"+ (premierAddOnName==null? "" : System.Uri.EscapeDataString(premierAddOnName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PremierAddOn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets data around private site access enablement and authorized Virtual Networks that can access the site.
		/// Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
		/// WebApps_GetPrivateAccessSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="slot">The name of the slot for the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PrivateAccess> WebApps_GetPrivateAccessSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/privateAccess/virtualNetworks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateAccess>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets data around private site access enablement and authorized Virtual Networks that can access the site.
		/// Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
		/// WebApps_PutPrivateAccessVnetSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="slot">The name of the slot for the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The information for the private access</param>
		/// <returns>OK</returns>
		public async Task<PrivateAccess> WebApps_PutPrivateAccessVnetSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, PrivateAccess requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/privateAccess/virtualNetworks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateAccess>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
		/// Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
		/// WebApps_ListProcessesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Process terminated.</returns>
		public async Task<ProcessInfoCollection> WebApps_ListProcessesSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/processes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process information by its ID for a specific scaled-out instance in a web site.
		/// Description for Get process information by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetProcessSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Process information returned.</returns>
		public async Task<ProcessInfo> WebApps_GetProcessSlotAsync(string resourceGroupName, string name, string processId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
		/// Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
		/// WebApps_DeleteProcessSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteProcessSlotAsync(string resourceGroupName, string name, string processId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
		/// Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetProcessDumpSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<string> WebApps_GetProcessDumpSlotAsync(string resourceGroupName, string name, string processId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/dump&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List module information for a process by its ID for a specific scaled-out instance in a web site.
		/// Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_ListProcessModulesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Module information returned.</returns>
		public async Task<ProcessModuleInfoCollection> WebApps_ListProcessModulesSlotAsync(string resourceGroupName, string name, string processId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/modules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessModuleInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get process information by its ID for a specific scaled-out instance in a web site.
		/// Description for Get process information by its ID for a specific scaled-out instance in a web site.
		/// WebApps_GetProcessModuleSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="baseAddress">Module base address.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Module information returned.</returns>
		public async Task<ProcessModuleInfo> WebApps_GetProcessModuleSlotAsync(string resourceGroupName, string name, string processId, string baseAddress, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/modules/"+ (baseAddress==null? "" : System.Uri.EscapeDataString(baseAddress))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessModuleInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the threads in a process by its ID for a specific scaled-out instance in a web site.
		/// Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
		/// WebApps_ListProcessThreadsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="processId">PID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Thread information returned.</returns>
		public async Task<ProcessThreadInfoCollection> WebApps_ListProcessThreadsSlotAsync(string resourceGroupName, string name, string processId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/processes/"+ (processId==null? "" : System.Uri.EscapeDataString(processId))+"/threads&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcessThreadInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get public certificates for an app or a deployment slot.
		/// Description for Get public certificates for an app or a deployment slot.
		/// WebApps_ListPublicCertificatesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PublicCertificateCollection> WebApps_ListPublicCertificatesSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/publicCertificates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicCertificateCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the named public certificate for an app (or deployment slot, if specified).
		/// Description for Get the named public certificate for an app (or deployment slot, if specified).
		/// WebApps_GetPublicCertificateSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.</param>
		/// <param name="publicCertificateName">Public certificate name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PublicCertificate> WebApps_GetPublicCertificateSlotAsync(string resourceGroupName, string name, string slot, string publicCertificateName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/publicCertificates/"+ (publicCertificateName==null? "" : System.Uri.EscapeDataString(publicCertificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicCertificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a hostname binding for an app.
		/// Description for Creates a hostname binding for an app.
		/// WebApps_CreateOrUpdatePublicCertificateSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="publicCertificateName">Public certificate name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Public certificate details. This is the JSON representation of a PublicCertificate object.</param>
		/// <returns>OK</returns>
		public async Task<PublicCertificate> WebApps_CreateOrUpdatePublicCertificateSlotAsync(string resourceGroupName, string name, string publicCertificateName, string slot, string subscriptionId, string api_version, PublicCertificate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/publicCertificates/"+ (publicCertificateName==null? "" : System.Uri.EscapeDataString(publicCertificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicCertificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a hostname binding for an app.
		/// Description for Deletes a hostname binding for an app.
		/// WebApps_DeletePublicCertificateSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.</param>
		/// <param name="publicCertificateName">Public certificate name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted hostname binding.</returns>
		public async Task WebApps_DeletePublicCertificateSlotAsync(string resourceGroupName, string name, string slot, string publicCertificateName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/publicCertificates/"+ (publicCertificateName==null? "" : System.Uri.EscapeDataString(publicCertificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the publishing profile for an app (or deployment slot, if specified).
		/// Description for Gets the publishing profile for an app (or deployment slot, if specified).
		/// WebApps_ListPublishingProfileXmlWithSecretsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.</param>
		/// <returns>OK</returns>
		public async Task WebApps_ListPublishingProfileXmlWithSecretsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, CsmPublishingProfileOptions requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/publishxml&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
		/// Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
		/// WebApps_ResetSlotConfigurationSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task WebApps_ResetSlotConfigurationSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/resetSlotConfig&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restarts an app (or deployment slot, if specified).
		/// Description for Restarts an app (or deployment slot, if specified).
		/// WebApps_RestartSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will restart the production slot.</param>
		/// <param name="softRestart">Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.</param>
		/// <param name="synchronous">Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully restarted app.</returns>
		public async Task WebApps_RestartSlotAsync(string resourceGroupName, string name, string slot, bool softRestart, bool synchronous, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/restart&softRestart="+softRestart+"&synchronous="+synchronous+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores an app from a backup blob in Azure Storage.
		/// Description for Restores an app from a backup blob in Azure Storage.
		/// WebApps_RestoreFromBackupBlobSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Information on restore request .</param>
		/// <returns>Restore operation started.</returns>
		public async Task WebApps_RestoreFromBackupBlobSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, RestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/restoreFromBackupBlob&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a deleted web app to this web app.
		/// Description for Restores a deleted web app to this web app.
		/// WebApps_RestoreFromDeletedAppSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Deleted web app restore information.</param>
		/// <returns>Restore operation started.</returns>
		public async Task WebApps_RestoreFromDeletedAppSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, DeletedAppRestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/restoreFromDeletedApp&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a web app from a snapshot.
		/// Description for Restores a web app from a snapshot.
		/// WebApps_RestoreSnapshotSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.</param>
		/// <returns>Restore operation started.</returns>
		public async Task WebApps_RestoreSnapshotSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SnapshotRestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/restoreSnapshot&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of siteextensions for a web site, or a deployment slot.
		/// Description for Get list of siteextensions for a web site, or a deployment slot.
		/// WebApps_ListSiteExtensionsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API uses the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>SiteExtension information returned.</returns>
		public async Task<SiteExtensionInfoCollection> WebApps_ListSiteExtensionsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/siteextensions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteExtensionInfoCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get site extension information by its ID for a web site, or a deployment slot.
		/// Description for Get site extension information by its ID for a web site, or a deployment slot.
		/// WebApps_GetSiteExtensionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="siteExtensionId">Site extension name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API uses the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>SiteExtension information returned.</returns>
		public async Task<SiteExtensionInfo> WebApps_GetSiteExtensionSlotAsync(string resourceGroupName, string name, string siteExtensionId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/siteextensions/"+ (siteExtensionId==null? "" : System.Uri.EscapeDataString(siteExtensionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteExtensionInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Install site extension on a web site, or a deployment slot.
		/// Description for Install site extension on a web site, or a deployment slot.
		/// WebApps_InstallSiteExtensionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="siteExtensionId">Site extension name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API uses the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Site Extension created.</returns>
		public async Task<SiteExtensionInfo> WebApps_InstallSiteExtensionSlotAsync(string resourceGroupName, string name, string siteExtensionId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/siteextensions/"+ (siteExtensionId==null? "" : System.Uri.EscapeDataString(siteExtensionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteExtensionInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a site extension from a web site, or a deployment slot.
		/// Description for Remove a site extension from a web site, or a deployment slot.
		/// WebApps_DeleteSiteExtensionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="siteExtensionId">Site extension name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_DeleteSiteExtensionSlotAsync(string resourceGroupName, string name, string siteExtensionId, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/siteextensions/"+ (siteExtensionId==null? "" : System.Uri.EscapeDataString(siteExtensionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copies a deployment slot to another deployment slot of an app.
		/// Description for Copies a deployment slot to another deployment slot of an app.
		/// WebApps_CopySlotSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotcopy
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the source slot. If a slot is not specified, the production slot is used as the source slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON object that contains the target slot name and site config properties to override the source slot config. See example.</param>
		/// <returns>OK.</returns>
		public async Task WebApps_CopySlotSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, CsmCopySlotEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/slotcopy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the difference in configuration settings between two web app slots.
		/// Description for Get the difference in configuration settings between two web app slots.
		/// WebApps_ListSlotDifferencesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the source slot. If a slot is not specified, the production slot is used as the source slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON object that contains the target slot name. See example.</param>
		/// <returns>OK</returns>
		public async Task<SlotDifferenceCollection> WebApps_ListSlotDifferencesSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, CsmSlotEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/slotsdiffs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlotDifferenceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Swaps two deployment slots of an app.
		/// Description for Swaps two deployment slots of an app.
		/// WebApps_SwapSlotSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the source slot. If a slot is not specified, the production slot is used as the source slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON object that contains the target slot name. See example.</param>
		/// <returns>OK.</returns>
		public async Task WebApps_SwapSlotSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, CsmSlotEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/slotsswap&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all Snapshots to the user.
		/// Description for Returns all Snapshots to the user.
		/// WebApps_ListSnapshotsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Website Name.</param>
		/// <param name="slot">Website Slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SnapshotCollection> WebApps_ListSnapshotsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/snapshots&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SnapshotCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all Snapshots to the user from DRSecondary endpoint.
		/// Description for Returns all Snapshots to the user from DRSecondary endpoint.
		/// WebApps_ListSnapshotsFromDRSecondarySlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Website Name.</param>
		/// <param name="slot">Website Slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SnapshotCollection> WebApps_ListSnapshotsFromDRSecondarySlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/snapshotsdr&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SnapshotCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the source control configuration of an app.
		/// Description for Gets the source control configuration of an app.
		/// WebApps_GetSourceControlSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully retrieved source control for web app.</returns>
		public async Task<SiteSourceControl> WebApps_GetSourceControlSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/sourcecontrols/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteSourceControl>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the source control configuration of an app.
		/// Description for Updates the source control configuration of an app.
		/// WebApps_CreateOrUpdateSourceControlSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON representation of a SiteSourceControl object. See example.</param>
		/// <returns>Successfully created or updated source control for web app.</returns>
		public async Task<SiteSourceControl> WebApps_CreateOrUpdateSourceControlSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SiteSourceControl requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/sourcecontrols/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteSourceControl>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the source control configuration of an app.
		/// Description for Deletes the source control configuration of an app.
		/// WebApps_DeleteSourceControlSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted source control for web app.</returns>
		public async Task WebApps_DeleteSourceControlSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/sourcecontrols/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the source control configuration of an app.
		/// Description for Updates the source control configuration of an app.
		/// WebApps_UpdateSourceControlSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON representation of a SiteSourceControl object. See example.</param>
		/// <returns>Successfully created or updated source control for web app.</returns>
		public async Task<SiteSourceControl> WebApps_UpdateSourceControlSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version, SiteSourceControl requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/sourcecontrols/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteSourceControl>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an app (or deployment slot, if specified).
		/// Description for Starts an app (or deployment slot, if specified).
		/// WebApps_StartSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will start the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully started app.</returns>
		public async Task WebApps_StartSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start capturing network packets for the site.
		/// Description for Start capturing network packets for the site.
		/// WebApps_StartNetworkTraceSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="durationInSeconds">The duration to keep capturing in seconds.</param>
		/// <param name="slot">The name of the slot for this web app.</param>
		/// <param name="maxFrameLength">The maximum frame length in bytes (Optional).</param>
		/// <param name="sasUrl">The Blob URL to store capture file.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_StartNetworkTraceSlotAsync(string resourceGroupName, string name, int durationInSeconds, string slot, int maxFrameLength, string sasUrl, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/startNetworkTrace&durationInSeconds="+durationInSeconds+"&maxFrameLength="+maxFrameLength+"&sasUrl=" + (sasUrl==null? "" : System.Uri.EscapeDataString(sasUrl))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an app (or deployment slot, if specified).
		/// Description for Stops an app (or deployment slot, if specified).
		/// WebApps_StopSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will stop the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully stopped app.</returns>
		public async Task WebApps_StopSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop ongoing capturing network packets for the site.
		/// Description for Stop ongoing capturing network packets for the site.
		/// WebApps_StopNetworkTraceSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="slot">The name of the slot for this web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Stopped.</returns>
		public async Task WebApps_StopNetworkTraceSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/stopNetworkTrace&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sync web app repository.
		/// Description for Sync web app repository.
		/// WebApps_SyncRepositorySlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="slot">Name of web app slot. If not specified then will default to production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully sync source control.</returns>
		public async Task WebApps_SyncRepositorySlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/sync&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Syncs function trigger metadata to the management database
		/// Description for Syncs function trigger metadata to the management database
		/// WebApps_SyncFunctionTriggersSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_SyncFunctionTriggersSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/syncfunctiontriggers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List triggered web jobs for an app, or a deployment slot.
		/// Description for List triggered web jobs for an app, or a deployment slot.
		/// WebApps_ListTriggeredWebJobsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<TriggeredWebJobCollection> WebApps_ListTriggeredWebJobsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/triggeredwebjobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TriggeredWebJobCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a triggered web job by its ID for an app, or a deployment slot.
		/// Description for Gets a triggered web job by its ID for an app, or a deployment slot.
		/// WebApps_GetTriggeredWebJobSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API uses the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task<TriggeredWebJob> WebApps_GetTriggeredWebJobSlotAsync(string resourceGroupName, string name, string webJobName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TriggeredWebJob>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a triggered web job by its ID for an app, or a deployment slot.
		/// Description for Delete a triggered web job by its ID for an app, or a deployment slot.
		/// WebApps_DeleteTriggeredWebJobSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API deletes web job for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted continuous web job.</returns>
		public async Task WebApps_DeleteTriggeredWebJobSlotAsync(string resourceGroupName, string name, string webJobName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List a triggered web job's history for an app, or a deployment slot.
		/// Description for List a triggered web job's history for an app, or a deployment slot.
		/// WebApps_ListTriggeredWebJobHistorySlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API uses the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task<TriggeredJobHistoryCollection> WebApps_ListTriggeredWebJobHistorySlotAsync(string resourceGroupName, string name, string webJobName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/history&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TriggeredJobHistoryCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a triggered web job's history by its ID for an app, , or a deployment slot.
		/// Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
		/// WebApps_GetTriggeredWebJobHistorySlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="id">History ID.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API uses the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task<TriggeredJobHistory> WebApps_GetTriggeredWebJobHistorySlotAsync(string resourceGroupName, string name, string webJobName, string id, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/history/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TriggeredJobHistory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Run a triggered web job for an app, or a deployment slot.
		/// Description for Run a triggered web job for an app, or a deployment slot.
		/// WebApps_RunTriggeredWebJobSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API uses the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Run a triggered web job.</returns>
		public async Task WebApps_RunTriggeredWebJobSlotAsync(string resourceGroupName, string name, string webJobName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/run&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the quota usage information of an app (or deployment slot, if specified).
		/// Description for Gets the quota usage information of an app (or deployment slot, if specified).
		/// WebApps_ListUsagesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.</param>
		/// <param name="filter">Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListUsagesSlotReturn> WebApps_ListUsagesSlotAsync(string resourceGroupName, string name, string slot, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/usages&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListUsagesSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the virtual networks the app (or deployment slot) is connected to.
		/// Description for Gets the virtual networks the app (or deployment slot) is connected to.
		/// WebApps_ListVnetConnectionsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListVnetConnectionsSlotReturn[]> WebApps_ListVnetConnectionsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/virtualNetworkConnections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListVnetConnectionsSlotReturn[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a virtual network the app (or deployment slot) is connected to by name.
		/// Description for Gets a virtual network the app (or deployment slot) is connected to by name.
		/// WebApps_GetVnetConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the virtual network.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_GetVnetConnectionSlotReturn> WebApps_GetVnetConnectionSlotAsync(string resourceGroupName, string name, string vnetName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetVnetConnectionSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
		/// Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
		/// WebApps_CreateOrUpdateVnetConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of an existing Virtual Network.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Properties of the Virtual Network connection. See example.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_CreateOrUpdateVnetConnectionSlotReturn> WebApps_CreateOrUpdateVnetConnectionSlotAsync(string resourceGroupName, string name, string vnetName, string slot, string subscriptionId, string api_version, WebApps_CreateOrUpdateVnetConnectionSlotPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateVnetConnectionSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a connection from an app (or deployment slot to a named virtual network.
		/// Description for Deletes a connection from an app (or deployment slot to a named virtual network.
		/// WebApps_DeleteVnetConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the virtual network.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted virtual network.</returns>
		public async Task WebApps_DeleteVnetConnectionSlotAsync(string resourceGroupName, string name, string vnetName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
		/// Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
		/// WebApps_UpdateVnetConnectionSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of an existing Virtual Network.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Properties of the Virtual Network connection. See example.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateVnetConnectionSlotReturn> WebApps_UpdateVnetConnectionSlotAsync(string resourceGroupName, string name, string vnetName, string slot, string subscriptionId, string api_version, WebApps_UpdateVnetConnectionSlotPatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateVnetConnectionSlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an app's Virtual Network gateway.
		/// Description for Gets an app's Virtual Network gateway.
		/// WebApps_GetVnetConnectionGatewaySlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="gatewayName">Name of the gateway. Currently, the only supported string is "primary".</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<WebApps_GetVnetConnectionGatewaySlotReturn> WebApps_GetVnetConnectionGatewaySlotAsync(string resourceGroupName, string name, string vnetName, string gatewayName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetVnetConnectionGatewaySlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
		/// Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
		/// WebApps_CreateOrUpdateVnetConnectionGatewaySlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="gatewayName">Name of the gateway. Currently, the only supported string is "primary".</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The properties to update this gateway with.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_CreateOrUpdateVnetConnectionGatewaySlotReturn> WebApps_CreateOrUpdateVnetConnectionGatewaySlotAsync(string resourceGroupName, string name, string vnetName, string gatewayName, string slot, string subscriptionId, string api_version, WebApps_CreateOrUpdateVnetConnectionGatewaySlotPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateVnetConnectionGatewaySlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
		/// Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
		/// WebApps_UpdateVnetConnectionGatewaySlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="gatewayName">Name of the gateway. Currently, the only supported string is "primary".</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API will add or update a gateway for the production slot's Virtual Network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The properties to update this gateway with.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateVnetConnectionGatewaySlotReturn> WebApps_UpdateVnetConnectionGatewaySlotAsync(string resourceGroupName, string name, string vnetName, string gatewayName, string slot, string subscriptionId, string api_version, WebApps_UpdateVnetConnectionGatewaySlotPatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateVnetConnectionGatewaySlotReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List webjobs for an app, or a deployment slot.
		/// Description for List webjobs for an app, or a deployment slot.
		/// WebApps_ListWebJobsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebJobCollection> WebApps_ListWebJobsSlotAsync(string resourceGroupName, string name, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/webjobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebJobCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get webjob information for an app, or a deployment slot.
		/// Description for Get webjob information for an app, or a deployment slot.
		/// WebApps_GetWebJobSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of the web job.</param>
		/// <param name="slot">Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebJob> WebApps_GetWebJobSlotAsync(string resourceGroupName, string name, string webJobName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/webjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebJob>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the difference in configuration settings between two web app slots.
		/// Description for Get the difference in configuration settings between two web app slots.
		/// WebApps_ListSlotDifferencesFromProduction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON object that contains the target slot name. See example.</param>
		/// <returns>OK</returns>
		public async Task<SlotDifferenceCollection> WebApps_ListSlotDifferencesFromProductionAsync(string resourceGroupName, string name, string subscriptionId, string api_version, CsmSlotEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slotsdiffs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlotDifferenceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Swaps two deployment slots of an app.
		/// Description for Swaps two deployment slots of an app.
		/// WebApps_SwapSlotWithProduction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON object that contains the target slot name. See example.</param>
		/// <returns>OK.</returns>
		public async Task WebApps_SwapSlotWithProductionAsync(string resourceGroupName, string name, string subscriptionId, string api_version, CsmSlotEntity requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/slotsswap&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all Snapshots to the user.
		/// Description for Returns all Snapshots to the user.
		/// WebApps_ListSnapshots subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Website Name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SnapshotCollection> WebApps_ListSnapshotsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/snapshots&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SnapshotCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all Snapshots to the user from DRSecondary endpoint.
		/// Description for Returns all Snapshots to the user from DRSecondary endpoint.
		/// WebApps_ListSnapshotsFromDRSecondary subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Website Name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SnapshotCollection> WebApps_ListSnapshotsFromDRSecondaryAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/snapshotsdr&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SnapshotCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the source control configuration of an app.
		/// Description for Gets the source control configuration of an app.
		/// WebApps_GetSourceControl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully retrieved source control for web app.</returns>
		public async Task<SiteSourceControl> WebApps_GetSourceControlAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/sourcecontrols/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteSourceControl>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the source control configuration of an app.
		/// Description for Updates the source control configuration of an app.
		/// WebApps_CreateOrUpdateSourceControl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON representation of a SiteSourceControl object. See example.</param>
		/// <returns>Successfully created or updated source control for web app.</returns>
		public async Task<SiteSourceControl> WebApps_CreateOrUpdateSourceControlAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SiteSourceControl requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/sourcecontrols/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteSourceControl>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the source control configuration of an app.
		/// Description for Deletes the source control configuration of an app.
		/// WebApps_DeleteSourceControl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted source control for web app.</returns>
		public async Task WebApps_DeleteSourceControlAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/sourcecontrols/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the source control configuration of an app.
		/// Description for Updates the source control configuration of an app.
		/// WebApps_UpdateSourceControl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">JSON representation of a SiteSourceControl object. See example.</param>
		/// <returns>Successfully created or updated source control for web app.</returns>
		public async Task<SiteSourceControl> WebApps_UpdateSourceControlAsync(string resourceGroupName, string name, string subscriptionId, string api_version, SiteSourceControl requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/sourcecontrols/web&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SiteSourceControl>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an app (or deployment slot, if specified).
		/// Description for Starts an app (or deployment slot, if specified).
		/// WebApps_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully started app.</returns>
		public async Task WebApps_StartAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start capturing network packets for the site.
		/// Description for Start capturing network packets for the site.
		/// WebApps_StartNetworkTrace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="durationInSeconds">The duration to keep capturing in seconds.</param>
		/// <param name="maxFrameLength">The maximum frame length in bytes (Optional).</param>
		/// <param name="sasUrl">The Blob URL to store capture file.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<NetworkTrace[]> WebApps_StartNetworkTraceAsync(string resourceGroupName, string name, int durationInSeconds, int maxFrameLength, string sasUrl, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/startNetworkTrace&durationInSeconds="+durationInSeconds+"&maxFrameLength="+maxFrameLength+"&sasUrl=" + (sasUrl==null? "" : System.Uri.EscapeDataString(sasUrl))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NetworkTrace[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an app (or deployment slot, if specified).
		/// Description for Stops an app (or deployment slot, if specified).
		/// WebApps_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully stopped app.</returns>
		public async Task WebApps_StopAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop ongoing capturing network packets for the site.
		/// Description for Stop ongoing capturing network packets for the site.
		/// WebApps_StopNetworkTrace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">The name of the web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Stopped.</returns>
		public async Task WebApps_StopNetworkTraceAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/stopNetworkTrace&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sync web app repository.
		/// Description for Sync web app repository.
		/// WebApps_SyncRepository subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of web app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully sync source control.</returns>
		public async Task WebApps_SyncRepositoryAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/sync&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Syncs function trigger metadata to the management database
		/// Description for Syncs function trigger metadata to the management database
		/// WebApps_SyncFunctionTriggers subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task WebApps_SyncFunctionTriggersAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/syncfunctiontriggers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List triggered web jobs for an app, or a deployment slot.
		/// Description for List triggered web jobs for an app, or a deployment slot.
		/// WebApps_ListTriggeredWebJobs subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<TriggeredWebJobCollection> WebApps_ListTriggeredWebJobsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/triggeredwebjobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TriggeredWebJobCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a triggered web job by its ID for an app, or a deployment slot.
		/// Description for Gets a triggered web job by its ID for an app, or a deployment slot.
		/// WebApps_GetTriggeredWebJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task<TriggeredWebJob> WebApps_GetTriggeredWebJobAsync(string resourceGroupName, string name, string webJobName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TriggeredWebJob>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a triggered web job by its ID for an app, or a deployment slot.
		/// Description for Delete a triggered web job by its ID for an app, or a deployment slot.
		/// WebApps_DeleteTriggeredWebJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted continuous web job.</returns>
		public async Task WebApps_DeleteTriggeredWebJobAsync(string resourceGroupName, string name, string webJobName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List a triggered web job's history for an app, or a deployment slot.
		/// Description for List a triggered web job's history for an app, or a deployment slot.
		/// WebApps_ListTriggeredWebJobHistory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task<TriggeredJobHistoryCollection> WebApps_ListTriggeredWebJobHistoryAsync(string resourceGroupName, string name, string webJobName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/history&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TriggeredJobHistoryCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a triggered web job's history by its ID for an app, , or a deployment slot.
		/// Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
		/// WebApps_GetTriggeredWebJobHistory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="id">History ID.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Found continuous web job.</returns>
		public async Task<TriggeredJobHistory> WebApps_GetTriggeredWebJobHistoryAsync(string resourceGroupName, string name, string webJobName, string id, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/history/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TriggeredJobHistory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Run a triggered web job for an app, or a deployment slot.
		/// Description for Run a triggered web job for an app, or a deployment slot.
		/// WebApps_RunTriggeredWebJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of Web Job.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Run a triggered web job.</returns>
		public async Task WebApps_RunTriggeredWebJobAsync(string resourceGroupName, string name, string webJobName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/triggeredwebjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"/run&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the quota usage information of an app (or deployment slot, if specified).
		/// Description for Gets the quota usage information of an app (or deployment slot, if specified).
		/// WebApps_ListUsages subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="filter">Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListUsagesReturn> WebApps_ListUsagesAsync(string resourceGroupName, string name, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/usages&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListUsagesReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the virtual networks the app (or deployment slot) is connected to.
		/// Description for Gets the virtual networks the app (or deployment slot) is connected to.
		/// WebApps_ListVnetConnections subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_ListVnetConnectionsReturn[]> WebApps_ListVnetConnectionsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_ListVnetConnectionsReturn[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a virtual network the app (or deployment slot) is connected to by name.
		/// Description for Gets a virtual network the app (or deployment slot) is connected to by name.
		/// WebApps_GetVnetConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the virtual network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebApps_GetVnetConnectionReturn> WebApps_GetVnetConnectionAsync(string resourceGroupName, string name, string vnetName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetVnetConnectionReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
		/// Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
		/// WebApps_CreateOrUpdateVnetConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of an existing Virtual Network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Properties of the Virtual Network connection. See example.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_CreateOrUpdateVnetConnectionReturn> WebApps_CreateOrUpdateVnetConnectionAsync(string resourceGroupName, string name, string vnetName, string subscriptionId, string api_version, WebApps_CreateOrUpdateVnetConnectionPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateVnetConnectionReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a connection from an app (or deployment slot to a named virtual network.
		/// Description for Deletes a connection from an app (or deployment slot to a named virtual network.
		/// WebApps_DeleteVnetConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the virtual network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted virtual network.</returns>
		public async Task WebApps_DeleteVnetConnectionAsync(string resourceGroupName, string name, string vnetName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
		/// Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
		/// WebApps_UpdateVnetConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of an existing Virtual Network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Properties of the Virtual Network connection. See example.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateVnetConnectionReturn> WebApps_UpdateVnetConnectionAsync(string resourceGroupName, string name, string vnetName, string subscriptionId, string api_version, WebApps_UpdateVnetConnectionPatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateVnetConnectionReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an app's Virtual Network gateway.
		/// Description for Gets an app's Virtual Network gateway.
		/// WebApps_GetVnetConnectionGateway subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="gatewayName">Name of the gateway. Currently, the only supported string is "primary".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<WebApps_GetVnetConnectionGatewayReturn> WebApps_GetVnetConnectionGatewayAsync(string resourceGroupName, string name, string vnetName, string gatewayName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_GetVnetConnectionGatewayReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
		/// Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
		/// WebApps_CreateOrUpdateVnetConnectionGateway subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="gatewayName">Name of the gateway. Currently, the only supported string is "primary".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The properties to update this gateway with.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_CreateOrUpdateVnetConnectionGatewayReturn> WebApps_CreateOrUpdateVnetConnectionGatewayAsync(string resourceGroupName, string name, string vnetName, string gatewayName, string subscriptionId, string api_version, WebApps_CreateOrUpdateVnetConnectionGatewayPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_CreateOrUpdateVnetConnectionGatewayReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
		/// Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
		/// WebApps_UpdateVnetConnectionGateway subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Name of the app.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="gatewayName">Name of the gateway. Currently, the only supported string is "primary".</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">The properties to update this gateway with.</param>
		/// <returns>OK</returns>
		public async Task<WebApps_UpdateVnetConnectionGatewayReturn> WebApps_UpdateVnetConnectionGatewayAsync(string resourceGroupName, string name, string vnetName, string gatewayName, string subscriptionId, string api_version, WebApps_UpdateVnetConnectionGatewayPatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApps_UpdateVnetConnectionGatewayReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List webjobs for an app, or a deployment slot.
		/// Description for List webjobs for an app, or a deployment slot.
		/// WebApps_ListWebJobs subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebJobCollection> WebApps_ListWebJobsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/webjobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebJobCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get webjob information for an app, or a deployment slot.
		/// Description for Get webjob information for an app, or a deployment slot.
		/// WebApps_GetWebJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site name.</param>
		/// <param name="webJobName">Name of the web job.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<WebJob> WebApps_GetWebJobAsync(string resourceGroupName, string name, string webJobName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/webjobs/"+ (webJobName==null? "" : System.Uri.EscapeDataString(webJobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebJob>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class WebApps_ListReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WebApps_ListReturnValue[] WebApps_ListReturnValue { get; set; }
	}
	
	public class WebApps_ListReturnValue
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_ListReturnValueIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListReturnValueIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_ListReturnValueIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_ListReturnValueIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_ListByResourceGroupReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WebApps_ListByResourceGroupReturnValue[] WebApps_ListByResourceGroupReturnValue { get; set; }
	}
	
	public class WebApps_ListByResourceGroupReturnValue
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_ListByResourceGroupReturnValueIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListByResourceGroupReturnValueIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_ListByResourceGroupReturnValueIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_ListByResourceGroupReturnValueIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_GetReturn
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_GetReturnIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetReturnIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_GetReturnIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_GetReturnIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_CreateOrUpdatePutBody
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_CreateOrUpdatePutBodyIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdatePutBodyIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_CreateOrUpdatePutBodyIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_CreateOrUpdatePutBodyIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_CreateOrUpdateReturn
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_CreateOrUpdateReturnIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateReturnIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_CreateOrUpdateReturnIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_CreateOrUpdateReturnIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_UpdateReturn
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_UpdateReturnIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateReturnIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_UpdateReturnIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_UpdateReturnIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_ListPublishingCredentialsReturn
	{
		
		/// <summary>
		/// User resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateSitePushSettingsPutBody
	{
		
		/// <summary>
		/// PushSettings resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateSitePushSettingsReturn
	{
		
		/// <summary>
		/// PushSettings resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListSitePushSettingsReturn
	{
		
		/// <summary>
		/// PushSettings resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListDomainOwnershipIdentifiersReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WebApps_ListDomainOwnershipIdentifiersReturnValue[] WebApps_ListDomainOwnershipIdentifiersReturnValue { get; set; }
	}
	
	public class WebApps_ListDomainOwnershipIdentifiersReturnValue
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetDomainOwnershipIdentifierReturn
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateDomainOwnershipIdentifierPutBody
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateDomainOwnershipIdentifierReturn
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateDomainOwnershipIdentifierPatchBody
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateDomainOwnershipIdentifierReturn
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetHybridConnectionReturn
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateHybridConnectionPutBody
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateHybridConnectionReturn
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateHybridConnectionPatchBody
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateHybridConnectionReturn
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListHybridConnectionsReturn
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_MigrateMySqlReturn
	{
		
		/// <summary>
		/// Time when operation has started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Any errors associate with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public WebApps_MigrateMySqlReturnErrors[] WebApps_MigrateMySqlReturnErrors { get; set; }
		
		/// <summary>
		/// Time when operation will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// Applicable only for stamp operation ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoMasterOperationId")]
		public string GeoMasterOperationId { get; set; }
		
		/// <summary>
		/// Operation ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Time when operation has been updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedTime")]
		public System.Nullable<System.DateTimeOffset> ModifiedTime { get; set; }
		
		/// <summary>
		/// Operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The current status of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<WebApps_MigrateMySqlReturnStatus> Status { get; set; }
	}
	
	public class WebApps_MigrateMySqlReturnErrors
	{
		
		/// <summary>
		/// Basic error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Type of error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedCode")]
		public string ExtendedCode { get; set; }
		
		/// <summary>
		/// Inner errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerErrors")]
		public ErrorEntity[] InnerErrors { get; set; }
		
		/// <summary>
		/// Any details of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Message template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		/// <summary>
		/// Parameters for the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WebApps_MigrateMySqlReturnStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 4,
	}
	
	public class WebApps_ListSlotsReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WebApps_ListSlotsReturnValue[] WebApps_ListSlotsReturnValue { get; set; }
	}
	
	public class WebApps_ListSlotsReturnValue
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_ListSlotsReturnValueIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListSlotsReturnValueIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_ListSlotsReturnValueIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_ListSlotsReturnValueIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_GetSlotReturn
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_GetSlotReturnIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetSlotReturnIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_GetSlotReturnIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_GetSlotReturnIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_CreateOrUpdateSlotPutBody
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_CreateOrUpdateSlotPutBodyIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateSlotPutBodyIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_CreateOrUpdateSlotPutBodyIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_CreateOrUpdateSlotPutBodyIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_CreateOrUpdateSlotReturn
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_CreateOrUpdateSlotReturnIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateSlotReturnIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_CreateOrUpdateSlotReturnIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_CreateOrUpdateSlotReturnIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_UpdateSlotReturn
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public WebApps_UpdateSlotReturnIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateSlotReturnIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApiKVReferenceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, WebApps_UpdateSlotReturnIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	public class WebApps_UpdateSlotReturnIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class WebApps_ListPublishingCredentialsSlotReturn
	{
		
		/// <summary>
		/// User resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateSitePushSettingsSlotPutBody
	{
		
		/// <summary>
		/// PushSettings resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateSitePushSettingsSlotReturn
	{
		
		/// <summary>
		/// PushSettings resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListSitePushSettingsSlotReturn
	{
		
		/// <summary>
		/// PushSettings resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListDomainOwnershipIdentifiersSlotReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WebApps_ListDomainOwnershipIdentifiersSlotReturnValue[] WebApps_ListDomainOwnershipIdentifiersSlotReturnValue { get; set; }
	}
	
	public class WebApps_ListDomainOwnershipIdentifiersSlotReturnValue
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetDomainOwnershipIdentifierSlotReturn
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateDomainOwnershipIdentifierSlotPutBody
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateDomainOwnershipIdentifierSlotReturn
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateDomainOwnershipIdentifierSlotPatchBody
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateDomainOwnershipIdentifierSlotReturn
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetHybridConnectionSlotReturn
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateHybridConnectionSlotPutBody
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateHybridConnectionSlotReturn
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateHybridConnectionSlotPatchBody
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateHybridConnectionSlotReturn
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListHybridConnectionsSlotReturn
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListUsagesSlotReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WebApps_ListUsagesSlotReturnValue[] WebApps_ListUsagesSlotReturnValue { get; set; }
	}
	
	public class WebApps_ListUsagesSlotReturnValue
	{
		
		/// <summary>
		/// The current value of the resource counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int64> CurrentValue { get; set; }
		
		/// <summary>
		/// The resource limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// Localizable string object containing the name and a localized value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public WebApps_ListUsagesSlotReturnValueName Name { get; set; }
		
		/// <summary>
		/// Next reset time for the resource counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextResetTime")]
		public System.Nullable<System.DateTimeOffset> NextResetTime { get; set; }
		
		/// <summary>
		/// Units of measurement for the quota resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	public class WebApps_ListUsagesSlotReturnValueName
	{
		
		/// <summary>
		/// Localized name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// Non-localized name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class WebApps_ListVnetConnectionsSlotReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetVnetConnectionSlotReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateVnetConnectionSlotPutBody
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateVnetConnectionSlotReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateVnetConnectionSlotPatchBody
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateVnetConnectionSlotReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetVnetConnectionGatewaySlotReturn
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateVnetConnectionGatewaySlotPutBody
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateVnetConnectionGatewaySlotReturn
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateVnetConnectionGatewaySlotPatchBody
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateVnetConnectionGatewaySlotReturn
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_ListUsagesReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WebApps_ListUsagesReturnValue[] WebApps_ListUsagesReturnValue { get; set; }
	}
	
	public class WebApps_ListUsagesReturnValue
	{
		
		/// <summary>
		/// The current value of the resource counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int64> CurrentValue { get; set; }
		
		/// <summary>
		/// The resource limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// Localizable string object containing the name and a localized value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public WebApps_ListUsagesReturnValueName Name { get; set; }
		
		/// <summary>
		/// Next reset time for the resource counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextResetTime")]
		public System.Nullable<System.DateTimeOffset> NextResetTime { get; set; }
		
		/// <summary>
		/// Units of measurement for the quota resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	public class WebApps_ListUsagesReturnValueName
	{
		
		/// <summary>
		/// Localized name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// Non-localized name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class WebApps_ListVnetConnectionsReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetVnetConnectionReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateVnetConnectionPutBody
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateVnetConnectionReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateVnetConnectionPatchBody
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateVnetConnectionReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_GetVnetConnectionGatewayReturn
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateVnetConnectionGatewayPutBody
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_CreateOrUpdateVnetConnectionGatewayReturn
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateVnetConnectionGatewayPatchBody
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class WebApps_UpdateVnetConnectionGatewayReturn
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
