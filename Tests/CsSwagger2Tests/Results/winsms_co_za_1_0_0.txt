//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreditBalanceResponse
	{
		
		/// <summary>
		/// The current remaining credit balance for the account. Contains a single decimal place
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditBalance")]
		public System.Nullable<System.Double> CreditBalance { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreditTransferDetails
	{
		
		/// <summary>
		/// The WinSMS account number of the account to which credits will be added.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receivingAccountNumber")]
		public int ReceivingAccountNumber { get; set; }
		
		/// <summary>
		/// The WinSMS account number of the account from which credits will be deducted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendingAccountNumber")]
		public int SendingAccountNumber { get; set; }
		
		/// <summary>
		/// The number of credits to transfer from the sending account to the receiving account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transferQuantity")]
		public int TransferQuantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreditTransferResponse
	{
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// A boolean value indictating whether the credits were successfully transfered from the sending account into the receiving account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferSuccessful")]
		public System.Nullable<System.Boolean> TransferSuccessful { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteScheduledResponse
	{
		
		/// <summary>
		/// An array of ***deletedMessageStatus*** objects detailing the deleted status of each message requested for deletion.
		///
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedMessageStatuses")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public DeletedMessageStatus[] DeletedMessageStatuses { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeletedMessageStatus
	{
		
		/// <summary>
		/// The WinSMS API Message Id identifying the SMS message.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiMessageId")]
		public System.Nullable<System.Int32> ApiMessageId { get; set; }
		
		/// <summary>
		/// The number of credits refunded to your account after deleting the scheduled message.
		///
		///If the deletion was unsuccessful, this value will be 0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCost")]
		public System.Nullable<System.Double> CreditCost { get; set; }
		
		/// <summary>
		/// If the ***deleted*** value is false, this will contain an error code indicating the reason for the failure. If the scheduled SMS message was successfully deleted, this value will be blank.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteError")]
		public string DeleteError { get; set; }
		
		/// <summary>
		/// A boolean value indicating whether a scheduled SMS message was successfully deleted
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// A plain text description of the error that occurred, and possible solutions if available. 
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IncomingMessage
	{
		
		/// <summary>
		/// The unique API message id assigned to this incoming message.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incomingApiMessageId")]
		public System.Nullable<System.Double> IncomingApiMessageId { get; set; }
		
		/// <summary>
		/// The text of the incoming SMS message.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public string MessageText { get; set; }
		
		/// <summary>
		/// The mobile number that sent the SMS message, displayed using the international E164 (without the plus) format
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		/// <summary>
		/// The API message id of the most recent message sent to the mobile number that responded.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outgoingApiMessageId")]
		public System.Nullable<System.Double> OutgoingApiMessageId { get; set; }
		
		/// <summary>
		/// The date and time the message was received by WinSMS, in the format YYYYMMDDHHmm.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiveTime")]
		public string ReceiveTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IncomingMessageResponse
	{
		
		/// <summary>
		/// An array of ***incomingMessage*** objects containing properties of each incoming message.
		///
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incomingMessages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public IncomingMessage[] IncomingMessages { get; set; }
		
		/// <summary>
		/// The number of items returned in the results. This is the value specified in the ***limit*** parameter sent to the endpoint. If the parameter was not specified, this defaults to 100.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsLimit")]
		public System.Nullable<System.Int32> ResultsLimit { get; set; }
		
		/// <summary>
		/// The number of items skipped before the results were returned. This is the value specified in the ***offset*** parameter sent to the endpoint. If the parameter was not specified, this defaults to 0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsOffset")]
		public System.Nullable<System.Int32> ResultsOffset { get; set; }
		
		/// <summary>
		/// The total number of results available for retrieval. The ***offset*** and ***limit*** properties specify which of the total available results have been returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsTotalAvailable")]
		public System.Nullable<System.Int32> ResultsTotalAvailable { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IncomingOptoutMessage
	{
		
		/// <summary>
		/// The unique API message id assigned to this incoming opt-out message.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incomingApiMessageId")]
		public System.Nullable<System.Double> IncomingApiMessageId { get; set; }
		
		/// <summary>
		/// The text of the opt-out SMS message.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public string MessageText { get; set; }
		
		/// <summary>
		/// The mobile number that sent the opt-out SMS message, displayed using the international E164 (without the plus) format
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		/// <summary>
		/// The date and time the message was received by WinSMS, in the format YYYYMMDDHHmm.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiveTime")]
		public string ReceiveTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MessageDetails
	{
		
		/// <summary>
		/// ***Optional*** - The maximum [GSM Encoded segment count]("https://support.winsms.co.za/rest/GSM") that the message is allowed to utilise.
		///
		///This defaults to 1, allowing for a maximum GSM Encoded message length of 160 characters.
		///
		///The maximum value is 6, which allows for a GSM Encoded message length of 918 characters.
		///
		///If you intend to send a message longer than 160 characters, this value should be specified.
		///
		/// Minimum: 1
		/// Maximum: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSegments")]
		[System.ComponentModel.DataAnnotations.Range(1, 6)]
		public System.Nullable<System.Int32> MaxSegments { get; set; }
		
		/// <summary>
		/// The SMS text to be sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// An array of messageRecipientDetails objects.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public MessageRecipientDetails[] Recipients { get; set; }
		
		/// <summary>
		/// ***Optional*** - The date and time that an SMS should be delivered. If not specified, or is set for a date/time prior to the current date/time, the SMS message will be sent immediately.
		///
		///If specified, this value should have the format YYYYMMDDHHmm.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTime")]
		public string ScheduledTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MessageRecipientDetails
	{
		
		/// <summary>
		/// ***Optional*** - A parameter to identify an individual SMS message recipient on your system. The clientMessageId parameter is NOT saved by the WinSMS API. 
		///
		///The value of the clientMessageId parameter is returned in the ***submittedRecipientResult*** object of the response, allowing you to match a sent message to a returned message result status.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientMessageId")]
		public string ClientMessageId { get; set; }
		
		/// <summary>
		/// A recipient mobile number, using the international E164 (without the plus) format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MessageDetailsResponse
	{
		
		/// <summary>
		/// The message text that was sent.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// An array of messageRecipientResponse objects
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public MessageRecipientResponse[] Recipients { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MessageRecipientResponse
	{
		
		/// <summary>
		/// If the ***accepted*** value is **false**, this will contain the reason that delivery to the recipient was declined by the API. If the recipient was accepted, this value will be blank.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptError")]
		public string AcceptError { get; set; }
		
		/// <summary>
		/// A boolean value indicating whether the API accepted the recipient for SMS delivery. This will be **false** If you have insufficient credits or the recipient mobile number supplied is not valid.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accepted")]
		public System.Nullable<System.Boolean> Accepted { get; set; }
		
		/// <summary>
		/// The WinSMS Message Id assigned to the specific message recipient. This Id can be used to obtain the status of the message, and to delete the message if it was scheduled. If the API did not accept the recipient for delivery, the value will be **null**.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiMessageId")]
		public System.Nullable<System.Int32> ApiMessageId { get; set; }
		
		/// <summary>
		/// If the optional ***clientMessageId*** value was specified in the recipient object for the recipient, it will be returned here. If not, ***clientMessageId*** will be **null**.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientMessageId")]
		public string ClientMessageId { get; set; }
		
		/// <summary>
		/// The number of credits deducted from your account for the SMS to this recipient.
		///
		///The credit cost is based on the destination country of the recipient and the length (number of segments) of the message.
		///
		///This credit cost will be reimbursed if the message is scheduled and subsequently deleted.
		///
		///If the recipient is not accepted for delivery, the ***creditCost*** value will be **null**.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCost")]
		public System.Nullable<System.Double> CreditCost { get; set; }
		
		/// <summary>
		/// The mobile number specified as the ***mobileNumber*** value of the recipient object of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		/// <summary>
		/// The number of WinSMS credits remaining in your account after processing this recipient.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newCreditBalance")]
		public System.Nullable<System.Double> NewCreditBalance { get; set; }
		
		/// <summary>
		/// The date and time that the message was scheduled for delivery to the recipient.
		///
		///If no ***scheduledTime*** value was specified in the request, or the recipient was not accepted for delivery, this value will be **null**.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTime")]
		public string ScheduledTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MessageStatus
	{
		
		/// <summary>
		/// The WinSMS API Message Id identifying the SMS message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiMessageId")]
		public System.Nullable<System.Int32> ApiMessageId { get; set; }
		
		/// <summary>
		/// The number of credits deducted from your account for the SMS to this recipient.
		///
		///
		///If delivery to the recipient is unsuccessful, under certain conditions, this may be 0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCost")]
		public System.Nullable<System.Double> CreditCost { get; set; }
		
		/// <summary>
		/// The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		/// <summary>
		/// A boolean value indicating whether an SMS message was successfully delivered to the recipient's mobile number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDelivered")]
		public System.Nullable<System.Boolean> StatusDelivered { get; set; }
		
		/// <summary>
		/// If the SMS message was successfully delivered, this value will be blank.
		///If the ***statusDelivered*** value is false, this will contain a string indicating the current status of the SMS message. Possible values-
		///| Value | Description | Type |
		///|-------|-------------|------|
		///| SENT| The message has been sent to the recipient, but no delivery report has been received | Temporary |
		///| NOTFOUND | Either an incorrect MessageID was sent in the request, or the message was sent more than 90 days previously | Permanent |
		///| INQUEUE | Message is queued for sending | Temporary |
		///| SENDINGFAILED | The message was not transmitted, due to e.g. an invalid destination number or insufficient credits | Permanent |
		///| FAILED | The message was sent but could not be delivered to the recipient due to e.g. no such subscriber, subscriber's phone offline | Permanent |
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusErrorCode")]
		public string StatusErrorCode { get; set; }
		
		/// <summary>
		/// The date and time of the last status update for this message, in the format YYYYMMDDHHmm.
		///
		///If the message was delivered (**statusDelivered = true**) then this is a final status time. If the message is still awaiting delivery, this time might change when updates are received.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusTime")]
		public string StatusTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MessageStatusResponse
	{
		
		/// <summary>
		/// An array of ***messageStatus*** objects detailing the delivery status of each message
		///
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageStatuses")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public MessageStatus[] MessageStatuses { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MultiMessageDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public MessageDetails[] Messages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MultiMessageResponse
	{
		
		/// <summary>
		/// An array of messageDetailsResponse objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public MessageDetailsResponse[] Messages { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NewMessageDetails
	{
		
		/// <summary>
		/// ***Optional*** - The maximum [GSM Encoded segment count]("https://support.winsms.co.za/rest/GSM") that the message is allowed to utilise.
		///
		///This defaults to 1, allowing for a maximum GSM Encoded message length of 160 characters.
		///
		///The maximum value is 6, which allows for a GSM Encoded message length of 918 characters.
		///
		///If you intend to send a message longer than 160 characters, this value should be specified.
		///
		/// Minimum: 1
		/// Maximum: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSegments")]
		[System.ComponentModel.DataAnnotations.Range(1, 6)]
		public System.Nullable<System.Int32> MaxSegments { get; set; }
		
		/// <summary>
		/// The SMS text to be sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// An array of messageRecipientDetails objects.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public MessageRecipientDetails[] Recipients { get; set; }
		
		/// <summary>
		/// ***Optional*** - The date and time that an SMS should be delivered. If not specified, or is set for a date/time prior to the current date/time, the SMS message will be sent immediately.
		///
		///If specified, this value should have the format YYYYMMDDHHmm.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTime")]
		public string ScheduledTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NewMessageResponse
	{
		
		/// <summary>
		/// An array of messageRecipientResponse objects
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public MessageRecipientResponse[] Recipients { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OptoutMessageResponse
	{
		
		/// <summary>
		/// An array of ***incomingOptoutMessage*** objects containing properties of each opt-out message received.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incomingOptoutMessages")]
		public IncomingOptoutMessage[] IncomingOptoutMessages { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduledMessage
	{
		
		/// <summary>
		/// The WinSMS API Message Id identifying the SMS message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiMessageId")]
		public System.Nullable<System.Int32> ApiMessageId { get; set; }
		
		/// <summary>
		/// The number of credits deducted from your account for the SMS to this recipient.
		///
		///This is the number of credits that will be refunded if you delete this scheduled message.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCost")]
		public System.Nullable<System.Double> CreditCost { get; set; }
		
		/// <summary>
		/// The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		/// <summary>
		/// The date and time the message is scheduled to be delivered to the recipient, in the format YYYYMMDDHHmm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledSendTime")]
		public string ScheduledSendTime { get; set; }
		
		/// <summary>
		/// The date and time the message was originally submitted for scheduled delivery, in the format YYYYMMDDHHmm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submitTime")]
		public string SubmitTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduledMessageResponse
	{
		
		/// <summary>
		/// The number of items returned in the results. This is the value specified in the ***limit*** parameter sent to the endpoint. If the parameter was not specified, this defaults to 100.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsLimit")]
		public System.Nullable<System.Int32> ResultsLimit { get; set; }
		
		/// <summary>
		/// The number of items skipped before the results were returned. This is the value specified in the ***offset*** parameter sent to the endpoint. If the parameter was not specified, this defaults to 0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsOffset")]
		public System.Nullable<System.Int32> ResultsOffset { get; set; }
		
		/// <summary>
		/// The total number of results available for retrieval. The ***offset*** and ***limit*** properties specify which of the total available results have been returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsTotalAvailable")]
		public System.Nullable<System.Int32> ResultsTotalAvailable { get; set; }
		
		/// <summary>
		/// An array of ***scheduledMessage*** objects containing properties of each unsent scheduled message.
		///
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledMessages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public ScheduledMessage[] ScheduledMessages { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShortcodeMessage
	{
		
		/// <summary>
		/// The unique API message id assigned to this incoming message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incomingApiMessageId")]
		public System.Nullable<System.Double> IncomingApiMessageId { get; set; }
		
		/// <summary>
		/// The text of the incoming SMS message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public string MessageText { get; set; }
		
		/// <summary>
		/// The mobile number that sent the SMS message, displayed using the international E164 (without the plus) format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		/// <summary>
		/// The date and time the message was received by WinSMS, in the format YYYYMMDDHHmm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiveTime")]
		public string ReceiveTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShortcodeMessageResponse
	{
		
		/// <summary>
		/// The number of items returned in the results. This is the value specified in the ***limit*** parameter sent to the endpoint. If the parameter was not specified, this defaults to 100.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsLimit")]
		public System.Nullable<System.Int32> ResultsLimit { get; set; }
		
		/// <summary>
		/// The number of items skipped before the results were returned. This is the value specified in the ***offset*** parameter sent to the endpoint. If the parameter was not specified, this defaults to 0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsOffset")]
		public System.Nullable<System.Int32> ResultsOffset { get; set; }
		
		/// <summary>
		/// The total number of results available for retrieval. The ***offset*** and ***limit*** properties specify which of the total available results have been returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsTotalAvailable")]
		public System.Nullable<System.Int32> ResultsTotalAvailable { get; set; }
		
		/// <summary>
		/// An array of ***shortcodeMessage*** objects containing properties of each incoming shortcode message received by WinSMS.
		///
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortcodeMessages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public ShortcodeMessage[] ShortcodeMessages { get; set; }
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubAccount
	{
		
		/// <summary>
		/// The WinSMS account number of the Sub Account. This is supplied as an integer, without the leading 'W' displayed in the WinSMS Client Zone.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public System.Nullable<System.Int32> AccountNumber { get; set; }
		
		/// <summary>
		/// The remaining credit balance for the Sub Account.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditBalance")]
		public System.Nullable<System.Double> CreditBalance { get; set; }
		
		/// <summary>
		/// The first name of the user that the Sub Account is registered to.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The login name of the user that the Sub Account is registered to.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginName")]
		public string LoginName { get; set; }
		
		/// <summary>
		/// The surname of the user that the Sub Account is registered to.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubAccountsResponse
	{
		
		/// <summary>
		/// The http status code returned - reflected in the body for convenience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		/// <summary>
		/// An array of ***subAccount*** objects containing properties of each Sub Account owned by the Main Account.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subAccounts")]
		public SubAccount[] SubAccounts { get; set; }
		
		/// <summary>
		/// The date/time the request was processed, in the format YYYYMMDDhhmmssSSS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public string TimeStamp { get; set; }
		
		/// <summary>
		/// The current version of the API of the endpoint that was called
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get your current WinSMS credit balance
		/// Get the current remaining credit balance for the account.
		/// 
		/// ***Note*** - The credit balance is expressed as a value with a single decimal place.
		/// 
		/// GetCreditBalance credits/balance
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CreditBalanceResponse> GetCreditBalanceAsync()
		{
			var requestUri = "credits/balance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditBalanceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transfer credits between main and sub accounts.
		/// Transfer credits between accounts.
		/// - From Main account to Sub account.
		/// 
		/// - From Sub account to Main account.
		/// 
		/// - From Sub account to another Sub account.
		/// 
		/// Your WinSMS account number and sub account number/s can be obtained by logging in to the WinSMS Client Zone (www.winsms.co.za/cz) with the main account's credentials.
		/// 
		/// The main account number is on the home tab and the sub account numbers are under the sub accounts tab.
		/// 
		/// Account numbers should be submitted as integers. Do not add the 'W' prefix.
		/// 
		/// TransferCredits credits/transfer
		/// </summary>
		/// <param name="requestBody">The details of the credit transfer. Sender account number, recipient account number, and number of credits to transfer.</param>
		/// <returns>OK</returns>
		public async Task<CreditTransferResponse> TransferCreditsAsync(CreditTransferDetails requestBody)
		{
			var requestUri = "credits/transfer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditTransferResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of incoming short/long code messages
		/// 
		/// ***Only available to users with a [WinSMS Short/Long Code](https://support.winsms.co.za/winsms-long-short-code-system/).***
		/// Get a list of all incoming short/long code messages received by the account.
		/// 
		/// Only the first 100 incoming short/long code messages will be returned if no ***offset*** and ***limit*** parameters are specified.
		/// 
		/// GetShortCodeMessages shortcode/incoming
		/// </summary>
		/// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.
		///
		/// Minimum: 0
		// </param>
		/// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.
		///
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>OK</returns>
		public async Task<ShortcodeMessageResponse> GetShortCodeMessagesAsync(int offset, int limit)
		{
			var requestUri = "shortcode/incoming?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShortcodeMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of incoming SMS messages
		/// Get a list of all incoming SMS messages received by the account.
		/// 
		/// Only the first 100 incoming messages will be returned if no ***offset*** and ***limit*** parameters are specified.
		/// 
		/// GetIncomingMessages sms/incoming
		/// </summary>
		/// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.
		///
		/// Minimum: 0
		// </param>
		/// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.
		///
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>OK</returns>
		public async Task<IncomingMessageResponse> GetIncomingMessagesAsync(int offset, int limit)
		{
			var requestUri = "sms/incoming?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IncomingMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of incoming opt-out SMS messages
		/// Get a list of all opt-out SMS messages received by the account, as well as all manually added opt-out numbers.<br>
		/// GetOptoutMessages sms/incoming/optout
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OptoutMessageResponse> GetOptoutMessagesAsync()
		{
			var requestUri = "sms/incoming/optout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OptoutMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send SMS messages
		/// Submit 1 or more SMS messages to be sent by WinSMS. Maximum 1000 recipients per request.
		/// 
		/// The SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***.
		/// 
		/// SmsSend sms/outgoing/send
		/// </summary>
		/// <param name="requestBody">The message, recipients and delivery options of an SMS message to be sent.
		///</param>
		/// <returns>OK</returns>
		public async Task<NewMessageResponse> SmsSendAsync(NewMessageDetails requestBody)
		{
			var requestUri = "sms/outgoing/send";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NewMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send multiple different SMS messages
		/// Submit multiple different SMS messages to be sent to multiple recipients. Maximum 1000 recipients across all messages.
		/// 
		/// Each SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***.
		/// 
		/// SmsSendBatch sms/outgoing/sendmulti
		/// </summary>
		/// <param name="requestBody">The messages, recipients and delivery options of multiple SMS messages to be sent.
		///</param>
		/// <returns>OK</returns>
		public async Task<MultiMessageResponse> SmsSendBatchAsync(MultiMessageDetails requestBody)
		{
			var requestUri = "sms/outgoing/sendmulti";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MultiMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get SMS delivery statuses
		/// Get a list of previously submitted SMS message delivery statuses.
		/// 
		/// Post an array of API Message Ids received from the ***/sms/outgoing/send*** endpoint.
		/// 
		/// SmsStatus sms/outgoing/status
		/// </summary>
		/// <param name="requestBody">An array of WinSMS API Ids received after submitting messages to the ***/sms/outgoing/send*** endpoint.
		///
		///A maximum of 1000 API Ids can be supplied in a single request.
		///</param>
		/// <returns>OK</returns>
		public async Task<MessageStatusResponse> SmsStatusAsync(int[] requestBody)
		{
			var requestUri = "sms/outgoing/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MessageStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of scheduled SMS messages
		/// Get a list of all scheduled SMS messages that have not yet been sent.
		/// 
		/// Only the first 100 scheduled messages will be returned if no ***offset*** and ***limit*** parameters are specified.
		/// 
		/// GetScheduledMessages sms/scheduled
		/// </summary>
		/// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.
		///
		/// Minimum: 0
		// </param>
		/// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.
		///
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>OK</returns>
		public async Task<ScheduledMessageResponse> GetScheduledMessagesAsync(int offset, int limit)
		{
			var requestUri = "sms/scheduled?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduledMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete scheduled SMS messages and refund credits
		/// Delete a list of previously scheduled SMS messages that have not yet been sent.
		/// 
		/// Credits originally deducted for each SMS message will be refunded to your account upon successful deletion.
		/// 
		/// DeleteScheduledMessages sms/scheduled/delete
		/// </summary>
		/// <param name="requestBody">An array of WinSMS API Ids received after submitting scheduled messages to the ***/sms/outgoing/send*** endpoint.<br> A maximum of 1000 API Ids can be supplied in a single request.
		///</param>
		/// <returns>OK</returns>
		public async Task<DeleteScheduledResponse> DeleteScheduledMessagesAsync(int[] requestBody)
		{
			var requestUri = "sms/scheduled/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteScheduledResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of all Sub Accounts.
		/// Get a list of all the Sub Accounts owned by the Main Account.
		/// GetSubAccounts subaccounts
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SubAccountsResponse> GetSubAccountsAsync()
		{
			var requestUri = "subaccounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubAccountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
