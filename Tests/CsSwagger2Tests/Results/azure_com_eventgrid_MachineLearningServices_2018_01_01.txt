//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for an Microsoft.MachineLearningServices.DatasetDriftDetected event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineLearningServicesDatasetDriftDetectedEventData
	{
		
		/// <summary>
		/// The ID of the base Dataset used to detect drift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseDatasetId")]
		public string BaseDatasetId { get; set; }
		
		/// <summary>
		/// The ID of the data drift monitor that triggered the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDriftId")]
		public string DataDriftId { get; set; }
		
		/// <summary>
		/// The name of the data drift monitor that triggered the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDriftName")]
		public string DataDriftName { get; set; }
		
		/// <summary>
		/// The coefficient result that triggered the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driftCoefficient")]
		public System.Nullable<System.Double> DriftCoefficient { get; set; }
		
		/// <summary>
		/// The end time of the target dataset time series that resulted in drift detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The ID of the Run that detected data drift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// The start time of the target dataset time series that resulted in drift detection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The ID of the target Dataset used to detect drift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetDatasetId")]
		public string TargetDatasetId { get; set; }
	}
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for an Microsoft.MachineLearningServices.ModelDeployed event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineLearningServicesModelDeployedEventData
	{
		
		/// <summary>
		/// A common separated list of model IDs. The IDs of the models deployed in the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelIds")]
		public string ModelIds { get; set; }
		
		/// <summary>
		/// The compute type (e.g. ACI, AKS) of the deployed service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceComputeType")]
		public string ServiceComputeType { get; set; }
		
		/// <summary>
		/// The name of the deployed service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// The properties of the deployed service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProperties")]
		public string ServiceProperties { get; set; }
		
		/// <summary>
		/// The tags of the deployed service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceTags")]
		public string ServiceTags { get; set; }
	}
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for an Microsoft.MachineLearningServices.ModelRegistered event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineLearningServicesModelRegisteredEventData
	{
		
		/// <summary>
		/// The name of the model that was registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelName")]
		public string ModelName { get; set; }
		
		/// <summary>
		/// The properties of the model that was registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelProperties")]
		public string ModelProperties { get; set; }
		
		/// <summary>
		/// The tags of the model that was registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelTags")]
		public string ModelTags { get; set; }
		
		/// <summary>
		/// The version of the model that was registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelVersion")]
		public System.Nullable<System.Int32> ModelVersion { get; set; }
	}
	
	/// <summary>
	/// Schema of the Data property of an EventGridEvent for an Microsoft.MachineLearningServices.RunCompleted event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineLearningServicesRunCompletedEventData
	{
		
		/// <summary>
		/// The ID of the experiment that the run belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experimentId")]
		public string ExperimentId { get; set; }
		
		/// <summary>
		/// The name of the experiment that the run belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experimentName")]
		public string ExperimentName { get; set; }
		
		/// <summary>
		/// The ID of the Run that was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// The properties of the completed Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runProperties")]
		public string RunProperties { get; set; }
		
		/// <summary>
		/// The tags of the completed Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runTags")]
		public string RunTags { get; set; }
		
		/// <summary>
		/// The Run Type of the completed Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runType")]
		public string RunType { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
