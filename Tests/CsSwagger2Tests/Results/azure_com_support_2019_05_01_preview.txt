//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Input of CheckNameAvailability API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityInput
	{
		
		/// <summary>
		/// The resource name to validate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of resource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameAvailabilityInputType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Support/supportTickets")]
		Microsoft_Support_supportTickets = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Support/communications")]
		Microsoft_Support_communications = 1,
	}
	
	/// <summary>
	/// Output of check name availability API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityOutput
	{
		
		/// <summary>
		/// The detailed error message describing why the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Indicates whether the name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason why the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Object that represents Communication resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommunicationDetails
	{
		
		/// <summary>
		/// Id of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Describes the properties of a communication resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CommunicationDetailsProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the resource 'Microsoft.Support/communications'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a communication resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommunicationDetailsProperties
	{
		
		/// <summary>
		/// Body of the communication
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Direction of communication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communicationDirection")]
		public System.Nullable<CommunicationDetailsPropertiesCommunicationDirection> CommunicationDirection { get; set; }
		
		/// <summary>
		/// Communication type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communicationType")]
		public System.Nullable<CommunicationDetailsPropertiesCommunicationType> CommunicationType { get; set; }
		
		/// <summary>
		/// Time in UTC (ISO 8601 format) when the communication was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Email address of the sender
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sender")]
		public string Sender { get; set; }
		
		/// <summary>
		/// Subject of the communication
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CommunicationDetailsPropertiesCommunicationDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		outbound = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CommunicationDetailsPropertiesCommunicationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		web = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phone = 1,
	}
	
	/// <summary>
	/// Collection of Communication resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommunicationsListResult
	{
		
		/// <summary>
		/// The URI to fetch the next page of Communication resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Communication resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CommunicationDetails[] Value { get; set; }
	}
	
	/// <summary>
	/// Contact information associated with support ticket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContactProfile
	{
		
		/// <summary>
		/// Additional email addresses listed will be copied on any correspondence about the support ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalEmailAddresses")]
		public string[] AdditionalEmailAddresses { get; set; }
		
		/// <summary>
		/// Country of the user. This is the ISO 3166-1 alpha-3 code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// First name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number. This is required if preferred contact method is phone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Preferred contact method.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preferredContactMethod")]
		public ContactProfilePreferredContactMethod PreferredContactMethod { get; set; }
		
		/// <summary>
		/// Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Learn more at <a  target='_blank' href='https://azure.microsoft.com/support/plans/response/'>Azure Severity and responsiveness</a>. Use the standard language-country code. Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French, 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for Chinese and 'de-de' for German.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preferredSupportLanguage")]
		public string PreferredSupportLanguage { get; set; }
		
		/// <summary>
		/// Time zone of the user. This is the name of the time zone from <a  target='_blank' href='https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values'>Microsoft Time Zone Index Values</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preferredTimeZone")]
		public string PreferredTimeZone { get; set; }
		
		/// <summary>
		/// Primary email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="primaryEmailAddress")]
		public string PrimaryEmailAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContactProfilePreferredContactMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phone = 1,
	}
	
	/// <summary>
	/// The api error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExceptionResponse
	{
		
		/// <summary>
		/// The api error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ServiceError Error { get; set; }
	}
	
	/// <summary>
	/// The api error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceError
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The list of error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ServiceErrorDetail[] Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceErrorDetail
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The operation supported by Microsoft Support RP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that describes the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The list of operations supported by Microsoft Support resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsListResult
	{
		
		/// <summary>
		/// The list of operations supported by Microsoft Support resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// ProblemClassification resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProblemClassification
	{
		
		/// <summary>
		/// Id of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Details about a problem classification available for an Azure service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProblemClassificationProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the resource 'Microsoft.Support/problemClassification'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Details about a problem classification available for an Azure service
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProblemClassificationProperties
	{
		
		/// <summary>
		/// Localized name of problem classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Collection of ProblemClassification resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProblemClassificationsListResult
	{
		
		/// <summary>
		/// List of ProblemClassification resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProblemClassification[] Value { get; set; }
	}
	
	/// <summary>
	/// This property is required for providing the region and new quota limits
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QuotaChangeRequest
	{
		
		/// <summary>
		/// Payload of the quota increase request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// Region for which the quota increase request is being made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Additional set of information required for quota increase support ticket for certain quota types, e.g.: Virtual machine cores. Get complete details about Quota payload support request along with examples at <a target='' href='https://aka.ms/supportrpquotarequestpayload'>Support quota request</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QuotaTicketDetails
	{
		
		/// <summary>
		/// Required for certain quota types when there is a sub type that you are requesting quota increase for. Example: Batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaChangeRequestSubType")]
		public string QuotaChangeRequestSubType { get; set; }
		
		/// <summary>
		/// Quota change request version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaChangeRequestVersion")]
		public string QuotaChangeRequestVersion { get; set; }
		
		/// <summary>
		/// This property is required for providing the region and new quota limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaChangeRequests")]
		public QuotaChangeRequest[] QuotaChangeRequests { get; set; }
	}
	
	/// <summary>
	/// Object that represents a Service resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Service
	{
		
		/// <summary>
		/// Id of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Details about Azure service available for support ticket creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServiceProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the resource 'Microsoft.Support/services'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Details about Azure service available for support ticket creation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceProperties
	{
		
		/// <summary>
		/// Localized name of Azure service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Service Level Agreement details for a support ticket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceLevelAgreement
	{
		
		/// <summary>
		/// Time in UTC (ISO 8601 format) when service level agreement expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// Service Level Agreement in minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slaMinutes")]
		public System.Nullable<System.Int32> SlaMinutes { get; set; }
		
		/// <summary>
		/// Time in UTC (ISO 8601 format) when service level agreement starts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Collection of Service resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServicesListResult
	{
		
		/// <summary>
		/// List of Service resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Service[] Value { get; set; }
	}
	
	/// <summary>
	/// Support engineer information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SupportEngineer
	{
		
		/// <summary>
		/// Email address of the Azure Support engineer assigned to the support ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
	}
	
	/// <summary>
	/// Object that represents SupportTicketDetails resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SupportTicketDetails
	{
		
		/// <summary>
		/// Id of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Describes the properties of a support ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SupportTicketDetailsProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the resource 'Microsoft.Support/supportTickets'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a support ticket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SupportTicketDetailsProperties
	{
		
		/// <summary>
		/// Contact information associated with support ticket.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactDetails")]
		public ContactProfile ContactDetails { get; set; }
		
		/// <summary>
		/// Time in UTC (ISO 8601 format) when support ticket was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Detailed description of the question or issue.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Enrollment ID associated with the support ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentId")]
		public string EnrollmentId { get; set; }
		
		/// <summary>
		/// Time in UTC (ISO 8601 format) when support ticket was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Localized name of problem classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="problemClassificationDisplayName")]
		public string ProblemClassificationDisplayName { get; set; }
		
		/// <summary>
		/// Each Azure service has its own set of issue category called problem classification that corresponds to the type of problem you're experiencing. This parameter is the resource id of ProblemClassification resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="problemClassificationId")]
		public string ProblemClassificationId { get; set; }
		
		/// <summary>
		/// Time in UTC (ISO 8601 format) when the problem started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="problemStartTime")]
		public System.Nullable<System.DateTimeOffset> ProblemStartTime { get; set; }
		
		/// <summary>
		/// Indicates if this issue is a production outage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productionOutage")]
		public System.Nullable<System.Boolean> ProductionOutage { get; set; }
		
		/// <summary>
		/// Additional set of information required for quota increase support ticket for certain quota types, e.g.: Virtual machine cores. Get complete details about Quota payload support request along with examples at <a target='' href='https://aka.ms/supportrpquotarequestpayload'>Support quota request</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaTicketDetails")]
		public QuotaTicketDetails QuotaTicketDetails { get; set; }
		
		/// <summary>
		/// Indicates if this requires a 24x7 response from Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="require24X7Response")]
		public System.Nullable<System.Boolean> Require24X7Response { get; set; }
		
		/// <summary>
		/// Localized name of Azure service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDisplayName")]
		public string ServiceDisplayName { get; set; }
		
		/// <summary>
		/// This is the resource id of the Azure service resource associated with the support ticket.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		/// <summary>
		/// Service Level Agreement details for a support ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceLevelAgreement")]
		public ServiceLevelAgreement ServiceLevelAgreement { get; set; }
		
		/// <summary>
		/// A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public SupportTicketDetailsPropertiesSeverity Severity { get; set; }
		
		/// <summary>
		/// Status of the support ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Support engineer information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportEngineer")]
		public SupportEngineer SupportEngineer { get; set; }
		
		/// <summary>
		/// Support plan type associated with the support ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportPlanType")]
		public string SupportPlanType { get; set; }
		
		/// <summary>
		/// System generated support ticket id that is unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportTicketId")]
		public string SupportTicketId { get; set; }
		
		/// <summary>
		/// Additional information for technical support ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technicalTicketDetails")]
		public TechnicalTicketDetails TechnicalTicketDetails { get; set; }
		
		/// <summary>
		/// Title of the support ticket.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SupportTicketDetailsPropertiesSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		minimal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moderate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		critical = 2,
	}
	
	/// <summary>
	/// Additional information for technical support ticket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TechnicalTicketDetails
	{
		
		/// <summary>
		/// This is the resource id of the Azure service resource (For example: A virtual machine resource or an HDInsight resource) for which the support ticket is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// Object that represents a collection of SupportTicket resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SupportTicketsListResult
	{
		
		/// <summary>
		/// The URI to fetch the next page of SupportTicket resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of SupportTicket resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SupportTicketDetails[] Value { get; set; }
	}
	
	/// <summary>
	/// Contact information associated with the support ticket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateContactProfile
	{
		
		/// <summary>
		/// Email addresses listed will be copied on any correspondence about the support ticket
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalEmailAddresses")]
		public string[] AdditionalEmailAddresses { get; set; }
		
		/// <summary>
		/// Country of the user. This is the ISO 3166-1 alpha-3 code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// First name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number. This is required if preferred contact method is phone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Preferred contact method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredContactMethod")]
		public ContactProfilePreferredContactMethod PreferredContactMethod { get; set; }
		
		/// <summary>
		/// Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Learn more at <a  target='_blank' href='https://azure.microsoft.com/support/plans/response/'>Azure Severity and responsiveness</a>. Use the standard language-country code. Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French, 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for Chinese and 'de-de' for German.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredSupportLanguage")]
		public string PreferredSupportLanguage { get; set; }
		
		/// <summary>
		/// Time zone of the user. This is the name of the time zone from <a  target='_blank' href='https://support.microsoft.com/en-us/help/973627/microsoft-time-zone-index-values'>Microsoft Time Zone Index Values</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredTimeZone")]
		public string PreferredTimeZone { get; set; }
		
		/// <summary>
		/// Primary email address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryEmailAddress")]
		public string PrimaryEmailAddress { get; set; }
	}
	
	/// <summary>
	/// Updates severity and contact details in the support ticket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateSupportTicket
	{
		
		/// <summary>
		/// Contact information associated with the support ticket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactDetails")]
		public UpdateContactProfile ContactDetails { get; set; }
		
		/// <summary>
		/// Severity level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public SupportTicketDetailsPropertiesSeverity Severity { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This lists all the available Microsoft Support REST API operations.
		/// Operations_List providers/Microsoft.Support/operations
		/// </summary>
		/// <param name="api_version">Api version</param>
		/// <returns>Successfully retrieved list of operations.</returns>
		public async Task<OperationsListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Support/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the Azure services available for support ticket creation. Here are the Service Ids for **Billing**, **Subscription Management**, and **Service and subscription limits (Quotas)** issues: <br/><table><tr><td><u>Issue type</u></td><td><u>Service Id</u></td></tr><tr><td>Billing</td><td>'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'</td></tr><tr><td>Subscription Management</td><td>'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'</td></tr><tr><td>Quota</td><td>'/providers/Microsoft.Support/services/06bfd9d3-516b-d5c6-5802-169c800dec89'</td></tr></table> <br/><br/> For **Technical** issues, select the Service Id that maps to the Azure service/product as displayed in the **Services** drop-down list on the Azure portal's <a target='_blank' href='https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/overview'>New support request</a> page. <br/><br/> Always use the service and it's corresponding problem classification(s) obtained programmatically for support ticket creation. This practice ensures that you always have the most recent set of service and problem classification Ids.
		/// Services_List providers/Microsoft.Support/services
		/// </summary>
		/// <param name="api_version">Api version</param>
		/// <returns>Successfully retrieved list of Azure services available for support.</returns>
		public async Task<ServicesListResult> Services_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Support/services?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ServicesListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a specific Azure service for support ticket creation.
		/// Services_Get providers/Microsoft.Support/services/{serviceName}
		/// </summary>
		/// <param name="serviceName">Name of Azure service</param>
		/// <param name="api_version">Api version</param>
		/// <returns>Successfully retrieved Azure service for support ticket creation.</returns>
		public async Task<Service> Services_GetAsync(string serviceName, string api_version)
		{
			var requestUri = "providers/Microsoft.Support/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Service>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the problem classifications (categories) available for a specific Azure service.<br/><br/> Always use the service and problem classifications obtained programmatically. This practice ensures that you always have the most recent set of service and problem classification Ids.
		/// ProblemClassifications_List providers/Microsoft.Support/services/{serviceName}/problemClassifications
		/// </summary>
		/// <param name="serviceName">Name of Azure service for which the problem classifications need to be retrieved.</param>
		/// <param name="api_version">Api version</param>
		/// <returns>Successfully retrieved list of problem classifications for the specified Azure service.</returns>
		public async Task<ProblemClassificationsListResult> ProblemClassifications_ListAsync(string serviceName, string api_version)
		{
			var requestUri = "providers/Microsoft.Support/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"/problemClassifications&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProblemClassificationsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the details of a specific problem classification for a specific Azure service.
		/// ProblemClassifications_Get providers/Microsoft.Support/services/{serviceName}/problemClassifications/{problemClassificationName}
		/// </summary>
		/// <param name="serviceName">Name of Azure service available for support.</param>
		/// <param name="problemClassificationName">Name of problem classification.</param>
		/// <param name="api_version">Api version</param>
		/// <returns>Successfully retrieved problem classification details.</returns>
		public async Task<ProblemClassification> ProblemClassifications_GetAsync(string serviceName, string problemClassificationName, string api_version)
		{
			var requestUri = "providers/Microsoft.Support/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"/problemClassifications/"+ (problemClassificationName==null? "" : System.Uri.EscapeDataString(problemClassificationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProblemClassification>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Check the availability of a resource name. This API should to be used to check the uniqueness of the name for support ticket creation for the selected subscription.
		/// SupportTickets_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability
		/// </summary>
		/// <param name="subscriptionId">Azure subscription id</param>
		/// <param name="api_version">Api version</param>
		/// <param name="requestBody">Input to check.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CheckNameAvailabilityOutput> SupportTickets_CheckNameAvailabilityAsync(string subscriptionId, string api_version, CheckNameAvailabilityInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Support/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the support tickets for an Azure subscription. <br/><br/>You can also filter the support tickets by <i>Status</i> or <i>CreatedDate</i> using the $filter parameter. Output will be a paged result with <i>nextLink</i>, using which you can retrieve the next set of support tickets. <br/><br/>Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
		/// SupportTickets_List subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets
		/// </summary>
		/// <param name="top">The number of values to return in the collection. Default is 25 and max is 100.</param>
		/// <param name="filter">The filter to apply on the operation. We support 'odata v4.0' filter semantics. <a target='_blank' href='https://docs.microsoft.com/odata/concepts/queryoptions-overview'>Learn more</a> <br/><i>Status</i> filter can only be used with 'eq' operator. For <i>CreatedDate</i> filter, the supported operators are 'gt' and 'ge'. When using both filters, combine them using the logical 'AND'.</param>
		/// <param name="subscriptionId">Azure subscription id</param>
		/// <param name="api_version">Api version</param>
		/// <returns>Successfully retrieved support tickets.</returns>
		public async Task<SupportTicketsListResult> SupportTickets_ListAsync(int top, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Support/supportTickets?$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SupportTicketsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets details for a specific support ticket in an Azure subscription. <br/><br/>Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
		/// SupportTickets_Get subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}
		/// </summary>
		/// <param name="supportTicketName">Support ticket name</param>
		/// <param name="subscriptionId">Azure subscription id</param>
		/// <param name="api_version">Api version</param>
		/// <returns>Successfully retrieved support ticket.</returns>
		public async Task<SupportTicketDetails> SupportTickets_GetAsync(string supportTicketName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Support/supportTickets/"+ (supportTicketName==null? "" : System.Uri.EscapeDataString(supportTicketName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SupportTicketDetails>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new support ticket for Quota increase, Technical, Billing, and Subscription Management issues for the specified subscription. <br/><br/>A paid technical support plan is required to create a support ticket using this API. <a href='https://aka.ms/supportticketAPI'>Learn more</a> <br/><br/> Use the Services API to map the right Service Id to the issue type. For example: For billing tickets set *serviceId* to *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*. <br/> For Technical issues, the Service id will map to the Azure service you want to raise a support ticket for. <br/><br/>Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.
		/// SupportTickets_Create subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}
		/// </summary>
		/// <param name="supportTicketName">Support ticket name.</param>
		/// <param name="subscriptionId">Azure subscription id</param>
		/// <param name="api_version">Api version</param>
		/// <param name="requestBody">Support ticket request payload.</param>
		/// <returns>OK - SupportTicket created successfully</returns>
		public async Task<SupportTicketDetails> SupportTickets_CreateAsync(string supportTicketName, string subscriptionId, string api_version, SupportTicketDetails requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Support/supportTickets/"+ (supportTicketName==null? "" : System.Uri.EscapeDataString(supportTicketName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SupportTicketDetails>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This API allows you to update the severity level or your contact information in the support ticket. <br/><br/> Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer. In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.
		/// SupportTickets_Update subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}
		/// </summary>
		/// <param name="supportTicketName">Support ticket name</param>
		/// <param name="subscriptionId">Azure subscription id</param>
		/// <param name="api_version">Api version</param>
		/// <param name="requestBody">UpdateSupportTicket object</param>
		/// <returns>Successfully updated support ticket.</returns>
		public async Task<SupportTicketDetails> SupportTickets_UpdateAsync(string supportTicketName, string subscriptionId, string api_version, UpdateSupportTicket requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Support/supportTickets/"+ (supportTicketName==null? "" : System.Uri.EscapeDataString(supportTicketName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SupportTicketDetails>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Check the availability of a resource name. This API should to be used to check the uniqueness of the name for adding a new communication to the support ticket.
		/// Communications_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability
		/// </summary>
		/// <param name="supportTicketName">Support ticket name</param>
		/// <param name="subscriptionId">Azure subscription id</param>
		/// <param name="api_version">Api version</param>
		/// <param name="requestBody">Input to check</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CheckNameAvailabilityOutput> Communications_CheckNameAvailabilityAsync(string supportTicketName, string subscriptionId, string api_version, CheckNameAvailabilityInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Support/supportTickets/"+ (supportTicketName==null? "" : System.Uri.EscapeDataString(supportTicketName))+"/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all communications (attachments not included) for a support ticket. <br/></br> You can also filter support ticket communications by <i>CreatedDate</i>�or <i>CommunicationType</i> using the $filter parameter. The only type of communication supported today is <i>Web</i>. Output will be a paged result with <i>nextLink</i>, using which you can retrieve the next set of Communication results. <br/><br/> Support ticket data is available for 12 months after ticket creation. If a ticket was created more than 12 months ago, a request for data might cause an error.
		/// Communications_List subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications
		/// </summary>
		/// <param name="supportTicketName">Support ticket name</param>
		/// <param name="top">The number of values to return in the collection. Default is 10 and max is 10.</param>
		/// <param name="filter">The filter to apply on the operation. You can filter by communicationType and createdDate properties. CommunicationType supports Equals ('eq') operator and createdDate supports Greater Than ('gt') and Greater Than or Equals ('ge') operators. You may combine the CommunicationType and CreatedDate filters by Logical And ('and') operator.</param>
		/// <param name="subscriptionId">Azure subscription id</param>
		/// <param name="api_version">Api version</param>
		/// <returns>Successfully retrieved communications for a support ticket.</returns>
		public async Task<CommunicationsListResult> Communications_ListAsync(string supportTicketName, int top, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Support/supportTickets/"+ (supportTicketName==null? "" : System.Uri.EscapeDataString(supportTicketName))+"/communications&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommunicationsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns details of a specific communication in a support ticket.
		/// Communications_Get subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
		/// </summary>
		/// <param name="supportTicketName">Support ticket name</param>
		/// <param name="communicationName">Communication name</param>
		/// <param name="subscriptionId">Azure subscription id</param>
		/// <param name="api_version">Api version</param>
		/// <returns>Successfully retrieved communication details.</returns>
		public async Task<CommunicationDetails> Communications_GetAsync(string supportTicketName, string communicationName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Support/supportTickets/"+ (supportTicketName==null? "" : System.Uri.EscapeDataString(supportTicketName))+"/communications/"+ (communicationName==null? "" : System.Uri.EscapeDataString(communicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommunicationDetails>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a new customer communication to an Azure support ticket. Adding attachments are not currently supported via the API. <br/>To add a file to a support ticket, visit the <a target='_blank' href='https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest'>Manage support ticket</a> page in the Azure portal, select the support ticket, and use the file upload control to add a new file.
		/// Communications_Create subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
		/// </summary>
		/// <param name="supportTicketName">Support ticket name</param>
		/// <param name="communicationName">Communication name</param>
		/// <param name="subscriptionId">Azure subscription id</param>
		/// <param name="api_version">Api version</param>
		/// <param name="requestBody">Communication object</param>
		/// <returns>OK - Communication created successfully.</returns>
		public async Task<CommunicationDetails> Communications_CreateAsync(string supportTicketName, string communicationName, string subscriptionId, string api_version, CommunicationDetails requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Support/supportTickets/"+ (supportTicketName==null? "" : System.Uri.EscapeDataString(supportTicketName))+"/communications/"+ (communicationName==null? "" : System.Uri.EscapeDataString(communicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommunicationDetails>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
