//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public class ElasticPoolActivity
	{
	}
	
	/// <summary>
	/// Represents the response to a list elastic pool activity request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolActivityListResult
	{
		
		/// <summary>
		/// The list of elastic pool activities.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ElasticPoolActivity[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of an elastic pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolActivityProperties
	{
		
		/// <summary>
		/// The name of the elastic pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elasticPoolName")]
		public string ElasticPoolName { get; set; }
		
		/// <summary>
		/// The time the operation finished (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The error code if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// The error message if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The error severity if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorSeverity")]
		public System.Nullable<System.Int32> ErrorSeverity { get; set; }
		
		/// <summary>
		/// The operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The unique operation ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The percentage complete if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
		
		/// <summary>
		/// The requested per database DTU cap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedDatabaseDtuCap")]
		public System.Nullable<System.Int32> RequestedDatabaseDtuCap { get; set; }
		
		/// <summary>
		/// The requested per database DTU guarantee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedDatabaseDtuGuarantee")]
		public System.Nullable<System.Int32> RequestedDatabaseDtuGuarantee { get; set; }
		
		/// <summary>
		/// The requested max DTU per database if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedDatabaseDtuMax")]
		public System.Nullable<System.Int32> RequestedDatabaseDtuMax { get; set; }
		
		/// <summary>
		/// The requested min DTU per database if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedDatabaseDtuMin")]
		public System.Nullable<System.Int32> RequestedDatabaseDtuMin { get; set; }
		
		/// <summary>
		/// The requested DTU for the pool if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedDtu")]
		public System.Nullable<System.Int32> RequestedDtu { get; set; }
		
		/// <summary>
		/// The requested DTU guarantee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedDtuGuarantee")]
		public System.Nullable<System.Int32> RequestedDtuGuarantee { get; set; }
		
		/// <summary>
		/// The requested name for the elastic pool if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedElasticPoolName")]
		public string RequestedElasticPoolName { get; set; }
		
		/// <summary>
		/// The requested storage limit for the pool in GB if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedStorageLimitInGB")]
		public System.Nullable<System.Int64> RequestedStorageLimitInGB { get; set; }
		
		/// <summary>
		/// The requested storage limit in MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedStorageLimitInMB")]
		public System.Nullable<System.Int32> RequestedStorageLimitInMB { get; set; }
		
		/// <summary>
		/// The name of the server the elastic pool is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverName")]
		public string ServerName { get; set; }
		
		/// <summary>
		/// The time the operation started (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The current state of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	public class ElasticPoolDatabaseActivity
	{
	}
	
	/// <summary>
	/// Represents the response to a list elastic pool database activity request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolDatabaseActivityListResult
	{
		
		/// <summary>
		/// The list of elastic pool database activities.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ElasticPoolDatabaseActivity[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of an elastic pool database activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolDatabaseActivityProperties
	{
		
		/// <summary>
		/// The name of the current elastic pool the database is in if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentElasticPoolName")]
		public string CurrentElasticPoolName { get; set; }
		
		/// <summary>
		/// The name of the current service objective if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentServiceObjective")]
		public string CurrentServiceObjective { get; set; }
		
		/// <summary>
		/// The database name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// The time the operation finished (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The error code if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// The error message if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The error severity if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorSeverity")]
		public System.Nullable<System.Int32> ErrorSeverity { get; set; }
		
		/// <summary>
		/// The operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The unique operation ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The percentage complete if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
		
		/// <summary>
		/// The name for the elastic pool the database is moving into if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedElasticPoolName")]
		public string RequestedElasticPoolName { get; set; }
		
		/// <summary>
		/// The name of the requested service objective if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedServiceObjective")]
		public string RequestedServiceObjective { get; set; }
		
		/// <summary>
		/// The name of the server the elastic pool is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverName")]
		public string ServerName { get; set; }
		
		/// <summary>
		/// The time the operation started (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The current state of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// The impact of an operation, both in absolute and relative terms.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationImpact
	{
		
		/// <summary>
		/// The absolute impact to dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeValueAbsolute")]
		public System.Nullable<System.Double> ChangeValueAbsolute { get; set; }
		
		/// <summary>
		/// The relative impact to dimension (null if not applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeValueRelative")]
		public System.Nullable<System.Double> ChangeValueRelative { get; set; }
		
		/// <summary>
		/// The name of the impact dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unit in which estimated impact to dimension is measured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	public class RecommendedIndex
	{
	}
	
	/// <summary>
	/// Represents the properties of a database recommended index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedIndexProperties
	{
		
		/// <summary>
		/// The proposed index action. You can create a missing index, drop an unused index, or rebuild an existing index to improve its performance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<RecommendedIndexPropertiesAction> Action { get; set; }
		
		/// <summary>
		/// Columns over which to build index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public string[] Columns { get; set; }
		
		/// <summary>
		/// The UTC datetime showing when this resource was created (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The estimated impact of doing recommended index action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedImpact")]
		public OperationImpact[] EstimatedImpact { get; set; }
		
		/// <summary>
		/// The list of column names to be included in the index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedColumns")]
		public string[] IncludedColumns { get; set; }
		
		/// <summary>
		/// The full build index script
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexScript")]
		public string IndexScript { get; set; }
		
		/// <summary>
		/// The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexType")]
		public System.Nullable<RecommendedIndexPropertiesIndexType> IndexType { get; set; }
		
		/// <summary>
		/// The UTC datetime of when was this resource last changed (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The values reported after index action is complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportedImpact")]
		public OperationImpact[] ReportedImpact { get; set; }
		
		/// <summary>
		/// The schema where table to build index over resides
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// The current recommendation state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<RecommendedIndexPropertiesState> State { get; set; }
		
		/// <summary>
		/// The table on which to build index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedIndexPropertiesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Create = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Drop = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rebuild = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedIndexPropertiesIndexType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONCLUSTERED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMNSTORE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLUSTERED COLUMNSTORE")]
		CLUSTERED_COLUMNSTORE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedIndexPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Executing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verifying = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending Revert")]
		Pending_Revert = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reverting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reverted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ignored = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blocked = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 10,
	}
	
	public class ServiceTierAdvisor
	{
	}
	
	/// <summary>
	/// Represents the response to a list service tier advisor request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceTierAdvisorListResult
	{
		
		/// <summary>
		/// The list of service tier advisors for specified database.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ServiceTierAdvisor[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of a Service Tier Advisor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceTierAdvisorProperties
	{
		
		/// <summary>
		/// The activeTimeRatio for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeTimeRatio")]
		public System.Nullable<System.Double> ActiveTimeRatio { get; set; }
		
		/// <summary>
		/// Gets or sets avgDtu for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avgDtu")]
		public System.Nullable<System.Double> AvgDtu { get; set; }
		
		/// <summary>
		/// Gets or sets confidence for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Gets or sets currentServiceLevelObjective for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentServiceLevelObjective")]
		public string CurrentServiceLevelObjective { get; set; }
		
		/// <summary>
		/// Gets or sets currentServiceLevelObjectiveId for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentServiceLevelObjectiveId")]
		public string CurrentServiceLevelObjectiveId { get; set; }
		
		/// <summary>
		/// Gets or sets databaseSizeBasedRecommendationServiceLevelObjective for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseSizeBasedRecommendationServiceLevelObjective")]
		public string DatabaseSizeBasedRecommendationServiceLevelObjective { get; set; }
		
		/// <summary>
		/// Gets or sets databaseSizeBasedRecommendationServiceLevelObjectiveId for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseSizeBasedRecommendationServiceLevelObjectiveId")]
		public string DatabaseSizeBasedRecommendationServiceLevelObjectiveId { get; set; }
		
		/// <summary>
		/// Gets or sets disasterPlanBasedRecommendationServiceLevelObjective for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disasterPlanBasedRecommendationServiceLevelObjective")]
		public string DisasterPlanBasedRecommendationServiceLevelObjective { get; set; }
		
		/// <summary>
		/// Gets or sets disasterPlanBasedRecommendationServiceLevelObjectiveId for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disasterPlanBasedRecommendationServiceLevelObjectiveId")]
		public string DisasterPlanBasedRecommendationServiceLevelObjectiveId { get; set; }
		
		/// <summary>
		/// Gets or sets maxDtu for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDtu")]
		public System.Nullable<System.Double> MaxDtu { get; set; }
		
		/// <summary>
		/// Gets or sets maxSizeInGB for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSizeInGB")]
		public System.Nullable<System.Double> MaxSizeInGB { get; set; }
		
		/// <summary>
		/// Gets or sets minDtu for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minDtu")]
		public System.Nullable<System.Double> MinDtu { get; set; }
		
		/// <summary>
		/// The observation period start (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observationPeriodEnd")]
		public System.Nullable<System.DateTimeOffset> ObservationPeriodEnd { get; set; }
		
		/// <summary>
		/// The observation period start (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observationPeriodStart")]
		public System.Nullable<System.DateTimeOffset> ObservationPeriodStart { get; set; }
		
		/// <summary>
		/// Gets or sets overallRecommendationServiceLevelObjective for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallRecommendationServiceLevelObjective")]
		public string OverallRecommendationServiceLevelObjective { get; set; }
		
		/// <summary>
		/// Gets or sets overallRecommendationServiceLevelObjectiveId for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallRecommendationServiceLevelObjectiveId")]
		public string OverallRecommendationServiceLevelObjectiveId { get; set; }
		
		/// <summary>
		/// Gets or sets serviceLevelObjectiveUsageMetrics for the service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceLevelObjectiveUsageMetrics")]
		public SloUsageMetric[] ServiceLevelObjectiveUsageMetrics { get; set; }
		
		/// <summary>
		/// Gets or sets usageBasedRecommendationServiceLevelObjective for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageBasedRecommendationServiceLevelObjective")]
		public string UsageBasedRecommendationServiceLevelObjective { get; set; }
		
		/// <summary>
		/// Gets or sets usageBasedRecommendationServiceLevelObjectiveId for service tier advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageBasedRecommendationServiceLevelObjectiveId")]
		public string UsageBasedRecommendationServiceLevelObjectiveId { get; set; }
	}
	
	/// <summary>
	/// A Slo Usage Metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SloUsageMetric
	{
		
		/// <summary>
		/// Gets or sets inRangeTimeRatio for SLO usage metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inRangeTimeRatio")]
		public System.Nullable<System.Double> InRangeTimeRatio { get; set; }
		
		/// <summary>
		/// The serviceLevelObjective for SLO usage metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceLevelObjective")]
		public System.Nullable<SloUsageMetricServiceLevelObjective> ServiceLevelObjective { get; set; }
		
		/// <summary>
		/// The serviceLevelObjectiveId for SLO usage metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceLevelObjectiveId")]
		public string ServiceLevelObjectiveId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SloUsageMetricServiceLevelObjective
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="System")]
		_System = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		System0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		System1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		System2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		System3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		System4 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		System2L = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		System3L = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		System4L = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S0 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S2 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S4 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S6 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S7 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S9 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S12 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P1 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P2 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P3 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P4 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P6 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P11 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P15 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRS1 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRS2 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRS4 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRS6 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW100 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW200 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW300 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW400 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW500 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW600 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW1000 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW1200 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW1000c = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW1500 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW1500c = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW2000 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW2000c = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW3000 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW2500c = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW3000c = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW6000 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW5000c = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW6000c = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW7500c = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW10000c = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW15000c = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW30000c = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS100 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS200 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS300 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS400 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS500 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS600 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS1000 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS1200 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS1500 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DS2000 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElasticPool = 64,
	}
	
	public class TransparentDataEncryption
	{
	}
	
	public class TransparentDataEncryptionActivity
	{
	}
	
	/// <summary>
	/// Represents the response to a list database transparent data encryption activity request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TransparentDataEncryptionActivityListResult
	{
		
		/// <summary>
		/// The list of database transparent data encryption activities.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TransparentDataEncryptionActivity[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of a database transparent data encryption Scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TransparentDataEncryptionActivityProperties
	{
		
		/// <summary>
		/// The percent complete of the transparent data encryption scan for a database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Single> PercentComplete { get; set; }
		
		/// <summary>
		/// The status of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TransparentDataEncryptionActivityPropertiesStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TransparentDataEncryptionActivityPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Encrypting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decrypting = 1,
	}
	
	/// <summary>
	/// Represents the properties of a database transparent data encryption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TransparentDataEncryptionProperties
	{
		
		/// <summary>
		/// The status of the database transparent data encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TransparentDataEncryptionPropertiesStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TransparentDataEncryptionPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns service tier advisors for specified database.
		/// ServiceTierAdvisors_ListByDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/serviceTierAdvisors
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of database.</param>
		/// <returns>OK</returns>
		public async Task<ServiceTierAdvisorListResult> ServiceTierAdvisors_ListByDatabaseAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/serviceTierAdvisors?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceTierAdvisorListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a service tier advisor.
		/// ServiceTierAdvisors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/serviceTierAdvisors/{serviceTierAdvisorName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of database.</param>
		/// <param name="serviceTierAdvisorName">The name of service tier advisor.</param>
		/// <returns>OK</returns>
		public async Task<ServiceTierAdvisor> ServiceTierAdvisors_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, string serviceTierAdvisorName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/serviceTierAdvisors/"+ (serviceTierAdvisorName==null? "" : System.Uri.EscapeDataString(serviceTierAdvisorName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceTierAdvisor>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a database's transparent data encryption configuration.
		/// TransparentDataEncryptions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database for which the transparent data encryption applies.</param>
		/// <param name="transparentDataEncryptionName">The name of the transparent data encryption configuration.</param>
		/// <returns>OK</returns>
		public async Task<TransparentDataEncryption> TransparentDataEncryptions_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, TransparentDataEncryptions_GetTransparentDataEncryptionName transparentDataEncryptionName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/transparentDataEncryption/"+transparentDataEncryptionName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TransparentDataEncryption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a database's transparent data encryption configuration.
		/// TransparentDataEncryptions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database for which setting the transparent data encryption applies.</param>
		/// <param name="transparentDataEncryptionName">The name of the transparent data encryption configuration.</param>
		/// <param name="requestBody">The required parameters for creating or updating transparent data encryption.</param>
		/// <returns>OK</returns>
		public async Task<TransparentDataEncryption> TransparentDataEncryptions_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, TransparentDataEncryptions_GetTransparentDataEncryptionName transparentDataEncryptionName, TransparentDataEncryption requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/transparentDataEncryption/"+transparentDataEncryptionName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TransparentDataEncryption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a database's transparent data encryption operation result.
		/// TransparentDataEncryptionActivities_ListByConfiguration subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}/operationResults
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database for which the transparent data encryption applies.</param>
		/// <param name="transparentDataEncryptionName">The name of the transparent data encryption configuration.</param>
		/// <returns>OK</returns>
		public async Task<TransparentDataEncryptionActivityListResult> TransparentDataEncryptionActivities_ListByConfigurationAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, TransparentDataEncryptions_GetTransparentDataEncryptionName transparentDataEncryptionName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/transparentDataEncryption/"+transparentDataEncryptionName+"/operationResults?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TransparentDataEncryptionActivityListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns elastic pool activities.
		/// ElasticPoolActivities_ListByElasticPool subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolActivity
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="elasticPoolName">The name of the elastic pool for which to get the current activity.</param>
		/// <returns>OK</returns>
		public async Task<ElasticPoolActivityListResult> ElasticPoolActivities_ListByElasticPoolAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string elasticPoolName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/elasticPools/"+ (elasticPoolName==null? "" : System.Uri.EscapeDataString(elasticPoolName))+"/elasticPoolActivity?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ElasticPoolActivityListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns activity on databases inside of an elastic pool.
		/// ElasticPoolDatabaseActivities_ListByElasticPool subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolDatabaseActivity
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="elasticPoolName">The name of the elastic pool.</param>
		/// <returns>OK</returns>
		public async Task<ElasticPoolDatabaseActivityListResult> ElasticPoolDatabaseActivities_ListByElasticPoolAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string elasticPoolName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/elasticPools/"+ (elasticPoolName==null? "" : System.Uri.EscapeDataString(elasticPoolName))+"/elasticPoolDatabaseActivity?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ElasticPoolDatabaseActivityListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum TransparentDataEncryptions_GetTransparentDataEncryptionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		current = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
