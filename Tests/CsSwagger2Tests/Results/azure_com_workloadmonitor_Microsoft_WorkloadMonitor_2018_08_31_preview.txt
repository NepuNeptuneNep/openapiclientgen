//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Model for component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Component
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Model for properties of a component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ComponentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Model for properties of a component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComponentProperties
	{
		
		/// <summary>
		/// Properties requested in aggregation queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregateProperties")]
		public System.Collections.Generic.Dictionary<string, string> AggregateProperties { get; set; }
		
		/// <summary>
		/// component children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public Component[] Children { get; set; }
		
		/// <summary>
		/// Name of the component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		/// <summary>
		/// Component type group category. Classification of component type groups into a logical category. e.g. Network, Disk, Memory, CPU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeGroupCategory")]
		public string ComponentTypeGroupCategory { get; set; }
		
		/// <summary>
		/// ID of the component type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		/// <summary>
		/// Name of the component type. Qualifies the type of component such as whether it is a SQL database, logical disk, website, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeName")]
		public string ComponentTypeName { get; set; }
		
		/// <summary>
		/// Health state of the component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthState")]
		public System.Nullable<ComponentPropertiesHealthState> HealthState { get; set; }
		
		/// <summary>
		/// Category of component's health state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthStateCategory")]
		public System.Nullable<ComponentPropertiesHealthStateCategory> HealthStateCategory { get; set; }
		
		/// <summary>
		/// End time for health state changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthStateChangesEndTime")]
		public System.Nullable<System.DateTimeOffset> HealthStateChangesEndTime { get; set; }
		
		/// <summary>
		/// Start time for health state changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthStateChangesStartTime")]
		public System.Nullable<System.DateTimeOffset> HealthStateChangesStartTime { get; set; }
		
		/// <summary>
		/// Time of last health state change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastHealthStateChangeTime")]
		public System.Nullable<System.DateTimeOffset> LastHealthStateChangeTime { get; set; }
		
		/// <summary>
		/// ID of the OMS solution this component belong to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solutionId")]
		public string SolutionId { get; set; }
		
		/// <summary>
		/// ID of the VM this component belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
		
		/// <summary>
		/// Name of the VM this component belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmName")]
		public string VmName { get; set; }
		
		/// <summary>
		/// Tags on the VM this component belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmTags")]
		public System.Collections.Generic.Dictionary<string, string> VmTags { get; set; }
		
		/// <summary>
		/// Type of the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadType")]
		public System.Nullable<ComponentPropertiesWorkloadType> WorkloadType { get; set; }
		
		/// <summary>
		/// ID of the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComponentPropertiesHealthState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Uninitialized = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComponentPropertiesHealthStateCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Identity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomGroup = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComponentPropertiesWorkloadType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseOS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IIS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Apache = 3,
	}
	
	/// <summary>
	/// Model for collection of components.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComponentsCollection
	{
		
		/// <summary>
		/// URL to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of components.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Component[] Value { get; set; }
	}
	
	/// <summary>
	/// Error field contract.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorFieldContract
	{
		
		/// <summary>
		/// Property level error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Human-readable representation of property-level error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Property name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Error body contract.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The list of invalid fields send in request, in case of validation error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorFieldContract[] Details { get; set; }
		
		/// <summary>
		/// Human-readable representation of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Model for health state change
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HealthStateChange
	{
		
		/// <summary>
		/// Health state of monitor instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthState")]
		public ComponentPropertiesHealthState HealthState { get; set; }
		
		/// <summary>
		/// Time at which this Health state was reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthStateChangeTime")]
		public System.Nullable<System.DateTimeOffset> HealthStateChangeTime { get; set; }
	}
	
	/// <summary>
	/// Model for Monitor
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Monitor
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Model for properties of a Monitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MonitorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Model for properties of a Monitor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MonitorProperties
	{
		
		/// <summary>
		/// Generates alerts or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertGeneration")]
		public System.Nullable<MonitorPropertiesAlertGeneration> AlertGeneration { get; set; }
		
		/// <summary>
		/// Component Type Display Name of the monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeDisplayName")]
		public string ComponentTypeDisplayName { get; set; }
		
		/// <summary>
		/// Component Type Id of monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		/// <summary>
		/// Component Type Name of monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeName")]
		public string ComponentTypeName { get; set; }
		
		/// <summary>
		/// Collection of MonitorCriteria. For PATCH calls, instead of partial list, complete list of expected criteria should be passed for proper updating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public MonitorCriteria[] Criteria { get; set; }
		
		/// <summary>
		/// Description of the monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// URL pointing to the documentation of the monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentationURL")]
		public string DocumentationURL { get; set; }
		
		/// <summary>
		/// Frequency at which monitor condition is evaluated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		/// <summary>
		/// The duration in minutes in the past during which the monitor is evaluated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lookbackDuration")]
		public System.Nullable<System.Int32> LookbackDuration { get; set; }
		
		/// <summary>
		/// Category of the monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorCategory")]
		public System.Nullable<MonitorPropertiesMonitorCategory> MonitorCategory { get; set; }
		
		/// <summary>
		/// User friendly display name of the monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorDisplayName")]
		public string MonitorDisplayName { get; set; }
		
		/// <summary>
		/// ID of the monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorId")]
		public string MonitorId { get; set; }
		
		/// <summary>
		/// Name of the monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorName")]
		public string MonitorName { get; set; }
		
		/// <summary>
		/// Is the monitor state enabled or disabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorState")]
		public MonitorPropertiesAlertGeneration MonitorState { get; set; }
		
		/// <summary>
		/// Type of the monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorType")]
		public System.Nullable<MonitorPropertiesMonitorType> MonitorType { get; set; }
		
		/// <summary>
		/// User friendly display name of the parent monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentMonitorDisplayName")]
		public string ParentMonitorDisplayName { get; set; }
		
		/// <summary>
		/// Name of the parent monitor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentMonitorName")]
		public string ParentMonitorName { get; set; }
		
		/// <summary>
		/// Name of the signal on which this monitor is configured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalName")]
		public string SignalName { get; set; }
		
		/// <summary>
		/// Type of the signal on which this monitor is configured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalType")]
		public string SignalType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MonitorPropertiesAlertGeneration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Criteria for monitor configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MonitorCriteria
	{
		
		/// <summary>
		/// Comparison enum on threshold of this criteria
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonOperator")]
		public System.Nullable<MonitorCriteriaComparisonOperator> ComparisonOperator { get; set; }
		
		/// <summary>
		/// Target health state of the criteria
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthState")]
		public ComponentPropertiesHealthState HealthState { get; set; }
		
		/// <summary>
		/// Threshold value for this criteria
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Double> Threshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MonitorCriteriaComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equals = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanOrEqual = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanOrEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEquals = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MonitorPropertiesMonitorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AvailabilityHealth = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Configuration = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EntityHealth = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerformanceHealth = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Security = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MonitorPropertiesMonitorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aggregate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dependency = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unit = 2,
	}
	
	/// <summary>
	/// Model for monitor instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MonitorInstance
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Model for properties of a monitor instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MonitorInstanceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Model for properties of a monitor instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MonitorInstanceProperties
	{
		
		/// <summary>
		/// Properties requested in aggregation queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregateProperties")]
		public System.Collections.Generic.Dictionary<string, string> AggregateProperties { get; set; }
		
		/// <summary>
		/// Generates alert or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertGeneration")]
		public MonitorPropertiesAlertGeneration AlertGeneration { get; set; }
		
		/// <summary>
		/// Health instance children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public MonitorInstance[] Children { get; set; }
		
		/// <summary>
		/// ID of the component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentId")]
		public string ComponentId { get; set; }
		
		/// <summary>
		/// Name of the component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentName")]
		public string ComponentName { get; set; }
		
		/// <summary>
		/// ID of the component type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeId")]
		public string ComponentTypeId { get; set; }
		
		/// <summary>
		/// Name of the component type. Qualifies the type of component such as whether it is a SQL database, logical disk, website, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentTypeName")]
		public string ComponentTypeName { get; set; }
		
		/// <summary>
		/// Health state of monitor instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthState")]
		public ComponentPropertiesHealthState HealthState { get; set; }
		
		/// <summary>
		/// Category of monitor instance's health state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthStateCategory")]
		public ComponentPropertiesHealthStateCategory HealthStateCategory { get; set; }
		
		/// <summary>
		/// Health state changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthStateChanges")]
		public HealthStateChange[] HealthStateChanges { get; set; }
		
		/// <summary>
		/// End time for health state changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthStateChangesEndTime")]
		public System.Nullable<System.DateTimeOffset> HealthStateChangesEndTime { get; set; }
		
		/// <summary>
		/// Start time for health state changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthStateChangesStartTime")]
		public System.Nullable<System.DateTimeOffset> HealthStateChangesStartTime { get; set; }
		
		/// <summary>
		/// Time of last health state change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastHealthStateChangeTime")]
		public System.Nullable<System.DateTimeOffset> LastHealthStateChangeTime { get; set; }
		
		/// <summary>
		/// Monitor type category. Indicates the attribute of the component that the health criteria monitors such as Performance, Availability, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorCategory")]
		public MonitorPropertiesMonitorCategory MonitorCategory { get; set; }
		
		/// <summary>
		/// ID of the monitor instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorId")]
		public string MonitorId { get; set; }
		
		/// <summary>
		/// Name of the monitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorName")]
		public string MonitorName { get; set; }
		
		/// <summary>
		/// Type of the monitor. The qualifier for the health criteria depending on the functionality it performs such as Unit, Aggregate, Dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorType")]
		public MonitorPropertiesMonitorType MonitorType { get; set; }
		
		/// <summary>
		/// ID of the OMS solution this health instance belong to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solutionId")]
		public string SolutionId { get; set; }
		
		/// <summary>
		/// Type of the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadType")]
		public ComponentPropertiesWorkloadType WorkloadType { get; set; }
		
		/// <summary>
		/// ID of the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// Model for collection of health instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MonitorInstancesCollection
	{
		
		/// <summary>
		/// URL to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of health instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MonitorInstance[] Value { get; set; }
	}
	
	/// <summary>
	/// Model for collection of Monitor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MonitorsCollection
	{
		
		/// <summary>
		/// URL for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of Monitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Monitor[] Value { get; set; }
	}
	
	/// <summary>
	/// Model for NotificationSetting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationSetting
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Model for properties of a NotificationSetting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public NotificationSettingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Model for properties of a NotificationSetting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationSettingProperties
	{
		
		/// <summary>
		/// List of action group resource ids to be notified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionGroupResourceIds")]
		public string[] ActionGroupResourceIds { get; set; }
	}
	
	/// <summary>
	/// Model for collection of notificationSettings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationSettingsCollection
	{
		
		/// <summary>
		/// URL to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NotificationSetting[] Value { get; set; }
	}
	
	/// <summary>
	/// Operation supported by the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Properties of an operation supported by the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationProperties Display { get; set; }
		
		/// <summary>
		/// The name of the resource operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	/// <summary>
	/// Properties of an operation supported by the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationProperties
	{
		
		/// <summary>
		/// The description of the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// This operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The provider name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Container for a list of operations supported by the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the details of all operations possible on the resource provider.
		/// Operations_List providers/Microsoft.WorkloadMonitor/operations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="skiptoken">The page-continuation token to use with a paged version of this API.</param>
		/// <returns>OK.</returns>
		public async Task<OperationListResult> Operations_ListAsync(Operations_ListApi_version api_version, string skiptoken)
		{
			var requestUri = "providers/Microsoft.WorkloadMonitor/operations?api-version=" + api_version+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get subscription wide details of components.
		/// ComponentsSummary_List subscriptions/{subscriptionId}/providers/Microsoft.WorkloadMonitor/componentsSummary
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="select">Properties to be returned in the response.</param>
		/// <param name="filter">Filter to be applied on the operation.</param>
		/// <param name="apply">Apply aggregation.</param>
		/// <param name="orderby">Sort the result on one or more properties.</param>
		/// <param name="expand">Include properties inline in the response.</param>
		/// <param name="top">Limit the result to the specified number of rows.</param>
		/// <param name="skiptoken">The page-continuation token to use with a paged version of this API.</param>
		/// <returns>OK. At least one component found.</returns>
		public async Task<ComponentsCollection> ComponentsSummary_ListAsync(string subscriptionId, ComponentsSummary_ListApi_version api_version, string select, string filter, string apply, string orderby, string expand, string top, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.WorkloadMonitor/componentsSummary&api-version=" + api_version+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$apply=" + (apply==null? "" : System.Uri.EscapeDataString(apply))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$top=" + (top==null? "" : System.Uri.EscapeDataString(top))+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ComponentsCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get subscription wide health instances.
		/// MonitorInstancesSummary_List subscriptions/{subscriptionId}/providers/Microsoft.WorkloadMonitor/monitorInstancesSummary
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="select">Properties to be returned in the response.</param>
		/// <param name="filter">Filter to be applied on the operation.</param>
		/// <param name="apply">Apply aggregation.</param>
		/// <param name="orderby">Sort the result on one or more properties.</param>
		/// <param name="expand">Include properties inline in the response.</param>
		/// <param name="top">Limit the result to the specified number of rows.</param>
		/// <param name="skiptoken">The page-continuation token to use with a paged version of this API.</param>
		/// <returns>OK.</returns>
		public async Task<MonitorInstancesCollection> MonitorInstancesSummary_ListAsync(string subscriptionId, MonitorInstancesSummary_ListApi_version api_version, string select, string filter, string apply, string orderby, string expand, string top, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.WorkloadMonitor/monitorInstancesSummary&api-version=" + api_version+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$apply=" + (apply==null? "" : System.Uri.EscapeDataString(apply))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$top=" + (top==null? "" : System.Uri.EscapeDataString(top))+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MonitorInstancesCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of components for a resource.
		/// Components_ListByResource subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/components
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="select">Properties to be returned in the response.</param>
		/// <param name="filter">Filter to be applied on the operation.</param>
		/// <param name="apply">Apply aggregation.</param>
		/// <param name="orderby">Sort the result on one or more properties.</param>
		/// <param name="expand">Include properties inline in the response.</param>
		/// <param name="top">Limit the result to the specified number of rows.</param>
		/// <param name="skiptoken">The page-continuation token to use with a paged version of this API.</param>
		/// <returns>OK. At least one component found.</returns>
		public async Task<ComponentsCollection> Components_ListByResourceAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, Components_ListByResourceApi_version api_version, string select, string filter, string apply, string orderby, string expand, string top, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/components&api-version=" + api_version+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$apply=" + (apply==null? "" : System.Uri.EscapeDataString(apply))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$top=" + (top==null? "" : System.Uri.EscapeDataString(top))+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ComponentsCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details of a component.
		/// Components_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/components/{componentId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="componentId">Component Id.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="select">Properties to be returned in the response.</param>
		/// <param name="expand">Include properties inline in the response.</param>
		/// <returns>OK. component is found.</returns>
		public async Task<Component> Components_GetAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string componentId, Components_GetApi_version api_version, string select, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/components/"+ (componentId==null? "" : System.Uri.EscapeDataString(componentId))+"&api-version=" + api_version+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Component>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of monitor instances for a resource.
		/// MonitorInstances_ListByResource subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitorInstances
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="select">Properties to be returned in the response.</param>
		/// <param name="filter">Filter to be applied on the operation.</param>
		/// <param name="apply">Apply aggregation.</param>
		/// <param name="orderby">Sort the result on one or more properties.</param>
		/// <param name="expand">Include properties inline in the response.</param>
		/// <param name="top">Limit the result to the specified number of rows.</param>
		/// <param name="skiptoken">The page-continuation token to use with a paged version of this API.</param>
		/// <returns>OK.</returns>
		public async Task<MonitorInstancesCollection> MonitorInstances_ListByResourceAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, MonitorInstances_ListByResourceApi_version api_version, string select, string filter, string apply, string orderby, string expand, string top, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/monitorInstances&api-version=" + api_version+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$apply=" + (apply==null? "" : System.Uri.EscapeDataString(apply))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$top=" + (top==null? "" : System.Uri.EscapeDataString(top))+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MonitorInstancesCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details of a monitorInstance.
		/// MonitorInstances_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitorInstances/{monitorInstanceId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="monitorInstanceId">MonitorInstance Id.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="select">Properties to be returned in the response.</param>
		/// <param name="expand">Include properties inline in the response.</param>
		/// <returns>OK. monitorInstance is found.</returns>
		public async Task<MonitorInstance> MonitorInstances_GetAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string monitorInstanceId, MonitorInstances_GetApi_version api_version, string select, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/monitorInstances/"+ (monitorInstanceId==null? "" : System.Uri.EscapeDataString(monitorInstanceId))+"&api-version=" + api_version+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MonitorInstance>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of a monitors of a resource.
		/// Monitors_ListByResource subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="filter">Filter to be applied on the operation.</param>
		/// <param name="skiptoken">The page-continuation token to use with a paged version of this API.</param>
		/// <returns>OK. At least one monitor is found.</returns>
		public async Task<MonitorsCollection> Monitors_ListByResourceAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, Monitors_ListByResourceApi_version api_version, string filter, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/monitors&api-version=" + api_version+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MonitorsCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details of a single monitor.
		/// Monitors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="monitorId">Monitor Id.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK. monitor is found.</returns>
		public async Task<Monitor> Monitors_GetAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string monitorId, Monitors_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/monitors/"+ (monitorId==null? "" : System.Uri.EscapeDataString(monitorId))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Monitor>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Monitor's configuration.
		/// Monitors_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="monitorId">Monitor Id.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Body of the Monitor PATCH object.</param>
		/// <returns>OK. Existing monitor is updated.</returns>
		public async Task<Monitor> Monitors_UpdateAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, string monitorId, Monitors_UpdateApi_version api_version, Monitor requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/monitors/"+ (monitorId==null? "" : System.Uri.EscapeDataString(monitorId))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Monitor>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of notification settings for a resource.
		/// NotificationSettings_ListByResource subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/notificationSettings
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="skiptoken">The page-continuation token to use with a paged version of this API.</param>
		/// <returns>OK. At least one component found.</returns>
		public async Task<NotificationSettingsCollection> NotificationSettings_ListByResourceAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, NotificationSettings_ListByResourceApi_version api_version, string skiptoken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/notificationSettings&api-version=" + api_version+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationSettingsCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a of notification setting for a resource.
		/// NotificationSettings_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/notificationSettings/{notificationSettingName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="notificationSettingName">Default string modeled as parameter for URL to work correctly.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK. At least one component found.</returns>
		public async Task<NotificationSetting> NotificationSettings_GetAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, NotificationSettings_GetNotificationSettingName notificationSettingName, NotificationSettings_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/notificationSettings/"+notificationSettingName+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update notification settings for a resource.
		/// NotificationSettings_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/notificationSettings/{notificationSettingName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceNamespace">The Namespace of the resource.</param>
		/// <param name="resourceType">The type of the resource.</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="notificationSettingName">Default string modeled as parameter for URL to work correctly.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Body of the NotificationSetting PUT object.</param>
		/// <returns>OK. At least one component found.</returns>
		public async Task<NotificationSetting> NotificationSettings_UpdateAsync(string subscriptionId, string resourceGroupName, string resourceNamespace, string resourceType, string resourceName, NotificationSettings_UpdateNotificationSettingName notificationSettingName, NotificationSettings_UpdateApi_version api_version, NotificationSetting requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceNamespace==null? "" : System.Uri.EscapeDataString(resourceNamespace))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.WorkloadMonitor/notificationSettings/"+notificationSettingName+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Operations_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum ComponentsSummary_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum MonitorInstancesSummary_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum Components_ListByResourceApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum Components_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum MonitorInstances_ListByResourceApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum MonitorInstances_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum Monitors_ListByResourceApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum Monitors_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum Monitors_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum NotificationSettings_ListByResourceApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum NotificationSettings_GetNotificationSettingName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum NotificationSettings_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
	
	public enum NotificationSettings_UpdateNotificationSettingName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum NotificationSettings_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-08-31-preview")]
		_2018Minus08Minus31Minuspreview = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
