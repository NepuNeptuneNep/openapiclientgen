//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Check Deposit Address
		/// GET__version_addresses__address___format_ v2/addresses/{address}.json
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET__version_addresses__address___format_Async(string address)
		{
			var requestUri = "v2/addresses/"+ (address==null? "" : System.Uri.EscapeDataString(address))+".json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details of specific deposit.
		/// GET__version_deposit___format_ v2/deposit.json
		/// </summary>
		/// <param name="access_key">Access key.</param>
		/// <param name="tonce">Tonce is an integer represents the milliseconds elapsed since Unix epoch.</param>
		/// <param name="signature">The signature of your request payload, generated using your secret key.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_deposit___format_Async(string access_key, int tonce, string signature, string txid)
		{
			var requestUri = "v2/deposit.json?access_key=" + (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"&tonce="+tonce+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature))+"&txid=" + (txid==null? "" : System.Uri.EscapeDataString(txid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Where to deposit. The address field could be empty when a new address is generating (e.g. for bitcoin), you should try again later in that case.
		/// GET__version_deposit_address___format_ v2/deposit_address.json
		/// </summary>
		/// <param name="access_key">Access key.</param>
		/// <param name="tonce">Tonce is an integer represents the milliseconds elapsed since Unix epoch.</param>
		/// <param name="signature">The signature of your request payload, generated using your secret key.</param>
		/// <param name="currency">The account to which you want to deposit. Available values: cny, btc, eth, pls, note, bts, bitcny, bitusd, bitbtc, yun, nxt, ltc, doge, sc, dgd, dcs, dao, etc, amp, 1st, rep, ans, zec, zmc, gnt, gxs, qtum, eos, snt, bcc, omg, lun, pay, ven</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_deposit_address___format_Async(string access_key, int tonce, string signature, string currency)
		{
			var requestUri = "v2/deposit_address.json?access_key=" + (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"&tonce="+tonce+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get your deposits history.
		/// GET__version_deposits___format_ v2/deposits.json
		/// </summary>
		/// <param name="access_key">Access key.</param>
		/// <param name="tonce">Tonce is an integer represents the milliseconds elapsed since Unix epoch.</param>
		/// <param name="signature">The signature of your request payload, generated using your secret key.</param>
		/// <param name="currency">Currency value contains  cny, btc, eth, pls, note, bts, bitcny, bitusd, bitbtc, yun, nxt, ltc, doge, sc, dgd, dcs, dao, etc, amp, 1st, rep, ans, zec, zmc, gnt, gxs, qtum, eos, snt, bcc, omg, lun, pay, ven</param>
		/// <param name="limit">Set result limit.</param>
		/// <param name="state">State value contains  submitting, cancelled, submitted, rejected, accepted, checked, warning</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_deposits___format_Async(string access_key, int tonce, string signature, string currency, int limit, string state)
		{
			var requestUri = "v2/deposits.json?access_key=" + (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"&tonce="+tonce+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&limit="+limit+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get depth or specified market. Both asks and bids are sorted from highest price to lowest.
		/// GET__version_depth___format_ v2/depth.json
		/// </summary>
		/// <param name="market">Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.</param>
		/// <param name="limit">Limit the number of returned price levels. Default to 300.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_depth___format_Async(string market, int limit)
		{
			var requestUri = "v2/depth.json?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get OHLC(k line) of specific market.
		/// GET__version_k___format_ v2/k.json
		/// </summary>
		/// <param name="market">Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.</param>
		/// <param name="limit">Limit the number of returned data points, default to 30.</param>
		/// <param name="period">Time period of K line, default to 1. You can choose between 1, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 4320, 10080</param>
		/// <param name="timestamp">An integer represents the seconds elapsed since Unix epoch. If set, only k-line data after that time will be returned.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_k___format_Async(string market, int limit, int period, int timestamp)
		{
			var requestUri = "v2/k.json?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&period="+period+"&timestamp="+timestamp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get K data with pending trades, which are the trades not included in K data yet, because there's delay between trade generated and processed by K data generator.
		/// GET__version_k_with_pending_trades___format_ v2/k_with_pending_trades.json
		/// </summary>
		/// <param name="market">Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.</param>
		/// <param name="trade_id">The trade id of the first trade you received.</param>
		/// <param name="limit">Limit the number of returned data points, default to 30.</param>
		/// <param name="period">Time period of K line, default to 1. You can choose between 1, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 4320, 10080</param>
		/// <param name="timestamp">An integer represents the seconds elapsed since Unix epoch. If set, only k-line data after that time will be returned.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_k_with_pending_trades___format_Async(string market, int trade_id, int limit, int period, int timestamp)
		{
			var requestUri = "v2/k_with_pending_trades.json?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&trade_id="+trade_id+"&limit="+limit+"&period="+period+"&timestamp="+timestamp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all available markets.
		/// GET__version_markets___format_ v2/markets.json
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET__version_markets___format_Async()
		{
			var requestUri = "v2/markets.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get your profile and accounts info.
		/// GET__version_members_me___format_ v2/members/me.json
		/// </summary>
		/// <param name="access_key">Access key.</param>
		/// <param name="tonce">Tonce is an integer represents the milliseconds elapsed since Unix epoch.</param>
		/// <param name="signature">The signature of your request payload, generated using your secret key.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_members_me___format_Async(string access_key, int tonce, string signature)
		{
			var requestUri = "v2/members/me.json?access_key=" + (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"&tonce="+tonce+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information of specified order.
		/// GET__version_order___format_ v2/order.json
		/// </summary>
		/// <param name="access_key">Access key.</param>
		/// <param name="tonce">Tonce is an integer represents the milliseconds elapsed since Unix epoch.</param>
		/// <param name="signature">The signature of your request payload, generated using your secret key.</param>
		/// <param name="id">Unique order id.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_order___format_Async(string access_key, int tonce, string signature, int id)
		{
			var requestUri = "v2/order.json?access_key=" + (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"&tonce="+tonce+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature))+"&id="+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the order book of specified market.
		/// GET__version_order_book___format_ v2/order_book.json
		/// </summary>
		/// <param name="market">Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.</param>
		/// <param name="asks_limit">Limit the number of returned sell orders. Default to 20.</param>
		/// <param name="bids_limit">Limit the number of returned buy orders. Default to 20.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_order_book___format_Async(string market, int asks_limit, int bids_limit)
		{
			var requestUri = "v2/order_book.json?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&asks_limit="+asks_limit+"&bids_limit="+bids_limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get your orders, results is paginated.
		/// GET__version_orders___format_ v2/orders.json
		/// </summary>
		/// <param name="access_key">Access key.</param>
		/// <param name="tonce">Tonce is an integer represents the milliseconds elapsed since Unix epoch.</param>
		/// <param name="signature">The signature of your request payload, generated using your secret key.</param>
		/// <param name="market">Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.</param>
		/// <param name="state">Filter order by state. One of 'wait', 'done', or 'cancel'. An order in 'wait' is an active order, waiting fullfillment; a 'done' order is an order fullfilled; 'cancel' means the order has been cancelled. Default to 'wait'.</param>
		/// <param name="limit">Limit the number of returned orders, default to 100.</param>
		/// <param name="page">Specify the page of paginated results.</param>
		/// <param name="order_by">If set, returned orders will be sorted in specific order. One of 'asc' or 'desc', default to 'asc'.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_orders___format_Async(string access_key, int tonce, string signature, string market, string state, int limit, int page, string order_by)
		{
			var requestUri = "v2/orders.json?access_key=" + (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"&tonce="+tonce+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&limit="+limit+"&page="+page+"&order_by=" + (order_by==null? "" : System.Uri.EscapeDataString(order_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GET__version_partners_orders__id_trades___format_ v2/partners/orders/{id}/trades.json
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET__version_partners_orders__id_trades___format_Async(string id, string access_key_hash)
		{
			var requestUri = "v2/partners/orders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/trades.json&access_key_hash=" + (access_key_hash==null? "" : System.Uri.EscapeDataString(access_key_hash));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get ticker of all markets.
		/// GET__version_tickers___format_ v2/tickers.json
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET__version_tickers___format_Async()
		{
			var requestUri = "v2/tickers.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get ticker of specific market.
		/// GET__version_tickers__market___format_ v2/tickers/{market}.json
		/// </summary>
		/// <param name="market">Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_tickers__market___format_Async(string market)
		{
			var requestUri = "v2/tickers/"+ (market==null? "" : System.Uri.EscapeDataString(market))+".json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get server current time, in seconds since Unix epoch.
		/// GET__version_timestamp___format_ v2/timestamp.json
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GET__version_timestamp___format_Async()
		{
			var requestUri = "v2/timestamp.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get recent trades on market, each trade is included only once. Trades are sorted in reverse creation order.
		/// GET__version_trades___format_ v2/trades.json
		/// </summary>
		/// <param name="market">Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.</param>
		/// <param name="limit">Limit the number of returned trades. Default to 50.</param>
		/// <param name="timestamp">An integer represents the seconds elapsed since Unix epoch. If set, only trades executed before the time will be returned.</param>
		/// <param name="from">Trade id. If set, only trades created after the trade will be returned.</param>
		/// <param name="to">Trade id. If set, only trades created before the trade will be returned.</param>
		/// <param name="order_by">If set, returned trades will be sorted in specific order. One of 'asc' or 'desc', default to 'desc'.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_trades___format_Async(string market, int limit, int timestamp, int from, int to, string order_by)
		{
			var requestUri = "v2/trades.json?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&timestamp="+timestamp+"&from="+from+"&to="+to+"&order_by=" + (order_by==null? "" : System.Uri.EscapeDataString(order_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get your executed trades. Trades are sorted in reverse creation order.
		/// GET__version_trades_my___format_ v2/trades/my.json
		/// </summary>
		/// <param name="access_key">Access key.</param>
		/// <param name="tonce">Tonce is an integer represents the milliseconds elapsed since Unix epoch.</param>
		/// <param name="signature">The signature of your request payload, generated using your secret key.</param>
		/// <param name="market">Unique market id. It's always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. 'btccny'. All available markets can be found at /api/v2/markets.</param>
		/// <param name="limit">Limit the number of returned trades. Default to 50.</param>
		/// <param name="timestamp">An integer represents the seconds elapsed since Unix epoch. If set, only trades executed before the time will be returned.</param>
		/// <param name="from">Trade id. If set, only trades created after the trade will be returned.</param>
		/// <param name="to">Trade id. If set, only trades created before the trade will be returned.</param>
		/// <param name="order_by">If set, returned trades will be sorted in specific order. One of 'asc' or 'desc', default to 'desc'.</param>
		/// <returns>No response was specified</returns>
		public async Task GET__version_trades_my___format_Async(string access_key, int tonce, string signature, string market, int limit, int timestamp, int from, int to, string order_by)
		{
			var requestUri = "v2/trades/my.json?access_key=" + (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"&tonce="+tonce+"&signature=" + (signature==null? "" : System.Uri.EscapeDataString(signature))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&timestamp="+timestamp+"&from="+from+"&to="+to+"&order_by=" + (order_by==null? "" : System.Uri.EscapeDataString(order_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
