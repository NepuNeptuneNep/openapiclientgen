//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public class ExpressRouteLink
	{
	}
	
	/// <summary>
	/// Response for ListExpressRouteLinks API service call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteLinkListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of ExpressRouteLink sub-resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteLink[] Value { get; set; }
	}
	
	/// <summary>
	/// ExpressRouteLink Mac Security Configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteLinkMacSecConfig
	{
		
		/// <summary>
		/// Keyvault Secret Identifier URL containing Mac security CAK key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cakSecretIdentifier")]
		public string CakSecretIdentifier { get; set; }
		
		/// <summary>
		/// Mac security cipher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cipher")]
		public System.Nullable<ExpressRouteLinkMacSecConfigCipher> Cipher { get; set; }
		
		/// <summary>
		/// Keyvault Secret Identifier URL containing Mac security CKN key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cknSecretIdentifier")]
		public string CknSecretIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteLinkMacSecConfigCipher
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gcm-aes-128")]
		gcmMinusaesMinus128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gcm-aes-256")]
		gcmMinusaesMinus256 = 1,
	}
	
	/// <summary>
	/// Properties specific to ExpressRouteLink resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteLinkPropertiesFormat
	{
		
		/// <summary>
		/// Administrative state of the physical port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminState")]
		public System.Nullable<ExpressRouteLinkPropertiesFormatAdminState> AdminState { get; set; }
		
		/// <summary>
		/// Physical fiber port type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public System.Nullable<ExpressRouteLinkPropertiesFormatConnectorType> ConnectorType { get; set; }
		
		/// <summary>
		/// Name of Azure router interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interfaceName")]
		public string InterfaceName { get; set; }
		
		/// <summary>
		/// ExpressRouteLink Mac Security Configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macSecConfig")]
		public ExpressRouteLinkMacSecConfig MacSecConfig { get; set; }
		
		/// <summary>
		/// Mapping between physical port to patch panel port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patchPanelId")]
		public string PatchPanelId { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ExpressRouteLinkPropertiesFormatProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Mapping of physical patch panel to rack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rackId")]
		public string RackId { get; set; }
		
		/// <summary>
		/// Name of Azure router associated with physical port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routerName")]
		public string RouterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteLinkPropertiesFormatAdminState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteLinkPropertiesFormatConnectorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteLinkPropertiesFormatProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	public class ExpressRoutePort
	{
	}
	
	/// <summary>
	/// Response for ListExpressRoutePorts API service call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRoutePortListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of ExpressRoutePort resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRoutePort[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties specific to ExpressRoutePort resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRoutePortPropertiesFormat
	{
		
		/// <summary>
		/// Date of the physical port allocation to be used in Letter of Authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocationDate")]
		public string AllocationDate { get; set; }
		
		/// <summary>
		/// Bandwidth of procured ports in Gbps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthInGbps")]
		public System.Nullable<System.Int32> BandwidthInGbps { get; set; }
		
		/// <summary>
		/// Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="circuits")]
		public ExpressRoutePortPropertiesFormatCircuits[] ExpressRoutePortPropertiesFormatCircuits { get; set; }
		
		/// <summary>
		/// Encapsulation method on physical ports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encapsulation")]
		public System.Nullable<ExpressRoutePortPropertiesFormatEncapsulation> Encapsulation { get; set; }
		
		/// <summary>
		/// Ether type of the physical port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etherType")]
		public string EtherType { get; set; }
		
		/// <summary>
		/// The set of physical links of the ExpressRoutePort resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ExpressRouteLink[] Links { get; set; }
		
		/// <summary>
		/// Maximum transmission unit of the physical port pair(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mtu")]
		public string Mtu { get; set; }
		
		/// <summary>
		/// The name of the peering location that the ExpressRoutePort is mapped to physically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeringLocation")]
		public string PeeringLocation { get; set; }
		
		/// <summary>
		/// Aggregate Gbps of associated circuit bandwidths.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisionedBandwidthInGbps")]
		public System.Nullable<System.Double> ProvisionedBandwidthInGbps { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ExpressRouteLinkPropertiesFormatProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The resource GUID property of the express route port resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGuid")]
		public string ResourceGuid { get; set; }
	}
	
	public class ExpressRoutePortPropertiesFormatCircuits
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRoutePortPropertiesFormatEncapsulation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dot1Q = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QinQ = 1,
	}
	
	public class ExpressRoutePortsLocation
	{
	}
	
	/// <summary>
	/// Real-time inventory of available ExpressRoute port bandwidths.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRoutePortsLocationBandwidths
	{
		
		/// <summary>
		/// Bandwidth descriptive name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerName")]
		public string OfferName { get; set; }
		
		/// <summary>
		/// Bandwidth value in Gbps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueInGbps")]
		public System.Nullable<System.Int32> ValueInGbps { get; set; }
	}
	
	/// <summary>
	/// Response for ListExpressRoutePortsLocations API service call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRoutePortsLocationListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of all ExpressRoutePort peering locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRoutePortsLocation[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties specific to ExpressRoutePorts peering location resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRoutePortsLocationPropertiesFormat
	{
		
		/// <summary>
		/// Address of peering location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// The inventory of available ExpressRoutePort bandwidths.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableBandwidths")]
		public ExpressRoutePortsLocationBandwidths[] AvailableBandwidths { get; set; }
		
		/// <summary>
		/// Contact details of peering locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public string Contact { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ExpressRouteLinkPropertiesFormatProvisioningState ProvisioningState { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all the ExpressRoutePort resources in the specified subscription.
		/// ExpressRoutePorts_List subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePorts
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned.</returns>
		public async Task<ExpressRoutePortListResult> ExpressRoutePorts_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/ExpressRoutePorts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRoutePortListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves all ExpressRoutePort peering locations. Does not return available bandwidths for each location. Available bandwidths can only be obtained when retrieving a specific peering location.
		/// ExpressRoutePortsLocations_List subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePortsLocations
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>Request successful. The operation returns the list of all ExpressRoutePort peering locations.</returns>
		public async Task<ExpressRoutePortsLocationListResult> ExpressRoutePortsLocations_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/ExpressRoutePortsLocations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRoutePortsLocationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a single ExpressRoutePort peering location, including the list of available bandwidths available at said peering location.
		/// ExpressRoutePortsLocations_Get subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePortsLocations/{locationName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="locationName">Name of the requested ExpressRoutePort peering location.</param>
		/// <returns>Request successful. The operation returns the requested ExpressRoutePort peering location.</returns>
		public async Task<ExpressRoutePortsLocation> ExpressRoutePortsLocations_GetAsync(string subscriptionId, string api_version, string locationName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/ExpressRoutePortsLocations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRoutePortsLocation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the ExpressRoutePort resources in the specified resource group.
		/// ExpressRoutePorts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned.</returns>
		public async Task<ExpressRoutePortListResult> ExpressRoutePorts_ListByResourceGroupAsync(string subscriptionId, string api_version, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/ExpressRoutePorts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRoutePortListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the requested ExpressRoutePort resource.
		/// ExpressRoutePorts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="expressRoutePortName">The name of ExpressRoutePort.</param>
		/// <returns>Request successful. The operation returns the requested ExpressRoutePort resource.</returns>
		public async Task<ExpressRoutePort> ExpressRoutePorts_GetAsync(string subscriptionId, string api_version, string resourceGroupName, string expressRoutePortName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/ExpressRoutePorts/"+ (expressRoutePortName==null? "" : System.Uri.EscapeDataString(expressRoutePortName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRoutePort>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the specified ExpressRoutePort resource.
		/// ExpressRoutePorts_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="expressRoutePortName">The name of the ExpressRoutePort resource.</param>
		/// <param name="requestBody">Parameters supplied to the create ExpressRoutePort operation.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRoutePort resource.</returns>
		public async Task<ExpressRoutePort> ExpressRoutePorts_CreateOrUpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string expressRoutePortName, ExpressRoutePort requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/ExpressRoutePorts/"+ (expressRoutePortName==null? "" : System.Uri.EscapeDataString(expressRoutePortName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRoutePort>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified ExpressRoutePort resource.
		/// ExpressRoutePorts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="expressRoutePortName">The name of the ExpressRoutePort resource.</param>
		/// <returns>Delete successful.</returns>
		public async Task ExpressRoutePorts_DeleteAsync(string subscriptionId, string api_version, string resourceGroupName, string expressRoutePortName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/ExpressRoutePorts/"+ (expressRoutePortName==null? "" : System.Uri.EscapeDataString(expressRoutePortName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update ExpressRoutePort tags.
		/// ExpressRoutePorts_UpdateTags subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="expressRoutePortName">The name of the ExpressRoutePort resource.</param>
		/// <param name="requestBody">Parameters supplied to update ExpressRoutePort resource tags.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRoutePort resource.</returns>
		public async Task<ExpressRoutePort> ExpressRoutePorts_UpdateTagsAsync(string subscriptionId, string api_version, string resourceGroupName, string expressRoutePortName, object requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/ExpressRoutePorts/"+ (expressRoutePortName==null? "" : System.Uri.EscapeDataString(expressRoutePortName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRoutePort>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the ExpressRouteLink sub-resources of the specified ExpressRoutePort resource.
		/// ExpressRouteLinks_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}/links
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="expressRoutePortName">The name of the ExpressRoutePort resource.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRouteLink resources. If there are no ExpressRouteLink resources then an empty list is returned.</returns>
		public async Task<ExpressRouteLinkListResult> ExpressRouteLinks_ListAsync(string subscriptionId, string api_version, string resourceGroupName, string expressRoutePortName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/ExpressRoutePorts/"+ (expressRoutePortName==null? "" : System.Uri.EscapeDataString(expressRoutePortName))+"/links&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteLinkListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified ExpressRouteLink resource.
		/// ExpressRouteLinks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}/links/{linkName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="expressRoutePortName">The name of the ExpressRoutePort resource.</param>
		/// <param name="linkName">The name of the ExpressRouteLink resource.</param>
		/// <returns>Request successful. The operation returns the requested ExpressRouteLink resource.</returns>
		public async Task<ExpressRouteLink> ExpressRouteLinks_GetAsync(string subscriptionId, string api_version, string resourceGroupName, string expressRoutePortName, string linkName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/ExpressRoutePorts/"+ (expressRoutePortName==null? "" : System.Uri.EscapeDataString(expressRoutePortName))+"/links/"+ (linkName==null? "" : System.Uri.EscapeDataString(linkName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteLink>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
