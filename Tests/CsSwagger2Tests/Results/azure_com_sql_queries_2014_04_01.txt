//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A database query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryInterval
	{
		
		/// <summary>
		/// The number of times the query was executed during this interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionCount")]
		public string ExecutionCount { get; set; }
		
		/// <summary>
		/// The start time of the measurement interval (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalStartTime")]
		public System.Nullable<System.DateTimeOffset> IntervalStartTime { get; set; }
		
		/// <summary>
		/// The list of query metrics during this interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public QueryMetric[] Metrics { get; set; }
	}
	
	/// <summary>
	/// A database query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryMetric
	{
		
		/// <summary>
		/// The name of the metric for display in user interface
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The name of the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unit of measurement
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<QueryMetricUnit> Unit { get; set; }
		
		/// <summary>
		/// The measured value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum QueryMetricUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		percentage = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		microseconds = 2,
	}
	
	/// <summary>
	/// A database query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryStatistic
	{
		
		/// <summary>
		/// The list of query intervals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervals")]
		public QueryInterval[] Intervals { get; set; }
		
		/// <summary>
		/// The id of the query
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public string QueryId { get; set; }
	}
	
	/// <summary>
	/// Represents the response to a get query request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryStatisticListResult
	{
		
		/// <summary>
		/// The query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public QueryStatistic[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryText
	{
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Query text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryText")]
		public string QueryText1 { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents the response to a get query text request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryTextListResult
	{
		
		/// <summary>
		/// The query text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public QueryText[] Value { get; set; }
	}
	
	/// <summary>
	/// A database query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopQueries
	{
		
		/// <summary>
		/// The function that is used to aggregate each query's metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationFunction")]
		public System.Nullable<TopQueriesAggregationFunction> AggregationFunction { get; set; }
		
		/// <summary>
		/// The execution type that is used to filter the query instances that are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionType")]
		public System.Nullable<TopQueriesExecutionType> ExecutionType { get; set; }
		
		/// <summary>
		/// The duration of the interval (ISO8601 duration format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalType")]
		public string IntervalType { get; set; }
		
		/// <summary>
		/// The number of requested queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfTopQueries")]
		public string NumberOfTopQueries { get; set; }
		
		/// <summary>
		/// The end time for queries that are returned (ISO8601 format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observationEndTime")]
		public System.Nullable<System.DateTimeOffset> ObservationEndTime { get; set; }
		
		/// <summary>
		/// The start time for queries that are returned (ISO8601 format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observationStartTime")]
		public System.Nullable<System.DateTimeOffset> ObservationStartTime { get; set; }
		
		/// <summary>
		/// The type of metric to use for ordering the top metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedMetric")]
		public System.Nullable<TopQueriesObservedMetric> ObservedMetric { get; set; }
		
		/// <summary>
		/// The list of queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public QueryStatistic[] Queries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TopQueriesAggregationFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		min = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		max = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		avg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sum = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TopQueriesExecutionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		regular = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		irregular = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aborted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		exception = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TopQueriesObservedMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cpu = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		io = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		logio = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		executionCount = 4,
	}
	
	/// <summary>
	/// Represents the response to a get top queries request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopQueriesListResult
	{
		
		/// <summary>
		/// The list of top queries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TopQueries[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of top queries by database.
		/// Queries_ListByDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/topQueries
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <returns>OK</returns>
		public async Task<TopQueriesListResult> Queries_ListByDatabaseAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/topQueries?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TopQueriesListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a query's text.
		/// QueryTexts_ListByQuery subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/topQueries/{queryId}/queryText
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="queryId">The id of the query</param>
		/// <returns>OK</returns>
		public async Task<QueryTextListResult> QueryTexts_ListByQueryAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, string queryId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/topQueries/"+ (queryId==null? "" : System.Uri.EscapeDataString(queryId))+"/queryText?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryTextListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists a query's statistics.
		/// QueryStatistics_ListByQuery subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/topQueries/{queryId}/statistics
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="queryId">The id of the query</param>
		/// <returns>OK</returns>
		public async Task<QueryStatisticListResult> QueryStatistics_ListByQueryAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, string queryId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/topQueries/"+ (queryId==null? "" : System.Uri.EscapeDataString(queryId))+"/statistics?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryStatisticListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
