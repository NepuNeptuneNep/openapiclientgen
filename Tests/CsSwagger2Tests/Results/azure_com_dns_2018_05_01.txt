//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An A record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ARecord
	{
		
		/// <summary>
		/// The IPv4 address of this A record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv4Address")]
		public string Ipv4Address { get; set; }
	}
	
	/// <summary>
	/// An AAAA record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AaaaRecord
	{
		
		/// <summary>
		/// The IPv6 address of this AAAA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6Address")]
		public string Ipv6Address { get; set; }
	}
	
	/// <summary>
	/// A CAA record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CaaRecord
	{
		
		/// <summary>
		/// The flags for this CAA record as an integer between 0 and 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public System.Nullable<System.Int32> Flags { get; set; }
		
		/// <summary>
		/// The tag for this CAA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// The value for this CAA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An error message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// The body of an error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// The body of an error message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// The error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Extra error information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A description of what caused the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target resource of the error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// A CNAME record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CnameRecord
	{
		
		/// <summary>
		/// The canonical name for this CNAME record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cname")]
		public string Cname { get; set; }
	}
	
	/// <summary>
	/// Represents a single Azure resource and its referencing DNS records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DnsResourceReference
	{
		
		/// <summary>
		/// A list of dns Records 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsResources")]
		public SubResource[] DnsResources { get; set; }
		
		/// <summary>
		/// A reference to a another resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public SubResource TargetResource { get; set; }
	}
	
	/// <summary>
	/// A reference to a another resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResource
	{
		
		/// <summary>
		/// Resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of the Dns Resource Reference Request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DnsResourceReferenceRequest
	{
		
		/// <summary>
		/// Represents the properties of the Dns Resource Reference Request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DnsResourceReferenceRequestProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of the Dns Resource Reference Request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DnsResourceReferenceRequestProperties
	{
		
		/// <summary>
		/// A list of references to azure resources for which referencing dns records need to be queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResources")]
		public SubResource[] TargetResources { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of the Dns Resource Reference Result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DnsResourceReferenceResult
	{
		
		/// <summary>
		/// The result of dns resource reference request. Returns a list of dns resource references for each of the azure resource in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DnsResourceReferenceResultProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The result of dns resource reference request. Returns a list of dns resource references for each of the azure resource in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DnsResourceReferenceResultProperties
	{
		
		/// <summary>
		/// The result of dns resource reference request. A list of dns resource references for each of the azure resource in the request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsResourceReferences")]
		public DnsResourceReference[] DnsResourceReferences { get; set; }
	}
	
	/// <summary>
	/// An MX record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MxRecord
	{
		
		/// <summary>
		/// The domain name of the mail host for this MX record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public string Exchange { get; set; }
		
		/// <summary>
		/// The preference value for this MX record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preference")]
		public System.Nullable<System.Int32> Preference { get; set; }
	}
	
	/// <summary>
	/// An NS record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NsRecord
	{
		
		/// <summary>
		/// The name server name for this NS record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nsdname")]
		public string Nsdname { get; set; }
	}
	
	/// <summary>
	/// A PTR record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PtrRecord
	{
		
		/// <summary>
		/// The PTR target domain name for this PTR record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ptrdname")]
		public string Ptrdname { get; set; }
	}
	
	/// <summary>
	/// Describes a DNS record set (a collection of DNS records with the same name and type).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecordSet
	{
		
		/// <summary>
		/// The etag of the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID of the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents the properties of the records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RecordSetProperties Properties { get; set; }
		
		/// <summary>
		/// The type of the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The response to a record set List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecordSetListResult
	{
		
		/// <summary>
		/// The continuation token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Information about the record sets in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RecordSet[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of the records in the record set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecordSetProperties
	{
		
		/// <summary>
		/// The list of AAAA records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AaaaRecord[] AAAARecords { get; set; }
		
		/// <summary>
		/// The list of A records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ARecord[] ARecords { get; set; }
		
		/// <summary>
		/// A CNAME record.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CnameRecord CNAMERecord { get; set; }
		
		/// <summary>
		/// The list of MX records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MxRecord[] MXRecords { get; set; }
		
		/// <summary>
		/// The list of NS records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NsRecord[] NSRecords { get; set; }
		
		/// <summary>
		/// The list of PTR records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PtrRecord[] PTRRecords { get; set; }
		
		/// <summary>
		/// An SOA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SoaRecord SOARecord { get; set; }
		
		/// <summary>
		/// The list of SRV records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SrvRecord[] SRVRecords { get; set; }
		
		/// <summary>
		/// The TTL (time-to-live) of the records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TTL { get; set; }
		
		/// <summary>
		/// The list of TXT records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TxtRecord[] TXTRecords { get; set; }
		
		/// <summary>
		/// The list of CAA records in the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caaRecords")]
		public CaaRecord[] CaaRecords { get; set; }
		
		/// <summary>
		/// Fully qualified domain name of the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		/// <summary>
		/// The metadata attached to the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// provisioning State of the record set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// A reference to a another resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public SubResource TargetResource { get; set; }
	}
	
	/// <summary>
	/// An SRV record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SrvRecord
	{
		
		/// <summary>
		/// The port value for this SRV record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// The priority value for this SRV record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// The target domain name for this SRV record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// The weight value for this SRV record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// A TXT record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TxtRecord
	{
		
		/// <summary>
		/// The text value of this TXT record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters supplied to update a record set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecordSetUpdateParameters
	{
		
		/// <summary>
		/// Describes a DNS record set (a collection of DNS records with the same name and type).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecordSet RecordSet { get; set; }
	}
	
	/// <summary>
	/// Common properties of an Azure Resource Manager resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An SOA record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SoaRecord
	{
		
		/// <summary>
		/// The email contact for this SOA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The expire time for this SOA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public System.Nullable<System.Int64> ExpireTime { get; set; }
		
		/// <summary>
		/// The domain name of the authoritative name server for this SOA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumTTL")]
		public System.Nullable<System.Int64> MinimumTTL { get; set; }
		
		/// <summary>
		/// The refresh value for this SOA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshTime")]
		public System.Nullable<System.Int64> RefreshTime { get; set; }
		
		/// <summary>
		/// The retry time for this SOA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryTime")]
		public System.Nullable<System.Int64> RetryTime { get; set; }
		
		/// <summary>
		/// The serial number for this SOA record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public System.Nullable<System.Int64> SerialNumber { get; set; }
	}
	
	/// <summary>
	/// Describes a DNS zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Zone : Resource
	{
		
		/// <summary>
		/// The etag of the zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Represents the properties of the zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ZoneProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The response to a Zone List or ListAll operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ZoneListResult
	{
		
		/// <summary>
		/// The continuation token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Information about the DNS zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Zone[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of the zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ZoneProperties
	{
		
		/// <summary>
		/// The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNumberOfRecordSets")]
		public System.Nullable<System.Int64> MaxNumberOfRecordSets { get; set; }
		
		/// <summary>
		/// The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameServers")]
		public string[] NameServers { get; set; }
		
		/// <summary>
		/// The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfRecordSets")]
		public System.Nullable<System.Int64> NumberOfRecordSets { get; set; }
		
		/// <summary>
		/// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationVirtualNetworks")]
		public SubResource[] RegistrationVirtualNetworks { get; set; }
		
		/// <summary>
		/// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolutionVirtualNetworks")]
		public SubResource[] ResolutionVirtualNetworks { get; set; }
		
		/// <summary>
		/// The type of this DNS zone (Public or Private).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneType")]
		public System.Nullable<ZonePropertiesZoneType> ZoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ZonePropertiesZoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Private = 1,
	}
	
	/// <summary>
	/// Describes a request to update a DNS zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ZoneUpdate
	{
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the DNS zones in all resource groups in a subscription.
		/// Zones_List subscriptions/{subscriptionId}/providers/Microsoft.Network/dnszones
		/// </summary>
		/// <param name="top">The maximum number of DNS zones to return. If not specified, returns up to 100 zones.</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <returns>Success.</returns>
		public async Task<ZoneListResult> Zones_ListAsync(int top, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/dnszones?$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ZoneListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the DNS records specified by the referencing targetResourceIds.
		/// DnsResourceReference_GetByTargetResources subscriptions/{subscriptionId}/providers/Microsoft.Network/getDnsResourceReference
		/// </summary>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <param name="requestBody">Properties for dns resource reference request.</param>
		/// <returns>Success.</returns>
		public async Task<DnsResourceReferenceResult> DnsResourceReference_GetByTargetResourcesAsync(string api_version, string subscriptionId, DnsResourceReferenceRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/getDnsResourceReference?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DnsResourceReferenceResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the DNS zones within a resource group.
		/// Zones_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="top">The maximum number of record sets to return. If not specified, returns up to 100 record sets.</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <returns>Success.</returns>
		public async Task<ZoneListResult> Zones_ListByResourceGroupAsync(string resourceGroupName, int top, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ZoneListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a DNS zone. Retrieves the zone properties, but not the record sets within the zone.
		/// Zones_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <returns>Success.</returns>
		public async Task<Zone> Zones_GetAsync(string resourceGroupName, string zoneName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Zone>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a DNS zone. Does not modify DNS records within the zone.
		/// Zones_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>The DNS zone has been updated.</returns>
		public async Task<Zone> Zones_CreateOrUpdateAsync(string resourceGroupName, string zoneName, string api_version, string subscriptionId, Zone requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Zone>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot be undone.
		/// Zones_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <returns>The DNS zone has been deleted.</returns>
		public async Task Zones_DeleteAsync(string resourceGroupName, string zoneName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a DNS zone. Does not modify DNS records within the zone.
		/// Zones_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <param name="requestBody">Parameters supplied to the Update operation.</param>
		/// <returns>The DNS zone has been updated.</returns>
		public async Task<Zone> Zones_UpdateAsync(string resourceGroupName, string zoneName, string api_version, string subscriptionId, ZoneUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Zone>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all record sets in a DNS zone.
		/// RecordSets_ListAllByDnsZone subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/all
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="top">The maximum number of record sets to return. If not specified, returns up to 100 record sets.</param>
		/// <param name="recordsetnamesuffix">The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix></param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <returns>Success.</returns>
		public async Task<RecordSetListResult> RecordSets_ListAllByDnsZoneAsync(string resourceGroupName, string zoneName, int top, string recordsetnamesuffix, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"/all&$top="+top+"&$recordsetnamesuffix=" + (recordsetnamesuffix==null? "" : System.Uri.EscapeDataString(recordsetnamesuffix))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RecordSetListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all record sets in a DNS zone.
		/// RecordSets_ListByDnsZone subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/recordsets
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="top">The maximum number of record sets to return. If not specified, returns up to 100 record sets.</param>
		/// <param name="recordsetnamesuffix">The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix></param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <returns>Success.</returns>
		public async Task<RecordSetListResult> RecordSets_ListByDnsZoneAsync(string resourceGroupName, string zoneName, int top, string recordsetnamesuffix, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"/recordsets&$top="+top+"&$recordsetnamesuffix=" + (recordsetnamesuffix==null? "" : System.Uri.EscapeDataString(recordsetnamesuffix))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RecordSetListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the record sets of a specified type in a DNS zone.
		/// RecordSets_ListByType subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="recordType">The type of record sets to enumerate.</param>
		/// <param name="top">The maximum number of record sets to return. If not specified, returns up to 100 record sets.</param>
		/// <param name="recordsetnamesuffix">The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix></param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <returns>Success.</returns>
		public async Task<RecordSetListResult> RecordSets_ListByTypeAsync(string resourceGroupName, string zoneName, RecordSets_ListByTypeRecordType recordType, int top, string recordsetnamesuffix, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"/"+recordType+"&$top="+top+"&$recordsetnamesuffix=" + (recordsetnamesuffix==null? "" : System.Uri.EscapeDataString(recordsetnamesuffix))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RecordSetListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a record set.
		/// RecordSets_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="relativeRecordSetName">The name of the record set, relative to the name of the zone.</param>
		/// <param name="recordType">The type of DNS record in this record set.</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <returns>Success.</returns>
		public async Task<RecordSet> RecordSets_GetAsync(string resourceGroupName, string zoneName, string relativeRecordSetName, RecordSets_ListByTypeRecordType recordType, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"/"+recordType+"/"+ (relativeRecordSetName==null? "" : System.Uri.EscapeDataString(relativeRecordSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RecordSet>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a record set within a DNS zone.
		/// RecordSets_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="relativeRecordSetName">The name of the record set, relative to the name of the zone.</param>
		/// <param name="recordType">The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created).</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>The record set has been updated.</returns>
		public async Task<RecordSet> RecordSets_CreateOrUpdateAsync(string resourceGroupName, string zoneName, string relativeRecordSetName, RecordSets_ListByTypeRecordType recordType, string api_version, string subscriptionId, RecordSet requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"/"+recordType+"/"+ (relativeRecordSetName==null? "" : System.Uri.EscapeDataString(relativeRecordSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RecordSet>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a record set from a DNS zone. This operation cannot be undone.
		/// RecordSets_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="relativeRecordSetName">The name of the record set, relative to the name of the zone.</param>
		/// <param name="recordType">The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the DNS zone is deleted).</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <returns>The record set has been deleted.</returns>
		public async Task RecordSets_DeleteAsync(string resourceGroupName, string zoneName, string relativeRecordSetName, RecordSets_ListByTypeRecordType recordType, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"/"+recordType+"/"+ (relativeRecordSetName==null? "" : System.Uri.EscapeDataString(relativeRecordSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a record set within a DNS zone.
		/// RecordSets_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="zoneName">The name of the DNS zone (without a terminating dot).</param>
		/// <param name="relativeRecordSetName">The name of the record set, relative to the name of the zone.</param>
		/// <param name="recordType">The type of DNS record in this record set.</param>
		/// <param name="api_version">Specifies the API version.</param>
		/// <param name="subscriptionId">Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.</param>
		/// <param name="requestBody">Parameters supplied to the Update operation.</param>
		/// <returns>The record set has been updated.</returns>
		public async Task<RecordSet> RecordSets_UpdateAsync(string resourceGroupName, string zoneName, string relativeRecordSetName, RecordSets_ListByTypeRecordType recordType, string api_version, string subscriptionId, RecordSet requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/dnsZones/"+ (zoneName==null? "" : System.Uri.EscapeDataString(zoneName))+"/"+recordType+"/"+ (relativeRecordSetName==null? "" : System.Uri.EscapeDataString(relativeRecordSetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RecordSet>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum RecordSets_ListByTypeRecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAAA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNAME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PTR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRV = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 9,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
