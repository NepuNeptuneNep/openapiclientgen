//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A search alert that the user has created so that they can be notified when new posts match the search query specified by the alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Alert
	{
		
		[System.Runtime.Serialization.DataMember(Name="alert_id")]
		public string Alert_id { get; set; }
		
		/// <summary>
		/// The UTC date and time when the alert was last triggered and sent out (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_sent")]
		public System.Nullable<System.DateTimeOffset> Last_sent { get; set; }
		
		/// <summary>
		/// The search phrase that the alert triggers on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search")]
		public string Search { get; set; }
		
		/// <summary>
		/// The number of time the alert has triggered and been send out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="send_count")]
		public System.Nullable<System.Int32> Send_count { get; set; }
		
		/// <summary>
		/// A list of the post types that the alert is set to match against.  The available post types are: offer, wanted <br /><br /> NOTE: Additional post types may be added in the future (eg. events) so clients should take care to support arbitrary types being returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	/// <summary>
	/// A geographic bounding box defined by its southwest and northeast points.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BoundingBox
	{
		
		/// <summary>
		/// The point defining the northeast corner of the bounding box.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="northeast")]
		public BoundingBoxNortheast Northeast { get; set; }
		
		/// <summary>
		/// The point defining the southwest corner of the bounding box.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="southwest")]
		public BoundingBoxSouthwest Southwest { get; set; }
	}
	
	public class BoundingBoxNortheast
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	public class BoundingBoxSouthwest
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// A conversation between the current user and another user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Conversation
	{
		
		/// <summary>
		/// Whether or not this conversation is archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Whether or not this conversation is blocked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blocked")]
		public System.Nullable<System.Boolean> Blocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversation_id")]
		public string Conversation_id { get; set; }
		
		/// <summary>
		/// The UTC date and time of the last message in this conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_message_date")]
		public System.Nullable<System.DateTimeOffset> Last_message_date { get; set; }
		
		/// <summary>
		/// The latest messages in this conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// The count of how many unread messages this conversation has.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_unread_messages")]
		public System.Nullable<System.Int32> Num_unread_messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	/// <summary>
	/// A message between two users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Message
	{
		
		/// <summary>
		/// The content of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The UTC date and time when the message was sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Every message a user receives is made available via the API and is sent to the user by email.  Some messages may contain unsupported attachments that are not available by the API but are emailed to the user (eg. documents, videos, zip files). The email_attachments field provides the names of all the unsupported attachments that were emailed to the user (will be null if there are no unsupported attachments).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_attachments")]
		public string[] Email_attachments { get; set; }
		
		/// <summary>
		/// The ID of the user that sent the message (the sender).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_user_id")]
		public string From_user_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message_id")]
		public string Message_id { get; set; }
		
		/// <summary>
		/// Details about the photos associated with this message (may be null if there are no photos).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public MessagePhotos[] MessagePhotos { get; set; }
		
		/// <summary>
		/// Because many messages are received by email, all messages have a subject. The subject is often useful to allow the recipient to determine which post a message may be referring to.  In rare cases, some senders send emails with a subject and but no email body which causes the message content to be an empty string.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// The ID of the user that received the message (the recipient).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to_user_id")]
		public string To_user_id { get; set; }
	}
	
	public class MessagePhotos
	{
		
		/// <summary>
		/// All the versions of this photo ordered from smallest to largest.  This list is guaranteed to include the photos specified by the above thumbnail and url properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public MessagePhotosImages[] MessagePhotosImages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photo_id")]
		public string Photo_id { get; set; }
		
		/// <summary>
		/// A URL to a thumbnail of this photo.  The size of the thumbnail depends on the device_pixel_ratio parameter and it is not guaranteed to be square.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public string Thumbnail { get; set; }
		
		/// <summary>
		/// A URL to a large version of this photo (but not necessarily the largest size available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class MessagePhotosImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class User
	{
		
		/// <summary>
		/// A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The first name of the user (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		/// <summary>
		/// The last name of the user (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		/// <summary>
		/// The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_since")]
		public string Member_since { get; set; }
		
		/// <summary>
		/// A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Twitter, Gravatar, etc) and some can be as small as 64px by 64px.  Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile_image")]
		public string Profile_image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
		
		/// <summary>
		/// A username that can be displayed for the user (the username is NOT guaranteed to be unique). Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CurrentUser : User
	{
		
		/// <summary>
		/// If digest emails are enabled, this is the frequency of digest emails sent to this user. One of: daily, 12_hours, 8_hours, 6_hours, 4_hours, 2_hours, hourly <br /><br /> If digest emails are disabled, this will be null. <br /><br /> NOTE: A weekly option with the value 'weekly' will probably be added in the future so clients should recognize weekly as a valid value that can be displayed and set if it is ever returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		/// <summary>
		/// Whether or not photos are included in the digest emails sent to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest_photos")]
		public System.Nullable<System.Boolean> Digest_photos { get; set; }
		
		/// <summary>
		/// Data related to the users' email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public CurrentUserEmail Email { get; set; }
		
		/// <summary>
		/// Whether or not the user has a password (accounts created using 3rd party providers like Facebook don't have passwords set). <br /><br /> When has_password is false, the only way to set a password on the users' account is to send the user a password reset email.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_password")]
		public System.Nullable<System.Boolean> Has_password { get; set; }
		
		/// <summary>
		/// The UTC date and time when the user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_listings_view")]
		public System.Nullable<System.DateTimeOffset> Last_listings_view { get; set; }
		
		/// <summary>
		/// The users' location.  The location is used to determine which posts are shown to the user (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public CurrentUserLocation Location { get; set; }
		
		/// <summary>
		/// The short location description used by the user the last time they posted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post_location")]
		public CurrentUserPost_location Post_location { get; set; }
		
		/// <summary>
		/// Whether or not post reminders are enabled for this user (to remind them to update or repost their posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post_reminders")]
		public System.Nullable<System.Boolean> Post_reminders { get; set; }
		
		/// <summary>
		/// The source of the users' profile image. One of: gravatar, facebook, twitter, google, freegle, custom
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile_image_source")]
		public string Profile_image_source { get; set; }
		
		/// <summary>
		/// Whether or not the user has chosen to make their first and last name public.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_name")]
		public System.Nullable<System.Boolean> Public_name { get; set; }
		
		/// <summary>
		/// A list of the public post sources the user is interested in seeing posts from (currently only 'trashnothing' is supported). If the array is empty, no sources are enabled and the user will only see posts from the groups they are a member of. <br /><br /> NOTE: Additional sources may be added in the future so clients should take care to support arbitrary sources being returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_post_sources")]
		public string[] Public_post_sources { get; set; }
		
		/// <summary>
		/// If true, all group posts from the users' groups are shown to them on the main posts page and in the digest emails. <br /><br /> If false, only group posts in the area defined by the users' location are shown.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_all_group_posts")]
		public System.Nullable<System.Boolean> Show_all_group_posts { get; set; }
		
		/// <summary>
		/// The UTC date and time when the user signed up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signup")]
		public System.Nullable<System.DateTimeOffset> Signup { get; set; }
		
		/// <summary>
		/// Whether or not the user used the Fair Offer Policy (see https://trashnothing.com/fair_offer_policy ) the last time they posted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uses_fair_offer_policy")]
		public System.Nullable<System.Boolean> Uses_fair_offer_policy { get; set; }
		
		/// <summary>
		/// Whether or not the user has verified their account. The user account will be limited (eg. they will not be able to reply to posts) until their account is verified.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
	}
	
	public class CurrentUserEmail
	{
		
		/// <summary>
		/// The email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Whether or not this email address has been bouncing emails that are sent to it.  When bouncing is true, no emails will be sent to the user.  If the user thinks that their email account shouldn't be bouncing emails, use the email not bouncing endpoint to reset bouncing to false.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bouncing")]
		public System.Nullable<System.Boolean> Bouncing { get; set; }
		
		/// <summary>
		/// Whether or not emails have been stopped because of a spam complaint from the users' email account. When spam_stop is first set to true, it indicates that all emails have been automatically disabled for the users' account (eg. digest and alerts).  The user will need to re-enable digests and re-add any alerts that they had previously set up.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spam_stop")]
		public System.Nullable<System.Boolean> Spam_stop { get; set; }
	}
	
	public class CurrentUserLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// A text description of the location specified by latitude and longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Defines the radius (in meters) of a circle around the point specified by latitude and longitude.
		/// Minimum: 0
		/// Maximum: 257500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radius")]
		[System.ComponentModel.DataAnnotations.Range(0, 257500)]
		public System.Nullable<System.Double> Radius { get; set; }
	}
	
	public class CurrentUserPost_location
	{
		
		/// <summary>
		/// May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// A text description of the location specified by latitude and longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Two bounding boxes that make using Google Maps' geocoder easier. <br /><br /> The default bounding box defines the area in which the post is probably located.  This is useful for providing a bounds to Google Maps geocoder. <br /><br /> The limit bounding box is a larger bounding box that contains the default bounding box. This is useful for discarding Google Maps geocoding results that are outside of this bounding box.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GeolocateBounds
	{
		
		/// <summary>
		/// A geographic bounding box defined by its southwest and northeast points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public BoundingBox Default { get; set; }
		
		/// <summary>
		/// A geographic bounding box defined by its southwest and northeast points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public BoundingBox Limit { get; set; }
	}
	
	/// <summary>
	/// Groups are run by volunteer moderators and provide a way to group activity in a specific location. Because each group is usually run by different people, there can be variations in rules from group to group (eg. who is allowed to join, what is allowed to be posted, how often reposts are allowed).
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Group
	{
		
		/// <summary>
		/// Provides information about the country that is associated with a group.  May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public GroupCountry Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		/// <summary>
		/// When true, anyone requesting membership to this group will be required to answer a new membership questionnaire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_questions")]
		public System.Nullable<System.Boolean> Has_questions { get; set; }
		
		/// <summary>
		/// A URL to the group homepage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homepage")]
		public string Homepage { get; set; }
		
		/// <summary>
		/// A unique identifier for the group that is used in URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// The number of members who belong to the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_count")]
		public System.Nullable<System.Int32> Member_count { get; set; }
		
		/// <summary>
		/// Provides information about the current users' active or pending membership to this group (if any).  Will be null if there is no active or pending membership to this group.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membership")]
		public GroupMembership Membership { get; set; }
		
		/// <summary>
		/// The name of the group (not guaranteed to be unique).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// When true, the group posts are viewable by anyone.  When false, the group posts can only be viewed by members of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open_archives")]
		public System.Nullable<System.Boolean> Open_archives { get; set; }
		
		/// <summary>
		/// When true, the group allows anyone to join.  When false, the group moderators review and approve applicants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="open_membership")]
		public System.Nullable<System.Boolean> Open_membership { get; set; }
		
		/// <summary>
		/// Provides information about an area within a country that a group is associated with (eg. a state in the US or a province in Canada).  May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public GroupRegion Region { get; set; }
		
		/// <summary>
		/// The timezone that the group is in (eg. America/New_York).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// The group offset (in hours) from UTC time.  This does not take into account daylight savings time (DST) in places that observe DST so it may be incorrect during DST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utc_offset")]
		public System.Nullable<System.Double> Utc_offset { get; set; }
	}
	
	public class GroupCountry
	{
		
		/// <summary>
		/// A 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// The name of the country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GroupMembership
	{
		
		/// <summary>
		/// For pending and pending-questions memberships, this is the UTC date and time when the current user requested membership to this group. For subscribed memberships, this is the UTC date and time when the membership status became subscribed.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Membership questionnaire data.  Will be null unless the membership status is pending-questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionnaire")]
		public GroupMembershipQuestionnaire Questionnaire { get; set; }
		
		/// <summary>
		/// One of: subscribed, pending, pending-questions
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class GroupMembershipQuestionnaire
	{
		
		/// <summary>
		/// A message from the group moderators to be displayed above the questions (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The list of questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public string[] Questions { get; set; }
	}
	
	public class GroupRegion
	{
		
		/// <summary>
		/// A 2 letter abbreviation for the region (is not guaranteed to be globally unique but is unique among all the regions in the country).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// The name of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Group notices are created by group moderators in order to provide useful information to the group members (eg. group rules and guidelines).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GroupNotice
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The UTC date and time when this notice was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notice_id")]
		public string Notice_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Photo
	{
		
		/// <summary>
		/// All the versions of this photo ordered from smallest to largest.  This list is guaranteed to include the photos specified by the above thumbnail and url properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public PhotoImages[] PhotoImages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photo_id")]
		public string Photo_id { get; set; }
		
		/// <summary>
		/// A URL to a thumbnail of this photo.  The size of the thumbnail depends on the device_pixel_ratio parameter and it is not guaranteed to be square.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public string Thumbnail { get; set; }
		
		/// <summary>
		/// A URL to a large version of this photo (but not necessarily the largest size available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PhotoImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// The result of uploading or editing a photo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PhotoResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="photo_id")]
		public string Photo_id { get; set; }
		
		/// <summary>
		/// Photo thumbnail data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public PhotoResultThumbnail Thumbnail { get; set; }
	}
	
	public class PhotoResultThumbnail
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// An offer, wanted, admin, taken or received post.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Post
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The UTC date and time when the post was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Some groups add footers to posts that are separate and sometimes unrelated to the post itself - such as reminders about group rules or features (may be null).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footer")]
		public string Footer { get; set; }
		
		/// <summary>
		/// The group ID of the post.  For public posts, this is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		/// <summary>
		/// May be null if a post hasn't been mapped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// May be null if a post hasn't been mapped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// For offer and wanted posts, this indicates the outcome of the post which is null if no outcome has been set yet.  Otherwise it is one of: satisfied, withdrawn
		///For all other posts this is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outcome")]
		public string Outcome { get; set; }
		
		/// <summary>
		/// Details about the photos associated with this post (may be null if there are no photos).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post_id")]
		public string Post_id { get; set; }
		
		/// <summary>
		/// The source of the post.  One of: groups, trashnothing, open_archive_groups.  A value of groups or open_archive_groups indicates the post is from a group and the group_id field will contain the ID of the group. A value of trashnothing indicates the post is a public post not associated with any group.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of post.  One of: offer, taken, wanted, received, admin
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The link to use to view the post on the trash nothing site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PostSearchResult : Post
	{
		
		/// <summary>
		/// A snippet of the post content as HTML with the parts of the content that matched the search query (if any) wrapped in an HTML span tags with the class 'highlight' (eg. &lt;span class="highlight"&gt;matched words&lt;/span&gt;). May be null if none of the words in the post content matched the search query. <br /><br /> NOTE: This is not the full content of the post  It is just a snippet of around 200 characters that can be used to display the parts of the post content relevant to the search query.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_content")]
		public string Search_content { get; set; }
		
		/// <summary>
		/// The post subject as HTML with the parts of the subject that matched the search query (if any) wrapped in HTML span tags with the class 'highlight'. (eg. &lt;span class="highlight"&gt;matched words&lt;/span&gt;). May be null if none of the words in the subject matched the search query.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_title")]
		public string Search_title { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List conversations
		/// Get_conversations conversations
		/// </summary>
		/// <param name="category">Used to filter messases by category.  Must be set to one of the following three categories: inbox, archived, blocked
		///</param>
		/// <param name="page">The page of conversations to return.
		/// Minimum: 1
		// </param>
		/// <param name="per_page">The number of conversations to return per page (must be >= 1 and <= 30).
		/// Minimum: 1
		/// Maximum: 30
		// </param>
		/// <param name="num_messages">The number of recent messages to return with each conversation. Additional messages can be retrieved using get conversation messages endpoint.
		///
		/// Minimum: 0
		/// Maximum: 30
		// </param>
		/// <param name="include_num_unread">If set to 1, the num_unread field in the response will be set to the count of the total number of conversations that have unread messages. <br /><br /> This is useful for showing users the total number of unread messages that they have in their inbox. Calculating the count will slow the request down a bit so setting this should be avoided for requests where it's not needed (eg. requesting archived or blocked conversations or requests that are just paging through older conversations).
		///</param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <returns>The conversations and paging data.</returns>
		public async Task<Get_conversationsReturn> Get_conversationsAsync(string category, int page, int per_page, int num_messages, int include_num_unread, double device_pixel_ratio)
		{
			var requestUri = "conversations?category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&page="+page+"&per_page="+per_page+"&num_messages="+num_messages+"&include_num_unread="+include_num_unread+"&device_pixel_ratio="+device_pixel_ratio;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_conversationsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search conversations
		/// Searches all conversations except blocked conversations.
		/// Search_conversations conversations/search
		/// </summary>
		/// <param name="search">The search query used to find conversations and messages.</param>
		/// <param name="page">The page of conversations to return.
		/// Minimum: 1
		// </param>
		/// <param name="per_page">The number of conversations to return per page (must be >= 1 and <= 30).
		/// Minimum: 1
		/// Maximum: 30
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <returns>The conversations and paging data.</returns>
		public async Task<Search_conversationsReturn> Search_conversationsAsync(string search, int page, int per_page, double device_pixel_ratio)
		{
			var requestUri = "conversations/search?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&page="+page+"&per_page="+per_page+"&device_pixel_ratio="+device_pixel_ratio;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Search_conversationsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Archive conversation
		/// Archive_conversation conversations/{conversation_id}/archive
		/// </summary>
		/// <param name="conversation_id">The ID of the conversation to archive.</param>
		/// <returns>Conversation archived.</returns>
		public async Task Archive_conversationAsync(string conversation_id)
		{
			var requestUri = "conversations/"+ (conversation_id==null? "" : System.Uri.EscapeDataString(conversation_id))+"/archive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Block conversation
		/// Block_conversation conversations/{conversation_id}/block
		/// </summary>
		/// <param name="conversation_id">The ID of the conversation to block.</param>
		/// <returns>Conversation blocked.</returns>
		public async Task Block_conversationAsync(string conversation_id)
		{
			var requestUri = "conversations/"+ (conversation_id==null? "" : System.Uri.EscapeDataString(conversation_id))+"/block";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List conversation messages
		/// Get_conversation_messages conversations/{conversation_id}/messages
		/// </summary>
		/// <param name="conversation_id">The ID of the conversation to return messages from.</param>
		/// <param name="page">The page of messages to return.
		/// Minimum: 1
		// </param>
		/// <param name="per_page">The number of messages to return per page (must be >= 1 and <= 30).
		/// Minimum: 1
		/// Maximum: 30
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="include_conversation">If set to 1, the conversation will be returned along with the messages.</param>
		/// <returns>The messages and page data.  The conversation data is optional and is only returned if the include_conversation parameter is set.
		///</returns>
		public async Task<Get_conversation_messagesReturn> Get_conversation_messagesAsync(string conversation_id, int page, int per_page, double device_pixel_ratio, int include_conversation)
		{
			var requestUri = "conversations/"+ (conversation_id==null? "" : System.Uri.EscapeDataString(conversation_id))+"/messages&page="+page+"&per_page="+per_page+"&device_pixel_ratio="+device_pixel_ratio+"&include_conversation="+include_conversation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_conversation_messagesReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unarchive conversation
		/// Unarchive_conversation conversations/{conversation_id}/unarchive
		/// </summary>
		/// <param name="conversation_id">The ID of the conversation to unarchive.</param>
		/// <returns>Conversation unarchived.</returns>
		public async Task Unarchive_conversationAsync(string conversation_id)
		{
			var requestUri = "conversations/"+ (conversation_id==null? "" : System.Uri.EscapeDataString(conversation_id))+"/unarchive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unblock conversation
		/// Unblock_conversation conversations/{conversation_id}/unblock
		/// </summary>
		/// <param name="conversation_id">The ID of the conversation to unblock.</param>
		/// <returns>Conversation unblocked.</returns>
		public async Task Unblock_conversationAsync(string conversation_id)
		{
			var requestUri = "conversations/"+ (conversation_id==null? "" : System.Uri.EscapeDataString(conversation_id))+"/unblock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search groups
		/// Search_groups groups
		/// </summary>
		/// <param name="name">Find groups that have the given text somewhere in their name (case insensitive).</param>
		/// <param name="latitude">Find groups near the given latitude and longitude.</param>
		/// <param name="longitude">Find groups near the given latitude and longitude.</param>
		/// <param name="distance">When latitude and longitude are passed, distance can optionally be passed to only return groups within a certain distance (in kilometers) from the point specified by the latitude and longitude.  The distance must be > 0 and <= 150 and will default to 100.
		///
		/// Minimum: 0
		/// Maximum: 150
		// </param>
		/// <param name="country">Find groups in the given country where country is a 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).
		///</param>
		/// <param name="region">For countries with regions (AU, CA, GB, US), search groups in a specific region as specified by the region abbreviation.  The supported regions and their abbreviations are listed below. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority. <br /><br /> --- <br /><br /> **AU**<br /> - QLD: Queensland<br /> - SA: South Australia<br /> - TAS: Tasmania<br /> - VIC: Victoria<br /> - WA: Western Australia<br /> - NT: Northern Territory<br /> - NSW: New South Wales - ACT<br /> <br /> **CA**<br /> - AB: Alberta<br /> - BC: British Columbia<br /> - MB: Manitoba<br /> - NB: New Brunswick<br /> - NL: Newfoundland and Labrador<br /> - NS: Nova Scotia<br /> - ON: Ontario<br /> - QC: Quebec<br /> - SK: Saskatchewan<br /> - PE: Prince Edward Island<br /> <br /> **GB**<br /> - E: East<br /> - EM: East Midlands<br /> - LDN: London<br /> - NE: North East<br /> - NW: North West<br /> - NI: Northern Ireland<br /> - SC: Scotland<br /> - SE: South East<br /> - SW: South West<br /> - WA: Wales<br /> - WM: West Midlands<br /> - YH: Yorkshire and the Humber<br /> <br /> **US**<br /> All 50 states and the District of Columbia are supported.  For the abbreviations, see: https://github.com/jasonong/List-of-US-States/blob/master/states.csv
		///</param>
		/// <param name="postal_code">Find groups in the given postal code.  Only a few countries support postal code searches (US, CA, AU, GB).  The country parameter must be passed when the postal_code parameter is set. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority.
		///</param>
		/// <param name="page">The page of groups to return.
		/// Minimum: 1
		// </param>
		/// <param name="per_page">The number of groups to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>The groups and paging data.</returns>
		public async Task<Search_groupsReturn> Search_groupsAsync(string name, double latitude, double longitude, double distance, string country, string region, string postal_code, int page, int per_page)
		{
			var requestUri = "groups?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&latitude="+latitude+"&longitude="+longitude+"&distance="+distance+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&region=" + (region==null? "" : System.Uri.EscapeDataString(region))+"&postal_code=" + (postal_code==null? "" : System.Uri.EscapeDataString(postal_code))+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Search_groupsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve multiple groups
		/// Get_groups_by_ids groups/multiple
		/// </summary>
		/// <param name="group_ids">The IDs of the groups to retrieve.  If more than 20 group IDs are passed, only the first 20 groups will be returned.</param>
		/// <returns>The groups.</returns>
		public async Task<Group[]> Get_groups_by_idsAsync(string group_ids)
		{
			var requestUri = "groups/multiple?group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a group
		/// Get_group groups/{group_id}
		/// </summary>
		/// <param name="group_id">The ID of the group to retrieve.</param>
		/// <returns>The group.</returns>
		public async Task<Group> Get_groupAsync(string group_id)
		{
			var requestUri = "groups/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit group answers
		/// Submits answers to a groups' membership questionnaire. <br /><br /> The request body should be a JSON object mapping each question from the group membership.questionnaire.questions field to an answer (eg. {"Where do you live?": "New York City"} ). All questions are required so no null or empty string answers are allowed.
		/// 
		/// Submit_answers groups/{group_id}/answers
		/// </summary>
		/// <param name="group_id">The group ID of the group that the user is submitting answers for.</param>
		/// <param name="requestBody">A JSON object mapping each question from the group membership.questionnaire.questions field to an answer (eg. {"Where do you live?": "New York City"} ). All questions are required so no null or empty string answers are allowed.
		///</param>
		/// <returns>The updated group.</returns>
		public async Task<Group> Submit_answersAsync(string group_id, System.Collections.Generic.Dictionary<string, string> requestBody)
		{
			var requestUri = "groups/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id))+"/answers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Leave a group
		/// Leave_group groups/{group_id}/unsubscribe
		/// </summary>
		/// <param name="group_id">The ID of the group to leave.</param>
		/// <returns>Updated data about the group and the current users' membership.</returns>
		public async Task<Group> Leave_groupAsync(string group_id)
		{
			var requestUri = "groups/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id))+"/unsubscribe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve multiple photos
		/// Get_photos_by_ids photos/multiple
		/// </summary>
		/// <param name="photo_ids">The IDs of the photos to retrieve.  If more than 50 photo IDs are passed, only the first 50 photos will be returned.</param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <returns>The photos.</returns>
		public async Task<PhotoResult[]> Get_photos_by_idsAsync(string photo_ids, double device_pixel_ratio)
		{
			var requestUri = "photos/multiple?photo_ids=" + (photo_ids==null? "" : System.Uri.EscapeDataString(photo_ids))+"&device_pixel_ratio="+device_pixel_ratio;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PhotoResult[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a photo
		/// Delete_photo photos/{photo_id}
		/// </summary>
		/// <returns>Photo deleted.</returns>
		public async Task Delete_photoAsync(string photo_id)
		{
			var requestUri = "photos/"+ (photo_id==null? "" : System.Uri.EscapeDataString(photo_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotate a photo
		/// Rotate_photo photos/{photo_id}/rotate
		/// </summary>
		/// <param name="degrees">Rotation in degrees - currently only 90, 180 and 270 are supported which correspond to rotate left, rotate upside down and rotate right.</param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <returns>Photo rotated.</returns>
		public async Task<PhotoResult> Rotate_photoAsync(string photo_id, int degrees, double device_pixel_ratio)
		{
			var requestUri = "photos/"+ (photo_id==null? "" : System.Uri.EscapeDataString(photo_id))+"/rotate&degrees="+degrees+"&device_pixel_ratio="+device_pixel_ratio;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PhotoResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List posts
		/// NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned.
		/// NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users' location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users' location preferences.
		/// 
		/// Get_posts posts
		/// </summary>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users' location if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn are returned. If set to 'all', all posts will be returned no matter what outcome the posts have.
		///</param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Get_postsReturn> Get_postsAsync(string types, string sources, string group_ids, int per_page, int page, double device_pixel_ratio, double latitude, double longitude, double radius, System.DateTimeOffset date_min, System.DateTimeOffset date_max, string outcomes)
		{
			var requestUri = "posts?types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_postsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all posts
		/// This endpoint provides an easy way to get a feed of all the publicly published posts on trash nothing. It provides access to all publicly published offer and wanted posts from the last 30 days. The posts are sorted by date (newest first). <br /><br /> There are fewer options for filtering, sorting and searching posts with this endpoint but there is no 1,000 post limit and posts that are crossposted to multiple groups are not merged together in the response.  In most cases, crossposted posts are easy to detect because they have the same user_id, title and content.
		/// 
		/// Get_all_posts posts/all
		/// </summary>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, wanted
		///</param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 50).
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <returns>The posts.</returns>
		public async Task<Get_all_postsReturn> Get_all_postsAsync(string types, System.DateTimeOffset date_min, System.DateTimeOffset date_max, int per_page, int page, double device_pixel_ratio)
		{
			var requestUri = "posts/all?types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_all_postsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve client.js
		/// Defines javascript functions that can be used to validate and submit posts.
		/// 
		/// The advantage of using these functions versus using the post submission endpoint directly is that
		/// some of the post validation checks can be done on the client side which will be faster.
		/// 
		/// NOTE: If used, this javascript file MUST be loaded dynamically for each user because the contents
		/// of the file are generated dynamically based on the current user.  The file may be cached on a per
		/// user basis based on the HTTP cache headers that are returned when the file is requested (currently
		/// the cache headers specify that the file should expire after one day).
		/// 
		/// 
		/// The following functions are available:
		/// 
		/// ---
		/// 
		/// **window.TN.check_crossposting_restrictions(group_ids)**
		/// 
		/// Checks for crossposting restrictions when the user selects more than one group to post to.
		/// 
		/// Parameters:
		/// - **group_ids** is an array of group IDs
		/// 
		/// Returns an object with three properties {allowed, restricted, restrictions}.
		/// 
		/// - **allowed** is an array of the group IDs from group_ids that can be crossposted to
		/// 
		/// - **restricted** is an array of the group IDs from group_ids that can't be crossposted to
		/// 
		/// - **restrictions** is an object mapping group IDs that have crossposting restrictions to arrays of group IDs that are restricted.
		/// It is useful for pinpointing why a group ID shows up in the restricted array so that users can be provided feedback
		/// about the reason for the crossposting restriction (eg. a message like 'group A doesn't allow crossposting to group B').
		/// 
		/// For example, given group_ids = [1, 2, 3, 4] and assuming group 1 doesn't allow posting to group 3 and group 2 doesn't allow
		/// posting to group 1, the returned object will be:
		/// 
		/// {allowed: [4], restricted: [1, 2, 3], restrictions: {1: [3], 2: [1]}}
		/// 
		/// 
		/// ---
		/// 
		/// **window.TN.submit_post(args, session, preferences, callback)**
		/// 
		/// Submits a new post and performs validation checks on the post before it is accepted for submission.
		/// 
		/// Parameters:
		/// 
		/// - **args** is an object containing data about the post being submitted and must include
		/// the following properties:
		/// 
		/// - type: The type of post.  One of: offer, wanted
		/// - title: A short description of the item(s).
		/// - location: A short location description.
		/// 
		/// The following properties are optional:
		/// 
		/// - content: A longer description of the item(s).
		/// - group_ids: An array of group IDs to submit the post to (if any).
		/// - fair_offer: If set to 1, the post will be posted with the Fair Offer Policy (only valid for offer posts - see https://trashnothing.com/fair_offer_policy ).
		/// - photo_ids: A comma separated list of the IDs of the photos that should be attached to this post.
		/// - latitude
		/// - longitude
		/// 
		/// - **session** is a temporary object that is used by submit_post to store data about the submission
		/// process for a single post.  The first time submit_post is called with a post, session should
		/// be a new empty object (eg. {}).  The session object should be persisted until that post
		/// is successfully submitted and then it can be discarded so that the next post will start
		/// over with a new empty session object.
		/// 
		/// - **preferences** is a permanent object that the client persists and modifies based on warnings returned
		/// by the post submission process and user input.  Some post warnings passed to the callback object
		/// have a preference_key string property so that users can opt out of those warnings in the future.
		/// To save this opt-out preference, set the property indicated by the preference_key in the preferences
		/// object (eg. preferences[preference_key] = 1).  The preferences object is only read by submit_post and
		/// never modified - it is up to the client to initialize, modify and persist the preferences object.
		/// 
		/// - **callback** is a function used to return the result of the post submission. It is called and passed
		/// one argument - an object with five properties {result, message, preference_key, identifier, session}.
		/// The result property is a string that is one of: success, error, warning.  The identifier property is
		/// set for errors and warnings and will contain a string that represents the type of error or warning that
		/// occurred.
		/// 
		/// A success result indicates that the post was submitted successfully. Note that posts may not
		/// appear instantly after submission because the moderators of many groups may have additional
		/// automatic or manual review processes in place that can delay the publishing of a post.
		/// 
		/// An error result indicates that there is an error with the post to show the user and the message property
		/// will contain text describing the error.
		/// 
		/// A warning result indicates that there is a warning about the post to show the user and the
		/// message property will contain a string describing the warning.  A warning result doesn't prevent a post from
		/// being submitted, to continue the submission process after a warning result, just re-submit the post
		/// (with the updated session object) to temporarily override that specific warning.
		/// 
		/// Certain types of warnings can be opted out of.  These warnings will set preference_key to a string that can be
		/// set in the preferences object by the client to opt out of that type of warning in the future (see the description
		/// of the preferences parameter for more details).
		/// 
		/// Get_post_client_javascript posts/client.js
		/// </summary>
		/// <param name="group_ids">A comma separated list of all the group IDs that the current user is a member of. If the current user is not a member of any groups, simply pass an empty string.
		///</param>
		/// <param name="callback">The name of a global function to call once the script is loaded.</param>
		/// <param name="access_token">Passing the current users' OAuth2 access token as a GET parameter makes it easier to load this script in a normal HTML <script> tag.
		///</param>
		/// <returns>The client.js javascript file.</returns>
		public async Task Get_post_client_javascriptAsync(string group_ids, string callback, string access_token)
		{
			var requestUri = "posts/client.js?group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve multiple posts
		/// Get_posts_by_ids posts/multiple
		/// </summary>
		/// <param name="post_ids">A comma separated list of the post IDs. If more than 10 post IDs are passed, only the first 10 posts will be returned.
		///</param>
		/// <returns>The posts.</returns>
		public async Task<Post[]> Get_posts_by_idsAsync(string post_ids)
		{
			var requestUri = "posts/multiple?post_ids=" + (post_ids==null? "" : System.Uri.EscapeDataString(post_ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search posts
		/// Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters.
		/// NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned.
		/// 
		/// Search_posts posts/search
		/// </summary>
		/// <param name="search">The search query used to find posts.</param>
		/// <param name="sort_by">How to sort the posts that are returned.  One of: relevance, date <br /><br /> Setting sort_by to date will sort posts from newest to oldest.
		///</param>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users' location if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn are returned. If set to 'all', all posts will be returned no matter what outcome the posts have.
		///</param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Search_postsReturn> Search_postsAsync(string search, string sort_by, string types, string sources, string group_ids, int per_page, int page, double device_pixel_ratio, double latitude, double longitude, double radius, System.DateTimeOffset date_min, System.DateTimeOffset date_max, string outcomes)
		{
			var requestUri = "posts/search?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Search_postsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a post
		/// Get_post posts/{post_id}
		/// </summary>
		/// <param name="post_id">The ID of the post to retrieve.</param>
		/// <returns>The post.</returns>
		public async Task<Post> Get_postAsync(string post_id)
		{
			var requestUri = "posts/"+ (post_id==null? "" : System.Uri.EscapeDataString(post_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve post display data
		/// Retrieve a post and other data related to the post that is useful for displaying the post such as data about the user who posted the post and the groups the post was posted on.
		/// 
		/// Get_post_and_related_data posts/{post_id}/display
		/// </summary>
		/// <param name="post_id">The ID of the post to retrieve.</param>
		/// <returns>The post and related data.</returns>
		public async Task<Get_post_and_related_dataReturn> Get_post_and_related_dataAsync(string post_id)
		{
			var requestUri = "posts/"+ (post_id==null? "" : System.Uri.EscapeDataString(post_id))+"/display";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_post_and_related_dataReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Satisfy a post
		/// Mark an offer or wanted post by the current user as satisfied (eg. an offer has been taken or a wanted has been received).
		/// Satisfy_post posts/{post_id}/satisfy
		/// </summary>
		/// <param name="post_id">The ID of the post to satisfy.</param>
		/// <returns>The updated post.</returns>
		public async Task<Post> Satisfy_postAsync(string post_id)
		{
			var requestUri = "posts/"+ (post_id==null? "" : System.Uri.EscapeDataString(post_id))+"/satisfy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve post share content
		/// Retrieve text and html content useful for sharing a post by email.
		/// Get_post_share_content posts/{post_id}/share
		/// </summary>
		/// <param name="post_id">The ID of the post to share.</param>
		/// <returns>Email subject, text body and html body for sharing a post by email.</returns>
		public async Task<Get_post_share_contentReturn> Get_post_share_contentAsync(string post_id)
		{
			var requestUri = "posts/"+ (post_id==null? "" : System.Uri.EscapeDataString(post_id))+"/share";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_post_share_contentReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Share a post
		/// Forwards a copy of the post to the current user so that they can forward it to friends.
		/// Share_post posts/{post_id}/share
		/// </summary>
		/// <param name="post_id">The ID of the post to share.</param>
		/// <returns>Post shared.</returns>
		public async Task Share_postAsync(string post_id)
		{
			var requestUri = "posts/"+ (post_id==null? "" : System.Uri.EscapeDataString(post_id))+"/share";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Withdraw a post
		/// Mark an offer or wanted post by the current user as withdrawn.
		/// Withdraw_post posts/{post_id}/withdraw
		/// </summary>
		/// <param name="post_id">The ID of the post to withdraw.</param>
		/// <returns>The updated post.</returns>
		public async Task<Post> Withdraw_postAsync(string post_id)
		{
			var requestUri = "posts/"+ (post_id==null? "" : System.Uri.EscapeDataString(post_id))+"/withdraw";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Post>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve current user
		/// Get_current_user users/me
		/// </summary>
		/// <returns>User data</returns>
		public async Task<CurrentUser> Get_current_userAsync()
		{
			var requestUri = "users/me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CurrentUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List current users' email alerts
		/// Get_alerts users/me/alerts
		/// </summary>
		/// <returns>The users alerts.</returns>
		public async Task<Alert[]> Get_alertsAsync()
		{
			var requestUri = "users/me/alerts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Alert[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an email alert
		/// Delete_alert users/me/alerts/{alert_id}
		/// </summary>
		/// <param name="alert_id">The ID of the email alert to delete.</param>
		/// <returns>Alert deleted.</returns>
		public async Task Delete_alertAsync(string alert_id)
		{
			var requestUri = "users/me/alerts/"+ (alert_id==null? "" : System.Uri.EscapeDataString(alert_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set users' email address as not bouncing
		/// Resets an email address bouncing state to false.  The users' email address may be automatically marked as bouncing again if further emails sent to it are bounced.
		/// 
		/// Set_email_not_bouncing users/me/email/not-bouncing
		/// </summary>
		/// <returns>The updated user.</returns>
		public async Task<CurrentUser> Set_email_not_bouncingAsync()
		{
			var requestUri = "users/me/email/not-bouncing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CurrentUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List current users' groups
		/// Get_current_user_groups users/me/groups
		/// </summary>
		/// <param name="membership">Set the membership parameter to only return certain groups. The options are: <br /><br /> - **subscribed**: Only return groups the user is a member of.<br /> - **pending-questions**: Only return groups where the user needs to respond to a new member questionnaire.<br /> - **pending**: Only return groups where the user is waiting for their membership request to be approved (excludes groups which are pending-questions). <br /><br /> If unset, all groups the user is a member of and pending membership on will be returned.
		///</param>
		/// <returns>The users groups.</returns>
		public async Task<Group[]> Get_current_user_groupsAsync(string membership)
		{
			var requestUri = "users/me/groups?membership=" + (membership==null? "" : System.Uri.EscapeDataString(membership));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List current users' group notices
		/// Get_user_group_notices users/me/notices
		/// </summary>
		/// <param name="group_ids">A comma separated list of group IDs to return notices for.  If unset, notices for all the users groups will be returned.</param>
		/// <returns>The users group notices.</returns>
		public async Task<GroupNotice[]> Get_user_group_noticesAsync(string group_ids)
		{
			var requestUri = "users/me/notices?group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GroupNotice[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List current users' posts
		/// NOTE: In order to make it easier to see all a users&#39; posts, the current users&#39; location preferences are not applied when listing or searching posts from a single user.  If location based filtering of the posts is needed, the latitude, longitude and radius parameters may be used.
		/// 
		/// Get_current_user_posts users/me/posts
		/// </summary>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users' location if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn are returned. If set to 'all', all posts will be returned no matter what outcome the posts have.
		///</param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Get_current_user_postsReturn> Get_current_user_postsAsync(string types, string sources, string group_ids, int per_page, int page, double device_pixel_ratio, double latitude, double longitude, double radius, System.DateTimeOffset date_min, System.DateTimeOffset date_max, string outcomes)
		{
			var requestUri = "users/me/posts?types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_current_user_postsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search current users' posts
		/// Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters.
		/// 
		/// Search_current_user_posts users/me/posts/search
		/// </summary>
		/// <param name="search">The search query used to find posts.</param>
		/// <param name="sort_by">How to sort the posts that are returned.  One of: relevance, date <br /><br /> Setting sort_by to date will sort posts from newest to oldest.
		///</param>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users' location if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn are returned. If set to 'all', all posts will be returned no matter what outcome the posts have.
		///</param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Search_current_user_postsReturn> Search_current_user_postsAsync(string search, string sort_by, string types, string sources, string group_ids, int per_page, int page, double device_pixel_ratio, double latitude, double longitude, double radius, System.DateTimeOffset date_min, System.DateTimeOffset date_max, string outcomes)
		{
			var requestUri = "users/me/posts/search?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Search_current_user_postsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List current users' profile images
		/// Get_profile_images users/me/profile-images
		/// </summary>
		/// <returns>The  users profile images.</returns>
		public async Task<Get_profile_imagesReturn[]> Get_profile_imagesAsync()
		{
			var requestUri = "users/me/profile-images";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_profile_imagesReturn[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resend account verification email
		/// Resend_account_verification_email users/me/resend-verification
		/// </summary>
		/// <returns>Verification email was resent.</returns>
		public async Task Resend_account_verification_emailAsync()
		{
			var requestUri = "users/me/resend-verification";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send password reset email
		/// Send_password_reset_email users/me/reset-password
		/// </summary>
		/// <returns>Password reset email was sent.</returns>
		public async Task Send_password_reset_emailAsync()
		{
			var requestUri = "users/me/reset-password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a user
		/// Get_user users/{user_id}
		/// </summary>
		/// <param name="user_id">A user ID.</param>
		/// <returns>User data</returns>
		public async Task<User> Get_userAsync(string user_id)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List posts by a user
		/// NOTE: In order to make it easier to see all a users&#39; posts, the current users&#39; location preferences are not applied when listing or searching posts from a single user.  If location based filtering of the posts is needed, the latitude, longitude and radius parameters may be used.
		/// 
		/// Get_user_posts users/{user_id}/posts
		/// </summary>
		/// <param name="user_id">The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.
		///</param>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn are returned. If set to 'all', all posts will be returned no matter what outcome the posts have.
		///</param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Get_user_postsReturn> Get_user_postsAsync(string user_id, string types, string sources, string group_ids, int per_page, int page, double device_pixel_ratio, double latitude, double longitude, double radius, System.DateTimeOffset date_min, System.DateTimeOffset date_max, string outcomes)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/posts&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_user_postsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search posts by a user
		/// Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters.
		/// 
		/// Search_user_posts users/{user_id}/posts/search
		/// </summary>
		/// <param name="user_id">The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.
		///</param>
		/// <param name="search">The search query used to find posts.</param>
		/// <param name="sort_by">How to sort the posts that are returned.  One of: relevance, date <br /><br /> Setting sort_by to date will sort posts from newest to oldest.
		///</param>
		/// <param name="types">A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
		///</param>
		/// <param name="sources">A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.
		///</param>
		/// <param name="group_ids">A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response.
		///</param>
		/// <param name="per_page">The number of posts to return per page (must be >= 1 and <= 100).
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">The page of posts to return.
		/// Minimum: 1
		// </param>
		/// <param name="device_pixel_ratio">Client device pixel ratio used to determine thumbnail size (default 1.0).</param>
		/// <param name="latitude">The latitude of a point around which to return posts.
		///</param>
		/// <param name="longitude">The longitude of a point around which to return posts.
		///</param>
		/// <param name="radius">The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
		///
		/// Minimum: 0
		/// Maximum: 257500
		// </param>
		/// <param name="date_min">Only posts newer than or equal to this UTC date and time will be returned.
		///</param>
		/// <param name="date_max">Only posts older than this UTC date and time will be returned.</param>
		/// <param name="outcomes">A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn are returned. If set to 'all', all posts will be returned no matter what outcome the posts have.
		///</param>
		/// <returns>The posts and paging data.</returns>
		public async Task<Search_user_postsReturn> Search_user_postsAsync(string user_id, string search, string sort_by, string types, string sources, string group_ids, int per_page, int page, double device_pixel_ratio, double latitude, double longitude, double radius, System.DateTimeOffset date_min, System.DateTimeOffset date_max, string outcomes)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/posts/search&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types))+"&sources=" + (sources==null? "" : System.Uri.EscapeDataString(sources))+"&group_ids=" + (group_ids==null? "" : System.Uri.EscapeDataString(group_ids))+"&per_page="+per_page+"&page="+page+"&device_pixel_ratio="+device_pixel_ratio+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&date_min=" + date_min.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_max=" + date_max.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&outcomes=" + (outcomes==null? "" : System.Uri.EscapeDataString(outcomes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Search_user_postsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a users' profile image
		/// This is designed to be used as the src attribute of an HTML &lt;img&gt; tag to show the profile image of the given user.
		/// 
		/// Get_profile_image_file users/{user_id}/profile-image
		/// </summary>
		/// <param name="user_id">The user ID of the user to return the profile image of.</param>
		/// <param name="_default">A default image URL to use when the user has no profile image. Or to use one of the Gravatar default images, you can set default to any one of (404, mm, identicon, monsterid, wavatar, retro, blank). <br /><br /> To learn how the Gravatar default images options work, see the Default Image section on the page at:<br /> https://en.gravatar.com/site/implement/images/
		///</param>
		public async Task Get_profile_image_fileAsync(string user_id, string _default)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/profile-image&default=" + (_default==null? "" : System.Uri.EscapeDataString(_default));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Get_conversationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="conversations")]
		public Conversation[] Conversations { get; set; }
		
		/// <summary>
		/// If the include_num_unread parameter is set to 1, this will be set to the total number of conversations that have unread messages matching the query parameters of the request.  If the include_num_unread parameter is set to 0, this will be null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_unread")]
		public System.Nullable<System.Int32> Num_unread { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
	}
	
	public class Search_conversationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="conversations")]
		public Conversation[] Conversations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search")]
		public string Search { get; set; }
	}
	
	public class Get_conversation_messagesReturn
	{
		
		/// <summary>
		/// A conversation between the current user and another user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversation")]
		public Conversation Conversation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
	}
	
	public class Search_groupsReturn
	{
		
		/// <summary>
		/// The index of the last group being returned (an integer between start_index and num_groups).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public Group[] Groups { get; set; }
		
		/// <summary>
		/// The total number of groups available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_groups")]
		public System.Nullable<System.Int32> Num_groups { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The page number of the groups being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of groups being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// The index of the first group being returned (an integer between 1 and num_groups).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Get_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The UTC date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_listings_view")]
		public System.Nullable<System.DateTimeOffset> Last_listings_view { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public Post[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Get_all_postsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public Post[] Posts { get; set; }
	}
	
	public class Search_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public PostSearchResult[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Get_post_and_related_dataReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public User Author { get; set; }
		
		/// <summary>
		/// Count of offer posts made by the post author in the last 90 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author_offer_count")]
		public System.Nullable<System.Int32> Author_offer_count { get; set; }
		
		/// <summary>
		/// Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author_posts")]
		public Post[] Author_posts { get; set; }
		
		/// <summary>
		/// Count of wanted posts made by the post author in the last 90 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author_wanted_count")]
		public System.Nullable<System.Int32> Author_wanted_count { get; set; }
		
		/// <summary>
		/// Two bounding boxes that make using Google Maps' geocoder easier. <br /><br /> The default bounding box defines the area in which the post is probably located.  This is useful for providing a bounds to Google Maps geocoder. <br /><br /> The limit bounding box is a larger bounding box that contains the default bounding box. This is useful for discarding Google Maps geocoding results that are outside of this bounding box.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geolocate_bounds")]
		public GeolocateBounds Geolocate_bounds { get; set; }
		
		/// <summary>
		/// The groups the post is published on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public Group[] Groups { get; set; }
		
		/// <summary>
		/// An offer, wanted, admin, taken or received post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post")]
		public Post Post { get; set; }
		
		/// <summary>
		/// Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_can_reply")]
		public System.Nullable<System.Boolean> User_can_reply { get; set; }
	}
	
	public class Get_post_share_contentReturn
	{
		
		/// <summary>
		/// Email body as html.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html")]
		public string Html { get; set; }
		
		/// <summary>
		/// Email subject line text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// Email body as plain text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class Get_current_user_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The UTC date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_listings_view")]
		public System.Nullable<System.DateTimeOffset> Last_listings_view { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public Post[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Search_current_user_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public PostSearchResult[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Get_profile_imagesReturn
	{
		
		/// <summary>
		/// An image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// The source of the image.  Currently one of: gravatar, facebook, twitter, google <br /><br /> NOTE: Additional sources may be added in the future (eg. 'trashnothing' when support for uploading custom profile images is added) so clients should take care to support arbitrary sources being returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class Get_user_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The UTC date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_listings_view")]
		public System.Nullable<System.DateTimeOffset> Last_listings_view { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public Post[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
	
	public class Search_user_postsReturn
	{
		
		/// <summary>
		/// The index of the last post being returned (an integer between start_index and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_index")]
		public System.Nullable<System.Int32> End_index { get; set; }
		
		/// <summary>
		/// The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group_ids")]
		public string[] Group_ids { get; set; }
		
		/// <summary>
		/// The total number of pages available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The total number of posts available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_posts")]
		public System.Nullable<System.Int32> Num_posts { get; set; }
		
		/// <summary>
		/// The page number of the posts being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of posts being returned per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public PostSearchResult[] Posts { get; set; }
		
		/// <summary>
		/// The index of the first post being returned (an integer between 1 and num_posts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_index")]
		public System.Nullable<System.Int32> Start_index { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
