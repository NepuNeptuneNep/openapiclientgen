//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The AssignmentPrincipal
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssignmentPrincipal
	{
		
		/// <summary>
		/// The principal id being assigned to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Other metadata for the principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalMetadata")]
		public System.Collections.Generic.Dictionary<string, string> PrincipalMetadata { get; set; }
		
		/// <summary>
		/// The Type of the principal ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalType")]
		public string PrincipalType { get; set; }
	}
	
	/// <summary>
	/// The authorization policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthorizationPolicy
	{
		
		/// <summary>
		/// The permissions associated with the policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public PermissionTypes[] Permissions { get; set; }
		
		/// <summary>
		/// Name of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Primary key associated with the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// Secondary key associated with the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryKey")]
		public string SecondaryKey { get; set; }
	}
	
	/// <summary>
	/// Supported permission types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PermissionTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Read = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Write = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Manage = 2,
	}
	
	/// <summary>
	/// The response of list authorization policy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthorizationPolicyListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AuthorizationPolicyResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The authorization policy resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthorizationPolicyResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The authorization policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AuthorizationPolicy Properties { get; set; }
	}
	
	/// <summary>
	/// The Azure Blob connector properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureBlobConnectorProperties
	{
		
		/// <summary>
		/// The connection KeyVault URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionKeyVaultUrl")]
		public string ConnectionKeyVaultUrl { get; set; }
	}
	
	/// <summary>
	/// Definition of canonical profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CanonicalProfileDefinition
	{
		
		/// <summary>
		/// Canonical profile ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalProfileId")]
		public System.Nullable<System.Int32> CanonicalProfileId { get; set; }
		
		/// <summary>
		/// Properties of the canonical profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CanonicalProfileDefinitionProperties[] CanonicalProfileDefinitionProperties { get; set; }
	}
	
	public class CanonicalProfileDefinitionProperties
	{
		
		/// <summary>
		/// Profile name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Property name of profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePropertyName")]
		public string ProfilePropertyName { get; set; }
		
		/// <summary>
		/// The rank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Type of canonical property value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CanonicalProfileDefinitionPropertiesType> Type { get; set; }
		
		/// <summary>
		/// Value of the canonical property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CanonicalProfileDefinitionPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Numeric = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Categorical = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DerivedCategorical = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DerivedNumeric = 3,
	}
	
	/// <summary>
	/// Properties of connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Connector
	{
		
		/// <summary>
		/// ID of the connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorId")]
		public System.Nullable<System.Int32> ConnectorId { get; set; }
		
		/// <summary>
		/// Name of the connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// The connector properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProperties")]
		public System.Collections.Generic.Dictionary<string, object> ConnectorProperties { get; set; }
		
		/// <summary>
		/// Type of connector.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorConnectorType ConnectorType { get; set; }
		
		/// <summary>
		/// The created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Description of the connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display name of the connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// If this is an internal connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		/// <summary>
		/// The last modified time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// State of connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ConnectorState> State { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorConnectorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureBlob = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Salesforce = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExchangeOnline = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Outbound = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expiring = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// The response of list connector operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConnectorResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The connector resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// Properties of connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Connector Properties { get; set; }
	}
	
	/// <summary>
	/// The connector mapping definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorMapping
	{
		
		/// <summary>
		/// The connector mapping name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorMappingName")]
		public string ConnectorMappingName { get; set; }
		
		/// <summary>
		/// The connector name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		/// <summary>
		/// Type of connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorConnectorType ConnectorType { get; set; }
		
		/// <summary>
		/// The created time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The DataFormat ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFormatId")]
		public string DataFormatId { get; set; }
		
		/// <summary>
		/// The description of the connector mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display name for the connector mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Defines which entity type the file should map to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public ConnectorMappingEntityType EntityType { get; set; }
		
		/// <summary>
		/// The mapping entity name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityTypeName")]
		public string EntityTypeName { get; set; }
		
		/// <summary>
		/// The last modified time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The connector mapping properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mappingProperties")]
		public ConnectorMappingProperties MappingProperties { get; set; }
		
		/// <summary>
		/// The next run time based on customer's settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRunTime")]
		public System.Nullable<System.DateTimeOffset> NextRunTime { get; set; }
		
		/// <summary>
		/// The RunId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// State of connector mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ConnectorMappingState> State { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorMappingEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Profile = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interaction = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Relationship = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorMappingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expiring = 6,
	}
	
	/// <summary>
	/// Connector mapping property availability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorMappingAvailability
	{
		
		/// <summary>
		/// The frequency to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<ConnectorMappingAvailabilityFrequency> Frequency { get; set; }
		
		/// <summary>
		/// The interval of the given frequency to use.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public int Interval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorMappingAvailabilityFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 4,
	}
	
	/// <summary>
	/// The complete operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorMappingCompleteOperation
	{
		
		/// <summary>
		/// The type of completion operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionOperationType")]
		public System.Nullable<ConnectorMappingCompleteOperationCompletionOperationType> CompletionOperationType { get; set; }
		
		/// <summary>
		/// The destination folder where files will be moved to once the import is done.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationFolder")]
		public string DestinationFolder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorMappingCompleteOperationCompletionOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DoNothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFile = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MoveFile = 2,
	}
	
	/// <summary>
	/// The error management.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorMappingErrorManagement
	{
		
		/// <summary>
		/// The error limit allowed while importing data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorLimit")]
		public System.Nullable<System.Int32> ErrorLimit { get; set; }
		
		/// <summary>
		/// The type of error management to use for the mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorManagementType")]
		public ConnectorMappingErrorManagementErrorManagementType ErrorManagementType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorMappingErrorManagementErrorManagementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RejectAndContinue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StopImport = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RejectUntilLimit = 2,
	}
	
	/// <summary>
	/// Connector mapping property format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorMappingFormat
	{
		
		/// <summary>
		/// The oData language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptLanguage")]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Character separating array elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arraySeparator")]
		public string ArraySeparator { get; set; }
		
		/// <summary>
		/// The character that signifies a break between columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnDelimiter")]
		public string ColumnDelimiter { get; set; }
		
		/// <summary>
		/// The type mapping format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formatType")]
		public ConnectorMappingFormatFormatType FormatType { get; set; }
		
		/// <summary>
		/// Quote character, used to indicate enquoted fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quoteCharacter")]
		public string QuoteCharacter { get; set; }
		
		/// <summary>
		/// Escape character for quotes, can be the same as the quoteCharacter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quoteEscapeCharacter")]
		public string QuoteEscapeCharacter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorMappingFormatFormatType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TextFormat = 0,
	}
	
	/// <summary>
	/// The response of list connector mapping operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorMappingListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConnectorMappingResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The connector mapping resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorMappingResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The connector mapping definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConnectorMapping Properties { get; set; }
	}
	
	/// <summary>
	/// The connector mapping properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorMappingProperties
	{
		
		/// <summary>
		/// Connector mapping property availability.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public ConnectorMappingAvailability Availability { get; set; }
		
		/// <summary>
		/// The complete operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completeOperation")]
		public ConnectorMappingCompleteOperation CompleteOperation { get; set; }
		
		/// <summary>
		/// The error management.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorManagement")]
		public ConnectorMappingErrorManagement ErrorManagement { get; set; }
		
		/// <summary>
		/// The file filter for the mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileFilter")]
		public string FileFilter { get; set; }
		
		/// <summary>
		/// The folder path for the mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// Connector mapping property format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public ConnectorMappingFormat Format { get; set; }
		
		/// <summary>
		/// If the file contains a header or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasHeader")]
		public System.Nullable<System.Boolean> HasHeader { get; set; }
		
		/// <summary>
		/// Ingestion mapping information at property level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="structure")]
		public ConnectorMappingStructure[] Structure { get; set; }
	}
	
	/// <summary>
	/// Connector mapping property structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectorMappingStructure
	{
		
		/// <summary>
		/// The column name of the import file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="columnName")]
		public string ColumnName { get; set; }
		
		/// <summary>
		/// Custom format specifier for input parsing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFormatSpecifier")]
		public string CustomFormatSpecifier { get; set; }
		
		/// <summary>
		/// Indicates if the column is encrypted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		/// <summary>
		/// The property name of the mapping entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyName")]
		public string PropertyName { get; set; }
	}
	
	/// <summary>
	/// Type of connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureBlob = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Salesforce = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExchangeOnline = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Outbound = 5,
	}
	
	/// <summary>
	/// The CRM connector entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CrmConnectorEntities
	{
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicating whether this is profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isProfile")]
		public System.Nullable<System.Boolean> IsProfile { get; set; }
		
		/// <summary>
		/// The logical name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logicalName")]
		public string LogicalName { get; set; }
	}
	
	/// <summary>
	/// The CRM connector properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CrmConnectorProperties
	{
		
		/// <summary>
		/// The access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// The connection string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// The entities like account, contact, opportunity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public CrmConnectorEntities[] Entities { get; set; }
		
		/// <summary>
		/// The organization ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
		
		/// <summary>
		/// The organization URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="organizationUrl")]
		public string OrganizationUrl { get; set; }
	}
	
	/// <summary>
	/// Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataSource
	{
		
		/// <summary>
		/// The data source reference id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceReferenceId")]
		public string DataSourceReferenceId { get; set; }
		
		/// <summary>
		/// The data source type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceType")]
		public System.Nullable<DataSourceDataSourceType> DataSourceType { get; set; }
		
		/// <summary>
		/// The data source ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The data source name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The data source status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<DataSourceStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataSourceDataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connector = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LinkInteraction = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemDefault = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataSourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 2,
	}
	
	/// <summary>
	/// The data source precedence is a way to know the precedence of each data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataSourcePrecedence
	{
		
		/// <summary>
		/// Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public DataSource DataSource { get; set; }
		
		/// <summary>
		/// the precedence value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precedence")]
		public System.Nullable<System.Int32> Precedence { get; set; }
	}
	
	/// <summary>
	/// The enriching KPI definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnrichingKpi
	{
	}
	
	/// <summary>
	/// Describes an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EntityTypeDefinition : MetadataDefinitionBase
	{
		
		/// <summary>
		/// The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiEntitySetName")]
		public string ApiEntitySetName { get; set; }
		
		/// <summary>
		/// Type of entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public ConnectorMappingEntityType EntityType { get; set; }
		
		/// <summary>
		/// The properties of the Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public PropertyDefinition[] Fields { get; set; }
		
		/// <summary>
		/// The instance count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instancesCount")]
		public System.Nullable<System.Int32> InstancesCount { get; set; }
		
		/// <summary>
		/// The last changed time for the type definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastChangedUtc")]
		public System.Nullable<System.DateTimeOffset> LastChangedUtc { get; set; }
		
		/// <summary>
		/// Provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<EntityTypeDefinitionProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The schema org link. This helps ACI identify and suggest semantic models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaItemTypeLink")]
		public string SchemaItemTypeLink { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The timestamp property name. Represents the time when the interaction or profile update happened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampFieldName")]
		public string TimestampFieldName { get; set; }
		
		/// <summary>
		/// The name of the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeName")]
		public string TypeName { get; set; }
	}
	
	/// <summary>
	/// Property definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PropertyDefinition
	{
		
		/// <summary>
		/// Array value separator for properties with isArray set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayValueSeparator")]
		public string ArrayValueSeparator { get; set; }
		
		/// <summary>
		/// This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourcePrecedenceRules")]
		public DataSourcePrecedence[] DataSourcePrecedenceRules { get; set; }
		
		/// <summary>
		/// Describes valid values for an enum property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumValidValues")]
		public ProfileEnumValidValuesFormat[] EnumValidValues { get; set; }
		
		/// <summary>
		/// Name of the property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// Type of the property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fieldType")]
		public string FieldType { get; set; }
		
		/// <summary>
		/// Indicates if the property is actually an array of the fieldType above on the data api.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isArray")]
		public System.Nullable<System.Boolean> IsArray { get; set; }
		
		/// <summary>
		/// Whether property is available in graph or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAvailableInGraph")]
		public System.Nullable<System.Boolean> IsAvailableInGraph { get; set; }
		
		/// <summary>
		/// Indicates if the property is an enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnum")]
		public System.Nullable<System.Boolean> IsEnum { get; set; }
		
		/// <summary>
		/// Indicates if the property is an flag enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFlagEnum")]
		public System.Nullable<System.Boolean> IsFlagEnum { get; set; }
		
		/// <summary>
		/// Whether the property is an Image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isImage")]
		public System.Nullable<System.Boolean> IsImage { get; set; }
		
		/// <summary>
		/// Whether the property is a localized string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLocalizedString")]
		public System.Nullable<System.Boolean> IsLocalizedString { get; set; }
		
		/// <summary>
		/// Whether the property is a name or a part of name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isName")]
		public System.Nullable<System.Boolean> IsName { get; set; }
		
		/// <summary>
		/// Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRequired")]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		/// <summary>
		/// Max length of string. Used only if type is string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLength")]
		public System.Nullable<System.Int32> MaxLength { get; set; }
		
		/// <summary>
		/// The ID associated with the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyId")]
		public string PropertyId { get; set; }
		
		/// <summary>
		/// URL encoded schema.org item prop link for the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaItemPropLink")]
		public string SchemaItemPropLink { get; set; }
	}
	
	/// <summary>
	/// Valid enum values in case of an enum property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileEnumValidValuesFormat
	{
		
		/// <summary>
		/// Localized names of the enum member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValueNames")]
		public System.Collections.Generic.Dictionary<string, string> LocalizedValueNames { get; set; }
		
		/// <summary>
		/// The integer value of the enum member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EntityTypeDefinitionProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expiring = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HumanIntervention = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// Input type for getting image upload url.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetImageUploadUrlInput
	{
		
		/// <summary>
		/// Type of entity. Can be Profile or Interaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public string EntityType { get; set; }
		
		/// <summary>
		/// Name of the entity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityTypeName")]
		public string EntityTypeName { get; set; }
		
		/// <summary>
		/// Relative path of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
	}
	
	/// <summary>
	/// Hub resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Hub : Resource
	{
		
		/// <summary>
		/// Properties of hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public HubPropertiesFormat Properties { get; set; }
	}
	
	/// <summary>
	/// Hub billing info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HubBillingInfoFormat
	{
		
		/// <summary>
		/// The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxUnits")]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> MaxUnits { get; set; }
		
		/// <summary>
		/// The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minUnits")]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> MinUnits { get; set; }
		
		/// <summary>
		/// The sku name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
	}
	
	/// <summary>
	/// Response of list hub operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HubListResult
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Hub[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HubPropertiesFormat
	{
		
		/// <summary>
		/// API endpoint URL of the hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiEndpoint")]
		public string ApiEndpoint { get; set; }
		
		/// <summary>
		/// Hub billing info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hubBillingInfo")]
		public HubBillingInfoFormat HubBillingInfo { get; set; }
		
		/// <summary>
		/// Provisioning state of the hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantFeatures")]
		public System.Nullable<System.Int32> TenantFeatures { get; set; }
		
		/// <summary>
		/// Web endpoint URL of the hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webEndpoint")]
		public string WebEndpoint { get; set; }
	}
	
	/// <summary>
	/// The image definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageDefinition
	{
		
		/// <summary>
		/// Content URL for the image blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUrl")]
		public string ContentUrl { get; set; }
		
		/// <summary>
		/// Whether image exists already.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageExists")]
		public System.Nullable<System.Boolean> ImageExists { get; set; }
		
		/// <summary>
		/// Relative path of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
	}
	
	/// <summary>
	/// The response of list interaction operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InteractionListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public InteractionResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The interaction resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InteractionResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The Interaction Type Definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public InteractionTypeDefinition Properties { get; set; }
	}
	
	/// <summary>
	/// The Interaction Type Definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InteractionTypeDefinition : EntityTypeDefinition
	{
		
		/// <summary>
		/// This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourcePrecedenceRules")]
		public DataSourcePrecedence[] DataSourcePrecedenceRules { get; set; }
		
		/// <summary>
		/// Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultDataSource")]
		public DataSource DefaultDataSource { get; set; }
		
		/// <summary>
		/// The id property names. Properties which uniquely identify an interaction instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idPropertyNames")]
		public string[] IdPropertyNames { get; set; }
		
		/// <summary>
		/// An interaction can be tagged as an activity only during create. This enables the interaction to be editable and can enable merging of properties from multiple data sources based on precedence, which is defined at a link level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActivity")]
		public System.Nullable<System.Boolean> IsActivity { get; set; }
		
		/// <summary>
		/// Profiles that participated in the interaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participantProfiles")]
		public Participant[] ParticipantProfiles { get; set; }
		
		/// <summary>
		/// The primary participant property name for an interaction ,This is used to logically represent the agent of the interaction, Specify the participant name here from ParticipantName.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryParticipantProfilePropertyName")]
		public string PrimaryParticipantProfilePropertyName { get; set; }
	}
	
	/// <summary>
	/// Describes a profile type participating in an interaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Participant
	{
		
		/// <summary>
		/// Localized descriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
		
		/// <summary>
		/// Localized display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// Participant name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="participantName")]
		public string ParticipantName { get; set; }
		
		/// <summary>
		/// The property references.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="participantPropertyReferences")]
		public ParticipantPropertyReference[] ParticipantPropertyReferences { get; set; }
		
		/// <summary>
		/// Profile type name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileTypeName")]
		public string ProfileTypeName { get; set; }
		
		/// <summary>
		/// The role that the participant is playing in the interaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// The participant property reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParticipantPropertyReference
	{
		
		/// <summary>
		/// The source property that maps to the target property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourcePropertyName")]
		public string SourcePropertyName { get; set; }
		
		/// <summary>
		/// The target property that maps to the source property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetPropertyName")]
		public string TargetPropertyName { get; set; }
	}
	
	/// <summary>
	/// The KPI alias.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KpiAlias
	{
		
		/// <summary>
		/// KPI alias name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aliasName")]
		public string AliasName { get; set; }
		
		/// <summary>
		/// The expression.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
	}
	
	/// <summary>
	/// Defines the KPI Threshold limits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KpiDefinition
	{
		
		/// <summary>
		/// The aliases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public KpiAlias[] Aliases { get; set; }
		
		/// <summary>
		/// The calculation window.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="calculationWindow")]
		public KpiDefinitionCalculationWindow CalculationWindow { get; set; }
		
		/// <summary>
		/// Name of calculation window field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculationWindowFieldName")]
		public string CalculationWindowFieldName { get; set; }
		
		/// <summary>
		/// Localized description for the KPI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
		
		/// <summary>
		/// Localized display name for the KPI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// The mapping entity type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public ConnectorMappingEntityType EntityType { get; set; }
		
		/// <summary>
		/// The mapping entity name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityTypeName")]
		public string EntityTypeName { get; set; }
		
		/// <summary>
		/// The computation expression for the KPI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// The KPI extracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extracts")]
		public KpiExtract[] Extracts { get; set; }
		
		/// <summary>
		/// The filter expression for the KPI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// The computation function for the KPI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="function")]
		public KpiDefinitionFunction Function { get; set; }
		
		/// <summary>
		/// the group by properties for the KPI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		public string[] GroupBy { get; set; }
		
		/// <summary>
		/// The KPI GroupByMetadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupByMetadata")]
		public KpiGroupByMetadata[] GroupByMetadata { get; set; }
		
		/// <summary>
		/// The KPI name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kpiName")]
		public string KpiName { get; set; }
		
		/// <summary>
		/// The participant profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participantProfilesMetadata")]
		public KpiParticipantProfilesMetadata[] ParticipantProfilesMetadata { get; set; }
		
		/// <summary>
		/// Provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public EntityTypeDefinitionProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Defines the KPI Threshold limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thresHolds")]
		public KpiThresholds ThresHolds { get; set; }
		
		/// <summary>
		/// The unit of measurement for the KPI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum KpiDefinitionCalculationWindow
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lifetime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 4,
	}
	
	/// <summary>
	/// The KPI extract.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KpiExtract
	{
		
		/// <summary>
		/// The expression.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// KPI extract name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="extractName")]
		public string ExtractName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum KpiDefinitionFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Avg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Min = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Max = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountDistinct = 7,
	}
	
	/// <summary>
	/// The KPI GroupBy field metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KpiGroupByMetadata
	{
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// The name of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// The type of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldType")]
		public string FieldType { get; set; }
	}
	
	/// <summary>
	/// The KPI participant profile metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KpiParticipantProfilesMetadata
	{
		
		/// <summary>
		/// Name of the type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeName")]
		public string TypeName { get; set; }
	}
	
	/// <summary>
	/// The response of list KPI operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KpiListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public KpiResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The KPI resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KpiResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// Defines the KPI Threshold limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public KpiDefinition Properties { get; set; }
	}
	
	/// <summary>
	/// Defines the KPI Threshold limits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KpiThresholds
	{
		
		/// <summary>
		/// Whether or not the KPI is an increasing KPI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="increasingKpi")]
		public bool IncreasingKpi { get; set; }
		
		/// <summary>
		/// The lower threshold limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lowerLimit")]
		public decimal LowerLimit { get; set; }
		
		/// <summary>
		/// The upper threshold limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upperLimit")]
		public decimal UpperLimit { get; set; }
	}
	
	/// <summary>
	/// The definition of Link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinkDefinition
	{
		
		/// <summary>
		/// Localized descriptions for the Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
		
		/// <summary>
		/// Localized display name for the Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// The link name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkName")]
		public string LinkName { get; set; }
		
		/// <summary>
		/// The set of properties mappings between the source and target Types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public TypePropertiesMapping[] Mappings { get; set; }
		
		/// <summary>
		/// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<LinkDefinitionOperationType> OperationType { get; set; }
		
		/// <summary>
		/// The properties that represent the participating profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="participantPropertyReferences")]
		public ParticipantPropertyReference[] ParticipantPropertyReferences { get; set; }
		
		/// <summary>
		/// Provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public EntityTypeDefinitionProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceOnly")]
		public System.Nullable<System.Boolean> ReferenceOnly { get; set; }
		
		/// <summary>
		/// Type of source entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceEntityType")]
		public ConnectorMappingEntityType SourceEntityType { get; set; }
		
		/// <summary>
		/// Name of the source Entity Type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceEntityTypeName")]
		public string SourceEntityTypeName { get; set; }
		
		/// <summary>
		/// Type of target entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetEntityType")]
		public ConnectorMappingEntityType TargetEntityType { get; set; }
		
		/// <summary>
		/// Name of the target Entity Type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetEntityTypeName")]
		public string TargetEntityTypeName { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// Metadata for a Link's property mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TypePropertiesMapping
	{
		
		/// <summary>
		/// Link type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public System.Nullable<TypePropertiesMappingLinkType> LinkType { get; set; }
		
		/// <summary>
		///  Property name on the source Entity Type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourcePropertyName")]
		public string SourcePropertyName { get; set; }
		
		/// <summary>
		/// Property name on the target Entity Type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetPropertyName")]
		public string TargetPropertyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TypePropertiesMappingLinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateAlways = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CopyIfNull = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LinkDefinitionOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upsert = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete = 1,
	}
	
	/// <summary>
	/// The response of list link operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinkListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public LinkResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The link resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinkResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The definition of Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LinkDefinition Properties { get; set; }
	}
	
	/// <summary>
	/// The Metadata definition base.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetadataDefinitionBase
	{
		
		/// <summary>
		/// The attributes for the Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string[]> Attributes { get; set; }
		
		/// <summary>
		/// Localized descriptions for the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
		
		/// <summary>
		/// Localized display names for the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// Large Image associated with the Property or EntityType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largeImage")]
		public string LargeImage { get; set; }
		
		/// <summary>
		/// Any custom localized attributes for the Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedAttributes")]
		public System.Collections.Generic.Dictionary<string, object> LocalizedAttributes { get; set; }
		
		/// <summary>
		/// Medium Image associated with the Property or EntityType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediumImage")]
		public string MediumImage { get; set; }
		
		/// <summary>
		/// Small Image associated with the Property or EntityType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallImage")]
		public string SmallImage { get; set; }
	}
	
	/// <summary>
	/// A Customer Insights REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Customer Insights operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Customer Insights operations supported by the Microsoft.CustomerInsights resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The participant profile property reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParticipantProfilePropertyReference
	{
		
		/// <summary>
		/// The source interaction property that maps to the target profile property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactionPropertyName")]
		public string InteractionPropertyName { get; set; }
		
		/// <summary>
		/// The target profile property that maps to the source interaction property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profilePropertyName")]
		public string ProfilePropertyName { get; set; }
	}
	
	/// <summary>
	/// The prediction definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Prediction
	{
		
		/// <summary>
		/// Whether do auto analyze.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoAnalyze")]
		public bool AutoAnalyze { get; set; }
		
		/// <summary>
		/// Description of the prediction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
		
		/// <summary>
		/// Display name of the prediction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// The prediction grades.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grades")]
		public PredictionGrades[] PredictionGrades { get; set; }
		
		/// <summary>
		/// Interaction types involved in the prediction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="involvedInteractionTypes")]
		public string[] InvolvedInteractionTypes { get; set; }
		
		/// <summary>
		/// KPI types involved in the prediction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="involvedKpiTypes")]
		public string[] InvolvedKpiTypes { get; set; }
		
		/// <summary>
		/// Relationships involved in the prediction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="involvedRelationships")]
		public string[] InvolvedRelationships { get; set; }
		
		/// <summary>
		/// Definition of the link mapping of prediction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public PredictionMappings Mappings { get; set; }
		
		/// <summary>
		/// Negative outcome expression.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="negativeOutcomeExpression")]
		public string NegativeOutcomeExpression { get; set; }
		
		/// <summary>
		/// Positive outcome expression.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="positiveOutcomeExpression")]
		public string PositiveOutcomeExpression { get; set; }
		
		/// <summary>
		/// Name of the prediction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictionName")]
		public string PredictionName { get; set; }
		
		/// <summary>
		/// Primary profile type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="primaryProfileType")]
		public string PrimaryProfileType { get; set; }
		
		/// <summary>
		/// Provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public EntityTypeDefinitionProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Scope expression.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scopeExpression")]
		public string ScopeExpression { get; set; }
		
		/// <summary>
		/// Score label.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scoreLabel")]
		public string ScoreLabel { get; set; }
		
		/// <summary>
		/// System generated entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemGeneratedEntities")]
		public object SystemGeneratedEntities { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	public class PredictionGrades
	{
		
		/// <summary>
		/// Name of the grade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gradeName")]
		public string GradeName { get; set; }
		
		/// <summary>
		/// Maximum score threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxScoreThreshold")]
		public System.Nullable<System.Int32> MaxScoreThreshold { get; set; }
		
		/// <summary>
		/// Minimum score threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minScoreThreshold")]
		public System.Nullable<System.Int32> MinScoreThreshold { get; set; }
	}
	
	public class PredictionMappings
	{
		
		/// <summary>
		/// The grade of the link mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grade")]
		public string Grade { get; set; }
		
		/// <summary>
		/// The reason of the link mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The score of the link mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
	}
	
	/// <summary>
	/// The definition of the prediction distribution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PredictionDistributionDefinition
	{
		
		/// <summary>
		/// Distributions of the prediction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributions")]
		public PredictionDistributionDefinitionDistributions[] PredictionDistributionDefinitionDistributions { get; set; }
		
		/// <summary>
		/// Total negatives in the distribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalNegatives")]
		public System.Nullable<System.Int64> TotalNegatives { get; set; }
		
		/// <summary>
		/// Total positive in the distribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPositives")]
		public System.Nullable<System.Int64> TotalPositives { get; set; }
	}
	
	public class PredictionDistributionDefinitionDistributions
	{
		
		/// <summary>
		/// Number of negatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negatives")]
		public System.Nullable<System.Int64> Negatives { get; set; }
		
		/// <summary>
		/// Number of negatives above threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativesAboveThreshold")]
		public System.Nullable<System.Int64> NegativesAboveThreshold { get; set; }
		
		/// <summary>
		/// Number of positives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positives")]
		public System.Nullable<System.Int64> Positives { get; set; }
		
		/// <summary>
		/// Number of positives above threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positivesAboveThreshold")]
		public System.Nullable<System.Int64> PositivesAboveThreshold { get; set; }
		
		/// <summary>
		/// Score threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoreThreshold")]
		public System.Nullable<System.Int32> ScoreThreshold { get; set; }
	}
	
	/// <summary>
	/// The response of list predictions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PredictionListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PredictionResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The prediction resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PredictionResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The prediction definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Prediction Properties { get; set; }
	}
	
	/// <summary>
	/// The prediction model status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PredictionModelStatus
	{
		
		/// <summary>
		/// The model status message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Version of the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelVersion")]
		public string ModelVersion { get; set; }
		
		/// <summary>
		/// The prediction GUID ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictionGuidId")]
		public string PredictionGuidId { get; set; }
		
		/// <summary>
		/// The prediction name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictionName")]
		public string PredictionName { get; set; }
		
		/// <summary>
		/// The signals used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalsUsed")]
		public System.Nullable<System.Int32> SignalsUsed { get; set; }
		
		/// <summary>
		/// Prediction model life cycle.  When prediction is in PendingModelConfirmation status, it is allowed to update the status to PendingFeaturing or Active through API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PredictionModelStatusStatus Status { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Count of the test set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSetCount")]
		public System.Nullable<System.Int32> TestSetCount { get; set; }
		
		/// <summary>
		/// The training accuracy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingAccuracy")]
		public string TrainingAccuracy { get; set; }
		
		/// <summary>
		/// Count of the training set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainingSetCount")]
		public System.Nullable<System.Int32> TrainingSetCount { get; set; }
		
		/// <summary>
		/// Count of the validation set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationSetCount")]
		public System.Nullable<System.Int32> ValidationSetCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PredictionModelStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProvisioningFailed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingDiscovering = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Discovering = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingFeaturing = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Featuring = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FeaturingFailed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingTraining = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Training = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TrainingFailed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Evaluating = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EvaluatingFailed = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingModelConfirmation = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HumanIntervention = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 17,
	}
	
	/// <summary>
	/// The training results of the prediction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PredictionTrainingResults
	{
		
		/// <summary>
		/// Canonical profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalProfiles")]
		public CanonicalProfileDefinition[] CanonicalProfiles { get; set; }
		
		/// <summary>
		/// The definition of the prediction distribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictionDistribution")]
		public PredictionDistributionDefinition PredictionDistribution { get; set; }
		
		/// <summary>
		/// Instance count of the primary profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryProfileInstanceCount")]
		public System.Nullable<System.Int64> PrimaryProfileInstanceCount { get; set; }
		
		/// <summary>
		/// Score name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoreName")]
		public string ScoreName { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// The response of list profile operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProfileResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The profile resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The profile type definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProfileTypeDefinition Properties { get; set; }
	}
	
	/// <summary>
	/// The profile type definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileTypeDefinition : EntityTypeDefinition
	{
		
		/// <summary>
		/// The strong IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strongIds")]
		public StrongId[] StrongIds { get; set; }
	}
	
	/// <summary>
	/// Property/Properties which represent a unique ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StrongId
	{
		
		/// <summary>
		/// Localized descriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
		
		/// <summary>
		/// Localized display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// The properties which make up the unique ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyPropertyNames")]
		public string[] KeyPropertyNames { get; set; }
		
		/// <summary>
		/// The Name identifying the strong ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="strongIdName")]
		public string StrongIdName { get; set; }
	}
	
	/// <summary>
	/// Provisioning state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expiring = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HumanIntervention = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// Common properties of proxy resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The definition of Relationship.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipDefinition
	{
		
		/// <summary>
		/// The Relationship Cardinality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardinality")]
		public System.Nullable<RelationshipDefinitionCardinality> Cardinality { get; set; }
		
		/// <summary>
		/// Localized descriptions for the Relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
		
		/// <summary>
		/// Localized display name for the Relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// The expiry date time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryDateTimeUtc")]
		public System.Nullable<System.DateTimeOffset> ExpiryDateTimeUtc { get; set; }
		
		/// <summary>
		/// The properties of the Relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public PropertyDefinition[] Fields { get; set; }
		
		/// <summary>
		/// Optional property to be used to map fields in profile to their strong ids in related profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lookupMappings")]
		public RelationshipTypeMapping[] LookupMappings { get; set; }
		
		/// <summary>
		/// Profile type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileType")]
		public string ProfileType { get; set; }
		
		/// <summary>
		/// Provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public EntityTypeDefinitionProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Related profile being referenced.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedProfileType")]
		public string RelatedProfileType { get; set; }
		
		/// <summary>
		/// The relationship guid id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipGuidId")]
		public string RelationshipGuidId { get; set; }
		
		/// <summary>
		/// The Relationship name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipName")]
		public string RelationshipName { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RelationshipDefinitionCardinality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneToOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneToMany = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManyToMany = 2,
	}
	
	/// <summary>
	/// Maps fields in Profile to their corresponding StrongIds in Related Profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipTypeMapping
	{
		
		/// <summary>
		/// Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fieldMappings")]
		public RelationshipTypeFieldMapping[] FieldMappings { get; set; }
	}
	
	/// <summary>
	/// Map a field of profile to its corresponding StrongId in Related Profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipTypeFieldMapping
	{
		
		/// <summary>
		/// Specifies the fieldName in profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileFieldName")]
		public string ProfileFieldName { get; set; }
		
		/// <summary>
		/// Specifies the KeyProperty (from StrongId) of the related profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedProfileKeyProperty")]
		public string RelatedProfileKeyProperty { get; set; }
	}
	
	/// <summary>
	/// The definition of relationship link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipLinkDefinition
	{
		
		/// <summary>
		/// Localized descriptions for the Relationship Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
		
		/// <summary>
		/// Localized display name for the Relationship Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// The InteractionType associated with the Relationship Link.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactionType")]
		public string InteractionType { get; set; }
		
		/// <summary>
		/// The name of the Relationship Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkName")]
		public string LinkName { get; set; }
		
		/// <summary>
		/// The mappings between Interaction and Relationship fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public RelationshipLinkFieldMapping[] Mappings { get; set; }
		
		/// <summary>
		/// The property references for the Profile of the Relationship.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profilePropertyReferences")]
		public ParticipantProfilePropertyReference[] ProfilePropertyReferences { get; set; }
		
		/// <summary>
		/// Provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public EntityTypeDefinitionProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The property references for the Related Profile of the Relationship.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedProfilePropertyReferences")]
		public ParticipantProfilePropertyReference[] RelatedProfilePropertyReferences { get; set; }
		
		/// <summary>
		/// The relationship guid id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipGuidId")]
		public string RelationshipGuidId { get; set; }
		
		/// <summary>
		/// The Relationship associated with the Link.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationshipName")]
		public string RelationshipName { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// The fields mapping for Relationships.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipLinkFieldMapping
	{
		
		/// <summary>
		/// The field name on the Interaction Type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactionFieldName")]
		public string InteractionFieldName { get; set; }
		
		/// <summary>
		/// Link type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public TypePropertiesMappingLinkType LinkType { get; set; }
		
		/// <summary>
		/// The field name on the Relationship metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationshipFieldName")]
		public string RelationshipFieldName { get; set; }
	}
	
	/// <summary>
	/// The response of list relationship link operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipLinkListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RelationshipLinkResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The relationship link resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipLinkResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The definition of relationship link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RelationshipLinkDefinition Properties { get; set; }
	}
	
	/// <summary>
	/// The response of list relationship operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RelationshipResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The relationship resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The definition of Relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RelationshipDefinition Properties { get; set; }
	}
	
	/// <summary>
	/// The definition of suggested relationship for the type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelationshipsLookup
	{
		
		/// <summary>
		/// The name of existing Relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="existingRelationshipName")]
		public string ExistingRelationshipName { get; set; }
		
		/// <summary>
		/// The relationship profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// The property references for the profile type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePropertyReferences")]
		public ParticipantProfilePropertyReference[] ProfilePropertyReferences { get; set; }
		
		/// <summary>
		/// The related profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedProfileName")]
		public string RelatedProfileName { get; set; }
		
		/// <summary>
		/// The property references for the related profile type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedProfilePropertyReferences")]
		public ParticipantProfilePropertyReference[] RelatedProfilePropertyReferences { get; set; }
	}
	
	/// <summary>
	/// Common properties of Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The resource set description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceSetDescription
	{
		
		/// <summary>
		/// The elements included in the set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public string[] Elements { get; set; }
		
		/// <summary>
		/// The elements that are not included in the set, in case elements contains '*' indicating 'all'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exceptions")]
		public string[] Exceptions { get; set; }
	}
	
	/// <summary>
	/// The Role definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Role
	{
		
		/// <summary>
		/// The description of the role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The role name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
	}
	
	/// <summary>
	/// The Role Assignment definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignment
	{
		
		/// <summary>
		/// The name of the metadata object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignmentName")]
		public string AssignmentName { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflationPolicies")]
		public ResourceSetDescription ConflationPolicies { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectors")]
		public ResourceSetDescription Connectors { get; set; }
		
		/// <summary>
		/// Localized description for the metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
		
		/// <summary>
		/// Localized display names for the metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public ResourceSetDescription Interactions { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kpis")]
		public ResourceSetDescription Kpis { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ResourceSetDescription Links { get; set; }
		
		/// <summary>
		/// The principals being assigned to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principals")]
		public AssignmentPrincipal[] Principals { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profiles")]
		public ResourceSetDescription Profiles { get; set; }
		
		/// <summary>
		/// Provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public EntityTypeDefinitionProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipLinks")]
		public ResourceSetDescription RelationshipLinks { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public ResourceSetDescription Relationships { get; set; }
		
		/// <summary>
		/// Type of roles.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public RoleAssignmentRole Role { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleAssignments")]
		public ResourceSetDescription RoleAssignments { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasPolicies")]
		public ResourceSetDescription SasPolicies { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public ResourceSetDescription Segments { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="views")]
		public ResourceSetDescription Views { get; set; }
		
		/// <summary>
		/// The resource set description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widgetTypes")]
		public ResourceSetDescription WidgetTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RoleAssignmentRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Admin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reader = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManageAdmin = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManageReader = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DataAdmin = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DataReader = 5,
	}
	
	/// <summary>
	/// The response of list role assignment operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignmentListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RoleAssignmentResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The Role Assignment resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignmentResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The Role Assignment definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RoleAssignment Properties { get; set; }
	}
	
	/// <summary>
	/// The response of list role assignment operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RoleResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The role resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The Role definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Role Properties { get; set; }
	}
	
	/// <summary>
	/// The Salesforce connector properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SalesforceConnectorProperties
	{
		
		/// <summary>
		/// The Salesforce tables.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="salesforcetables")]
		public SalesforceTable[] Salesforcetables { get; set; }
		
		/// <summary>
		/// Salesforce discover setting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usersetting")]
		public SalesforceDiscoverSetting Usersetting { get; set; }
	}
	
	/// <summary>
	/// Salesforce table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SalesforceTable
	{
		
		/// <summary>
		/// Indicating whether this instance is profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isProfile")]
		public string IsProfile { get; set; }
		
		/// <summary>
		/// The table category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableCategory")]
		public string TableCategory { get; set; }
		
		/// <summary>
		/// The name of the table.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
		
		/// <summary>
		/// The table remarks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRemarks")]
		public string TableRemarks { get; set; }
		
		/// <summary>
		/// The table schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableSchema")]
		public string TableSchema { get; set; }
	}
	
	/// <summary>
	/// Salesforce discover setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SalesforceDiscoverSetting
	{
		
		/// <summary>
		/// The salesforce connection string secret URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="salesforceConnectionStringSecretUrl")]
		public string SalesforceConnectionStringSecretUrl { get; set; }
	}
	
	/// <summary>
	/// The response of suggest relationship links operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SuggestRelationshipLinksResponse
	{
		
		/// <summary>
		/// The interaction name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactionName")]
		public string InteractionName { get; set; }
		
		/// <summary>
		/// Suggested relationships for the type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedRelationships")]
		public RelationshipsLookup[] SuggestedRelationships { get; set; }
	}
	
	/// <summary>
	/// The view in Customer 360 web application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class View
	{
		
		/// <summary>
		/// Date time when view was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// Date time when view was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// View definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		/// <summary>
		/// Localized display name for the view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// the hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// the user ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// Name of the view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewName")]
		public string ViewName { get; set; }
	}
	
	/// <summary>
	/// The response of list view operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ViewListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ViewResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The view resource format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ViewResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// The view in Customer 360 web application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public View Properties { get; set; }
	}
	
	/// <summary>
	/// Definition of WidgetType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WidgetType
	{
		
		/// <summary>
		/// Date time when widget type was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changed")]
		public System.Nullable<System.DateTimeOffset> Changed { get; set; }
		
		/// <summary>
		/// Date time when widget type was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Definition for widget type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		/// <summary>
		/// Description for widget type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Localized display name for the widget type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public System.Collections.Generic.Dictionary<string, string> DisplayName { get; set; }
		
		/// <summary>
		/// The image URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		/// <summary>
		/// The hub name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Name of the widget type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widgetTypeName")]
		public string WidgetTypeName { get; set; }
		
		/// <summary>
		/// The widget version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widgetVersion")]
		public string WidgetVersion { get; set; }
	}
	
	/// <summary>
	/// The response of list widget type operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WidgetTypeListResult
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WidgetTypeResourceFormat[] Value { get; set; }
	}
	
	/// <summary>
	/// The WidgetTypeResourceFormat
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WidgetTypeResourceFormat : ProxyResource
	{
		
		/// <summary>
		/// Definition of WidgetType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WidgetType Properties { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Customer Insights REST API operations.
		/// Operations_List providers/Microsoft.CustomerInsights/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.CustomerInsights/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all hubs in the specified subscription.
		/// Hubs_List subscriptions/{subscriptionId}/providers/Microsoft.CustomerInsights/hubs
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the hubs in the subscription.</returns>
		public async Task<HubListResult> Hubs_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.CustomerInsights/hubs?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HubListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the hubs in a resource group.
		/// Hubs_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the hubs in the resource group.</returns>
		public async Task<HubListResult> Hubs_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HubListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified hub.
		/// Hubs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the hub.</returns>
		public async Task<Hub> Hubs_GetAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Hub>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a hub, or updates an existing hub.
		/// Hubs_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the Hub.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate Hub operation.</param>
		/// <returns>OK. An existing hub is updated.</returns>
		public async Task<Hub> Hubs_CreateOrUpdateAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId, Hub requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Hub>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified hub.
		/// Hubs_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The hub is deleted.</returns>
		public async Task Hubs_DeleteAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Hub.
		/// Hubs_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the Hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the Update Hub operation.</param>
		/// <returns>OK. The hub is updated.</returns>
		public async Task<Hub> Hubs_UpdateAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId, Hub requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Hub>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets all the authorization policies in a specified hub.
		/// AuthorizationPolicies_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the authorization policies in the hub.</returns>
		public async Task<AuthorizationPolicyListResult> AuthorizationPolicies_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/authorizationPolicies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizationPolicyListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an authorization policy in the hub.
		/// AuthorizationPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="authorizationPolicyName">The name of the policy.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the authorization policy.</returns>
		public async Task<AuthorizationPolicyResourceFormat> AuthorizationPolicies_GetAsync(string resourceGroupName, string hubName, string authorizationPolicyName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/authorizationPolicies/"+ (authorizationPolicyName==null? "" : System.Uri.EscapeDataString(authorizationPolicyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizationPolicyResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an authorization policy or updates an existing authorization policy.
		/// AuthorizationPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="authorizationPolicyName">The name of the policy.
		/// Min length: 1
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate authorization policy operation.</param>
		/// <returns>OK. Successfully update an existing authorization policy.</returns>
		public async Task<AuthorizationPolicyResourceFormat> AuthorizationPolicies_CreateOrUpdateAsync(string resourceGroupName, string hubName, string authorizationPolicyName, string api_version, string subscriptionId, AuthorizationPolicyResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/authorizationPolicies/"+ (authorizationPolicyName==null? "" : System.Uri.EscapeDataString(authorizationPolicyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizationPolicyResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Regenerates the primary policy key of the specified authorization policy.
		/// AuthorizationPolicies_RegeneratePrimaryKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}/regeneratePrimaryKey
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="authorizationPolicyName">The name of the policy.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The primary key of the authorization policy is regenerated.</returns>
		public async Task<AuthorizationPolicy> AuthorizationPolicies_RegeneratePrimaryKeyAsync(string resourceGroupName, string hubName, string authorizationPolicyName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/authorizationPolicies/"+ (authorizationPolicyName==null? "" : System.Uri.EscapeDataString(authorizationPolicyName))+"/regeneratePrimaryKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizationPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates the secondary policy key of the specified authorization policy.
		/// AuthorizationPolicies_RegenerateSecondaryKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}/regenerateSecondaryKey
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="authorizationPolicyName">The name of the policy.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The secondary key of the authorization policy is regenerated.</returns>
		public async Task<AuthorizationPolicy> AuthorizationPolicies_RegenerateSecondaryKeyAsync(string resourceGroupName, string hubName, string authorizationPolicyName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/authorizationPolicies/"+ (authorizationPolicyName==null? "" : System.Uri.EscapeDataString(authorizationPolicyName))+"/regenerateSecondaryKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizationPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the connectors in the specified hub.
		/// Connectors_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the connectors in the hub.</returns>
		public async Task<ConnectorListResult> Connectors_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/connectors&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectorListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a connector in the hub.
		/// Connectors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="connectorName">The name of the connector.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the connector.</returns>
		public async Task<ConnectorResourceFormat> Connectors_GetAsync(string resourceGroupName, string hubName, string connectorName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/connectors/"+ (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectorResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a connector or updates an existing connector in the hub.
		/// Connectors_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="connectorName">The name of the connector.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate Connector operation.</param>
		/// <returns>OK. Successfully created the connector.</returns>
		public async Task<ConnectorResourceFormat> Connectors_CreateOrUpdateAsync(string resourceGroupName, string hubName, string connectorName, string api_version, string subscriptionId, ConnectorResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/connectors/"+ (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectorResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a connector in the hub.
		/// Connectors_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="connectorName">The name of the connector.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The connector is deleted.</returns>
		public async Task Connectors_DeleteAsync(string resourceGroupName, string hubName, string connectorName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/connectors/"+ (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the connector mappings in the specified connector.
		/// ConnectorMappings_ListByConnector subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="connectorName">The name of the connector.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the connector mappings in the connector.</returns>
		public async Task<ConnectorMappingListResult> ConnectorMappings_ListByConnectorAsync(string resourceGroupName, string hubName, string connectorName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/connectors/"+ (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"/mappings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectorMappingListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a connector mapping in the connector.
		/// ConnectorMappings_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="connectorName">The name of the connector.</param>
		/// <param name="mappingName">The name of the connector mapping.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the connector mapping.</returns>
		public async Task<ConnectorMappingResourceFormat> ConnectorMappings_GetAsync(string resourceGroupName, string hubName, string connectorName, string mappingName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/connectors/"+ (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"/mappings/"+ (mappingName==null? "" : System.Uri.EscapeDataString(mappingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectorMappingResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a connector mapping or updates an existing connector mapping in the connector.
		/// ConnectorMappings_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="connectorName">The name of the connector.</param>
		/// <param name="mappingName">The name of the connector mapping.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate Connector Mapping operation.</param>
		/// <returns>OK. Successfully created the connector mapping.</returns>
		public async Task<ConnectorMappingResourceFormat> ConnectorMappings_CreateOrUpdateAsync(string resourceGroupName, string hubName, string connectorName, string mappingName, string api_version, string subscriptionId, ConnectorMappingResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/connectors/"+ (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"/mappings/"+ (mappingName==null? "" : System.Uri.EscapeDataString(mappingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectorMappingResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a connector mapping in the connector.
		/// ConnectorMappings_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="connectorName">The name of the connector.</param>
		/// <param name="mappingName">The name of the connector mapping.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The connector mapping is deleted.</returns>
		public async Task ConnectorMappings_DeleteAsync(string resourceGroupName, string hubName, string connectorName, string mappingName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/connectors/"+ (connectorName==null? "" : System.Uri.EscapeDataString(connectorName))+"/mappings/"+ (mappingName==null? "" : System.Uri.EscapeDataString(mappingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets data image upload URL.
		/// Images_GetUploadUrlForData subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/images/getDataImageUploadUrl
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the GetUploadUrlForData operation.</param>
		/// <returns>OK. Successfully get the image upload URL for data.</returns>
		public async Task<ImageDefinition> Images_GetUploadUrlForDataAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId, GetImageUploadUrlInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/images/getDataImageUploadUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets entity type (profile or interaction) image upload URL.
		/// Images_GetUploadUrlForEntityType subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/images/getEntityTypeImageUploadUrl
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the GetUploadUrlForEntityType operation.</param>
		/// <returns>OK. Successfully get the image upload URL for entity type.</returns>
		public async Task<ImageDefinition> Images_GetUploadUrlForEntityTypeAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId, GetImageUploadUrlInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/images/getEntityTypeImageUploadUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets all interactions in the hub.
		/// Interactions_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="locale_code">Locale of interaction to retrieve, default is en-us.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the interactions in the hub.</returns>
		public async Task<InteractionListResult> Interactions_ListByHubAsync(string resourceGroupName, string hubName, string locale_code, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/interactions&locale-code=" + (locale_code==null? "" : System.Uri.EscapeDataString(locale_code))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InteractionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified interaction.
		/// Interactions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="interactionName">The name of the interaction.</param>
		/// <param name="locale_code">Locale of interaction to retrieve, default is en-us.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the interaction.</returns>
		public async Task<InteractionResourceFormat> Interactions_GetAsync(string resourceGroupName, string hubName, string interactionName, string locale_code, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/interactions/"+ (interactionName==null? "" : System.Uri.EscapeDataString(interactionName))+"&locale-code=" + (locale_code==null? "" : System.Uri.EscapeDataString(locale_code))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InteractionResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an interaction or updates an existing interaction within a hub.
		/// Interactions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="interactionName">The name of the interaction.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate Interaction operation.</param>
		/// <returns>OK. Successfully created the interaction.</returns>
		public async Task<InteractionResourceFormat> Interactions_CreateOrUpdateAsync(string resourceGroupName, string hubName, string interactionName, string api_version, string subscriptionId, InteractionResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/interactions/"+ (interactionName==null? "" : System.Uri.EscapeDataString(interactionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InteractionResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Suggests relationships to create relationship links.
		/// Interactions_SuggestRelationshipLinks subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}/suggestRelationshipLinks
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="interactionName">The name of the interaction.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get suggested Relationship Links.</returns>
		public async Task<SuggestRelationshipLinksResponse> Interactions_SuggestRelationshipLinksAsync(string resourceGroupName, string hubName, string interactionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/interactions/"+ (interactionName==null? "" : System.Uri.EscapeDataString(interactionName))+"/suggestRelationshipLinks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SuggestRelationshipLinksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the KPIs in the specified hub.
		/// Kpi_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the KPIs in the hub.</returns>
		public async Task<KpiListResult> Kpi_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/kpi&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KpiListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a KPI in the hub.
		/// Kpi_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi/{kpiName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="kpiName">The name of the KPI.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the KPI.</returns>
		public async Task<KpiResourceFormat> Kpi_GetAsync(string resourceGroupName, string hubName, string kpiName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/kpi/"+ (kpiName==null? "" : System.Uri.EscapeDataString(kpiName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KpiResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a KPI or updates an existing KPI in the hub.
		/// Kpi_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi/{kpiName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="kpiName">The name of the KPI.
		/// Min length: 1
		/// Max length: 512
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the create/update KPI operation.</param>
		/// <returns>OK. Successfully created the KPI.</returns>
		public async Task<KpiResourceFormat> Kpi_CreateOrUpdateAsync(string resourceGroupName, string hubName, string kpiName, string api_version, string subscriptionId, KpiResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/kpi/"+ (kpiName==null? "" : System.Uri.EscapeDataString(kpiName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KpiResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a KPI in the hub.
		/// Kpi_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi/{kpiName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="kpiName">The name of the KPI.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The KPI is deleted.</returns>
		public async Task Kpi_DeleteAsync(string resourceGroupName, string hubName, string kpiName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/kpi/"+ (kpiName==null? "" : System.Uri.EscapeDataString(kpiName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reprocesses the Kpi values of the specified KPI.
		/// Kpi_Reprocess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/kpi/{kpiName}/reprocess
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="kpiName">The name of the KPI.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		public async Task Kpi_ReprocessAsync(string resourceGroupName, string hubName, string kpiName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/kpi/"+ (kpiName==null? "" : System.Uri.EscapeDataString(kpiName))+"/reprocess&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the links in the specified hub.
		/// Links_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the links in the hub.</returns>
		public async Task<LinkListResult> Links_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/links&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a link in the hub.
		/// Links_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="linkName">The name of the link.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the link.</returns>
		public async Task<LinkResourceFormat> Links_GetAsync(string resourceGroupName, string hubName, string linkName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/links/"+ (linkName==null? "" : System.Uri.EscapeDataString(linkName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a link or updates an existing link in the hub.
		/// Links_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="linkName">The name of the link.
		/// Min length: 1
		/// Max length: 512
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate Link operation.</param>
		/// <returns>OK. Successfully created the link.</returns>
		public async Task<LinkResourceFormat> Links_CreateOrUpdateAsync(string resourceGroupName, string hubName, string linkName, string api_version, string subscriptionId, LinkResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/links/"+ (linkName==null? "" : System.Uri.EscapeDataString(linkName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a link in the hub.
		/// Links_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/links/{linkName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="linkName">The name of the link.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The link is deleted.</returns>
		public async Task Links_DeleteAsync(string resourceGroupName, string hubName, string linkName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/links/"+ (linkName==null? "" : System.Uri.EscapeDataString(linkName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the predictions in the specified hub.
		/// Predictions_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the predictions in the hub.</returns>
		public async Task<PredictionListResult> Predictions_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/predictions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PredictionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Prediction in the hub.
		/// Predictions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="predictionName">The name of the Prediction.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the Prediction.</returns>
		public async Task<PredictionResourceFormat> Predictions_GetAsync(string resourceGroupName, string hubName, string predictionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/predictions/"+ (predictionName==null? "" : System.Uri.EscapeDataString(predictionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PredictionResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Prediction or updates an existing Prediction in the hub.
		/// Predictions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="predictionName">The name of the Prediction.
		/// Min length: 1
		/// Max length: 512
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the create/update Prediction operation.</param>
		/// <returns>OK. Successfully created the Prediction.</returns>
		public async Task<PredictionResourceFormat> Predictions_CreateOrUpdateAsync(string resourceGroupName, string hubName, string predictionName, string api_version, string subscriptionId, PredictionResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/predictions/"+ (predictionName==null? "" : System.Uri.EscapeDataString(predictionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PredictionResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Prediction in the hub.
		/// Predictions_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="predictionName">The name of the Prediction.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The Prediction is deleted.</returns>
		public async Task Predictions_DeleteAsync(string resourceGroupName, string hubName, string predictionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/predictions/"+ (predictionName==null? "" : System.Uri.EscapeDataString(predictionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets model status of the prediction.
		/// Predictions_GetModelStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getModelStatus
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="predictionName">The name of the Prediction.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the model status.</returns>
		public async Task<PredictionModelStatus> Predictions_GetModelStatusAsync(string resourceGroupName, string hubName, string predictionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/predictions/"+ (predictionName==null? "" : System.Uri.EscapeDataString(predictionName))+"/getModelStatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PredictionModelStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets training results.
		/// Predictions_GetTrainingResults subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getTrainingResults
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="predictionName">The name of the Prediction.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the training results.</returns>
		public async Task<PredictionTrainingResults> Predictions_GetTrainingResultsAsync(string resourceGroupName, string hubName, string predictionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/predictions/"+ (predictionName==null? "" : System.Uri.EscapeDataString(predictionName))+"/getTrainingResults&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PredictionTrainingResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the model status of prediction.
		/// Predictions_ModelStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/modelStatus
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="predictionName">The name of the Prediction.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the create/update prediction model status operation.</param>
		/// <returns>OK. Successfully created or updated the prediction model status.</returns>
		public async Task Predictions_ModelStatusAsync(string resourceGroupName, string hubName, string predictionName, string api_version, string subscriptionId, PredictionModelStatus requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/predictions/"+ (predictionName==null? "" : System.Uri.EscapeDataString(predictionName))+"/modelStatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets all profile in the hub.
		/// Profiles_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="locale_code">Locale of profile to retrieve, default is en-us.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the profiles in the hub.</returns>
		public async Task<ProfileListResult> Profiles_ListByHubAsync(string resourceGroupName, string hubName, string locale_code, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/profiles&locale-code=" + (locale_code==null? "" : System.Uri.EscapeDataString(locale_code))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfileListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified profile.
		/// Profiles_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="profileName">The name of the profile.</param>
		/// <param name="locale_code">Locale of profile to retrieve, default is en-us.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the profile.</returns>
		public async Task<ProfileResourceFormat> Profiles_GetAsync(string resourceGroupName, string hubName, string profileName, string locale_code, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&locale-code=" + (locale_code==null? "" : System.Uri.EscapeDataString(locale_code))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfileResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a profile within a Hub, or updates an existing profile.
		/// Profiles_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="profileName">The name of the profile.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the create/delete Profile type operation</param>
		/// <returns>OK. Successfully created the profile.</returns>
		public async Task<ProfileResourceFormat> Profiles_CreateOrUpdateAsync(string resourceGroupName, string hubName, string profileName, string api_version, string subscriptionId, ProfileResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProfileResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a profile within a hub
		/// Profiles_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="profileName">The name of the profile.</param>
		/// <param name="locale_code">Locale of profile to retrieve, default is en-us.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The profile is deleted.</returns>
		public async Task Profiles_DeleteAsync(string resourceGroupName, string hubName, string profileName, string locale_code, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&locale-code=" + (locale_code==null? "" : System.Uri.EscapeDataString(locale_code))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the KPIs that enrich the profile Type identified by the supplied name. Enrichment happens through participants of the Interaction on an Interaction KPI and through Relationships for Profile KPIs.
		/// Profiles_GetEnrichingKpis subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}/getEnrichingKpis
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="profileName">The name of the profile.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the enriching KPIs.</returns>
		public async Task<KpiDefinition[]> Profiles_GetEnrichingKpisAsync(string resourceGroupName, string hubName, string profileName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/getEnrichingKpis&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KpiDefinition[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all relationship links in the hub.
		/// RelationshipLinks_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationshipLinks
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the relationship links in the hub.</returns>
		public async Task<RelationshipLinkListResult> RelationshipLinks_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/relationshipLinks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RelationshipLinkListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified relationship Link.
		/// RelationshipLinks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationshipLinks/{relationshipLinkName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="relationshipLinkName">The name of the relationship link.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the relationship link.</returns>
		public async Task<RelationshipLinkResourceFormat> RelationshipLinks_GetAsync(string resourceGroupName, string hubName, string relationshipLinkName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/relationshipLinks/"+ (relationshipLinkName==null? "" : System.Uri.EscapeDataString(relationshipLinkName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RelationshipLinkResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a relationship link or updates an existing relationship link within a hub.
		/// RelationshipLinks_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationshipLinks/{relationshipLinkName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="relationshipLinkName">The name of the relationship link.
		/// Min length: 1
		/// Max length: 512
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate relationship link operation.</param>
		/// <returns>OK. Successfully created the relationship link.</returns>
		public async Task<RelationshipLinkResourceFormat> RelationshipLinks_CreateOrUpdateAsync(string resourceGroupName, string hubName, string relationshipLinkName, string api_version, string subscriptionId, RelationshipLinkResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/relationshipLinks/"+ (relationshipLinkName==null? "" : System.Uri.EscapeDataString(relationshipLinkName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RelationshipLinkResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a relationship link within a hub.
		/// RelationshipLinks_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationshipLinks/{relationshipLinkName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="relationshipLinkName">The name of the relationship.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The relationship link is deleted.</returns>
		public async Task RelationshipLinks_DeleteAsync(string resourceGroupName, string hubName, string relationshipLinkName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/relationshipLinks/"+ (relationshipLinkName==null? "" : System.Uri.EscapeDataString(relationshipLinkName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all relationships in the hub.
		/// Relationships_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the relationships in the hub.</returns>
		public async Task<RelationshipListResult> Relationships_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/relationships&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RelationshipListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified relationship.
		/// Relationships_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships/{relationshipName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="relationshipName">The name of the relationship.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the relationship.</returns>
		public async Task<RelationshipResourceFormat> Relationships_GetAsync(string resourceGroupName, string hubName, string relationshipName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/relationships/"+ (relationshipName==null? "" : System.Uri.EscapeDataString(relationshipName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RelationshipResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a relationship or updates an existing relationship within a hub.
		/// Relationships_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships/{relationshipName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="relationshipName">The name of the Relationship.
		/// Min length: 1
		/// Max length: 512
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate Relationship operation.</param>
		/// <returns>OK. Successfully created the relationship.</returns>
		public async Task<RelationshipResourceFormat> Relationships_CreateOrUpdateAsync(string resourceGroupName, string hubName, string relationshipName, string api_version, string subscriptionId, RelationshipResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/relationships/"+ (relationshipName==null? "" : System.Uri.EscapeDataString(relationshipName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RelationshipResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a relationship within a hub.
		/// Relationships_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships/{relationshipName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="relationshipName">The name of the relationship.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The relationship is deleted.</returns>
		public async Task Relationships_DeleteAsync(string resourceGroupName, string hubName, string relationshipName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/relationships/"+ (relationshipName==null? "" : System.Uri.EscapeDataString(relationshipName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the role assignments for the specified hub.
		/// RoleAssignments_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the role assignment in the hub.</returns>
		public async Task<RoleAssignmentListResult> RoleAssignments_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/roleAssignments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the role assignment in the hub.
		/// RoleAssignments_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="assignmentName">The name of the role assignment.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the role assignment.</returns>
		public async Task<RoleAssignmentResourceFormat> RoleAssignments_GetAsync(string resourceGroupName, string hubName, string assignmentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/roleAssignments/"+ (assignmentName==null? "" : System.Uri.EscapeDataString(assignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignmentResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a role assignment in the hub.
		/// RoleAssignments_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="assignmentName">The assignment name
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate RoleAssignment operation.</param>
		/// <returns>OK. Successfully created the role assignment.</returns>
		public async Task<RoleAssignmentResourceFormat> RoleAssignments_CreateOrUpdateAsync(string resourceGroupName, string hubName, string assignmentName, string api_version, string subscriptionId, RoleAssignmentResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/roleAssignments/"+ (assignmentName==null? "" : System.Uri.EscapeDataString(assignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignmentResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the role assignment in the hub.
		/// RoleAssignments_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="assignmentName">The name of the role assignment.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The role assignment is deleted.</returns>
		public async Task RoleAssignments_DeleteAsync(string resourceGroupName, string hubName, string assignmentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/roleAssignments/"+ (assignmentName==null? "" : System.Uri.EscapeDataString(assignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the roles for the hub.
		/// Roles_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roles
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the roles in the hub.</returns>
		public async Task<RoleListResult> Roles_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/roles&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all available views for given user in the specified hub.
		/// Views_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="userId">The user ID. Use * to retrieve hub level views.</param>
		/// <returns>OK. Successfully get all the views in the hub for the given user.</returns>
		public async Task<ViewListResult> Views_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId, string userId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/views&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ViewListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a view in the hub.
		/// Views_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="viewName">The name of the view.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="userId">The user ID. Use * to retrieve hub level view.</param>
		/// <returns>OK. Successfully get the view.</returns>
		public async Task<ViewResourceFormat> Views_GetAsync(string resourceGroupName, string hubName, string viewName, string api_version, string subscriptionId, string userId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/views/"+ (viewName==null? "" : System.Uri.EscapeDataString(viewName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ViewResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a view or updates an existing view in the hub.
		/// Views_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="viewName">The name of the view.
		/// Min length: 1
		/// Max length: 512
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate View operation.</param>
		/// <returns>OK. Successfully created the view.</returns>
		public async Task<ViewResourceFormat> Views_CreateOrUpdateAsync(string resourceGroupName, string hubName, string viewName, string api_version, string subscriptionId, ViewResourceFormat requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/views/"+ (viewName==null? "" : System.Uri.EscapeDataString(viewName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ViewResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a view in the specified hub.
		/// Views_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/views/{viewName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="viewName">The name of the view.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="userId">The user ID. Use * to retrieve hub level view.</param>
		/// <returns>OK. The view is deleted.</returns>
		public async Task Views_DeleteAsync(string resourceGroupName, string hubName, string viewName, string api_version, string subscriptionId, string userId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/views/"+ (viewName==null? "" : System.Uri.EscapeDataString(viewName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all available widget types in the specified hub.
		/// WidgetTypes_ListByHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/widgetTypes
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get all the widget types in the hub.</returns>
		public async Task<WidgetTypeListResult> WidgetTypes_ListByHubAsync(string resourceGroupName, string hubName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/widgetTypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WidgetTypeListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a widget type in the specified hub.
		/// WidgetTypes_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/widgetTypes/{widgetTypeName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="hubName">The name of the hub.</param>
		/// <param name="widgetTypeName">The name of the widget type.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. Successfully get the widget type.</returns>
		public async Task<WidgetTypeResourceFormat> WidgetTypes_GetAsync(string resourceGroupName, string hubName, string widgetTypeName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomerInsights/hubs/"+ (hubName==null? "" : System.Uri.EscapeDataString(hubName))+"/widgetTypes/"+ (widgetTypeName==null? "" : System.Uri.EscapeDataString(widgetTypeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WidgetTypeResourceFormat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
