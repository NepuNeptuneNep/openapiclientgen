//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Api error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiError
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The Api error details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ApiErrorBase[] Details { get; set; }
		
		/// <summary>
		/// Inner error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerError InnerError { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Api error base.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiErrorBase
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Image template is an ARM resource managed by Microsoft.VirtualMachineImages provider
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplate : Resource
	{
		
		/// <summary>
		/// Identity for the image template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ImageTemplateIdentity Identity { get; set; }
		
		/// <summary>
		/// Describes the properties of an image template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ImageTemplateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes a unit of image customization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateCustomizer
	{
		
		/// <summary>
		/// Friendly Name to provide context on what this customization step does
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Generic distribution object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateDistributor
	{
		
		/// <summary>
		/// Tags that will be applied to the artifact once it has been created/updated by the distributor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactTags")]
		public System.Collections.Generic.Dictionary<string, string> ArtifactTags { get; set; }
		
		/// <summary>
		/// The name to be used for the associated RunOutput.
		/// Required
		/// Pattern: ^[A-Za-z0-9-_.]{1,64}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runOutputName")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-_.]{1,64}$")]
		public string RunOutputName { get; set; }
		
		/// <summary>
		/// Type of distribution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Uploads files to VMs (Linux, Windows). Corresponds to Packer file provisioner
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateFileCustomizer : ImageTemplateCustomizer
	{
		
		/// <summary>
		/// The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// SHA256 checksum of the file provided in the sourceUri field above
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Checksum")]
		public string Sha256Checksum { get; set; }
		
		/// <summary>
		/// The URI of the file to be uploaded for customizing the VM. It can be a github link, SAS URI for Azure Storage, etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUri")]
		public string SourceUri { get; set; }
	}
	
	/// <summary>
	/// Identity for the image template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateIdentity
	{
		
		/// <summary>
		/// The type of identity used for the image template. The type 'None' will remove any identities from the image template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ImageTemplateIdentityType> Type { get; set; }
		
		/// <summary>
		/// The list of user identities associated with the image template. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, ImageTemplateIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ImageTemplateIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
	}
	
	public class ImageTemplateIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// The client id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The principal id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateIsoSource : ImageTemplateSource
	{
		
		/// <summary>
		/// SHA256 Checksum of the ISO image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sha256Checksum")]
		public string Sha256Checksum { get; set; }
		
		/// <summary>
		/// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceUri")]
		public string SourceUri { get; set; }
	}
	
	/// <summary>
	/// Describes the latest status of running an image template
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateLastRunStatus
	{
		
		/// <summary>
		/// End time of the last run (UTC)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Verbose information about the last run state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// State of the last run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runState")]
		public System.Nullable<ImageTemplateLastRunStatusRunState> RunState { get; set; }
		
		/// <summary>
		/// Sub-state of the last run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runSubState")]
		public System.Nullable<ImageTemplateLastRunStatusRunSubState> RunSubState { get; set; }
		
		/// <summary>
		/// Start time of the last run (UTC)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ImageTemplateLastRunStatusRunState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartiallySucceeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ImageTemplateLastRunStatusRunSubState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Building = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Customizing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Distributing = 3,
	}
	
	/// <summary>
	/// The result of List image templates operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateListResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of image templates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ImageTemplate[] Value { get; set; }
	}
	
	/// <summary>
	/// Distribute as a Managed Disk Image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateManagedImageDistributor
	{
		
		/// <summary>
		/// Resource Id of the Managed Disk Image
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
		
		/// <summary>
		/// Azure location for the image, should match if image already exists
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	/// <summary>
	/// Describes an image source that is a managed image in customer subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateManagedImageSource : ImageTemplateSource
	{
		
		/// <summary>
		/// ARM resource id of the managed image in customer subscription
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
	}
	
	/// <summary>
	/// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplatePlatformImageSource : ImageTemplateSource
	{
		
		/// <summary>
		/// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplatePowerShellCustomizer : ImageTemplateCustomizer
	{
		
		/// <summary>
		/// Array of PowerShell commands to execute
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public string[] Inline { get; set; }
		
		/// <summary>
		/// If specified, the PowerShell script will be run with elevated privileges
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runElevated")]
		public System.Nullable<System.Boolean> RunElevated { get; set; }
		
		/// <summary>
		/// URI of the PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptUri")]
		public string ScriptUri { get; set; }
		
		/// <summary>
		/// SHA256 checksum of the power shell script provided in the scriptUri field above
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Checksum")]
		public string Sha256Checksum { get; set; }
		
		/// <summary>
		/// Valid exit codes for the PowerShell script. [Default: 0]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validExitCodes")]
		public int[] ValidExitCodes { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of an image template
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateProperties
	{
		
		/// <summary>
		/// Maximum duration to wait while building the image template. Omit or specify 0 to use the default (4 hours).
		/// Minimum: 0
		/// Maximum: 960
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildTimeoutInMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, 960)]
		public System.Nullable<System.Int32> BuildTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Specifies the properties used to describe the customization steps of the image, like Image source etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customize")]
		public ImageTemplateCustomizer[] Customize { get; set; }
		
		/// <summary>
		/// The distribution targets where the image output needs to go to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distribute")]
		public ImageTemplateDistributor[] Distribute { get; set; }
		
		/// <summary>
		/// Describes the latest status of running an image template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRunStatus")]
		public ImageTemplateLastRunStatus LastRunStatus { get; set; }
		
		/// <summary>
		/// Describes the error happened when create or update an image template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningError")]
		public ProvisioningError ProvisioningError { get; set; }
		
		/// <summary>
		/// Provisioning state of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ImageTemplatePropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Describes a virtual machine image source for building, customizing and distributing
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ImageTemplateSource Source { get; set; }
		
		/// <summary>
		/// Describes the virtual machine used to build, customize and capture images
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmProfile")]
		public ImageTemplateVmProfile VmProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ImageTemplatePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 4,
	}
	
	/// <summary>
	/// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateRestartCustomizer : ImageTemplateCustomizer
	{
		
		/// <summary>
		/// Command to check if restart succeeded [Default: '']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restartCheckCommand")]
		public string RestartCheckCommand { get; set; }
		
		/// <summary>
		/// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restartCommand")]
		public string RestartCommand { get; set; }
		
		/// <summary>
		/// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restartTimeout")]
		public string RestartTimeout { get; set; }
	}
	
	/// <summary>
	/// Distribute via Shared Image Gallery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateSharedImageDistributor
	{
		
		/// <summary>
		/// Resource Id of the Shared Image Gallery image
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="galleryImageId")]
		public string GalleryImageId { get; set; }
		
		/// <summary>
		/// A list of regions that the image will be replicated to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationRegions")]
		public string[] ReplicationRegions { get; set; }
	}
	
	/// <summary>
	/// Describes an image source that is an image version in a shared image gallery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateSharedImageVersionSource : ImageTemplateSource
	{
		
		/// <summary>
		/// ARM resource id of the image version in the shared image gallery
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageVersionId")]
		public string ImageVersionId { get; set; }
	}
	
	/// <summary>
	/// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'scriptUri' or 'inline' can be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateShellCustomizer : ImageTemplateCustomizer
	{
		
		/// <summary>
		/// Array of shell commands to execute
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public string[] Inline { get; set; }
		
		/// <summary>
		/// URI of the shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptUri")]
		public string ScriptUri { get; set; }
		
		/// <summary>
		/// SHA256 checksum of the shell script provided in the scriptUri field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Checksum")]
		public string Sha256Checksum { get; set; }
	}
	
	/// <summary>
	/// Describes a virtual machine image source for building, customizing and distributing
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateSource
	{
		
		/// <summary>
		/// Specifies the type of source image you want to start with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Parameters for updating an image template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateUpdateParameters
	{
		
		/// <summary>
		/// Identity for the image template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ImageTemplateIdentity Identity { get; set; }
		
		/// <summary>
		/// The user-specified tags associated with the image template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Distribute via VHD in a storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateVhdDistributor
	{
	}
	
	/// <summary>
	/// Describes the virtual machine used to build, customize and capture images
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTemplateVmProfile
	{
		
		/// <summary>
		/// Size of the virtual machine used to build, customize and capture images. Omit or specify empty string to use the default (Standard_D1_v2).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	/// <summary>
	/// Inner error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InnerError
	{
		
		/// <summary>
		/// The internal error message or exception dump.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetail")]
		public string ErrorDetail { get; set; }
		
		/// <summary>
		/// The exception type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exceptionType")]
		public string ExceptionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// This is of the format {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes the error happened when create or update an image template
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProvisioningError
	{
		
		/// <summary>
		/// Verbose error message about the provisioning failure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Error code of the provisioning failure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningErrorCode")]
		public System.Nullable<ProvisioningErrorProvisioningErrorCode> ProvisioningErrorCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProvisioningErrorProvisioningErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadSourceType = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadPIRSource = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadISOSource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadManagedImageSource = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadSharedImageVersionSource = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadCustomizerType = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnsupportedCustomizerType = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoCustomizerScript = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadDistributeType = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadSharedImageDistribute = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServerError = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 11,
	}
	
	/// <summary>
	/// Provisioning state of the resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 4,
	}
	
	/// <summary>
	/// The Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents an output that was created by running an image template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunOutput : SubResource
	{
		
		/// <summary>
		/// Describes the properties of a run output
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RunOutputProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The result of List run outputs operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunOutputCollection
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of run outputs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RunOutput[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a run output
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunOutputProperties
	{
		
		/// <summary>
		/// The resource id of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// The location URI of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactUri")]
		public string ArtifactUri { get; set; }
		
		/// <summary>
		/// Provisioning state of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ImageTemplatePropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// The Sub Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists available operations for the Microsoft.VirtualMachineImages provider
		/// Operations_List providers/Microsoft.VirtualMachineImages/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The operation was successful. The response contains the list of available operations.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.VirtualMachineImages/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the VM image templates associated with the subscription.
		/// VirtualMachineImageTemplates_List subscriptions/{subscriptionId}/providers/Microsoft.VirtualMachineImages/imageTemplates
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription Id forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<ImageTemplateListResult> VirtualMachineImageTemplates_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VirtualMachineImages/imageTemplates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImageTemplateListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the VM image templates associated with the specified resource group.
		/// VirtualMachineImageTemplates_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription Id forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<ImageTemplateListResult> VirtualMachineImageTemplates_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VirtualMachineImages/imageTemplates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImageTemplateListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a virtual machine image template
		/// VirtualMachineImageTemplates_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription Id forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="imageTemplateName">The name of the image Template</param>
		/// <returns>OK</returns>
		public async Task<ImageTemplate> VirtualMachineImageTemplates_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string imageTemplateName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VirtualMachineImages/imageTemplates/"+ (imageTemplateName==null? "" : System.Uri.EscapeDataString(imageTemplateName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImageTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a virtual machine image template
		/// VirtualMachineImageTemplates_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription Id forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="imageTemplateName">The name of the image Template</param>
		/// <param name="requestBody">Parameters supplied to the CreateImageTemplate operation</param>
		/// <returns>OK</returns>
		public async Task<ImageTemplate> VirtualMachineImageTemplates_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string imageTemplateName, ImageTemplate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VirtualMachineImages/imageTemplates/"+ (imageTemplateName==null? "" : System.Uri.EscapeDataString(imageTemplateName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImageTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a virtual machine image template
		/// VirtualMachineImageTemplates_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription Id forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="imageTemplateName">The name of the image Template</param>
		/// <returns>The operation was successful.</returns>
		public async Task VirtualMachineImageTemplates_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string imageTemplateName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VirtualMachineImages/imageTemplates/"+ (imageTemplateName==null? "" : System.Uri.EscapeDataString(imageTemplateName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the tags for this Virtual Machine Image Template
		/// VirtualMachineImageTemplates_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription Id forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="imageTemplateName">The name of the image Template</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Additional parameters for Image Template update.</param>
		/// <returns>OK</returns>
		public async Task<ImageTemplate> VirtualMachineImageTemplates_UpdateAsync(string subscriptionId, string resourceGroupName, string imageTemplateName, string api_version, ImageTemplateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VirtualMachineImages/imageTemplates/"+ (imageTemplateName==null? "" : System.Uri.EscapeDataString(imageTemplateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImageTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create artifacts from a existing image template
		/// VirtualMachineImageTemplates_Run subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/run
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription Id forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="imageTemplateName">The name of the image Template</param>
		public async Task VirtualMachineImageTemplates_RunAsync(string api_version, string subscriptionId, string resourceGroupName, string imageTemplateName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VirtualMachineImages/imageTemplates/"+ (imageTemplateName==null? "" : System.Uri.EscapeDataString(imageTemplateName))+"/run?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all run outputs for the specified Image Template resource
		/// VirtualMachineImageTemplates_ListRunOutputs subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription Id forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="imageTemplateName">The name of the image Template</param>
		/// <returns>OK</returns>
		public async Task<RunOutputCollection> VirtualMachineImageTemplates_ListRunOutputsAsync(string api_version, string subscriptionId, string resourceGroupName, string imageTemplateName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VirtualMachineImages/imageTemplates/"+ (imageTemplateName==null? "" : System.Uri.EscapeDataString(imageTemplateName))+"/runOutputs?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RunOutputCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specified run output for the specified image template resource
		/// VirtualMachineImageTemplates_GetRunOutput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs/{runOutputName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription Id forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="imageTemplateName">The name of the image Template</param>
		/// <param name="runOutputName">The name of the run output</param>
		/// <returns>OK</returns>
		public async Task<RunOutput> VirtualMachineImageTemplates_GetRunOutputAsync(string api_version, string subscriptionId, string resourceGroupName, string imageTemplateName, string runOutputName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VirtualMachineImages/imageTemplates/"+ (imageTemplateName==null? "" : System.Uri.EscapeDataString(imageTemplateName))+"/runOutputs/"+ (runOutputName==null? "" : System.Uri.EscapeDataString(runOutputName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RunOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
