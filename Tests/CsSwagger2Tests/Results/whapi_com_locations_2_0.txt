//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Address
	{
		
		/// <summary>
		/// The name of the postal city/town
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The name of the county
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		/// <summary>
		/// The customerâ€™s complete address including postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullAddress")]
		public string FullAddress { get; set; }
		
		/// <summary>
		/// The postcode of the address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postCode")]
		public string PostCode { get; set; }
		
		/// <summary>
		/// The name of the street including the house number/house name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Addresses
	{
		
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public Address[] Addresses1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Countries
	{
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public Country[] Countries1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Country
	{
		
		/// <summary>
		/// The code of the country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The dial code of the country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialCode")]
		public string DialCode { get; set; }
		
		/// <summary>
		/// The name of the country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Currencies
	{
		
		[System.Runtime.Serialization.DataMember(Name="currencies")]
		public Currency[] Currencies1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Currency
	{
		
		/// <summary>
		/// The code of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The exchange rate for the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchangeRate")]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// The maximum deposit for the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDeposit")]
		public System.Nullable<System.Double> MaxDeposit { get; set; }
		
		/// <summary>
		/// The maximum withdrawl for the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxWithdrawal")]
		public System.Nullable<System.Double> MaxWithdrawal { get; set; }
		
		/// <summary>
		/// The minimum deposit for the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minDeposit")]
		public System.Nullable<System.Double> MinDeposit { get; set; }
		
		/// <summary>
		/// The minimum withdrawal for the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minWithdrawal")]
		public System.Nullable<System.Double> MinWithdrawal { get; set; }
		
		/// <summary>
		/// The name of the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// A unique William Hill identifier for the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// To help pinpoint the exact parameter where a request has failed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// A unique William Hill text string to enable you to identify the error (in English only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocationsErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a list of addresses when supplied with a house number or name and a postcode. It is generally used during customer registration to provide a list of possible addresses from where the customer can select their own address details.
		/// 
		/// AddressLookup address/lookup/
		/// </summary>
		/// <param name="houseNum">House number or name of the address.</param>
		/// <param name="postCode">Postcode of the address, no spaces required.</param>
		/// <returns>Success</returns>
		public async Task<Addresses> AddressLookupAsync(string houseNum, string postCode)
		{
			var requestUri = "address/lookup/?houseNum=" + (houseNum==null? "" : System.Uri.EscapeDataString(houseNum))+"&postCode=" + (postCode==null? "" : System.Uri.EscapeDataString(postCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Addresses>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of countries and its currencies.
		/// GetCountries countries/
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Countries> GetCountriesAsync()
		{
			var requestUri = "countries/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Countries>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified country and its currency.
		/// GetCountry countries/{countryCode}
		/// </summary>
		/// <param name="countryCode">Code of the country</param>
		/// <returns>Success</returns>
		public async Task<Country> GetCountryAsync(string countryCode)
		{
			var requestUri = "countries/"+ (countryCode==null? "" : System.Uri.EscapeDataString(countryCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Country>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retreives the list of currencies.
		/// GetCurrencies currencies/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Currencies> GetCurrenciesAsync()
		{
			var requestUri = "currencies/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Currencies>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retreives the specified currency.
		/// GetCurrency currencies/{currencyCode}
		/// </summary>
		/// <param name="currencyCode">Code of the currency</param>
		/// <returns>Success</returns>
		public async Task<Currency> GetCurrencyAsync(string currencyCode)
		{
			var requestUri = "currencies/"+ (currencyCode==null? "" : System.Uri.EscapeDataString(currencyCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Currency>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
