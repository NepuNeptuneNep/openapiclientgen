//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Storage farm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Farm
	{
		
		/// <summary>
		/// The properties of storage farm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FarmProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of storage farm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FarmProperties
	{
		
		/// <summary>
		/// Farm identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="farmId")]
		public string FarmId { get; set; }
		
		/// <summary>
		/// Storage farm settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public FarmSettings Settings { get; set; }
		
		/// <summary>
		/// The settings of storage farm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingsStore")]
		public string SettingsStore { get; set; }
		
		/// <summary>
		/// Resource version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Storage farm settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FarmSettings
	{
		
		/// <summary>
		/// Switch of bandwidth throttle enablement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthThrottleIsEnabled")]
		public System.Nullable<System.Boolean> BandwidthThrottleIsEnabled { get; set; }
		
		/// <summary>
		/// The list of allowed origins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corsAllowedOriginsList")]
		public string CorsAllowedOriginsList { get; set; }
		
		/// <summary>
		/// The suffixes of URI of hosts in data center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataCenterUriHostSuffixes")]
		public string DataCenterUriHostSuffixes { get; set; }
		
		/// <summary>
		/// Default egress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultEgressThresholdInGbps")]
		public System.Nullable<System.Single> DefaultEgressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Default ingress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultIngressThresholdInGbps")]
		public System.Nullable<System.Single> DefaultIngressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Default Intranet egress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultIntranetEgressThresholdInGbps")]
		public System.Nullable<System.Single> DefaultIntranetEgressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Default Intranet ingress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultIntranetIngressThresholdInGbps")]
		public System.Nullable<System.Single> DefaultIntranetIngressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Default request threshold (in TPS).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultRequestThresholdInTps")]
		public System.Nullable<System.Single> DefaultRequestThresholdInTps { get; set; }
		
		/// <summary>
		/// Interval (in seconds) of default throttle probability decay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultThrottleProbabilityDecayIntervalInSeconds")]
		public System.Nullable<System.Int32> DefaultThrottleProbabilityDecayIntervalInSeconds { get; set; }
		
		/// <summary>
		/// Default total egress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTotalEgressThresholdInGbps")]
		public System.Nullable<System.Single> DefaultTotalEgressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Default total ingress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTotalIngressThresholdInGbps")]
		public System.Nullable<System.Single> DefaultTotalIngressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Interval (in seconds) of feedback refresh.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedbackRefreshIntervalInSeconds")]
		public System.Nullable<System.Int32> FeedbackRefreshIntervalInSeconds { get; set; }
		
		/// <summary>
		/// Grace period for full throttling in refresh intervals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gracePeriodForFullThrottlingInRefreshIntervals")]
		public System.Nullable<System.Int32> GracePeriodForFullThrottlingInRefreshIntervals { get; set; }
		
		/// <summary>
		/// Maximum probability of throttle in grace period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gracePeriodMaxThrottleProbability")]
		public System.Nullable<System.Single> GracePeriodMaxThrottleProbability { get; set; }
		
		/// <summary>
		/// Host style HTTP port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostStyleHttpPort")]
		public System.Nullable<System.Int32> HostStyleHttpPort { get; set; }
		
		/// <summary>
		/// Host style HTTPs port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostStyleHttpsPort")]
		public System.Nullable<System.Int32> HostStyleHttpsPort { get; set; }
		
		/// <summary>
		/// Minimum egress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumEgressThresholdInGbps")]
		public System.Nullable<System.Single> MinimumEgressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Minimum ingress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumIngressThresholdInGbps")]
		public System.Nullable<System.Single> MinimumIngressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Minimum Intranet egress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumIntranetEgressThresholdInGbps")]
		public System.Nullable<System.Single> MinimumIntranetEgressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Minimum Intranet ingress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumIntranetIngressThresholdInGbps")]
		public System.Nullable<System.Single> MinimumIntranetIngressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Minimum request threshold (in TPS).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumRequestThresholdInTps")]
		public System.Nullable<System.Single> MinimumRequestThresholdInTps { get; set; }
		
		/// <summary>
		/// Minimum total egress threshold (in Gbp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumTotalEgressThresholdInGbps")]
		public System.Nullable<System.Single> MinimumTotalEgressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Minimum total ingress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumTotalIngressThresholdInGbps")]
		public System.Nullable<System.Single> MinimumTotalIngressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Number of accounts to sync.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfAccountsToSync")]
		public System.Nullable<System.Int32> NumberOfAccountsToSync { get; set; }
		
		/// <summary>
		/// Overall egress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallEgressThresholdInGbps")]
		public System.Nullable<System.Single> OverallEgressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Overall ingress threshold (in Gbps)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallIngressThresholdInGbps")]
		public System.Nullable<System.Single> OverallIngressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Overall Intranet egress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallIntranetEgressThresholdInGbps")]
		public System.Nullable<System.Single> OverallIntranetEgressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Overall Intranet ingress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallIntranetIngressThresholdInGbps")]
		public System.Nullable<System.Single> OverallIntranetIngressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Overall request threshold (in TPS).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallRequestThresholdInTps")]
		public System.Nullable<System.Single> OverallRequestThresholdInTps { get; set; }
		
		/// <summary>
		/// Overall total egress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallTotalEgressThresholdInGbps")]
		public System.Nullable<System.Single> OverallTotalEgressThresholdInGbps { get; set; }
		
		/// <summary>
		/// Overall total ingress threshold (in Gbps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallTotalIngressThresholdInGbps")]
		public System.Nullable<System.Single> OverallTotalIngressThresholdInGbps { get; set; }
		
		/// <summary>
		/// The retention period (in days) for deleted storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriodForDeletedStorageAccountsInDays")]
		public System.Nullable<System.Int32> RetentionPeriodForDeletedStorageAccountsInDays { get; set; }
		
		/// <summary>
		/// The polling interval (in second).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingsPollingIntervalInSecond")]
		public System.Nullable<System.Int32> SettingsPollingIntervalInSecond { get; set; }
		
		/// <summary>
		/// Tolerance factor for egress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toleranceFactorForEgress")]
		public System.Nullable<System.Single> ToleranceFactorForEgress { get; set; }
		
		/// <summary>
		/// Tolerance factor for ingress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toleranceFactorForIngress")]
		public System.Nullable<System.Single> ToleranceFactorForIngress { get; set; }
		
		/// <summary>
		/// Tolerance factor for Intranet egress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toleranceFactorForIntranetEgress")]
		public System.Nullable<System.Single> ToleranceFactorForIntranetEgress { get; set; }
		
		/// <summary>
		/// Tolerance factor for Intranet ingress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toleranceFactorForIntranetIngress")]
		public System.Nullable<System.Single> ToleranceFactorForIntranetIngress { get; set; }
		
		/// <summary>
		/// Tolerance factor for total egress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toleranceFactorForTotalEgress")]
		public System.Nullable<System.Single> ToleranceFactorForTotalEgress { get; set; }
		
		/// <summary>
		/// Tolerance factor for total ingress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toleranceFactorForTotalIngress")]
		public System.Nullable<System.Single> ToleranceFactorForTotalIngress { get; set; }
		
		/// <summary>
		/// Tolerance factor for TPS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toleranceFactorForTps")]
		public System.Nullable<System.Single> ToleranceFactorForTps { get; set; }
		
		/// <summary>
		/// Interval (in seconds) of storage usage collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageCollectionIntervalInSeconds")]
		public System.Nullable<System.Int32> UsageCollectionIntervalInSeconds { get; set; }
	}
	
	/// <summary>
	/// Storage farm properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FarmCreationProperties
	{
		
		/// <summary>
		/// Setting access string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SettingAccessString Properties { get; set; }
	}
	
	/// <summary>
	/// Setting access string.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SettingAccessString
	{
		
		/// <summary>
		/// Setting access string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingAccessString")]
		public string SettingAccessString1 { get; set; }
	}
	
	/// <summary>
	/// Pageable list of storage farms.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FarmList
	{
		
		/// <summary>
		/// URI to the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of storage farms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Farm[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of all storage farms.
		/// Farms_List subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms
		/// </summary>
		/// <param name="subscriptionId">Subscription Id.</param>
		/// <param name="resourceGroupName">Resource group name.</param>
		/// <param name="api_version">REST Api Version.</param>
		/// <returns>OK -- The list of storage farms has been returned.</returns>
		public async Task<FarmList> Farms_ListAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage.Admin/farms&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FarmList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the Storage properties and settings for a specified storage farm.
		/// Farms_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}
		/// </summary>
		/// <param name="subscriptionId">Subscription Id.</param>
		/// <param name="resourceGroupName">Resource group name.</param>
		/// <param name="farmId">Farm Id.</param>
		/// <param name="api_version">REST Api Version.</param>
		/// <returns>OK -- The farm has been returned.</returns>
		public async Task<Farm> Farms_GetAsync(string subscriptionId, string resourceGroupName, string farmId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage.Admin/farms/"+ (farmId==null? "" : System.Uri.EscapeDataString(farmId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Farm>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new storage farm.
		/// Farms_Create subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}
		/// </summary>
		/// <param name="subscriptionId">Subscription Id.</param>
		/// <param name="resourceGroupName">Resource group name.</param>
		/// <param name="farmId">Farm Id.</param>
		/// <param name="api_version">REST Api Version.</param>
		/// <param name="requestBody">Parameters used to create a farm</param>
		/// <returns>OK -- The new storage farm has been created.</returns>
		public async Task<Farm> Farms_CreateAsync(string subscriptionId, string resourceGroupName, string farmId, string api_version, FarmCreationProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage.Admin/farms/"+ (farmId==null? "" : System.Uri.EscapeDataString(farmId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Farm>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing storage farm.
		/// Farms_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}
		/// </summary>
		/// <param name="subscriptionId">Subscription Id.</param>
		/// <param name="api_version">REST Api Version.</param>
		/// <param name="resourceGroupName">Resource group name.</param>
		/// <param name="farmId">Farm Id.</param>
		/// <param name="requestBody">Farm to update.</param>
		/// <returns>OK -- The properties and settings of storage farm have been updated.</returns>
		public async Task<Farm> Farms_UpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string farmId, Farm requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage.Admin/farms/"+ (farmId==null? "" : System.Uri.EscapeDataString(farmId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Farm>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of metric definitions for a storage farm.
		/// Farms_ListMetricDefinitions subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metricdefinitions
		/// </summary>
		/// <param name="subscriptionId">Subscription Id.</param>
		/// <param name="resourceGroupName">Resource group name.</param>
		/// <param name="farmId">Farm Id.</param>
		/// <param name="api_version">REST Api Version.</param>
		/// <returns>OK -- The list of metric definitions has been returned.</returns>
		public async Task<Farms_ListMetricDefinitionsReturn> Farms_ListMetricDefinitionsAsync(string subscriptionId, string resourceGroupName, string farmId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage.Admin/farms/"+ (farmId==null? "" : System.Uri.EscapeDataString(farmId))+"/metricdefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Farms_ListMetricDefinitionsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of storage farm metrics.
		/// Farms_ListMetrics subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metrics
		/// </summary>
		/// <param name="subscriptionId">Subscription Id.</param>
		/// <param name="resourceGroupName">Resource group name.</param>
		/// <param name="farmId">Farm Id.</param>
		/// <param name="api_version">REST Api Version.</param>
		/// <returns>OK -- The list of metrics has been returned.</returns>
		public async Task<Farms_ListMetricsReturn> Farms_ListMetricsAsync(string subscriptionId, string resourceGroupName, string farmId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage.Admin/farms/"+ (farmId==null? "" : System.Uri.EscapeDataString(farmId))+"/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Farms_ListMetricsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start garbage collection on deleted storage objects.
		/// Farms_StartGarbageCollection subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/ondemandgc
		/// </summary>
		/// <param name="subscriptionId">Subscription Id.</param>
		/// <param name="resourceGroupName">Resource group name.</param>
		/// <param name="farmId">Farm Id.</param>
		/// <param name="api_version">REST Api Version.</param>
		/// <returns>OK -- Garbage collection has completed.</returns>
		public async Task Farms_StartGarbageCollectionAsync(string subscriptionId, string resourceGroupName, string farmId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage.Admin/farms/"+ (farmId==null? "" : System.Uri.EscapeDataString(farmId))+"/ondemandgc&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the state of the garbage collection job.
		/// Farms_GetGarbageCollectionState subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/operationresults/{operationId}
		/// </summary>
		/// <param name="subscriptionId">Subscription Id.</param>
		/// <param name="resourceGroupName">Resource group name.</param>
		/// <param name="farmId">Farm Id.</param>
		/// <param name="api_version">REST Api Version.</param>
		/// <param name="operationId">Operation Id.</param>
		/// <returns>OK -- The state of garbage collection has been returned.</returns>
		public async Task<string> Farms_GetGarbageCollectionStateAsync(string subscriptionId, string resourceGroupName, string farmId, string api_version, string operationId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage.Admin/farms/"+ (farmId==null? "" : System.Uri.EscapeDataString(farmId))+"/operationresults/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Farms_ListMetricDefinitionsReturn
	{
		
		/// <summary>
		/// URI to the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of metric definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Farms_ListMetricDefinitionsReturnValue[] Farms_ListMetricDefinitionsReturnValue { get; set; }
	}
	
	public class Farms_ListMetricDefinitionsReturnValue
	{
		
		/// <summary>
		/// Metric availabilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricAvailabilities")]
		public Farms_ListMetricDefinitionsReturnValueMetricAvailabilities[] Farms_ListMetricDefinitionsReturnValueMetricAvailabilities { get; set; }
		
		/// <summary>
		/// Localizable string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Farms_ListMetricDefinitionsReturnValueName Name { get; set; }
		
		/// <summary>
		/// Aggregate type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryAggregationType")]
		public System.Nullable<Farms_ListMetricDefinitionsReturnValuePrimaryAggregationType> PrimaryAggregationType { get; set; }
		
		/// <summary>
		/// Metric unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<Farms_ListMetricDefinitionsReturnValueUnit> Unit { get; set; }
	}
	
	public class Farms_ListMetricDefinitionsReturnValueMetricAvailabilities
	{
		
		/// <summary>
		/// Retention of metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retention")]
		public string Retention { get; set; }
		
		/// <summary>
		/// Time grain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
	}
	
	public class Farms_ListMetricDefinitionsReturnValueName
	{
		
		/// <summary>
		/// Localized value of the string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// Value of the string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum Farms_ListMetricDefinitionsReturnValuePrimaryAggregationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum Farms_ListMetricDefinitionsReturnValueUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountPerSecond = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 4,
	}
	
	public class Farms_ListMetricsReturn
	{
		
		/// <summary>
		/// URI to the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Farms_ListMetricsReturnValue[] Farms_ListMetricsReturnValue { get; set; }
	}
	
	public class Farms_ListMetricsReturnValue
	{
		
		/// <summary>
		/// Metric end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Metric unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricUnit")]
		public Farms_ListMetricDefinitionsReturnValueUnit MetricUnit { get; set; }
		
		/// <summary>
		/// List of metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValues")]
		public Farms_ListMetricsReturnValueMetricValues[] Farms_ListMetricsReturnValueMetricValues { get; set; }
		
		/// <summary>
		/// Localizable string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Farms_ListMetricsReturnValueName Name { get; set; }
		
		/// <summary>
		/// Metric start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Metric time grain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
	}
	
	public class Farms_ListMetricsReturnValueMetricValues
	{
		
		/// <summary>
		/// Average value of metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Single> Average { get; set; }
		
		/// <summary>
		/// Count of metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Maximum value of metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Single> Maximum { get; set; }
		
		/// <summary>
		/// Minimum value of metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Single> Minimum { get; set; }
		
		/// <summary>
		/// Metric value properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
		
		/// <summary>
		/// Timestamp of metric value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
		
		/// <summary>
		/// Total value of metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	public class Farms_ListMetricsReturnValueName
	{
		
		/// <summary>
		/// Localized value of the string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// Value of the string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
