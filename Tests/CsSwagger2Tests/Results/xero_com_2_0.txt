//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// Unique identifier for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountID { get; set; }
		
		/// <summary>
		/// For bank accounts only (Type BANK)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountNumber { get; set; }
		
		/// <summary>
		/// For bank accounts only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AccountBankAccountType> BankAccountType { get; set; }
		
		/// <summary>
		/// The class of account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AccountClass> Class { get; set; }
		
		/// <summary>
		/// Customer defined alpha numeric account code e.g 200 or SALES
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Code { get; set; }
		
		/// <summary>
		/// For bank accounts only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Description of the Account. Valid for all types of accounts except bank accounts
		/// Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes whether account can have payments applied to it
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePaymentsToAccount { get; set; }
		
		/// <summary>
		/// Indicates if an account has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Name of account
		/// Required
		/// Max length: 150
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public string Name { get; set; }
		
		/// <summary>
		/// Shown if set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportingCode { get; set; }
		
		/// <summary>
		/// Shown if set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportingCodeName { get; set; }
		
		/// <summary>
		/// Describes whether account code is available for use with expense claims
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowInExpenseClaims { get; set; }
		
		/// <summary>
		/// Accounts with a status of ACTIVE can be updated to ARCHIVED
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AccountStatus> Status { get; set; }
		
		/// <summary>
		/// If this is a system account then this element is returned. Note that non-system accounts may have this element set as either “” or null.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AccountSystemAccount> SystemAccount { get; set; }
		
		/// <summary>
		/// Default tax rate for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxType { get; set; }
		
		/// <summary>
		/// Account type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountType Type { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AccountBankAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDITCARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYPAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AccountClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPENSE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIABILITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVENUE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AccountSystemAccount
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBTORS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDITORS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANKCURRENCYGAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GSTONIMPORTS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HISTORICAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REALISEDCURRENCYGAIN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAINEDEARNINGS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUNDING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACKINGTRANSFERS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNPAIDEXPCLM = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNREALISEDCURRENCYGAIN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAGEPAYABLES = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRLIAB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECIATN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTCOSTS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPENSE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIABILITY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONCURRENT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHERINCOME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERHEADS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPAYMENT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVENUE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALES = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMLIAB = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYGLIABILITY = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERANNUATIONEXPENSE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERANNUATIONLIABILITY = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAGESEXPENSE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAGESPAYABLELIABILITY = 21,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string AddressLine3 { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string AddressLine4 { get; set; }
		
		/// <summary>
		/// The address type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AddressAddressType> AddressType { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Attentionto { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string City { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Country { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum AddressAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POBOX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Allocation
	{
		
		/// <summary>
		/// the amount being applied to the invoice
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float AppliedAmount { get; set; }
		
		/// <summary>
		/// The date the prepayment is applied YYYY-MM-DD (read-only). This will be the latter of the invoice date and the prepayment date.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateOnly Date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AllocationInvoice Invoice { get; set; }
	}
	
	public class AllocationInvoice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Attachment
	{
		
		/// <summary>
		/// Xero generated unique identifier for attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentId { get; set; }
		
		/// <summary>
		/// The content length in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentLegth { get; set; }
		
		/// <summary>
		/// The filename of the attachemnt
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Filename { get; set; }
		
		/// <summary>
		/// Determines whether the attachment is included with the online invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeOnline { get; set; }
		
		/// <summary>
		/// The mimetype of the attachemnt
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The URL to where the attachment is located
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BalancesElement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BalancesElementAccountsPayable AccountsPayable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BalancesElementAccountsReceivable AccountsReceivable { get; set; }
	}
	
	public class BalancesElementAccountsPayable
	{
		
		/// <summary>
		/// AP outstanding balance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Outstanding { get; set; }
		
		/// <summary>
		/// AP overdue balance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Overdue { get; set; }
	}
	
	public class BalancesElementAccountsReceivable
	{
		
		/// <summary>
		/// AR outstanding balance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Outstanding { get; set; }
		
		/// <summary>
		/// AR overdue balance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Overdue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BankAccount
	{
		
		/// <summary>
		/// Account identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Bank account code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The Name Bank Account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BankTransaction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BankAccount BankAccount { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for bank transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankTransactionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactSummary Contact { get; set; }
		
		/// <summary>
		/// The currency that bank transaction has been raised in
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency bank transaction. If no rate is specified, the XE.com day rate is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> CurrencyRate { get; set; }
		
		/// <summary>
		/// Date bank transaction was made YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// boolean to indicate if the bank transaction has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Indicates if transaction has been reconciled
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsReconciled { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don’t specify this element
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<BankTransactionLineAmountTypes> LineAmountTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OverpaymentID { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrepaymentID { get; set; }
		
		/// <summary>
		/// Reference for the transaction. Only supported for SPEND and RECEIVE transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// The status of the bank transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<BankTransactionStatus> Status { get; set; }
		
		/// <summary>
		/// Total of bank transaction excluding taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> SubTotal { get; set; }
		
		/// <summary>
		/// Total of bank transaction tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// Total tax on the bank transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Totaltax { get; set; }
		
		/// <summary>
		/// The type of bank transaction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionType Type { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// URL link to a source document – shown as “Go to [appName]” in the Xero app
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ContactSummary
	{
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactID { get; set; }
		
		/// <summary>
		/// Full name of contact/organisation
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum BankTransactionLineAmountTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inclusive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exclusive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoTax = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class LineItem
	{
		
		/// <summary>
		/// The account that the lineitem is being coded to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a <Description> element that contains at least 1 character
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Percentage discount being applied to a line item (only supported on ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> DiscountRate { get; set; }
		
		/// <summary>
		/// Code of the item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ItemCode { get; set; }
		
		/// <summary>
		/// The line amount reflects the discounted price if a DiscountRate has been used i.e LineAmount = Quantity * Unit Amount * ((100 – DiscountRate)/100)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> LineAmount { get; set; }
		
		/// <summary>
		/// The Xero generated identifier for a LineItem. If LineItemIDs are not included with line items in an update request then the line items are deleted and recreated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LineItemID { get; set; }
		
		/// <summary>
		/// LineItem Quantity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		/// <summary>
		/// The tax amount is auto calculated as a percentage of the line amount based on the tax rate. This value can be overriden if the calculated TaxAmount is not correct.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TaxAmount { get; set; }
		
		/// <summary>
		/// Used as an override if the default Tax Code for the selected <AccountCode> is not correct
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tracking Tracking { get; set; }
		
		/// <summary>
		/// Lineitem unit amount. By default, unit amount will be rounded to two decimal places. You can opt in to use four decimal places by adding the querystring parameter unitdp=4 to your query. See the Rounding in Xero guide for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> UnitAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Tracking
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrackingTrackingCategory[] TrackingTrackingCategory { get; set; }
	}
	
	public class TrackingTrackingCategory
	{
		
		/// <summary>
		/// The name of the tracking category
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the tracking option
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Option { get; set; }
		
		/// <summary>
		/// The identifier for the tracking category
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TrackingCategoryID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum BankTransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORISED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum BankTransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECEIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVE-OVERPAYMENT")]
		RECEIVEMinusOVERPAYMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVE-PREPAYMENT")]
		RECEIVEMinusPREPAYMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEND-OVERPAYMENT")]
		SPENDMinusOVERPAYMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEND-PREPAYMENT")]
		SPENDMinusPREPAYMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVE-TRANSFER")]
		RECEIVEMinusTRANSFER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEND-TRANSFER")]
		SPENDMinusTRANSFER = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BankTransfer
	{
		
		/// <summary>
		/// Total of the bank transfer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for bank transfers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankTransferId { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency bank transfer. If no rate is specified, the XE.com day rate is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> CurrencyRate { get; set; }
		
		/// <summary>
		/// Date bank transfer was made YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FromBankAccount FromBankAccount { get; set; }
		
		/// <summary>
		/// The Bank Transaction ID for the source account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromBankTransactionID { get; set; }
		
		/// <summary>
		/// boolean to indicate if the bank transaction has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ToBankAccount ToBankAccount { get; set; }
		
		/// <summary>
		/// The Bank Transaction ID for the destination account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ToBankTransactionID { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class FromBankAccount
	{
		
		/// <summary>
		/// Account identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Bank account code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Bank account name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ToBankAccount
	{
		
		/// <summary>
		/// Account identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Bank account code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Bank account name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BatchPayments
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BrandingTheme
	{
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// UTC timestamp of creation date of branding theme
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDateUTC { get; set; }
		
		/// <summary>
		/// Name of branding theme
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Integer – ranked order of branding theme. The default branding theme has a value of 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Contact
	{
		
		/// <summary>
		/// A user defined account number. This can be updated via the API and the Xero UI.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Default tax type used for contact on AP invoices
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountsPayableTaxType { get; set; }
		
		/// <summary>
		/// Default tax type used for contact on AR invoices
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountsReceivableTaxType { get; set; }
		
		/// <summary>
		/// Address details for the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Address[] Addresses { get; set; }
		
		/// <summary>
		/// The raw AccountsReceivable (sales invoices) and AccountsPayable (bills) outstanding and overdue amounts, not converted to base currency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BalancesElement[] Balances { get; set; }
		
		/// <summary>
		/// Bank account number of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchPayments BatchPayments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrandingTheme BrandingTheme { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactGroup[] ContactGroups { get; set; }
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactPerson[] ContactPersons { get; set; }
		
		/// <summary>
		/// Current status of a contact
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountStatus ContactStatus { get; set; }
		
		/// <summary>
		/// Default currency for raising invoices against contact
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefaultCurrency { get; set; }
		
		/// <summary>
		/// Email address of contact person (umlauts not supported)
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// First name of contact person
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// A boolean to indicate if a contact has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsCustomer { get; set; }
		
		/// <summary>
		/// Boolean that describes if a contact that has any AP invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSupplier { get; set; }
		
		/// <summary>
		/// Last name of contact person
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Full name of contact/organisation
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactPaymentTerms[] ContactPaymentTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phone[] Phones { get; set; }
		
		/// <summary>
		/// The default purchases account code for contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PurchasesDefaultAccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchasesTrackingCategory[] PurchasesTrackingCategories { get; set; }
		
		/// <summary>
		/// The default sales account code for contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SalesDefaultAccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesTrackingCategory[] SalesTrackingCategories { get; set; }
		
		/// <summary>
		/// Skype user name of contact
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SkypeUserName { get; set; }
		
		/// <summary>
		/// Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string TaxNumber { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Website address for contact
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Website { get; set; }
		
		/// <summary>
		/// Store XeroNetworkKey for contacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string XeroNetworkKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ContactGroup
	{
		
		/// <summary>
		/// Unique identifier for the contact group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactGroupID { get; set; }
		
		/// <summary>
		/// Name of the contact group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The status of the contact group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ContactGroupStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ContactGroupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ContactPerson
	{
		
		/// <summary>
		/// Email address of person
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// First name of person
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Boolean to indicate whether contact should be included on emails with invoices etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeInEmails { get; set; }
		
		/// <summary>
		/// Last name of person
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
	}
	
	public class ContactPaymentTerms
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactPaymentTermsBills Bills { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactPaymentTermsSales Sales { get; set; }
	}
	
	public class ContactPaymentTermsBills
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Days { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ContactPaymentTermsBillsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ContactPaymentTermsBillsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYSAFTERBILLDATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYSAFTERBILLMONTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFCURRENTMONTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFOLLOWINGMONTH = 3,
	}
	
	public class ContactPaymentTermsSales
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Days { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactPaymentTermsBillsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Phone
	{
		
		/// <summary>
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PhoneAreaCode { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string PhoneCountryCode { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The phone type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PhonePhoneType> PhoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum PhonePhoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DDI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAX = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PurchasesTrackingCategory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Option { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrackingCategoryID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SalesTrackingCategory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Option { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrackingCategoryID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Content
	{
		
		/// <summary>
		/// The raw file content
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="Content")]
		public string Content1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreditNote
	{
		
		/// <summary>
		/// Transactions the credit note has been allocated to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Allocation[] Allocations { get; set; }
		
		/// <summary>
		/// The identifier for the branding theme applied to the credit note
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactSummary Contact { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreditNoteID { get; set; }
		
		/// <summary>
		/// ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreditNoteNumber { get; set; }
		
		/// <summary>
		/// Currency used for the Credit Note
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> CurrencyRate { get; set; }
		
		/// <summary>
		/// The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Date when credit note was fully paid
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> FullyPaidOnDate { get; set; }
		
		/// <summary>
		/// boolean to indicate if a credit note has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// How tax is applied on the line items
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// ACCRECCREDIT only – additional reference number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// The remaining credit balance on the Credit Note
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RemainingCredit { get; set; }
		
		/// <summary>
		/// boolean to indicate if a credit note has been sent to a contact via the Xero app (currently read only)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SentToContact { get; set; }
		
		/// <summary>
		/// The Credit Note status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CreditNoteStatus> Status { get; set; }
		
		/// <summary>
		/// The subtotal of the credit note excluding taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> SubTotal { get; set; }
		
		/// <summary>
		/// The total of the Credit Note(subtotal + total tax)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// The total tax on the credit note
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TotalTax { get; set; }
		
		/// <summary>
		/// The type of Credit Note
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreditNoteType Type { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the credit note
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum CreditNoteStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORISED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOIDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum CreditNoteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCPAYCREDIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCRECCREDIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreditNoteSummary
	{
		
		/// <summary>
		/// The total applied to the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AppliedAmount { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreditNoteID { get; set; }
		
		/// <summary>
		/// ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreditNoteNumber { get; set; }
		
		/// <summary>
		/// The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// The total of the Credit Note(subtotal + total tax)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Currency
	{
		
		/// <summary>
		/// 3 letter alpha code for the currency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Name of Currency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Employee
	{
		
		/// <summary>
		/// The Xero identifier for an employee
		///e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EmployeeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExternalLink { get; set; }
		
		/// <summary>
		/// First name of an employee (max length = 255)
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of an employee (max length = 255)
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Current status of an employee
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ExpenseClaim
	{
		
		/// <summary>
		/// The amount due to be paid for an expense claim
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AmountDue { get; set; }
		
		/// <summary>
		/// The amount still to pay for an expense claim
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AmountPaid { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for an expense claim
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExpenseClaimID { get; set; }
		
		/// <summary>
		/// The date when the expense claim is due to be paid YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PaymentDueDate { get; set; }
		
		/// <summary>
		/// Payments applied to the expense claim
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentSummary[] Payments { get; set; }
		
		/// <summary>
		/// The Receipts in the expense claim
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Receipt[] Receipts { get; set; }
		
		/// <summary>
		/// The date the expense claim will be reported in Xero YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> ReportingDate { get; set; }
		
		/// <summary>
		/// Current status of an expense claim
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ExpenseClaimStatus> Status { get; set; }
		
		/// <summary>
		/// The total of an expense claim being paid
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PaymentSummary
	{
		
		/// <summary>
		/// The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Amount { get; set; }
		
		/// <summary>
		/// Date the payment is being made (YYYY-MM-DD)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// The Xero identifier for an Payment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaymentID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Receipt
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactSummary Contact { get; set; }
		
		/// <summary>
		/// Date of receipt – YYYY-MM-DD
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateOnly Date { get; set; }
		
		/// <summary>
		/// boolean to indicate if a receipt has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don’t specify this element
		/// </summary>
		[System.ComponentModel.DefaultValue(BankTransactionLineAmountTypes.Exclusive)]
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; } = BankTransactionLineAmountTypes.Exclusive;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LineItem[] Lineitems { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for receipt
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReceiptID { get; set; }
		
		/// <summary>
		/// Xero generated sequence number for receipt in current claim for a given user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReceiptNumber { get; set; }
		
		/// <summary>
		/// Additional reference number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// Current status of receipt
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ReceiptStatus> Status { get; set; }
		
		/// <summary>
		/// Total of receipt excluding taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> SubTotal { get; set; }
		
		/// <summary>
		/// Total of receipt tax inclusive (i.e. SubTotal + TotalTax)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// Total tax on receipt
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TotalTax { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// URL link to a source document – shown as “Go to [appName]” in the Xero app
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ReceiptStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORISED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECLINED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Email address of user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// First name of user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Boolean to indicate if user is the subscriber
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSubscriber { get; set; }
		
		/// <summary>
		/// Last name of user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		/// <summary>
		/// User role
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<UserOrganisationRole> OrganisationRole { get; set; }
		
		/// <summary>
		/// Timestamp of last change to user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UserID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum UserOrganisationRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOICEONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINANCIALADVISER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGEDCLIENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASHBOOKCLIENT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ExpenseClaimStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORISED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAID = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ExternalLink
	{
		
		/// <summary>
		/// External link types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ExternalLinkLinkType> LinkType { get; set; }
		
		/// <summary>
		/// URL for service
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ExternalLinkLinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Facebook = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GooglePlus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LinkedIn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Twitter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Website = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Invoice
	{
		
		/// <summary>
		/// Sum of all credit notes, over-payments and pre-payments applied to invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AmountCredited { get; set; }
		
		/// <summary>
		/// Amount remaining to be paid on invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AmountDue { get; set; }
		
		/// <summary>
		/// Sum of payments received for invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AmountPaid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// The identifier for the branding theme applied to the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactSummary Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNoteSummary[] CreditNotes { get; set; }
		
		/// <summary>
		/// The currency that invoice has been raised in
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> CurrencyRate { get; set; }
		
		/// <summary>
		/// Date invoice was issued YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Date the invoice is due to be paid YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> DueDate { get; set; }
		
		/// <summary>
		/// Shown on sales invoices (Accounts Receivable) when this has been set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> ExpectedPaymentDate { get; set; }
		
		/// <summary>
		/// The date the invoice was fully paid. Only returned on fully paid invoices
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> FullyPaidOnDate { get; set; }
		
		/// <summary>
		/// boolean to indicate if an invoice has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceID { get; set; }
		
		/// <summary>
		/// User defined alphanumeric code for identifying invoices. 
		///- Unique for ACCREC but not for ACCPAY. 
		///- For ACCREC it will auto-generate when left blank. 
		///- For ACCPAY it displays as Reference in the UI.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceNumber { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don’t specify this element
		/// </summary>
		[System.ComponentModel.DefaultValue(BankTransactionLineAmountTypes.Exclusive)]
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; } = BankTransactionLineAmountTypes.Exclusive;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LineItem[] LineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OverpaymentSummary[] Overpayments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PaymentSummary[] Payments { get; set; }
		
		/// <summary>
		/// Shown on bills (Accounts Payable) when this has been set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PlannedPaymentDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrepaymentSummary[] Prepayments { get; set; }
		
		/// <summary>
		/// ACCREC only – additional reference number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SentToContact { get; set; }
		
		/// <summary>
		/// The status of the invoice
		/// </summary>
		[System.ComponentModel.DefaultValue(CreditNoteStatus.DRAFT)]
		[System.Runtime.Serialization.DataMember()]
		public CreditNoteStatus Status { get; set; } = CreditNoteStatus.DRAFT;
		
		/// <summary>
		/// Total of invoice excluding taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> SubTotal { get; set; }
		
		/// <summary>
		/// Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// Total of discounts applied on the invoice line items
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TotalDiscount { get; set; }
		
		/// <summary>
		/// Total tax on the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Totaltax { get; set; }
		
		/// <summary>
		/// ACCREC (for sales) or ACCPAY (for bills)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InvoiceType Type { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// URL link to a source document – shown as “Go to [appName]” in the Xero app
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class OverpaymentSummary
	{
		
		/// <summary>
		/// The total applied to the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AppliedAmount { get; set; }
		
		/// <summary>
		/// The date the overpayment was made YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OverpaymentID { get; set; }
		
		/// <summary>
		/// The total of the Overpayment (subtotal + total tax)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PrepaymentSummary
	{
		
		/// <summary>
		/// The total applied to the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> AppliedAmount { get; set; }
		
		/// <summary>
		/// The date the prepayment is issued YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrepaymentID { get; set; }
		
		/// <summary>
		/// The total of the Prepayment (subtotal + total tax)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum InvoiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCREC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCPAY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class InvoiceSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactSummary Contact { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceID { get; set; }
		
		/// <summary>
		/// User defined alphanumeric code for identifying invoices. 
		///- Unique for ACCREC but not for ACCPAY. 
		///- For ACCREC it will auto-generate when left blank. 
		///- For ACCPAY it displays as Reference in the UI.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceNumber { get; set; }
		
		/// <summary>
		/// The Invoice Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<InvoiceSummaryType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum InvoiceSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCPAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCREC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Item
	{
		
		/// <summary>
		/// User defined item code
		/// Required
		/// Max length: 30
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Code { get; set; }
		
		/// <summary>
		/// The sales description of the item
		/// Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string Description { get; set; }
		
		/// <summary>
		/// The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InventoryAssetAccountCode { get; set; }
		
		/// <summary>
		/// Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPurchased { get; set; }
		
		/// <summary>
		/// Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSold { get; set; }
		
		/// <summary>
		/// True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTrackedAsInventory { get; set; }
		
		/// <summary>
		/// The Xero identifier for an Item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ItemID { get; set; }
		
		/// <summary>
		/// The name of the item (max length = 50)
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Name { get; set; }
		
		/// <summary>
		/// The purchase description of the item
		/// Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string PurchaseDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchaseDetails PurchaseDetails { get; set; }
		
		/// <summary>
		/// The quantity of the item on hand
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> QuantityOnHand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesDetails SalesDetails { get; set; }
		
		/// <summary>
		/// The value of the item on hand. Calculated using average cost accounting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TotalCostPool { get; set; }
		
		/// <summary>
		/// Last modified date in UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PurchaseDetails
	{
		
		/// <summary>
		/// Default account code to be used for purchase of non-tracked items. Not applicable to the purchase details of tracked items
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Cost of goods sold account. Only applicable to the purchase details of tracked items.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string COGSAccountCode { get; set; }
		
		/// <summary>
		/// Used as an override if the default Tax Code for the selected AccountCode is not correct.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxType { get; set; }
		
		/// <summary>
		/// Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp=4 querystring parameter to your request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> UnitPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SalesDetails
	{
		
		/// <summary>
		/// Default account code to be used for sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Used as an override if the default Tax Code for the selected AccountCode is not correct .
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxType { get; set; }
		
		/// <summary>
		/// Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp=4 querystring parameter to your request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> UnitPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Journal
	{
		
		/// <summary>
		/// Created date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDateUTC { get; set; }
		
		/// <summary>
		/// Date the journal was posted
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> JournalDate { get; set; }
		
		/// <summary>
		/// Xero identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JournalID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JournalLine[] JournalLines { get; set; }
		
		/// <summary>
		/// Xero generated journal number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JournalNumber { get; set; }
		
		/// <summary>
		/// The identifier for the source transaction (e.g. InvoiceID)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceID { get; set; }
		
		/// <summary>
		/// The journal source type. The type of transaction that created the journal
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<JournalSourceType> SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class JournalLine
	{
		
		/// <summary>
		/// Account Code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Description for journal line
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Total for line. Debits are positive, credits are negative value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> LineAmount { get; set; }
		
		/// <summary>
		/// The calculated tax amount based on the TaxType and LineAmount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TaxAmount { get; set; }
		
		/// <summary>
		/// Used as an override if the default Tax Code for the selected AccountCode is not correct.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxType { get; set; }
		
		/// <summary>
		/// Optional Tracking Category. Any JournalLine can have a maximum of 2 TrackingCategory elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrackingCategory[] Tracking { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TrackingCategory
	{
		
		/// <summary>
		/// The name of the tracking category e.g. Department, Region (max length = 100)
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrackingOption[] Options { get; set; }
		
		/// <summary>
		/// The status of a tracking category
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountStatus Status { get; set; }
		
		/// <summary>
		/// The Xero identifier for a tracking categorye.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TrackingCategoryID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TrackingOption
	{
		
		/// <summary>
		/// The name of the tracking option e.g. Marketing, East (max length = 50)
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Name { get; set; }
		
		/// <summary>
		/// The status of a tracking option
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountStatus Status { get; set; }
		
		/// <summary>
		/// The Xero identifier for a tracking optione.g. ae777a87-5ef3-4fa0-a4f0-d10e1f13073a
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TrackingOptionID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum JournalSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCREC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCPAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCPAYCREDIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCRECPAYMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCPAYPAYMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCREDITPAYMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APCREDITPAYMENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASHREC = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASHPAID = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARPREPAYMENT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPREPAYMENT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AROVERPAYMENT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APOVERPAYMENT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPCLAIM = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPPAYMENT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANJOURNAL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYSLIP = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAGEPAYABLE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATEDPAYROLLPE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATEDPAYROLLPT = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNALSPENDMONEY = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATEDPAYROLLPTPAYMENT = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATEDPAYROLLCN = 23,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class LinkedTransaction
	{
		
		/// <summary>
		/// Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactID { get; set; }
		
		/// <summary>
		/// The Xero identifier for an Linked Transaction e.g. /LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LinkedTransactionID { get; set; }
		
		/// <summary>
		/// The line item identifier from the source transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceLineItemID { get; set; }
		
		/// <summary>
		/// Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceTransactionID { get; set; }
		
		/// <summary>
		/// The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceTransactionTypeCode { get; set; }
		
		/// <summary>
		/// Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<LinkedTransactionStatus> Status { get; set; }
		
		/// <summary>
		/// The line item identifier from the target transaction. It is possible to link multiple billable expenses to the same TargetLineItemID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TargetLineItemID { get; set; }
		
		/// <summary>
		/// Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TargetTransactionID { get; set; }
		
		/// <summary>
		/// This will always be BILLABLEEXPENSE. More types may be added in future.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<LinkedTransactionType> Type { get; set; }
		
		/// <summary>
		/// The last modified date in UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum LinkedTransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONDRAFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOIDED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum LinkedTransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLABLEEXPENSE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ManualJournal
	{
		
		/// <summary>
		/// Date journal was posted – YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// Boolean to indicate if a manual journal has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// The Xero identifier for a Manual Journal
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JournalID { get; set; }
		
		/// <summary>
		/// See JournalLines
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JournalLine[] JournalLines { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don’t specify this element
		/// </summary>
		[System.ComponentModel.DefaultValue(BankTransactionLineAmountTypes.Exclusive)]
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; } = BankTransactionLineAmountTypes.Exclusive;
		
		/// <summary>
		/// Description of journal being posted
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Narration { get; set; }
		
		/// <summary>
		/// Boolean – default is true if not specified
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowOnCashBasisReports { get; set; }
		
		/// <summary>
		/// Manual Journal Status Codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ManualJournalStatus> Status { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
		
		/// <summary>
		/// Url link to a source document – shown as “Go to [appName]” in the Xero app
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ManualJournalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOIDED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class OnlineInvoice
	{
		
		/// <summary>
		/// The URL to view the online invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OnlineInvoiceUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Organisation
	{
		
		/// <summary>
		/// Display a unique key used for Xero-to-Xero transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string APIKey { get; set; }
		
		/// <summary>
		/// Address details for organisation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Address[] Addresses { get; set; }
		
		/// <summary>
		/// Default currency for organisation. See ISO 4217 Currency Codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BaseCurrency { get; set; }
		
		/// <summary>
		/// Country code for organisation. See ISO 3166-2 Country Codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Timestamp when the organisation was created in Xero
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDateUTC { get; set; }
		
		/// <summary>
		/// The default for LineAmountTypes on purchase transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes DefaultPurchasesTax { get; set; }
		
		/// <summary>
		/// The default for LineAmountTypes on sales transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes DefaultSalesTax { get; set; }
		
		/// <summary>
		/// Shown if set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EndOfYearLockDate { get; set; }
		
		/// <summary>
		/// Organisation profile links for popular services such as Facebook, Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExternalLink[] ExternalLinks { get; set; }
		
		/// <summary>
		/// Calendar day e.g. 0-31
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FinancialYearEndDay { get; set; }
		
		/// <summary>
		/// Calendar Month e.g. 1-12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FinancialYearEndMonth { get; set; }
		
		/// <summary>
		/// Boolean to describe if organisation is a demo company.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDemoCompany { get; set; }
		
		/// <summary>
		/// Organisation name shown on Reports
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LegalName { get; set; }
		
		/// <summary>
		/// Description of business type as defined in Organisation settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LineOfBusiness { get; set; }
		
		/// <summary>
		/// Display name of organisation shown in Xero
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Organisation Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OrganisationOrganisationEntityType> OrganisationEntityType { get; set; }
		
		/// <summary>
		/// Will be set to ACTIVE if you can connect to organisation via the Xero API
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OrganisationOrganisationStatus> OrganisationStatus { get; set; }
		
		/// <summary>
		/// Organisation Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrganisationOrganisationEntityType OrganisationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public object PaymentTerms { get; set; }
		
		/// <summary>
		/// Boolean to describe if organisation is registered with a local tax authority i.e. true, false
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PaysTax { get; set; }
		
		/// <summary>
		/// Shown if set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PeriodLockDate { get; set; }
		
		/// <summary>
		/// Phones details for organisation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Phone[] Phones { get; set; }
		
		/// <summary>
		/// Shows for New Zealand, Australian and UK organisations
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RegistrationNumber { get; set; }
		
		/// <summary>
		/// The accounting basis used for tax returns
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SalesTaxBasis { get; set; }
		
		/// <summary>
		/// The frequency with which tax returns are processed. See Sales Tax Period
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SalesTaxPeriod { get; set; }
		
		/// <summary>
		/// A unique identifier for the organisation. Used for deep linking into Xero.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShortCode { get; set; }
		
		/// <summary>
		/// Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US & Global).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxNumber { get; set; }
		
		/// <summary>
		/// Timezone specifications
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		/// <summary>
		/// Version Types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OrganisationVersion> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum OrganisationOrganisationEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUBSOCIETY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNERSHIP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRACTICE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLETRADER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUST = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum OrganisationOrganisationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum OrganisationVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLOBAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUONRAMP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZONRAMP = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLOBALONRAMP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UKONRAMP = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USONRAMP = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Overpayment
	{
		
		/// <summary>
		/// See Allocations
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Allocation[] Allocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactSummary Contact { get; set; }
		
		/// <summary>
		/// Currency used for the overpayment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency overpayment. If no rate is specified, the XE.com day rate is used
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> CurrencyRate { get; set; }
		
		/// <summary>
		/// The date the overpayment is created YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// boolean to indicate if a overpayment has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don’t specify this element
		/// </summary>
		[System.ComponentModel.DefaultValue(BankTransactionLineAmountTypes.Exclusive)]
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; } = BankTransactionLineAmountTypes.Exclusive;
		
		/// <summary>
		/// Overpayment Line Items
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OverpaymentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PaymentSummary[] Payments { get; set; }
		
		/// <summary>
		/// The remaining credit balance on the overpayment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RemainingCredit { get; set; }
		
		/// <summary>
		/// Overpayment Status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OverpaymentStatus> Status { get; set; }
		
		/// <summary>
		/// The subtotal of the overpayment excluding taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> SubTotal { get; set; }
		
		/// <summary>
		/// The total of the overpayment (subtotal + total tax)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// The total tax on the overpayment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TotalTax { get; set; }
		
		/// <summary>
		/// The Overpayment Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OverpaymentType> Type { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the overpayment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum OverpaymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORISED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOIDED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum OverpaymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVE-OVERPAYMENT")]
		RECEIVEMinusOVERPAYMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEND-OVERPAYMENT")]
		SPENDMinusOVERPAYMENT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Payment
	{
		
		/// <summary>
		/// The Account the payment was made from
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentAccount Account { get; set; }
		
		/// <summary>
		/// The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNoteSummary CreditNote { get; set; }
		
		/// <summary>
		/// Exchange rate when payment is received. Only used for non base currency invoices and credit notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> CurrencyRate { get; set; }
		
		/// <summary>
		/// Date the payment is being made (YYYY-MM-DD)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InvoiceSummary Invoice { get; set; }
		
		/// <summary>
		/// An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsReconciled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OverpaymentSummary Overpayment { get; set; }
		
		/// <summary>
		/// The Xero identifier for an Payment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaymentID { get; set; }
		
		/// <summary>
		/// The Payment Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PaymentPaymentType> PaymentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrepaymentSummary Prepayment { get; set; }
		
		/// <summary>
		/// An optional description for the payment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// The status of the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionStatus Status { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the payment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	public class PaymentAccount
	{
		
		/// <summary>
		/// Identifier for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountID { get; set; }
		
		/// <summary>
		/// Account Code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum PaymentPaymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCRECPAYMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCPAYPAYMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCREDITPAYMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APCREDITPAYMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AROVERPAYMENTPAYMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARPREPAYMENTPAYMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPREPAYMENTPAYMENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APOVERPAYMENTPAYMENT = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PaymentTermsElement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PaymentTermsElementBills Bills { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PaymentTermsElementSales Sales { get; set; }
	}
	
	public class PaymentTermsElementBills
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Days { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactPaymentTermsBillsType Type { get; set; }
	}
	
	public class PaymentTermsElementSales
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Days { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactPaymentTermsBillsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Prepayment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Allocation[] Allocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactSummary Contact { get; set; }
		
		/// <summary>
		/// Currency used for the prepayment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> CurrencyRate { get; set; }
		
		/// <summary>
		/// The date the prepayment is created YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// boolean to indicate if a prepayment has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don’t specify this element
		/// </summary>
		[System.ComponentModel.DefaultValue(BankTransactionLineAmountTypes.Exclusive)]
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; } = BankTransactionLineAmountTypes.Exclusive;
		
		[System.Runtime.Serialization.DataMember()]
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrepaymentID { get; set; }
		
		/// <summary>
		/// The remaining credit balance on the prepayment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RemainingCredit { get; set; }
		
		/// <summary>
		/// Prepayment Status Codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OverpaymentStatus Status { get; set; }
		
		/// <summary>
		/// The subtotal of the prepayment excluding taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> SubTotal { get; set; }
		
		/// <summary>
		/// The total of the prepayment(subtotal + total tax)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// The total tax on the prepayment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TotalTax { get; set; }
		
		/// <summary>
		/// Prepayment Types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PrepaymentType> Type { get; set; }
		
		/// <summary>
		/// UTC timestamp of last update to the prepayment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum PrepaymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVE-PREPAYMENT")]
		RECEIVEMinusPREPAYMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPEND-PREPAYMENT")]
		SPENDMinusPREPAYMENT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PurchaseOrder
	{
		
		/// <summary>
		/// The person that the delivery is going to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttentionTo { get; set; }
		
		/// <summary>
		/// See BrandingThemes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BrandingThemeID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactSummary Contact { get; set; }
		
		/// <summary>
		/// The currency that purchase order has been raised in
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The currency rate for a multicurrency purchase order. As no rate can be specified, the XE.com day rate is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> CurrencyRate { get; set; }
		
		/// <summary>
		/// Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// The address the goods are to be delivered to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryAddress { get; set; }
		
		/// <summary>
		/// Date the goods are to be delivered – YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> DeliveryDate { get; set; }
		
		/// <summary>
		/// A free text feild for instructions (500 characters max)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryInstructions { get; set; }
		
		/// <summary>
		/// The date the goods are expected to arrive.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> ExpectedArrivalDate { get; set; }
		
		/// <summary>
		/// boolean to indicate if a purchase order has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don’t specify this element
		/// </summary>
		[System.ComponentModel.DefaultValue(BankTransactionLineAmountTypes.Exclusive)]
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; } = BankTransactionLineAmountTypes.Exclusive;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for purchase order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PurchaseOrderID { get; set; }
		
		/// <summary>
		/// Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PurchaseOrderNumber { get; set; }
		
		/// <summary>
		/// Additional reference number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SentToContact { get; set; }
		
		/// <summary>
		/// Purchase Order Status Codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PurchaseOrderStatus> Status { get; set; }
		
		/// <summary>
		/// Total of purchase order excluding taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> SubTotal { get; set; }
		
		/// <summary>
		/// The phone number for the person accepting the delivery
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Telephone { get; set; }
		
		/// <summary>
		/// Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// Total of discounts applied on the purchase order line items
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TotalDiscount { get; set; }
		
		/// <summary>
		/// Total tax on purchase order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TotalTax { get; set; }
		
		/// <summary>
		/// Last modified date UTC format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum PurchaseOrderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORISED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RepeatingInvoice
	{
		
		/// <summary>
		/// Branding Theme to be applied to the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BrandingThemeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactSummary Contact { get; set; }
		
		/// <summary>
		/// The currency that invoice has been raised in
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// boolean to indicate if an invoice has an attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		/// <summary>
		/// Line amounts are exclusive of tax by default if you don’t specify this element
		/// </summary>
		[System.ComponentModel.DefaultValue(BankTransactionLineAmountTypes.Exclusive)]
		[System.Runtime.Serialization.DataMember()]
		public BankTransactionLineAmountTypes LineAmountTypes { get; set; } = BankTransactionLineAmountTypes.Exclusive;
		
		[System.Runtime.Serialization.DataMember()]
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// ACCREC only – additional reference number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// Xero generated unique identifier for repeating invoice template
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RepeatingInvoiceID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Schedule Schedule { get; set; }
		
		/// <summary>
		/// One of the following : DRAFT or AUTHORISED
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<RepeatingInvoiceStatus> Status { get; set; }
		
		/// <summary>
		/// Total of invoice excluding taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> SubTotal { get; set; }
		
		/// <summary>
		/// Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// Total tax on invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> TotalTax { get; set; }
		
		/// <summary>
		/// Invoice Types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InvoiceSummaryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum RepeatingInvoiceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORISED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Report
	{
		
		/// <summary>
		/// The date of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportDate { get; set; }
		
		/// <summary>
		/// Identifier of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportID { get; set; }
		
		/// <summary>
		/// Name of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportName { get; set; }
		
		/// <summary>
		/// The titles of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] ReportTitles { get; set; }
		
		/// <summary>
		/// Type of report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportType { get; set; }
		
		/// <summary>
		/// The rows of the report that contain the data (including header rows)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportRows[] ReportRows { get; set; }
		
		/// <summary>
		/// The date and time the report was generated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	public class ReportRows
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportRowsCells[] ReportRowsCells { get; set; }
		
		/// <summary>
		/// The type of row
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ReportRowsRowType> RowType { get; set; }
		
		/// <summary>
		/// The rows of the report (including header rows)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportRowsRows[] ReportRowsRows { get; set; }
		
		/// <summary>
		/// The title of the row
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	public class ReportRowsCells
	{
		
		/// <summary>
		/// Header row labels
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ReportRowsRowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Header = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Section = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Row = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SummaryRow = 3,
	}
	
	public class ReportRowsRows
	{
		
		/// <summary>
		/// The cells that contain the data of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportRowsRowsCells[] ReportRowsRowsCells { get; set; }
		
		/// <summary>
		/// The type of row
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ReportRowsRowsRowType> RowType { get; set; }
	}
	
	public class ReportRowsRowsCells
	{
		
		/// <summary>
		/// AccountID that the Value relates to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportRowsRowsCellsAttributes[] ReportRowsRowsCellsAttributes { get; set; }
		
		/// <summary>
		/// The data displayed in the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	public class ReportRowsRowsCellsAttributes
	{
		
		/// <summary>
		/// Always 'account'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ReportRowsRowsCellsAttributesId> Id { get; set; }
		
		/// <summary>
		/// The AccountID that the Value relates to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ReportRowsRowsCellsAttributesId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		account = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ReportRowsRowsRowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Row = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SummaryRow = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ReportSummary
	{
		
		/// <summary>
		/// The date of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportDate { get; set; }
		
		/// <summary>
		/// Identifier of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportID { get; set; }
		
		/// <summary>
		/// Name of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportName { get; set; }
		
		/// <summary>
		/// Type of report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportType { get; set; }
		
		/// <summary>
		/// The date and time the report was generated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Schedule
	{
		
		/// <summary>
		/// Integer used with due date type e.g 20 (of following month), 31 (of current month)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DueDate { get; set; }
		
		/// <summary>
		/// Used with due date to describe when the invoice is due
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ScheduleDueDateType> DueDateType { get; set; }
		
		/// <summary>
		/// Invoice end date – only returned if the template has an end date set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// The calendar date of the next invoice in the schedule to be generated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextScheduledDate { get; set; }
		
		/// <summary>
		/// Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Period { get; set; }
		
		/// <summary>
		/// Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// One of the following : WEEKLY or MONTHLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ScheduleDueDateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYSAFTERBILLDATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYSAFTERBILLMONTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFCURRENTMONTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFOLLOWINGMONTH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TaxComponent
	{
		
		/// <summary>
		/// Boolean to describe if Tax rate is compounded.Learn more
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsCompound { get; set; }
		
		/// <summary>
		/// Determines if this tax component can be recovered
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsNonRecoverable { get; set; }
		
		/// <summary>
		/// Name of Tax Component
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Tax Rate (up to 4dp)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Rate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TaxRate
	{
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for asset accounts 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanApplyToAssets { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for equity accounts 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanApplyToEquity { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for expense accounts 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanApplyToExpenses { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for liability accounts
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanApplyToLiabilities { get; set; }
		
		/// <summary>
		/// Boolean to describe if tax rate can be used for revenue accounts
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanApplyToRevenue { get; set; }
		
		/// <summary>
		/// Tax Rate (decimal to 4dp) e.g 12.5000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> DisplayTaxRate { get; set; }
		
		/// <summary>
		/// Effective Tax Rate (decimal to 4dp) e.g 12.5000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> EffectiveRate { get; set; }
		
		/// <summary>
		/// Name of tax rate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// See ReportTaxTypes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportTaxType { get; set; }
		
		/// <summary>
		/// Status Codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<TaxRateStatus> Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaxComponent[] TaxComponents { get; set; }
		
		/// <summary>
		/// Tax Types – can only be used as the identifier on update calls
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum TaxRateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TaxReport
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TaxReportAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxReportFields Fields { get; set; }
		
		/// <summary>
		/// The date of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportDate { get; set; }
		
		/// <summary>
		/// Identifier of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportID { get; set; }
		
		/// <summary>
		/// Name of the report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportName { get; set; }
		
		/// <summary>
		/// Type of report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportType { get; set; }
		
		/// <summary>
		/// The date and time the report was generated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDateUTC { get; set; }
	}
	
	public class TaxReportAttributes
	{
		
		/// <summary>
		/// The attributes of the report (AU BAS Report only)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaxReportAttributesReportAttribute[] TaxReportAttributesReportAttribute { get; set; }
	}
	
	public class TaxReportAttributesReportAttribute
	{
		
		/// <summary>
		/// The description of the field
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier for the field
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the field
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	public class TaxReportFields
	{
		
		/// <summary>
		/// The report fields that contain useful data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaxReportFieldsReportField[] TaxReportFieldsReportField { get; set; }
	}
	
	public class TaxReportFieldsReportField
	{
		
		/// <summary>
		/// The description of the field
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier for the field
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FieldID { get; set; }
		
		/// <summary>
		/// The value of the field
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve the full chart of accounts
		/// Retrieve the chart of accounts
		/// AccountsGetByWhereAndOrder Accounts
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <returns>A successful response</returns>
		public async Task<AccountsGetByWhereAndOrderReturn> AccountsGetByWhereAndOrderAsync(string @where, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Accounts?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsGetByWhereAndOrderReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create new accounts
		/// AccountsPut Accounts
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<AccountsPutReturn> AccountsPutAsync(Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update accounts
		/// AccountsPost Accounts
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<AccountsPostReturn> AccountsPostAsync(Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountsPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a single account
		/// Accounts_AccountIDGet Accounts/{AccountID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Accounts_AccountIDGetReturn> Accounts_AccountIDGetAsync(string AccountID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Accounts_AccountIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an account
		/// Accounts_AccountIDPost Accounts/{AccountID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Accounts_AccountIDPostReturn> Accounts_AccountIDPostAsync(string AccountID, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Accounts_AccountIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an account
		/// Accounts_AccountIDDelete Accounts/{AccountID}
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task Accounts_AccountIDDeleteAsync(string AccountID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Attachments
		/// Retrieve Attachments
		/// Accounts_AccountIDAttachmentsGet Accounts/{AccountID}/Attachments
		/// </summary>
		/// <param name="AccountID">The Xero generated unique identifier for an account</param>
		/// <returns>A successful response</returns>
		public async Task<Accounts_AccountIDAttachmentsGetReturn> Accounts_AccountIDAttachmentsGetAsync(string AccountID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID))+"/Attachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Accounts_AccountIDAttachmentsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// Accounts_AccountIDAttachments_FileNameGet Accounts/{AccountID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="AccountID">The Xero generated unique identifier for an account</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task Accounts_AccountIDAttachments_FileNameGetAsync(string FileName, string AccountID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload an Attachment
		/// Upload an Attachment
		/// Accounts_AccountIDAttachments_FileNamePost Accounts/{AccountID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment being uploaded</param>
		/// <param name="AccountID">The Xero generated unique identifier for an account</param>
		/// <param name="requestBody">The raw content of the file to be uploaded</param>
		/// <returns>A successful response</returns>
		public async Task<Accounts_AccountIDAttachments_FileNamePostReturn> Accounts_AccountIDAttachments_FileNamePostAsync(string FileName, string AccountID, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Accounts/"+ (AccountID==null? "" : System.Uri.EscapeDataString(AccountID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Accounts_AccountIDAttachments_FileNamePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve any spend or receive money transactions (inc. prepayments and overpayments)
		/// BankTransactionsGetByWhereAndOrderAndUnitdp BankTransactions
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransactionsGetByWhereAndOrderAndUnitdpReturn> BankTransactionsGetByWhereAndOrderAndUnitdpAsync(string @where, string order, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransactions?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransactionsGetByWhereAndOrderAndUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new spend or receive money (inc. prepayments and overpayments)
		/// BankTransactionsPutBySummarizeErrors BankTransactions
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransactionsPutBySummarizeErrorsReturn> BankTransactionsPutBySummarizeErrorsAsync(bool summarizeErrors, BankTransaction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransactions?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransactionsPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new spend or receive money (inc. prepayments and overpayments)
		/// BankTransactionsPostByUnitdpAndSummarizeErrors BankTransactions
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransactionsPostByUnitdpAndSummarizeErrorsReturn> BankTransactionsPostByUnitdpAndSummarizeErrorsAsync(int unitdp, bool summarizeErrors, BankTransaction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransactions?unitdp="+unitdp+"&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransactionsPostByUnitdpAndSummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a spend or receive money (inc. prepayments and overpayments)
		/// BankTransactions_BankTransactionIDGetByUnitdp BankTransactions/{BankTransactionID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransactions_BankTransactionIDGetByUnitdpReturn> BankTransactions_BankTransactionIDGetByUnitdpAsync(string BankTransactionID, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransactions_BankTransactionIDGetByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a spend or receive money
		/// BankTransactions_BankTransactionIDPostByUnitdp BankTransactions/{BankTransactionID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransactions_BankTransactionIDPostByUnitdpReturn> BankTransactions_BankTransactionIDPostByUnitdpAsync(string BankTransactionID, int unitdp, BankTransaction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransactions_BankTransactionIDPostByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Attachments
		/// Retrieve Attachments
		/// BankTransactions_BankTransactionIDAttachmentsGet BankTransactions/{BankTransactionID}/Attachments
		/// </summary>
		/// <param name="BankTransactionID">The Xero generated unique identifier for an bank transaction</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransactions_BankTransactionIDAttachmentsGetReturn> BankTransactions_BankTransactionIDAttachmentsGetAsync(string BankTransactionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/Attachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransactions_BankTransactionIDAttachmentsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// BankTransactions_BankTransactionIDAttachments_FileNameGet BankTransactions/{BankTransactionID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="BankTransactionID">The Xero generated unique identifier for an bank transaction</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task BankTransactions_BankTransactionIDAttachments_FileNameGetAsync(string FileName, string BankTransactionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload an Attachment
		/// Upload an Attachment
		/// BankTransactions_BankTransactionIDAttachments_FileNamePost BankTransactions/{BankTransactionID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment being uploaded</param>
		/// <param name="BankTransactionID">The Xero generated unique identifier for an bank transaction</param>
		/// <param name="requestBody">The raw content of the file to be uploaded</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransactions_BankTransactionIDAttachments_FileNamePostReturn> BankTransactions_BankTransactionIDAttachments_FileNamePostAsync(string FileName, string BankTransactionID, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransactions/"+ (BankTransactionID==null? "" : System.Uri.EscapeDataString(BankTransactionID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransactions_BankTransactionIDAttachments_FileNamePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a colection of bank transfers
		/// BankTransfersGetByWhereAndOrder BankTransfers
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransfersGetByWhereAndOrderReturn> BankTransfersGetByWhereAndOrderAsync(string @where, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransfers?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransfersGetByWhereAndOrderReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a bank transfer
		/// BankTransfersPutBySummarizeErrors BankTransfers
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransfersPutBySummarizeErrorsReturn> BankTransfersPutBySummarizeErrorsAsync(bool summarizeErrors, BankTransfer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransfers?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransfersPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual bank transfer
		/// BankTransfers_BankTransferIDGet BankTransfers/{BankTransferID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<BankTransfers_BankTransferIDGetReturn> BankTransfers_BankTransferIDGetAsync(string BankTransferID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransfers_BankTransferIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// BankTransfers_BankTransferIDAttachments_FileNameGet BankTransfers/{BankTransferID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="BankTransferID">The Xero generated unique identifier for an BankTransfer</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task BankTransfers_BankTransferIDAttachments_FileNameGetAsync(string FileName, string BankTransferID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload an Attachment
		/// Upload an Attachment
		/// BankTransfers_BankTransferIDAttachments_FileNamePost BankTransfers/{BankTransferID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment being uploaded</param>
		/// <param name="BankTransferID">The Xero generated unique identifier for a BankTransfer</param>
		/// <param name="requestBody">The raw content of the file to be uploaded</param>
		/// <returns>A successful response</returns>
		public async Task<BankTransfers_BankTransferIDAttachments_FileNamePostReturn> BankTransfers_BankTransferIDAttachments_FileNamePostAsync(string FileName, string BankTransferID, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BankTransfers/"+ (BankTransferID==null? "" : System.Uri.EscapeDataString(BankTransferID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BankTransfers_BankTransferIDAttachments_FileNamePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of BrandingThemes
		/// BrandingThemesGet BrandingThemes
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<BrandingThemesGetReturn> BrandingThemesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BrandingThemes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BrandingThemesGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual BrandingTheme
		/// BrandingThemes_BrandingThemeIDGet BrandingThemes/{BrandingThemeID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<BrandingThemes_BrandingThemeIDGetReturn> BrandingThemes_BrandingThemeIDGetAsync(string BrandingThemeID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BrandingThemes/"+ (BrandingThemeID==null? "" : System.Uri.EscapeDataString(BrandingThemeID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BrandingThemes_BrandingThemeIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of contact groups
		/// ContactGroupsGetByWhereAndOrder ContactGroups
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <returns>A successful response</returns>
		public async Task<ContactGroupsGetByWhereAndOrderReturn> ContactGroupsGetByWhereAndOrderAsync(string @where, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContactGroups?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactGroupsGetByWhereAndOrderReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new contact group
		/// ContactGroupsPutBySummarizeErrors ContactGroups
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ContactGroupsPutBySummarizeErrorsReturn> ContactGroupsPutBySummarizeErrorsAsync(bool summarizeErrors, ContactGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContactGroups?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactGroupsPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update a contact group
		/// ContactGroupsPostBySummarizeErrors ContactGroups
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ContactGroupsPostBySummarizeErrorsReturn> ContactGroupsPostBySummarizeErrorsAsync(bool summarizeErrors, ContactGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContactGroups?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactGroupsPostBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the ContactID and Name of all the contacts in a contact group
		/// ContactGroups_ContactGroupIDGet ContactGroups/{ContactGroupID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<ContactGroups_ContactGroupIDGetReturn> ContactGroups_ContactGroupIDGetAsync(string ContactGroupID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactGroups_ContactGroupIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a contact group
		/// ContactGroups_ContactGroupIDPost ContactGroups/{ContactGroupID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<ContactGroups_ContactGroupIDPostReturn> ContactGroups_ContactGroupIDPostAsync(string ContactGroupID, ContactGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactGroups_ContactGroupIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a contact group
		/// ContactGroups_ContactGroupIDDelete ContactGroups/{ContactGroupID}
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task ContactGroups_ContactGroupIDDeleteAsync(string ContactGroupID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add contacts to a contact group
		/// ContactGroups_ContactGroupIDContactsPut ContactGroups/{ContactGroupID}/Contacts
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<ContactGroups_ContactGroupIDContactsPutReturn> ContactGroups_ContactGroupIDContactsPutAsync(string ContactGroupID, Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID))+"/Contacts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactGroups_ContactGroupIDContactsPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove all contacts from a contact group
		/// ContactGroups_ContactGroupIDContactsDelete ContactGroups/{ContactGroupID}/Contacts
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task ContactGroups_ContactGroupIDContactsDeleteAsync(string ContactGroupID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID))+"/Contacts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove a contact from a contact group
		/// ContactGroups_ContactGroupIDContacts_ContactIDDelete ContactGroups/{ContactGroupID}/Contacts/{ContactID}
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task ContactGroups_ContactGroupIDContacts_ContactIDDeleteAsync(string ContactGroupID, string ContactID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ContactGroups/"+ (ContactGroupID==null? "" : System.Uri.EscapeDataString(ContactGroupID))+"/Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of contacts
		/// ContactsGetByWhereAndOrderAndIncludeArchivedAndIDs Contacts
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <param name="includeArchived">Include archived records in the response </param>
		/// <param name="IDs">Filter by a comma-separated list of ContactIDs</param>
		/// <returns>A successful response</returns>
		public async Task<ContactsGetByWhereAndOrderAndIncludeArchivedAndIDsReturn> ContactsGetByWhereAndOrderAndIncludeArchivedAndIDsAsync(string @where, string order, bool includeArchived, string IDs, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Contacts?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&includeArchived="+includeArchived+"&IDs=" + (IDs==null? "" : System.Uri.EscapeDataString(IDs));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactsGetByWhereAndOrderAndIncludeArchivedAndIDsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a contact
		/// ContactsPut Contacts
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<ContactsPutReturn> ContactsPutAsync(Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Contacts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactsPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update a contact
		/// ContactsPostBySummarizeErrors Contacts
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ContactsPostBySummarizeErrorsReturn> ContactsPostBySummarizeErrorsAsync(bool summarizeErrors, Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Contacts?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContactsPostBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual contact
		/// Contacts_ContactIDGet Contacts/{ContactID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Contacts_ContactIDGetReturn> Contacts_ContactIDGetAsync(string ContactID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Contacts_ContactIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a contact
		/// Contacts_ContactIDPost Contacts/{ContactID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Contacts_ContactIDPostReturn> Contacts_ContactIDPostAsync(string ContactID, Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Contacts_ContactIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Attachments
		/// Retrieve Attachments
		/// Contacts_ContactIDAttachmentsGet Contacts/{ContactID}/Attachments
		/// </summary>
		/// <param name="ContactID">The Xero generated unique identifier for a Contact</param>
		/// <returns>A successful response</returns>
		public async Task<Contacts_ContactIDAttachmentsGetReturn> Contacts_ContactIDAttachmentsGetAsync(string ContactID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/Attachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Contacts_ContactIDAttachmentsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// Contacts_ContactIDAttachments_FileNameGet Contacts/{ContactID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="ContactID">The Xero generated unique identifier for a Contact</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task Contacts_ContactIDAttachments_FileNameGetAsync(string FileName, string ContactID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload an Attachment
		/// Upload an Attachment
		/// Contacts_ContactIDAttachments_FileNamePost Contacts/{ContactID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment being uploaded</param>
		/// <param name="ContactID">The Xero generated unique identifier for a Contact</param>
		/// <param name="requestBody">The raw content of the file to be uploaded</param>
		/// <returns>A successful response</returns>
		public async Task<Contacts_ContactIDAttachments_FileNamePostReturn> Contacts_ContactIDAttachments_FileNamePostAsync(string FileName, string ContactID, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Contacts/"+ (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Contacts_ContactIDAttachments_FileNamePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of credit notes
		/// CreditNotesGetByWhereAndOrderAndUnitdpAndPage CreditNotes
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="page">Page number e.g. page=1. Page size is 100. When using the page parameter full resource details will be returned (including line items).</param>
		/// <returns>A successful response</returns>
		public async Task<CreditNotesGetByWhereAndOrderAndUnitdpAndPageReturn> CreditNotesGetByWhereAndOrderAndUnitdpAndPageAsync(string @where, string order, int unitdp, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreditNotes?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&unitdp="+unitdp+"&page="+page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditNotesGetByWhereAndOrderAndUnitdpAndPageReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a credit note
		/// CreditNotesPutByUnitdpAndSummarizeErrors CreditNotes
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<CreditNotesPutByUnitdpAndSummarizeErrorsReturn> CreditNotesPutByUnitdpAndSummarizeErrorsAsync(int unitdp, bool summarizeErrors, CreditNote requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreditNotes?unitdp="+unitdp+"&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditNotesPutByUnitdpAndSummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update a credit note
		/// CreditNotesPostByUnitdpAndSummarizeErrors CreditNotes
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<CreditNotesPostByUnitdpAndSummarizeErrorsReturn> CreditNotesPostByUnitdpAndSummarizeErrorsAsync(int unitdp, bool summarizeErrors, CreditNote requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreditNotes?unitdp="+unitdp+"&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditNotesPostByUnitdpAndSummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual credit note
		/// CreditNotes_CreditNoteIDGetByUnitdp CreditNotes/{CreditNoteID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<CreditNotes_CreditNoteIDGetByUnitdpReturn> CreditNotes_CreditNoteIDGetByUnitdpAsync(string CreditNoteID, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditNotes_CreditNoteIDGetByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a credit note
		/// CreditNotes_CreditNoteIDPostByUnitdp CreditNotes/{CreditNoteID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<CreditNotes_CreditNoteIDPostByUnitdpReturn> CreditNotes_CreditNoteIDPostByUnitdpAsync(string CreditNoteID, int unitdp, CreditNote requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditNotes_CreditNoteIDPostByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Allocate a credit note
		/// CreditNotes_CreditNoteIDAllocationsPut CreditNotes/{CreditNoteID}/Allocations
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<CreditNotes_CreditNoteIDAllocationsPutReturn> CreditNotes_CreditNoteIDAllocationsPutAsync(string CreditNoteID, Allocation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Allocations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditNotes_CreditNoteIDAllocationsPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Attachments
		/// Retrieve Attachments
		/// CreditNotes_CreditNoteIDAttachmentsGet CreditNotes/{CreditNoteID}/Attachments
		/// </summary>
		/// <param name="CreditNoteID">The Xero generated unique identifier for a CreditNote</param>
		/// <returns>A successful response</returns>
		public async Task<CreditNotes_CreditNoteIDAttachmentsGetReturn> CreditNotes_CreditNoteIDAttachmentsGetAsync(string CreditNoteID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Attachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditNotes_CreditNoteIDAttachmentsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// CreditNotes_CreditNoteIDAttachments_FileNameGet CreditNotes/{CreditNoteID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="CreditNoteID">The Xero generated unique identifier for a CreditNote</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task CreditNotes_CreditNoteIDAttachments_FileNameGetAsync(string FileName, string CreditNoteID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload an Attachment
		/// Upload an Attachment
		/// CreditNotes_CreditNoteIDAttachments_FileNamePost CreditNotes/{CreditNoteID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment being uploaded</param>
		/// <param name="CreditNoteID">The Xero generated unique identifier for a CreditNote</param>
		/// <param name="requestBody">The raw content of the file to be uploaded</param>
		/// <returns>A successful response</returns>
		public async Task<CreditNotes_CreditNoteIDAttachments_FileNamePostReturn> CreditNotes_CreditNoteIDAttachments_FileNamePostAsync(string FileName, string CreditNoteID, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CreditNotes/"+ (CreditNoteID==null? "" : System.Uri.EscapeDataString(CreditNoteID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditNotes_CreditNoteIDAttachments_FileNamePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the currencies the organisation is subscribed to
		/// CurrenciesGetByWhereAndOrder Currencies
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <returns>A successful response</returns>
		public async Task<CurrenciesGetByWhereAndOrderReturn> CurrenciesGetByWhereAndOrderAsync(string @where, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Currencies?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CurrenciesGetByWhereAndOrderReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add currencies to the organisation
		/// CurrenciesPutBySummarizeErrors Currencies
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<CurrenciesPutBySummarizeErrorsReturn> CurrenciesPutBySummarizeErrorsAsync(bool summarizeErrors, Currency requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Currencies?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CurrenciesPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of employees
		/// EmployeesGetByWhereAndOrder Employees
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <returns>A successful response</returns>
		public async Task<EmployeesGetByWhereAndOrderReturn> EmployeesGetByWhereAndOrderAsync(string @where, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employees?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EmployeesGetByWhereAndOrderReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create employees
		/// EmployeesPutBySummarizeErrors Employees
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<EmployeesPutBySummarizeErrorsReturn> EmployeesPutBySummarizeErrorsAsync(bool summarizeErrors, Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employees?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EmployeesPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update employees
		/// EmployeesPostBySummarizeErrors Employees
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<EmployeesPostBySummarizeErrorsReturn> EmployeesPostBySummarizeErrorsAsync(bool summarizeErrors, Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employees?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EmployeesPostBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual employee
		/// Employees_EmployeeIDGet Employees/{EmployeeID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Employees_EmployeeIDGetReturn> Employees_EmployeeIDGetAsync(string EmployeeID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employees/"+ (EmployeeID==null? "" : System.Uri.EscapeDataString(EmployeeID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Employees_EmployeeIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an employee
		/// Employees_EmployeeIDPost Employees/{EmployeeID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Employees_EmployeeIDPostReturn> Employees_EmployeeIDPostAsync(string EmployeeID, Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employees/"+ (EmployeeID==null? "" : System.Uri.EscapeDataString(EmployeeID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Employees_EmployeeIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of expense claims
		/// ExpenseClaimsGetByWhereAndOrder ExpenseClaims
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <returns>A successful response</returns>
		public async Task<ExpenseClaimsGetByWhereAndOrderReturn> ExpenseClaimsGetByWhereAndOrderAsync(string @where, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ExpenseClaims?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExpenseClaimsGetByWhereAndOrderReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an expense claim
		/// ExpenseClaimsPutBySummarizeErrors ExpenseClaims
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ExpenseClaimsPutBySummarizeErrorsReturn> ExpenseClaimsPutBySummarizeErrorsAsync(bool summarizeErrors, ExpenseClaim requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ExpenseClaims?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExpenseClaimsPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an expense claim
		/// ExpenseClaimsPostBySummarizeErrors ExpenseClaims
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ExpenseClaimsPostBySummarizeErrorsReturn> ExpenseClaimsPostBySummarizeErrorsAsync(bool summarizeErrors, ExpenseClaim requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ExpenseClaims?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExpenseClaimsPostBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual expense claim
		/// ExpenseClaims_ExpenseClaimIDGet ExpenseClaims/{ExpenseClaimID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<ExpenseClaims_ExpenseClaimIDGetReturn> ExpenseClaims_ExpenseClaimIDGetAsync(string ExpenseClaimID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExpenseClaims_ExpenseClaimIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an expense claim
		/// ExpenseClaims_ExpenseClaimIDPost ExpenseClaims/{ExpenseClaimID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<ExpenseClaims_ExpenseClaimIDPostReturn> ExpenseClaims_ExpenseClaimIDPostAsync(string ExpenseClaimID, ExpenseClaim requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ExpenseClaims/"+ (ExpenseClaimID==null? "" : System.Uri.EscapeDataString(ExpenseClaimID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExpenseClaims_ExpenseClaimIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of invoices (sales invoices and bills)
		/// InvoicesGetByWhereAndOrderAndUnitdpAndIDsAndContactIDsAndStatusesAndInvoiceNumbers Invoices
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="IDs">Filter by a comma-separated list of InvoiceIDs</param>
		/// <param name="ContactIDs">Filter by a comma-separated list of ContactIDs</param>
		/// <param name="Statuses">Filter by a comma-separated list of Statuses</param>
		/// <param name="InvoiceNumbers">Filter by a comma-separated list of InvoiceNumbers</param>
		/// <returns>A successful response</returns>
		public async Task<InvoicesGetByWhereAndOrderAndUnitdpAndIDsAndContactIDsAndStatusesAndInvoiceNumbersReturn> InvoicesGetByWhereAndOrderAndUnitdpAndIDsAndContactIDsAndStatusesAndInvoiceNumbersAsync(string @where, string order, int unitdp, string IDs, string ContactIDs, string Statuses, string InvoiceNumbers, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Invoices?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&unitdp="+unitdp+"&IDs=" + (IDs==null? "" : System.Uri.EscapeDataString(IDs))+"&ContactIDs=" + (ContactIDs==null? "" : System.Uri.EscapeDataString(ContactIDs))+"&Statuses=" + (Statuses==null? "" : System.Uri.EscapeDataString(Statuses))+"&InvoiceNumbers=" + (InvoiceNumbers==null? "" : System.Uri.EscapeDataString(InvoiceNumbers));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InvoicesGetByWhereAndOrderAndUnitdpAndIDsAndContactIDsAndStatusesAndInvoiceNumbersReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an Invoice (sales invoices or bills)
		/// InvoicesPutByUnitdpAndSummarizeErrors Invoices
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<InvoicesPutByUnitdpAndSummarizeErrorsReturn> InvoicesPutByUnitdpAndSummarizeErrorsAsync(int unitdp, bool summarizeErrors, Invoice requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Invoices?unitdp="+unitdp+"&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InvoicesPutByUnitdpAndSummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Invoice (sales invoices or bills)
		/// InvoicesPostByUnitdpAndSummarizeErrors Invoices
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<InvoicesPostByUnitdpAndSummarizeErrorsReturn> InvoicesPostByUnitdpAndSummarizeErrorsAsync(int unitdp, bool summarizeErrors, Invoice requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Invoices?unitdp="+unitdp+"&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InvoicesPostByUnitdpAndSummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an Invoice (sales invoice or bill)
		/// Invoices_InvoiceIDGetByUnitdp Invoices/{InvoiceID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<Invoices_InvoiceIDGetByUnitdpReturn> Invoices_InvoiceIDGetByUnitdpAsync(string InvoiceID, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Invoices_InvoiceIDGetByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an Invoice (sales invoice or bill)
		/// Invoices_InvoiceIDPostByUnitdp Invoices/{InvoiceID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<Invoices_InvoiceIDPostByUnitdpReturn> Invoices_InvoiceIDPostByUnitdpAsync(string InvoiceID, int unitdp, Invoice requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Invoices_InvoiceIDPostByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Attachments
		/// Retrieve Attachments
		/// Invoices_InvoiceIDAttachmentsGet Invoices/{InvoiceID}/Attachments
		/// </summary>
		/// <param name="InvoiceID">The Xero generated unique identifier for an Invoice</param>
		/// <returns>A successful response</returns>
		public async Task<Invoices_InvoiceIDAttachmentsGetReturn> Invoices_InvoiceIDAttachmentsGetAsync(string InvoiceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Attachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Invoices_InvoiceIDAttachmentsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// Invoices_InvoiceIDAttachments_FileNameGet Invoices/{InvoiceID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="InvoiceID">The Xero generated unique identifier for an Invoice</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task Invoices_InvoiceIDAttachments_FileNameGetAsync(string FileName, string InvoiceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload an Attachment
		/// Upload an Attachment
		/// Invoices_InvoiceIDAttachments_FileNamePost Invoices/{InvoiceID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment being uploaded</param>
		/// <param name="InvoiceID">The Xero generated unique identifier for an Invoice</param>
		/// <param name="requestBody">The raw content of the file to be uploaded</param>
		/// <returns>A successful response</returns>
		public async Task<Invoices_InvoiceIDAttachments_FileNamePostReturn> Invoices_InvoiceIDAttachments_FileNamePostAsync(string FileName, string InvoiceID, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Invoices_InvoiceIDAttachments_FileNamePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the URL to view the online invoice
		/// Invoices_InvoiceIDOnlineInvoiceGet Invoices/{InvoiceID}/OnlineInvoice
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Invoices_InvoiceIDOnlineInvoiceGetReturn> Invoices_InvoiceIDOnlineInvoiceGetAsync(string InvoiceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Invoices/"+ (InvoiceID==null? "" : System.Uri.EscapeDataString(InvoiceID))+"/OnlineInvoice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Invoices_InvoiceIDOnlineInvoiceGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of items
		/// ItemsGetByWhereAndOrderAndUnitdp Items
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<ItemsGetByWhereAndOrderAndUnitdpReturn> ItemsGetByWhereAndOrderAndUnitdpAsync(string @where, string order, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Items?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ItemsGetByWhereAndOrderAndUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an item
		/// ItemsPutByUnitdpAndSummarizeErrors Items
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ItemsPutByUnitdpAndSummarizeErrorsReturn> ItemsPutByUnitdpAndSummarizeErrorsAsync(int unitdp, bool summarizeErrors, Item requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Items?unitdp="+unitdp+"&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ItemsPutByUnitdpAndSummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an item
		/// ItemsPostByUnitdpAndSummarizeErrors Items
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ItemsPostByUnitdpAndSummarizeErrorsReturn> ItemsPostByUnitdpAndSummarizeErrorsAsync(int unitdp, bool summarizeErrors, Item requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Items?unitdp="+unitdp+"&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ItemsPostByUnitdpAndSummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an item
		/// Items_ItemIDGetByUnitdp Items/{ItemID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<Items_ItemIDGetByUnitdpReturn> Items_ItemIDGetByUnitdpAsync(string ItemID, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Items_ItemIDGetByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an item
		/// Items_ItemIDPostByUnitdp Items/{ItemID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<Items_ItemIDPostByUnitdpReturn> Items_ItemIDPostByUnitdpAsync(string ItemID, int unitdp, Item requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Items_ItemIDPostByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an item
		/// Items_ItemIDDelete Items/{ItemID}
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task Items_ItemIDDeleteAsync(string ItemID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Items/"+ (ItemID==null? "" : System.Uri.EscapeDataString(ItemID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of journals.
		/// JournalsGetByPaymentsOnlyAndOffset Journals
		/// </summary>
		/// <param name="paymentsOnly">Return results on a the cash basis</param>
		/// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned.</param>
		/// <returns>A successful response</returns>
		public async Task<JournalsGetByPaymentsOnlyAndOffsetReturn> JournalsGetByPaymentsOnlyAndOffsetAsync(bool paymentsOnly, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Journals?paymentsOnly="+paymentsOnly+"&offset="+offset;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<JournalsGetByPaymentsOnlyAndOffsetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual journal.
		/// Journals_JournalIDGet Journals/{JournalID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Journals_JournalIDGetReturn> Journals_JournalIDGetAsync(string JournalID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Journals/"+ (JournalID==null? "" : System.Uri.EscapeDataString(JournalID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Journals_JournalIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of linked transactions (billable expenses)
		/// LinkedTransactionsGetByPageAndSourceTransactionIDAndContactIDAndStatusAndTargetTransactionID LinkedTransactions
		/// </summary>
		/// <param name="page">Page number e.g. page=1. Page size is 100. When using the page parameter full resource details will be returned (including line items).</param>
		/// <param name="SourceTransactionID">Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice</param>
		/// <param name="ContactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer.</param>
		/// <param name="Status">Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.</param>
		/// <param name="TargetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice.</param>
		/// <returns>A successful response</returns>
		public async Task<LinkedTransactionsGetByPageAndSourceTransactionIDAndContactIDAndStatusAndTargetTransactionIDReturn> LinkedTransactionsGetByPageAndSourceTransactionIDAndContactIDAndStatusAndTargetTransactionIDAsync(int page, string SourceTransactionID, string ContactID, string Status, string TargetTransactionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "LinkedTransactions?page="+page+"&SourceTransactionID=" + (SourceTransactionID==null? "" : System.Uri.EscapeDataString(SourceTransactionID))+"&ContactID=" + (ContactID==null? "" : System.Uri.EscapeDataString(ContactID))+"&Status=" + (Status==null? "" : System.Uri.EscapeDataString(Status))+"&TargetTransactionID=" + (TargetTransactionID==null? "" : System.Uri.EscapeDataString(TargetTransactionID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LinkedTransactionsGetByPageAndSourceTransactionIDAndContactIDAndStatusAndTargetTransactionIDReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a linked transaction (billable expense)
		/// LinkedTransactionsPut LinkedTransactions
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<LinkedTransactionsPutReturn> LinkedTransactionsPutAsync(LinkedTransaction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "LinkedTransactions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LinkedTransactionsPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update a linked transaction (billable expense)
		/// LinkedTransactionsPost LinkedTransactions
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<LinkedTransactionsPostReturn> LinkedTransactionsPostAsync(LinkedTransaction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "LinkedTransactions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LinkedTransactionsPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a linked transaction (billable expense)
		/// LinkedTransactions_LinkedTransactionIDGet LinkedTransactions/{LinkedTransactionID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<LinkedTransactions_LinkedTransactionIDGetReturn> LinkedTransactions_LinkedTransactionIDGetAsync(string LinkedTransactionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "LinkedTransactions/"+ (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LinkedTransactions_LinkedTransactionIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a linked transaction (billable expense)
		/// LinkedTransactions_LinkedTransactionIDPost LinkedTransactions/{LinkedTransactionID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<LinkedTransactions_LinkedTransactionIDPostReturn> LinkedTransactions_LinkedTransactionIDPostAsync(string LinkedTransactionID, LinkedTransaction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "LinkedTransactions/"+ (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LinkedTransactions_LinkedTransactionIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a linked transaction (billable expense)
		/// LinkedTransactions_LinkedTransactionIDDelete LinkedTransactions/{LinkedTransactionID}
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task LinkedTransactions_LinkedTransactionIDDeleteAsync(string LinkedTransactionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "LinkedTransactions/"+ (LinkedTransactionID==null? "" : System.Uri.EscapeDataString(LinkedTransactionID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of manual journals
		/// ManualJournalsGetByWhereAndOrderAndPage ManualJournals
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <param name="page">Page number e.g. page=1. Page size is 100. When using the page parameter full resource details will be returned (including line items).</param>
		/// <returns>A successful response</returns>
		public async Task<ManualJournalsGetByWhereAndOrderAndPageReturn> ManualJournalsGetByWhereAndOrderAndPageAsync(string @where, string order, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ManualJournals?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManualJournalsGetByWhereAndOrderAndPageReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a manual journal
		/// ManualJournalsPutBySummarizeErrors ManualJournals
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ManualJournalsPutBySummarizeErrorsReturn> ManualJournalsPutBySummarizeErrorsAsync(bool summarizeErrors, ManualJournal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ManualJournals?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManualJournalsPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update a manual journal
		/// ManualJournalsPostBySummarizeErrors ManualJournals
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ManualJournalsPostBySummarizeErrorsReturn> ManualJournalsPostBySummarizeErrorsAsync(bool summarizeErrors, ManualJournal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ManualJournals?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManualJournalsPostBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual manual journal
		/// ManualJournals_ManualJournalIDGet ManualJournals/{ManualJournalID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<ManualJournals_ManualJournalIDGetReturn> ManualJournals_ManualJournalIDGetAsync(string ManualJournalID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManualJournals_ManualJournalIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a manual journal
		/// ManualJournals_ManualJournalIDPost ManualJournals/{ManualJournalID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<ManualJournals_ManualJournalIDPostReturn> ManualJournals_ManualJournalIDPostAsync(string ManualJournalID, ManualJournal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManualJournals_ManualJournalIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Attachments
		/// Retrieve Attachments
		/// ManualJournals_ManualJournalIDAttachmentsGet ManualJournals/{ManualJournalID}/Attachments
		/// </summary>
		/// <param name="ManualJournalID">The Xero generated unique identifier for a Manual Journal</param>
		/// <returns>A successful response</returns>
		public async Task<ManualJournals_ManualJournalIDAttachmentsGetReturn> ManualJournals_ManualJournalIDAttachmentsGetAsync(string ManualJournalID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID))+"/Attachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManualJournals_ManualJournalIDAttachmentsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// ManualJournals_ManualJournalIDAttachments_FileNameGet ManualJournals/{ManualJournalID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="ManualJournalID">The Xero generated unique identifier for a Manual Journal</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task ManualJournals_ManualJournalIDAttachments_FileNameGetAsync(string FileName, string ManualJournalID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload an Attachment
		/// Upload an Attachment
		/// ManualJournals_ManualJournalIDAttachments_FileNamePost ManualJournals/{ManualJournalID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment being uploaded</param>
		/// <param name="ManualJournalID">The Xero generated unique identifier for a Manual Journal</param>
		/// <param name="requestBody">The raw content of the file to be uploaded</param>
		/// <returns>A successful response</returns>
		public async Task<ManualJournals_ManualJournalIDAttachments_FileNamePostReturn> ManualJournals_ManualJournalIDAttachments_FileNamePostAsync(string FileName, string ManualJournalID, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ManualJournals/"+ (ManualJournalID==null? "" : System.Uri.EscapeDataString(ManualJournalID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManualJournals_ManualJournalIDAttachments_FileNamePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Organisation details
		/// OrganisationGet Organisation
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<OrganisationGetReturn> OrganisationGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Organisation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrganisationGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Organisation details
		/// Organisation_ShortCodeGet Organisation/{ShortCode}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Organisation_ShortCodeGetReturn> Organisation_ShortCodeGetAsync(string ShortCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Organisation/"+ (ShortCode==null? "" : System.Uri.EscapeDataString(ShortCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Organisation_ShortCodeGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of overpayments
		/// OverpaymentsGetByWhereAndOrderAndPageAndUnitdp Overpayments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <param name="page">Page number e.g. page=1. Page size is 100. When using the page parameter full resource details will be returned (including line items).</param>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<OverpaymentsGetByWhereAndOrderAndPageAndUnitdpReturn> OverpaymentsGetByWhereAndOrderAndPageAndUnitdpAsync(string @where, string order, int page, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Overpayments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OverpaymentsGetByWhereAndOrderAndPageAndUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an overpayment
		/// Overpayments_OverpaymentIDGetByUnitdp Overpayments/{OverpaymentID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<Overpayments_OverpaymentIDGetByUnitdpReturn> Overpayments_OverpaymentIDGetByUnitdpAsync(string OverpaymentID, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Overpayments_OverpaymentIDGetByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Allocate an overpayment
		/// Overpayments_OverpaymentIDAllocationsPut Overpayments/{OverpaymentID}/Allocations
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Overpayments_OverpaymentIDAllocationsPutReturn> Overpayments_OverpaymentIDAllocationsPutAsync(string OverpaymentID, Allocation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Overpayments/"+ (OverpaymentID==null? "" : System.Uri.EscapeDataString(OverpaymentID))+"/Allocations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Overpayments_OverpaymentIDAllocationsPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of payments for invoices, credit notes, prepayments and overpayments
		/// PaymentsGetByWhereAndOrder Payments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <returns>A successful response</returns>
		public async Task<PaymentsGetByWhereAndOrderReturn> PaymentsGetByWhereAndOrderAsync(string @where, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Payments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PaymentsGetByWhereAndOrderReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a payment
		/// PaymentsPutBySummarizeErrors Payments
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<PaymentsPutBySummarizeErrorsReturn> PaymentsPutBySummarizeErrorsAsync(bool summarizeErrors, Payment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Payments?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PaymentsPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a payment
		/// PaymentsPostBySummarizeErrors Payments
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<PaymentsPostBySummarizeErrorsReturn> PaymentsPostBySummarizeErrorsAsync(bool summarizeErrors, Payment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Payments?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PaymentsPostBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a payment
		/// Payments_PaymentIDGet Payments/{PaymentID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Payments_PaymentIDGetReturn> Payments_PaymentIDGetAsync(string PaymentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Payments_PaymentIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a payment's status to deleted
		/// Payments_PaymentIDPost Payments/{PaymentID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Payments_PaymentIDPostReturn> Payments_PaymentIDPostAsync(string PaymentID, Payment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Payments/"+ (PaymentID==null? "" : System.Uri.EscapeDataString(PaymentID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Payments_PaymentIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of prepayments
		/// PrepaymentsGetByWhereAndOrderAndPageAndUnitdp Prepayments
		/// </summary>
		/// <param name="where">Filter by an any element</param>
		/// <param name="order">Order by any element returned</param>
		/// <param name="page">Page number e.g. page=1. Page size is 100. When using the page parameter full resource details will be returned (including line items).</param>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<PrepaymentsGetByWhereAndOrderAndPageAndUnitdpReturn> PrepaymentsGetByWhereAndOrderAndPageAndUnitdpAsync(string @where, string order, int page, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Prepayments?where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PrepaymentsGetByWhereAndOrderAndPageAndUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual prepayment
		/// Prepayments_PrepaymentIDGetByUnitdp Prepayments/{PrepaymentID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<Prepayments_PrepaymentIDGetByUnitdpReturn> Prepayments_PrepaymentIDGetByUnitdpAsync(string PrepaymentID, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Prepayments_PrepaymentIDGetByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Allocate a prepayment
		/// Prepayments_PrepaymentIDAllocationsPut Prepayments/{PrepaymentID}/Allocations
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Prepayments_PrepaymentIDAllocationsPutReturn> Prepayments_PrepaymentIDAllocationsPutAsync(string PrepaymentID, Allocation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Prepayments/"+ (PrepaymentID==null? "" : System.Uri.EscapeDataString(PrepaymentID))+"/Allocations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Prepayments_PrepaymentIDAllocationsPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of purchase orders
		/// PurchaseOrdersGetByOrderAndPageAndDateFromAndDateToAndStatus PurchaseOrders
		/// </summary>
		/// <param name="order">Order by any element returned</param>
		/// <param name="page">Page number e.g. page=1. Page size is 100. When using the page parameter full resource details will be returned (including line items).</param>
		/// <returns>A successful response</returns>
		public async Task<PurchaseOrdersGetByOrderAndPageAndDateFromAndDateToAndStatusReturn> PurchaseOrdersGetByOrderAndPageAndDateFromAndDateToAndStatusAsync(string order, int page, System.DateOnly DateFrom, System.DateOnly DateTo, string Status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PurchaseOrders?order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&page="+page+"&DateFrom="+DateFrom+"&DateTo="+DateTo+"&Status=" + (Status==null? "" : System.Uri.EscapeDataString(Status));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PurchaseOrdersGetByOrderAndPageAndDateFromAndDateToAndStatusReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create purchase orders
		/// PurchaseOrdersPutBySummarizeErrors PurchaseOrders
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<PurchaseOrdersPutBySummarizeErrorsReturn> PurchaseOrdersPutBySummarizeErrorsAsync(bool summarizeErrors, PurchaseOrder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PurchaseOrders?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PurchaseOrdersPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create and update purchase orders
		/// PurchaseOrdersPostBySummarizeErrors PurchaseOrders
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<PurchaseOrdersPostBySummarizeErrorsReturn> PurchaseOrdersPostBySummarizeErrorsAsync(bool summarizeErrors, PurchaseOrder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PurchaseOrders?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PurchaseOrdersPostBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a single purchase order
		/// PurchaseOrders_PurchaseOrderIDGet PurchaseOrders/{PurchaseOrderID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<PurchaseOrders_PurchaseOrderIDGetReturn> PurchaseOrders_PurchaseOrderIDGetAsync(string PurchaseOrderID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PurchaseOrders_PurchaseOrderIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a purchase order
		/// PurchaseOrders_PurchaseOrderIDPost PurchaseOrders/{PurchaseOrderID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<PurchaseOrders_PurchaseOrderIDPostReturn> PurchaseOrders_PurchaseOrderIDPostAsync(string PurchaseOrderID, PurchaseOrder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PurchaseOrders_PurchaseOrderIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Attachments
		/// Retrieve Attachments
		/// PurchaseOrders_PurchaseOrderIDAttachmentsGet PurchaseOrders/{PurchaseOrderID}/Attachments
		/// </summary>
		/// <param name="PurchaseOrderID">The Xero generated unique identifier for a purchase order</param>
		/// <returns>A successful response</returns>
		public async Task<PurchaseOrders_PurchaseOrderIDAttachmentsGetReturn> PurchaseOrders_PurchaseOrderIDAttachmentsGetAsync(string PurchaseOrderID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID))+"/Attachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PurchaseOrders_PurchaseOrderIDAttachmentsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// PurchaseOrders_PurchaseOrderIDAttachments_FileNameGet PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="PurchaseOrderID">The Xero generated unique identifier for a purchase order</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task PurchaseOrders_PurchaseOrderIDAttachments_FileNameGetAsync(string FileName, string PurchaseOrderID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload an Attachment
		/// Upload an Attachment
		/// PurchaseOrders_PurchaseOrderIDAttachments_FileNamePost PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment being uploaded</param>
		/// <param name="PurchaseOrderID">The Xero generated unique identifier for a purchase order</param>
		/// <param name="requestBody">The raw content of the file to be uploaded</param>
		/// <returns>A successful response</returns>
		public async Task<PurchaseOrders_PurchaseOrderIDAttachments_FileNamePostReturn> PurchaseOrders_PurchaseOrderIDAttachments_FileNamePostAsync(string FileName, string PurchaseOrderID, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PurchaseOrders/"+ (PurchaseOrderID==null? "" : System.Uri.EscapeDataString(PurchaseOrderID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PurchaseOrders_PurchaseOrderIDAttachments_FileNamePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of draft receipts
		/// ReceiptsGetByOrderAndWhereAndUnitdp Receipts
		/// </summary>
		/// <param name="order">Order by any element returned</param>
		/// <param name="where">Filter by an any element</param>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<ReceiptsGetByOrderAndWhereAndUnitdpReturn> ReceiptsGetByOrderAndWhereAndUnitdpAsync(string order, string @where, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Receipts?order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReceiptsGetByOrderAndWhereAndUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a receipt
		/// ReceiptsPutByUnitdpAndSummarizeErrors Receipts
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ReceiptsPutByUnitdpAndSummarizeErrorsReturn> ReceiptsPutByUnitdpAndSummarizeErrorsAsync(int unitdp, bool summarizeErrors, Receipt requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Receipts?unitdp="+unitdp+"&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReceiptsPutByUnitdpAndSummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update a receipt
		/// ReceiptsPostByUnitdpAndSummarizeErrors Receipts
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<ReceiptsPostByUnitdpAndSummarizeErrorsReturn> ReceiptsPostByUnitdpAndSummarizeErrorsAsync(int unitdp, bool summarizeErrors, Receipt requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Receipts?unitdp="+unitdp+"&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReceiptsPostByUnitdpAndSummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual receipt
		/// Receipts_ReceiptIDGetByUnitdp Receipts/{ReceiptID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<Receipts_ReceiptIDGetByUnitdpReturn> Receipts_ReceiptIDGetByUnitdpAsync(string ReceiptID, int unitdp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Receipts_ReceiptIDGetByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a receipt
		/// Receipts_ReceiptIDPostByUnitdp Receipts/{ReceiptID}
		/// </summary>
		/// <param name="unitdp">Determines the decimal places accepted/returned on the UnitAmount. UnitAmount is 2 decimal places by default but can be increased to 4 decimal places by supplying the unitdp=4 parameter.</param>
		/// <returns>A successful response</returns>
		public async Task<Receipts_ReceiptIDPostByUnitdpReturn> Receipts_ReceiptIDPostByUnitdpAsync(string ReceiptID, int unitdp, Receipt requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"&unitdp="+unitdp;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Receipts_ReceiptIDPostByUnitdpReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Attachments
		/// Retrieve Attachments
		/// Receipts_ReceiptIDAttachmentsGet Receipts/{ReceiptID}/Attachments
		/// </summary>
		/// <param name="ReceiptID">The Xero generated unique identifier for a Receipt</param>
		/// <returns>A successful response</returns>
		public async Task<Receipts_ReceiptIDAttachmentsGetReturn> Receipts_ReceiptIDAttachmentsGetAsync(string ReceiptID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/Attachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Receipts_ReceiptIDAttachmentsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// Receipts_ReceiptIDAttachments_FileNameGet Receipts/{ReceiptID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="ReceiptID">The Xero generated unique identifier for a Receipt</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task Receipts_ReceiptIDAttachments_FileNameGetAsync(string FileName, string ReceiptID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload an Attachment
		/// Upload an Attachment
		/// Receipts_ReceiptIDAttachments_FileNamePost Receipts/{ReceiptID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment being uploaded</param>
		/// <param name="ReceiptID">The Xero generated unique identifier for a Receipt</param>
		/// <param name="requestBody">The raw content of the file to be uploaded</param>
		/// <returns>A successful response</returns>
		public async Task<Receipts_ReceiptIDAttachments_FileNamePostReturn> Receipts_ReceiptIDAttachments_FileNamePostAsync(string FileName, string ReceiptID, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Receipts/"+ (ReceiptID==null? "" : System.Uri.EscapeDataString(ReceiptID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Receipts_ReceiptIDAttachments_FileNamePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of repeating invoice templates
		/// RepeatingInvoicesGetByOrderAndWhere RepeatingInvoices
		/// </summary>
		/// <param name="order">Order by any element returned</param>
		/// <param name="where">Filter by an any element</param>
		/// <returns>A successful response</returns>
		public async Task<RepeatingInvoicesGetByOrderAndWhereReturn> RepeatingInvoicesGetByOrderAndWhereAsync(string order, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RepeatingInvoices?order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RepeatingInvoicesGetByOrderAndWhereReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual repeating invoice template
		/// RepeatingInvoices_RepeatingInvoiceIDGet RepeatingInvoices/{RepeatingInvoiceID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<RepeatingInvoices_RepeatingInvoiceIDGetReturn> RepeatingInvoices_RepeatingInvoiceIDGetAsync(string RepeatingInvoiceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RepeatingInvoices_RepeatingInvoiceIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve Attachments
		/// Retrieve Attachments
		/// RepeatingInvoices_RepeatingInvoiceIDAttachmentsGet RepeatingInvoices/{RepeatingInvoiceID}/Attachments
		/// </summary>
		/// <param name="RepeatingInvoiceID">The Xero generated unique identifier for a RepeatingInvoice</param>
		/// <returns>A successful response</returns>
		public async Task<RepeatingInvoices_RepeatingInvoiceIDAttachmentsGetReturn> RepeatingInvoices_RepeatingInvoiceIDAttachmentsGetAsync(string RepeatingInvoiceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/Attachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RepeatingInvoices_RepeatingInvoiceIDAttachmentsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download an Attachment
		/// Download an Attachment
		/// RepeatingInvoices_RepeatingInvoiceIDAttachments_FileNameGet RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}
		/// </summary>
		/// <param name="FileName">The filename of the attachment to be downloaded</param>
		/// <param name="RepeatingInvoiceID">The Xero generated unique identifier for a RepeatingInvoice</param>
		/// <returns>Successful response. The response message will contain the raw file content that was originally uploaded. The response won’t contain any xml or json encoded information</returns>
		public async Task RepeatingInvoices_RepeatingInvoiceIDAttachments_FileNameGetAsync(string FileName, string RepeatingInvoiceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RepeatingInvoices/"+ (RepeatingInvoiceID==null? "" : System.Uri.EscapeDataString(RepeatingInvoiceID))+"/Attachments/"+ (FileName==null? "" : System.Uri.EscapeDataString(FileName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a list of published GST reports (NZ) or BAS reports (AU)
		/// ReportsGet Reports
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<ReportsGetReturn> ReportsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an Aged Payables report for a contact
		/// ReportsAgedPayablesByContactGetByContactIDAndDateAndFromDateAndToDate Reports/AgedPayablesByContact
		/// </summary>
		/// <param name="contactID">ContactID for the contact you're running the report for</param>
		/// <param name="date">Shows payments up to this date e.g. 2014-04-30. Defaults to end of the current month</param>
		/// <param name="fromDate">Show all payable invoices from this date for contact</param>
		/// <param name="toDate">Show all payable invoices to this date for the contact</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsAgedPayablesByContactGetByContactIDAndDateAndFromDateAndToDateReturn> ReportsAgedPayablesByContactGetByContactIDAndDateAndFromDateAndToDateAsync(string contactID, string date, string fromDate, string toDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/AgedPayablesByContact?contactID=" + (contactID==null? "" : System.Uri.EscapeDataString(contactID))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsAgedPayablesByContactGetByContactIDAndDateAndFromDateAndToDateReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an Aged Receivables report for a contact
		/// ReportsAgedReceivablesByContactGetByContactIDAndDateAndFromDateAndToDate Reports/AgedReceivablesByContact
		/// </summary>
		/// <param name="contactID">ContactID for the contact you're running the report for</param>
		/// <param name="date">Shows payments up to this date e.g. 2014-04-30. Defaults to end of the current month</param>
		/// <param name="fromDate">Show all receivable invoices from this date for contact</param>
		/// <param name="toDate">Show all receivable invoices to this date for the contact</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsAgedReceivablesByContactGetByContactIDAndDateAndFromDateAndToDateReturn> ReportsAgedReceivablesByContactGetByContactIDAndDateAndFromDateAndToDateAsync(string contactID, string date, string fromDate, string toDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/AgedReceivablesByContact?contactID=" + (contactID==null? "" : System.Uri.EscapeDataString(contactID))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsAgedReceivablesByContactGetByContactIDAndDateAndFromDateAndToDateReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a Balance Sheet Report
		/// ReportsBalanceSheetGetByDateAndTrackingOptionID1AndTrackingOptionID2AndStandardLayoutAndPaymentsOnly Reports/BalanceSheet
		/// </summary>
		/// <param name="date">YYYY-MM-DD</param>
		/// <param name="trackingOptionID1">Run the balance sheet for a specific tracking option</param>
		/// <param name="trackingOptionID2">Run the balance sheet for a combination of two tracking options</param>
		/// <param name="standardLayout">If set to true no custom report layouts will be applied to response</param>
		/// <param name="paymentsOnly">Set this to true to get cash transactions only</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsBalanceSheetGetByDateAndTrackingOptionID1AndTrackingOptionID2AndStandardLayoutAndPaymentsOnlyReturn> ReportsBalanceSheetGetByDateAndTrackingOptionID1AndTrackingOptionID2AndStandardLayoutAndPaymentsOnlyAsync(System.DateOnly date, string trackingOptionID1, string trackingOptionID2, bool standardLayout, bool paymentsOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/BalanceSheet?date="+date+"&trackingOptionID1=" + (trackingOptionID1==null? "" : System.Uri.EscapeDataString(trackingOptionID1))+"&trackingOptionID2=" + (trackingOptionID2==null? "" : System.Uri.EscapeDataString(trackingOptionID2))+"&standardLayout="+standardLayout+"&paymentsOnly="+paymentsOnly;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsBalanceSheetGetByDateAndTrackingOptionID1AndTrackingOptionID2AndStandardLayoutAndPaymentsOnlyReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a bank statement report
		/// ReportsBankStatementGetByBankAccountIDAndFromDateAndToDate Reports/BankStatement
		/// </summary>
		/// <param name="bankAccountID">bankAccountID e.g. 5040915e-8ce7-4177-8d08-fde416232f18</param>
		/// <param name="fromDate">YYYY-MM-DD</param>
		/// <param name="toDate">YYYY-MM-DD</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsBankStatementGetByBankAccountIDAndFromDateAndToDateReturn> ReportsBankStatementGetByBankAccountIDAndFromDateAndToDateAsync(string bankAccountID, string fromDate, string toDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/BankStatement?bankAccountID=" + (bankAccountID==null? "" : System.Uri.EscapeDataString(bankAccountID))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsBankStatementGetByBankAccountIDAndFromDateAndToDateReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a bank summary report
		/// ReportsBankSummaryGetByFromDateAndToDate Reports/BankSummary
		/// </summary>
		/// <param name="fromDate">YYYY-MM-DD</param>
		/// <param name="toDate">YYYY-MM-DD</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsBankSummaryGetByFromDateAndToDateReturn> ReportsBankSummaryGetByFromDateAndToDateAsync(string fromDate, string toDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/BankSummary?fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsBankSummaryGetByFromDateAndToDateReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a budget summary report
		/// ReportsBudgetSummaryGetByDateAndPeriodsAndTimeframe Reports/BudgetSummary
		/// </summary>
		/// <param name="date">YYYY-MM-DD</param>
		/// <param name="periods">The number of periods to compare (integer between 1 and 12)</param>
		/// <param name="timeframe">The period size to compare to (1=month, 3=quarter, 12=year)</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsBudgetSummaryGetByDateAndPeriodsAndTimeframeReturn> ReportsBudgetSummaryGetByDateAndPeriodsAndTimeframeAsync(string date, int periods, int timeframe, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/BudgetSummary?date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&periods="+periods+"&timeframe="+timeframe;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsBudgetSummaryGetByDateAndPeriodsAndTimeframeReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an executive summary report
		/// ReportsExecutiveSummaryGetByDate Reports/ExecutiveSummary
		/// </summary>
		/// <param name="date">YYYY-MM-DD</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsExecutiveSummaryGetByDateReturn> ReportsExecutiveSummaryGetByDateAsync(string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/ExecutiveSummary?date=" + (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsExecutiveSummaryGetByDateReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a profit and loss report
		/// ReportsProfitAndLossGetByFromDateAndToDateAndTrackingCategoryIDAndTrackingOptionIDAndTrackingCategoryID2AndTrackingOptionID2AndStandardLayoutAndPaymentsOnly Reports/ProfitAndLoss
		/// </summary>
		/// <param name="fromDate">YYYY-MM-DD</param>
		/// <param name="toDate">YYYY-MM-DD</param>
		/// <param name="trackingCategoryID">If you specify the trackingCategoryID parameter then the Profit and Loss Report will show figures for each of the options in the category as separate columns. See the Profit and Loss Report in Xero to learn more about this behavior when filtering by a tracking category.</param>
		/// <param name="trackingOptionID">If you specify this parameter in addition to the trackingCategoryID then just one option will be returned (i.e. 1 column only)</param>
		/// <param name="trackingCategoryID2">If you specify a second trackingCategoryID parameter then the Profit and Loss Report will show figures for each combination of options from the two categories as separate columns. See the Profit and Loss Report in Xero to learn more about this behaviour when filtering by two tracking categories.</param>
		/// <param name="trackingOptionID2">If you specify this parameter in addition to a second trackingCategoryID then just one option will be returned combined with the option/s from the first tracking category</param>
		/// <param name="standardLayout">If you set this parameter to "true" then no custom report layouts will be applied to response</param>
		/// <param name="paymentsOnly">Set this to true to get cash transactions only</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsProfitAndLossGetByFromDateAndToDateAndTrackingCategoryIDAndTrackingOptionIDAndTrackingCategoryID2AndTrackingOptionID2AndStandardLayoutAndPaymentsOnlyReturn> ReportsProfitAndLossGetByFromDateAndToDateAndTrackingCategoryIDAndTrackingOptionIDAndTrackingCategoryID2AndTrackingOptionID2AndStandardLayoutAndPaymentsOnlyAsync(string fromDate, string toDate, string trackingCategoryID, string trackingOptionID, string trackingCategoryID2, string trackingOptionID2, bool standardLayout, string paymentsOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/ProfitAndLoss?fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&trackingCategoryID=" + (trackingCategoryID==null? "" : System.Uri.EscapeDataString(trackingCategoryID))+"&trackingOptionID=" + (trackingOptionID==null? "" : System.Uri.EscapeDataString(trackingOptionID))+"&trackingCategoryID2=" + (trackingCategoryID2==null? "" : System.Uri.EscapeDataString(trackingCategoryID2))+"&trackingOptionID2=" + (trackingOptionID2==null? "" : System.Uri.EscapeDataString(trackingOptionID2))+"&standardLayout="+standardLayout+"&paymentsOnly=" + (paymentsOnly==null? "" : System.Uri.EscapeDataString(paymentsOnly));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsProfitAndLossGetByFromDateAndToDateAndTrackingCategoryIDAndTrackingOptionIDAndTrackingCategoryID2AndTrackingOptionID2AndStandardLayoutAndPaymentsOnlyReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a 1099 Report (US only)
		/// ReportsTenNinetyNineGetByReportYear Reports/TenNinetyNine
		/// </summary>
		/// <param name="reportYear">Year of the report e.g. 2013</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsTenNinetyNineGetByReportYearReturn> ReportsTenNinetyNineGetByReportYearAsync(string reportYear, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/TenNinetyNine?reportYear=" + (reportYear==null? "" : System.Uri.EscapeDataString(reportYear));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsTenNinetyNineGetByReportYearReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a Trial Balance Report
		/// ReportsTrialBalanceGetByDateAndPaymentsOnly Reports/TrialBalance
		/// </summary>
		/// <param name="Date">YYYY-MM-DD</param>
		/// <param name="paymentsOnly">Set this to true to get cash transactions only</param>
		/// <returns>A successful response</returns>
		public async Task<ReportsTrialBalanceGetByDateAndPaymentsOnlyReturn> ReportsTrialBalanceGetByDateAndPaymentsOnlyAsync(string Date, string paymentsOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/TrialBalance?Date=" + (Date==null? "" : System.Uri.EscapeDataString(Date))+"&paymentsOnly=" + (paymentsOnly==null? "" : System.Uri.EscapeDataString(paymentsOnly));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportsTrialBalanceGetByDateAndPaymentsOnlyReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual BAS Report (AU) or GST Report (NZ)
		/// Reports_ReportIDGet Reports/{ReportID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Reports_ReportIDGetReturn> Reports_ReportIDGetAsync(string ReportID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports/"+ (ReportID==null? "" : System.Uri.EscapeDataString(ReportID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Reports_ReportIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of tax rates
		/// TaxRatesGetByOrderAndWhere TaxRates
		/// </summary>
		/// <param name="order">Order by any element returned</param>
		/// <param name="where">Filter by an any element</param>
		/// <returns>A successful response</returns>
		public async Task<TaxRatesGetByOrderAndWhereReturn> TaxRatesGetByOrderAndWhereAsync(string order, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TaxRates?order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaxRatesGetByOrderAndWhereReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create tax rates
		/// TaxRatesPutBySummarizeErrors TaxRates
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<TaxRatesPutBySummarizeErrorsReturn> TaxRatesPutBySummarizeErrorsAsync(bool summarizeErrors, TaxRate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TaxRates?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaxRatesPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update tax rates
		/// TaxRatesPostBySummarizeErrors TaxRates
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<TaxRatesPostBySummarizeErrorsReturn> TaxRatesPostBySummarizeErrorsAsync(bool summarizeErrors, TaxRate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TaxRates?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaxRatesPostBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of tracking categories and options
		/// TrackingCategoriesGetByOrderAndWhereAndIncludeArchived TrackingCategories
		/// </summary>
		/// <param name="order">Order by any element returned</param>
		/// <param name="where">Filter by an any element</param>
		/// <param name="includeArchived">Include archived records in the response </param>
		/// <returns>A successful response</returns>
		public async Task<TrackingCategoriesGetByOrderAndWhereAndIncludeArchivedReturn> TrackingCategoriesGetByOrderAndWhereAndIncludeArchivedAsync(string order, string @where, bool includeArchived, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TrackingCategories?order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where))+"&includeArchived="+includeArchived;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TrackingCategoriesGetByOrderAndWhereAndIncludeArchivedReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a tracking category
		/// TrackingCategoriesPutBySummarizeErrors TrackingCategories
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<TrackingCategoriesPutBySummarizeErrorsReturn> TrackingCategoriesPutBySummarizeErrorsAsync(bool summarizeErrors, TrackingCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TrackingCategories?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TrackingCategoriesPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a tracking category
		/// TrackingCategoriesPostBySummarizeErrors TrackingCategories
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<TrackingCategoriesPostBySummarizeErrorsReturn> TrackingCategoriesPostBySummarizeErrorsAsync(bool summarizeErrors, TrackingCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TrackingCategories?summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TrackingCategoriesPostBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a tracking category and it's options
		/// TrackingCategories_TrackingCategoryIDGet TrackingCategories/{TrackingCategoryID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<TrackingCategories_TrackingCategoryIDGetReturn> TrackingCategories_TrackingCategoryIDGetAsync(string TrackingCategoryID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TrackingCategories_TrackingCategoryIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update a tracking category
		/// TrackingCategories_TrackingCategoryIDPost TrackingCategories/{TrackingCategoryID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<TrackingCategories_TrackingCategoryIDPostReturn> TrackingCategories_TrackingCategoryIDPostAsync(string TrackingCategoryID, TrackingCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TrackingCategories_TrackingCategoryIDPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Tracking Category
		/// TrackingCategories_TrackingCategoryIDDelete TrackingCategories/{TrackingCategoryID}
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task TrackingCategories_TrackingCategoryIDDeleteAsync(string TrackingCategoryID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add options to a tracking category
		/// TrackingCategories_TrackingCategoryIDOptionsPutBySummarizeErrors TrackingCategories/{TrackingCategoryID}/Options
		/// </summary>
		/// <param name="summarizeErrors">If you plan to submit more than one entity per API call, we recommend that you append the summarizeErrors=false querystring to your API call. This ensures that every entity is returned back to you, each having their own status attribute.</param>
		/// <returns>A successful response</returns>
		public async Task<TrackingCategories_TrackingCategoryIDOptionsPutBySummarizeErrorsReturn> TrackingCategories_TrackingCategoryIDOptionsPutBySummarizeErrorsAsync(string TrackingCategoryID, bool summarizeErrors, TrackingOption requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID))+"/Options&summarizeErrors="+summarizeErrors;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TrackingCategories_TrackingCategoryIDOptionsPutBySummarizeErrorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an option from a tracking category
		/// TrackingCategories_TrackingCategoryIDOptions_TrackingOptionIDDelete TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}
		/// </summary>
		/// <returns>A successful request</returns>
		public async Task TrackingCategories_TrackingCategoryIDOptions_TrackingOptionIDDeleteAsync(string TrackingCategoryID, string TrackingOptionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TrackingCategories/"+ (TrackingCategoryID==null? "" : System.Uri.EscapeDataString(TrackingCategoryID))+"/Options/"+ (TrackingOptionID==null? "" : System.Uri.EscapeDataString(TrackingOptionID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a collection of Users
		/// UsersGetByOrderAndWhere Users
		/// </summary>
		/// <param name="order">Order by any element returned</param>
		/// <param name="where">Filter by an any element</param>
		/// <returns>A successful response</returns>
		public async Task<UsersGetByOrderAndWhereReturn> UsersGetByOrderAndWhereAsync(string order, string @where, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Users?order=" + (order==null? "" : System.Uri.EscapeDataString(order))+"&where=" + (where==null? "" : System.Uri.EscapeDataString(where));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UsersGetByOrderAndWhereReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an individual User
		/// Users_UserIDGet Users/{UserID}
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<Users_UserIDGetReturn> Users_UserIDGetAsync(string UserID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Users/"+ (UserID==null? "" : System.Uri.EscapeDataString(UserID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Users_UserIDGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class AccountsGetByWhereAndOrderReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class AccountsPutReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class AccountsPostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Accounts_AccountIDGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Accounts_AccountIDPostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Accounts_AccountIDAttachmentsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Accounts_AccountIDAttachments_FileNamePostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransactionsGetByWhereAndOrderAndUnitdpReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BankTransaction[] BankTransactions { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransactionsPutBySummarizeErrorsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BankTransaction[] BankTransactions { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransactionsPostByUnitdpAndSummarizeErrorsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BankTransaction[] BankTransactions { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransactions_BankTransactionIDGetByUnitdpReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BankTransaction[] BankTransactions { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransactions_BankTransactionIDPostByUnitdpReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BankTransaction[] BankTransactions { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransactions_BankTransactionIDAttachmentsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransactions_BankTransactionIDAttachments_FileNamePostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransfersGetByWhereAndOrderReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BankTransfer[] BankTransfers { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransfersPutBySummarizeErrorsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BankTransfer[] BankTransfers { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransfers_BankTransferIDGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BankTransfer[] BankTransfers { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BankTransfers_BankTransferIDAttachments_FileNamePostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BrandingThemesGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BrandingTheme[] BrandingThemes { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class BrandingThemes_BrandingThemeIDGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BrandingTheme[] BrandingThemes { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ContactGroupsGetByWhereAndOrderReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactGroup[] ContactGroups { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ContactGroupsPutBySummarizeErrorsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactGroup[] ContactGroups { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ContactGroupsPostBySummarizeErrorsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactGroup[] ContactGroups { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ContactGroups_ContactGroupIDGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactGroup[] ContactGroups { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ContactGroups_ContactGroupIDPostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactGroup[] ContactGroups { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ContactGroups_ContactGroupIDContactsPutReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactGroup[] ContactGroups { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ContactsGetByWhereAndOrderAndIncludeArchivedAndIDsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Contact[] Contacts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ContactsPutReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Contact[] Contacts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ContactsPostBySummarizeErrorsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Contact[] Contacts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Contacts_ContactIDGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Contact[] Contacts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Contacts_ContactIDPostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Contact[] Contacts { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Contacts_ContactIDAttachmentsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Contacts_ContactIDAttachments_FileNamePostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CreditNotesGetByWhereAndOrderAndUnitdpAndPageReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNote[] CreditNotes { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CreditNotesPutByUnitdpAndSummarizeErrorsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNote[] CreditNotes { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CreditNotesPostByUnitdpAndSummarizeErrorsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNote[] CreditNotes { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CreditNotes_CreditNoteIDGetByUnitdpReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNote[] CreditNotes { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CreditNotes_CreditNoteIDPostByUnitdpReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNote[] CreditNotes { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CreditNotes_CreditNoteIDAllocationsPutReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNote[] CreditNotes { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CreditNotes_CreditNoteIDAttachmentsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CreditNotes_CreditNoteIDAttachments_FileNamePostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CurrenciesGetByWhereAndOrderReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Currency[] Currencies { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class CurrenciesPutBySummarizeErrorsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Currency[] Currencies { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class EmployeesGetByWhereAndOrderReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Employee[] Employees { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class EmployeesPutBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Employee[] Employees { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class EmployeesPostBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Employee[] Employees { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Employees_EmployeeIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Employee[] Employees { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Employees_EmployeeIDPostReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Employee[] Employees { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ExpenseClaimsGetByWhereAndOrderReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseClaim[] ExpenseClaims { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ExpenseClaimsPutBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseClaim[] ExpenseClaims { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ExpenseClaimsPostBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseClaim[] ExpenseClaims { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ExpenseClaims_ExpenseClaimIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseClaim[] ExpenseClaims { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ExpenseClaims_ExpenseClaimIDPostReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseClaim[] ExpenseClaims { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class InvoicesGetByWhereAndOrderAndUnitdpAndIDsAndContactIDsAndStatusesAndInvoiceNumbersReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Invoice[] Invoices { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class InvoicesPutByUnitdpAndSummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Invoice[] Invoices { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class InvoicesPostByUnitdpAndSummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Invoice[] Invoices { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Invoices_InvoiceIDGetByUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Invoice[] Invoices { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Invoices_InvoiceIDPostByUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Invoice[] Invoices { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Invoices_InvoiceIDAttachmentsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Invoices_InvoiceIDAttachments_FileNamePostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Invoices_InvoiceIDOnlineInvoiceGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnlineInvoice[] OnlineInvoices { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ItemsGetByWhereAndOrderAndUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ItemsPutByUnitdpAndSummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ItemsPostByUnitdpAndSummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Items_ItemIDGetByUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Items_ItemIDPostByUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class JournalsGetByPaymentsOnlyAndOffsetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Journal[] Journals { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Journals_JournalIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Journal[] Journals { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class LinkedTransactionsGetByPageAndSourceTransactionIDAndContactIDAndStatusAndTargetTransactionIDReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LinkedTransaction[] LinkedTransactions { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class LinkedTransactionsPutReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LinkedTransaction[] LinkedTransactions { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class LinkedTransactionsPostReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LinkedTransaction[] LinkedTransactions { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class LinkedTransactions_LinkedTransactionIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LinkedTransaction[] LinkedTransactions { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class LinkedTransactions_LinkedTransactionIDPostReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LinkedTransaction[] LinkedTransactions { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ManualJournalsGetByWhereAndOrderAndPageReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManualJournal[] ManualJournals { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ManualJournalsPutBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManualJournal[] ManualJournals { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ManualJournalsPostBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManualJournal[] ManualJournals { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ManualJournals_ManualJournalIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManualJournal[] ManualJournals { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ManualJournals_ManualJournalIDPostReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManualJournal[] ManualJournals { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ManualJournals_ManualJournalIDAttachmentsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ManualJournals_ManualJournalIDAttachments_FileNamePostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class OrganisationGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Organisation[] Organisations { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Organisation_ShortCodeGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Organisation[] Organisations { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class OverpaymentsGetByWhereAndOrderAndPageAndUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Overpayment[] Overpayments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Overpayments_OverpaymentIDGetByUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Overpayment[] Overpayments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Overpayments_OverpaymentIDAllocationsPutReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Overpayment[] Overpayments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PaymentsGetByWhereAndOrderReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Payment[] Payments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PaymentsPutBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Payment[] Payments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PaymentsPostBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Payment[] Payments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Payments_PaymentIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Payment[] Payments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Payments_PaymentIDPostReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Payment[] Payments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PrepaymentsGetByWhereAndOrderAndPageAndUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Prepayment[] Prepayments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Prepayments_PrepaymentIDGetByUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Prepayment[] Prepayments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Prepayments_PrepaymentIDAllocationsPutReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Prepayment[] Prepayments { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PurchaseOrdersGetByOrderAndPageAndDateFromAndDateToAndStatusReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchaseOrder[] PurchaseOrders { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PurchaseOrdersPutBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchaseOrder[] PurchaseOrders { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PurchaseOrdersPostBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchaseOrder[] PurchaseOrders { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PurchaseOrders_PurchaseOrderIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchaseOrder[] PurchaseOrders { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PurchaseOrders_PurchaseOrderIDPostReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchaseOrder[] PurchaseOrders { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PurchaseOrders_PurchaseOrderIDAttachmentsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class PurchaseOrders_PurchaseOrderIDAttachments_FileNamePostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReceiptsGetByOrderAndWhereAndUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Receipt[] Receipts { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReceiptsPutByUnitdpAndSummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Receipt[] Receipts { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReceiptsPostByUnitdpAndSummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Receipt[] Receipts { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Receipts_ReceiptIDGetByUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Receipt[] Receipts { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Receipts_ReceiptIDPostByUnitdpReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Receipt[] Receipts { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Receipts_ReceiptIDAttachmentsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Receipts_ReceiptIDAttachments_FileNamePostReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class RepeatingInvoicesGetByOrderAndWhereReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RepeatingInvoice[] RepeatingInvoices { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class RepeatingInvoices_RepeatingInvoiceIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RepeatingInvoice[] RepeatingInvoices { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class RepeatingInvoices_RepeatingInvoiceIDAttachmentsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportSummary[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsAgedPayablesByContactGetByContactIDAndDateAndFromDateAndToDateReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsAgedReceivablesByContactGetByContactIDAndDateAndFromDateAndToDateReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsBalanceSheetGetByDateAndTrackingOptionID1AndTrackingOptionID2AndStandardLayoutAndPaymentsOnlyReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsBankStatementGetByBankAccountIDAndFromDateAndToDateReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsBankSummaryGetByFromDateAndToDateReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsBudgetSummaryGetByDateAndPeriodsAndTimeframeReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsExecutiveSummaryGetByDateReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsProfitAndLossGetByFromDateAndToDateAndTrackingCategoryIDAndTrackingOptionIDAndTrackingCategoryID2AndTrackingOptionID2AndStandardLayoutAndPaymentsOnlyReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsTenNinetyNineGetByReportYearReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class ReportsTrialBalanceGetByDateAndPaymentsOnlyReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class Reports_ReportIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxReport[] Reports { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public class TaxRatesGetByOrderAndWhereReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxRate[] TaxRates { get; set; }
	}
	
	public class TaxRatesPutBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxRate[] TaxRates { get; set; }
	}
	
	public class TaxRatesPostBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxRate[] TaxRates { get; set; }
	}
	
	public class TrackingCategoriesGetByOrderAndWhereAndIncludeArchivedReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrackingCategory[] TrackingCategories { get; set; }
	}
	
	public class TrackingCategoriesPutBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrackingCategory[] TrackingCategories { get; set; }
	}
	
	public class TrackingCategoriesPostBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrackingCategory[] TrackingCategories { get; set; }
	}
	
	public class TrackingCategories_TrackingCategoryIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrackingCategory[] TrackingCategories { get; set; }
	}
	
	public class TrackingCategories_TrackingCategoryIDPostReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrackingCategory[] TrackingCategories { get; set; }
	}
	
	public class TrackingCategories_TrackingCategoryIDOptionsPutBySummarizeErrorsReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrackingCategory[] TrackingCategories { get; set; }
	}
	
	public class UsersGetByOrderAndWhereReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
	}
	
	public class Users_UserIDGetReturn
	{
		
		/// <summary>
		/// DateTime of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateTimeUTC { get; set; }
		
		/// <summary>
		/// Unique identifier for each response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Name of the application that made the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// OK for a successful response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
