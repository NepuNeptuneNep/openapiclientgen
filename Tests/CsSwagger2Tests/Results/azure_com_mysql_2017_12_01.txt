//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a recommendation action advisor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Advisor : ProxyResource
	{
		
		/// <summary>
		/// The properties of a recommendation action advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AdvisorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a recommendation action advisor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AdvisorProperties
	{
	}
	
	/// <summary>
	/// A list of query statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AdvisorsResultList
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of recommendation action advisors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Advisor[] Value { get; set; }
	}
	
	/// <summary>
	/// An error response from the Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from the Batch service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from the Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Represents a Configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Configuration : ProxyResource
	{
		
		/// <summary>
		/// The properties of a configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConfigurationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A list of server configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationListResult
	{
		
		/// <summary>
		/// The list of server configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Configuration[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfigurationProperties
	{
		
		/// <summary>
		/// Allowed values of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public string AllowedValues { get; set; }
		
		/// <summary>
		/// Data type of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		/// <summary>
		/// Default value of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Description of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Source of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Value of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents a Database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Database : ProxyResource
	{
		
		/// <summary>
		/// The properties of a database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatabaseProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A List of databases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseListResult
	{
		
		/// <summary>
		/// The list of databases housed in a server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Database[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseProperties
	{
		
		/// <summary>
		/// The charset of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="charset")]
		public string Charset { get; set; }
		
		/// <summary>
		/// The collation of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collation")]
		public string Collation { get; set; }
	}
	
	/// <summary>
	/// Represents a server firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRule : ProxyResource
	{
		
		/// <summary>
		/// The properties of a server firewall rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FirewallRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A list of firewall rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRuleListResult
	{
		
		/// <summary>
		/// The list of firewall rules in a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public FirewallRule[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a server firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRuleProperties
	{
		
		/// <summary>
		/// The end IP address of the server firewall rule. Must be IPv4 format.
		/// Required
		/// Pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endIpAddress")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")]
		public string EndIpAddress { get; set; }
		
		/// <summary>
		/// The start IP address of the server firewall rule. Must be IPv4 format.
		/// Required
		/// Pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startIpAddress")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")]
		public string StartIpAddress { get; set; }
	}
	
	/// <summary>
	/// Represents a log file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogFile : ProxyResource
	{
		
		/// <summary>
		/// The name of the log file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties of a log file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LogFileProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A list of log files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogFileListResult
	{
		
		/// <summary>
		/// The list of log files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public LogFile[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a log file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogFileProperties
	{
		
		/// <summary>
		/// Creation timestamp of the log file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Last modified timestamp of the log file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Size of the log file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeInKB")]
		public System.Nullable<System.Int64> SizeInKB { get; set; }
		
		/// <summary>
		/// Type of the log file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The url to download the log file from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a resource name availability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameAvailability
	{
		
		/// <summary>
		/// Error Message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Indicates whether the resource name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Reason for name being unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Request from client to check resource name availability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameAvailabilityRequest
	{
		
		/// <summary>
		/// Resource name to verify.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type used for verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// REST API operation definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Display metadata associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// The name of the operation being performed on this particular object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The intended executor of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public System.Nullable<OperationOrigin> Origin { get; set; }
		
		/// <summary>
		/// Additional descriptions for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 2,
	}
	
	/// <summary>
	/// Display metadata associated with the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// Operation description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Localized friendly name for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Operation resource provider name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// A list of resource provider operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The list of resource provider operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// A list of performance tiers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PerformanceTierListResult
	{
		
		/// <summary>
		/// The list of performance tiers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PerformanceTierProperties[] Value { get; set; }
	}
	
	/// <summary>
	/// Performance tier properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PerformanceTierProperties
	{
		
		/// <summary>
		/// ID of the performance tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Service level objectives associated with the performance tier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceLevelObjectives")]
		public PerformanceTierServiceLevelObjectives[] ServiceLevelObjectives { get; set; }
	}
	
	/// <summary>
	/// Service level objectives for performance tier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PerformanceTierServiceLevelObjectives
	{
		
		/// <summary>
		/// Edition of the performance tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public string Edition { get; set; }
		
		/// <summary>
		/// Hardware generation associated with the service level objective
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardwareGeneration")]
		public string HardwareGeneration { get; set; }
		
		/// <summary>
		/// ID for the service level objective.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Maximum Backup retention in days for the performance tier edition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxBackupRetentionDays")]
		public System.Nullable<System.Int32> MaxBackupRetentionDays { get; set; }
		
		/// <summary>
		/// Max storage allowed for a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxStorageMB")]
		public System.Nullable<System.Int32> MaxStorageMB { get; set; }
		
		/// <summary>
		/// Minimum Backup retention in days for the performance tier edition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minBackupRetentionDays")]
		public System.Nullable<System.Int32> MinBackupRetentionDays { get; set; }
		
		/// <summary>
		/// Max storage allowed for a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minStorageMB")]
		public System.Nullable<System.Int32> MinStorageMB { get; set; }
		
		/// <summary>
		/// vCore associated with the service level objective
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vCore")]
		public System.Nullable<System.Int32> VCore { get; set; }
	}
	
	/// <summary>
	/// Resource properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
		
		/// <summary>
		/// Resource ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents a Query Statistic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryStatistic : ProxyResource
	{
		
		/// <summary>
		/// The properties of a query statistic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public QueryStatisticProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a query statistic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryStatisticProperties
	{
		
		/// <summary>
		/// Aggregation function name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationFunction")]
		public string AggregationFunction { get; set; }
		
		/// <summary>
		/// The list of database names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseNames")]
		public string[] DatabaseNames { get; set; }
		
		/// <summary>
		/// Observation end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Metric display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricDisplayName")]
		public string MetricDisplayName { get; set; }
		
		/// <summary>
		/// Metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Metric value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValue")]
		public System.Nullable<System.Double> MetricValue { get; set; }
		
		/// <summary>
		/// Metric value unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValueUnit")]
		public string MetricValueUnit { get; set; }
		
		/// <summary>
		/// Number of query executions in this time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryExecutionCount")]
		public System.Nullable<System.Int64> QueryExecutionCount { get; set; }
		
		/// <summary>
		/// Database query identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public string QueryId { get; set; }
		
		/// <summary>
		/// Observation start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Represents a Query Text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryText : ProxyResource
	{
		
		/// <summary>
		/// The properties of a query text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public QueryTextProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a query text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryTextProperties
	{
		
		/// <summary>
		/// Query identifier unique to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public string QueryId { get; set; }
		
		/// <summary>
		/// Query text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryText")]
		public string QueryText { get; set; }
	}
	
	/// <summary>
	/// A list of query texts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryTextsResultList
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of query texts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public QueryText[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a Recommendation Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendationAction : ProxyResource
	{
		
		/// <summary>
		/// The properties of a recommendation action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RecommendationActionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a recommendation action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendationActionProperties
	{
		
		/// <summary>
		/// Recommendation action identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public System.Nullable<System.Int32> ActionId { get; set; }
		
		/// <summary>
		/// Advisor name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advisorName")]
		public string AdvisorName { get; set; }
		
		/// <summary>
		/// Recommendation action creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Recommendation action details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public System.Collections.Generic.Dictionary<string, string> Details { get; set; }
		
		/// <summary>
		/// Recommendation action expiration time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// Recommendation action reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Recommendation action type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendationType")]
		public string RecommendationType { get; set; }
		
		/// <summary>
		/// Recommendation action session identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	/// <summary>
	/// A list of recommendation actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendationActionsResultList
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of recommendation action advisors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RecommendationAction[] Value { get; set; }
	}
	
	/// <summary>
	/// Recommendation action session operation status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedActionSessionsOperationStatus
	{
		
		/// <summary>
		/// Operation identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Operation start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Operation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Azure Active Directory identity configuration for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceIdentity
	{
		
		/// <summary>
		/// The Azure Active Directory principal id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The Azure Active Directory tenant id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ResourceIdentityType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
	}
	
	/// <summary>
	/// Properties of a security alert policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityAlertPolicyProperties
	{
		
		/// <summary>
		/// Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabledAlerts")]
		public string[] DisabledAlerts { get; set; }
		
		/// <summary>
		/// Specifies that the alert is sent to the account administrators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAccountAdmins")]
		public System.Nullable<System.Boolean> EmailAccountAdmins { get; set; }
		
		/// <summary>
		/// Specifies an array of e-mail addresses to which the alert is sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddresses")]
		public string[] EmailAddresses { get; set; }
		
		/// <summary>
		/// Specifies the number of days to keep in the Threat Detection audit logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionDays")]
		public System.Nullable<System.Int32> RetentionDays { get; set; }
		
		/// <summary>
		/// Specifies the state of the policy, whether it is enabled or disabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public SecurityAlertPolicyPropertiesState State { get; set; }
		
		/// <summary>
		/// Specifies the identifier key of the Threat Detection audit storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountAccessKey")]
		public string StorageAccountAccessKey { get; set; }
		
		/// <summary>
		/// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageEndpoint")]
		public string StorageEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecurityAlertPolicyPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Represents a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Server : TrackedResource
	{
		
		/// <summary>
		/// Azure Active Directory identity configuration for a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ResourceIdentity Identity { get; set; }
		
		/// <summary>
		/// The properties of a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServerProperties Properties { get; set; }
		
		/// <summary>
		/// Billing information related properties of a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// The properties of an server Administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerAdministratorProperties
	{
		
		/// <summary>
		/// The type of administrator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="administratorType")]
		public ServerAdministratorPropertiesAdministratorType AdministratorType { get; set; }
		
		/// <summary>
		/// The server administrator login value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// The server administrator Sid (Secure ID).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sid")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The server Active Directory Administrator tenant id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerAdministratorPropertiesAdministratorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActiveDirectory = 0,
	}
	
	/// <summary>
	/// Represents a and external administrator to be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerAdministratorResource : ProxyResource
	{
		
		/// <summary>
		/// The properties of an server Administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServerAdministratorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The response to a list Active Directory Administrators request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerAdministratorResourceListResult
	{
		
		/// <summary>
		/// The list of server Active Directory Administrators for the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ServerAdministratorResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a server to be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerForCreate
	{
		
		/// <summary>
		/// The location the resource resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The properties used to create a new server.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServerPropertiesForCreate Properties { get; set; }
		
		/// <summary>
		/// Billing information related properties of a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// Application-specific metadata in the form of key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// A list of servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerListResult
	{
		
		/// <summary>
		/// The list of servers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Server[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerProperties
	{
		
		/// <summary>
		/// The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administratorLogin")]
		public string AdministratorLogin { get; set; }
		
		/// <summary>
		/// Earliest restore point creation time (ISO8601 format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earliestRestoreDate")]
		public System.Nullable<System.DateTimeOffset> EarliestRestoreDate { get; set; }
		
		/// <summary>
		/// The fully qualified domain name of a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullyQualifiedDomainName")]
		public string FullyQualifiedDomainName { get; set; }
		
		/// <summary>
		/// The master server id of a replica server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterServerId")]
		public string MasterServerId { get; set; }
		
		/// <summary>
		/// The maximum number of replicas that a master server can have.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaCapacity")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ReplicaCapacity { get; set; }
		
		/// <summary>
		/// The replication role of the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationRole")]
		public string ReplicationRole { get; set; }
		
		/// <summary>
		/// Enable ssl enforcement or not when connect to server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslEnforcement")]
		public SecurityAlertPolicyPropertiesState SslEnforcement { get; set; }
		
		/// <summary>
		/// Storage Profile properties of a server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageProfile")]
		public StorageProfile StorageProfile { get; set; }
		
		/// <summary>
		/// A state of a server that is visible to user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userVisibleState")]
		public System.Nullable<ServerPropertiesUserVisibleState> UserVisibleState { get; set; }
		
		/// <summary>
		/// The version of a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<ServerPropertiesVersion> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerPropertiesUserVisibleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dropping = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerPropertiesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5.6")]
		_5_6 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5.7")]
		_5_7 = 1,
	}
	
	/// <summary>
	/// The properties used to create a new server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerPropertiesForCreate
	{
		
		/// <summary>
		/// The mode to create a new server.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createMode")]
		public ServerPropertiesForCreateCreateMode CreateMode { get; set; }
		
		/// <summary>
		/// Enable ssl enforcement or not when connect to server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslEnforcement")]
		public SecurityAlertPolicyPropertiesState SslEnforcement { get; set; }
		
		/// <summary>
		/// Storage Profile properties of a server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageProfile")]
		public StorageProfile StorageProfile { get; set; }
		
		/// <summary>
		/// The version of a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<ServerPropertiesForCreateVersion> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerPropertiesForCreateCreateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PointInTimeRestore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GeoRestore = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Replica = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerPropertiesForCreateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5.6")]
		_5_6 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5.7")]
		_5_7 = 1,
	}
	
	/// <summary>
	/// The properties used to create a new server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerPropertiesForDefaultCreate : ServerPropertiesForCreate
	{
		
		/// <summary>
		/// The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="administratorLogin")]
		public string AdministratorLogin { get; set; }
		
		/// <summary>
		/// The password of the administrator login.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="administratorLoginPassword")]
		public string AdministratorLoginPassword { get; set; }
	}
	
	/// <summary>
	/// The properties used to create a new server by restoring to a different region from a geo replicated backup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerPropertiesForGeoRestore : ServerPropertiesForCreate
	{
		
		/// <summary>
		/// The source server id to restore from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerId")]
		public string SourceServerId { get; set; }
	}
	
	/// <summary>
	/// The properties to create a new replica.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerPropertiesForReplica : ServerPropertiesForCreate
	{
		
		/// <summary>
		/// The master server id to create replica from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerId")]
		public string SourceServerId { get; set; }
	}
	
	/// <summary>
	/// The properties used to create a new server by restoring from a backup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerPropertiesForRestore : ServerPropertiesForCreate
	{
		
		/// <summary>
		/// Restore point creation time (ISO8601 format), specifying the time to restore from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="restorePointInTime")]
		public System.DateTimeOffset RestorePointInTime { get; set; }
		
		/// <summary>
		/// The source server id to restore from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceServerId")]
		public string SourceServerId { get; set; }
	}
	
	/// <summary>
	/// A server security alert policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerSecurityAlertPolicy
	{
		
		/// <summary>
		/// Properties of a security alert policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SecurityAlertPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Parameters allowed to update for a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerUpdateParameters
	{
		
		/// <summary>
		/// The properties that can be updated for a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Billing information related properties of a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// Application-specific metadata in the form of key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The version of a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5.6")]
		_5_6 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5.7")]
		_5_7 = 1,
	}
	
	/// <summary>
	/// Billing information related properties of a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The scale up/out capacity, representing server's compute units.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// The family of hardware.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The size code, to be interpreted by resource as appropriate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The tier of the particular SKU, e.g. Basic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<SkuTier> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GeneralPurpose = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MemoryOptimized = 2,
	}
	
	/// <summary>
	/// Enable ssl enforcement or not when connect to server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SslEnforcement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Storage Profile properties of a server
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageProfile
	{
		
		/// <summary>
		/// Backup retention days for the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupRetentionDays")]
		public System.Nullable<System.Int32> BackupRetentionDays { get; set; }
		
		/// <summary>
		/// Enable Geo-redundant or not for server backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoRedundantBackup")]
		public SecurityAlertPolicyPropertiesState GeoRedundantBackup { get; set; }
		
		/// <summary>
		/// Enable Storage Auto Grow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAutogrow")]
		public SecurityAlertPolicyPropertiesState StorageAutogrow { get; set; }
		
		/// <summary>
		/// Max storage allowed for a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageMB")]
		public System.Nullable<System.Int32> StorageMB { get; set; }
	}
	
	/// <summary>
	/// Input to get top query statistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopQueryStatisticsInput
	{
		
		/// <summary>
		/// The properties for input to get top query statistics
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TopQueryStatisticsInputProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties for input to get top query statistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopQueryStatisticsInputProperties
	{
		
		/// <summary>
		/// Aggregation function name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationFunction")]
		public string AggregationFunction { get; set; }
		
		/// <summary>
		/// Aggregation interval type in ISO 8601 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationWindow")]
		public string AggregationWindow { get; set; }
		
		/// <summary>
		/// Max number of top queries to return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfTopQueries")]
		public int NumberOfTopQueries { get; set; }
		
		/// <summary>
		/// Observation end time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observationEndTime")]
		public System.DateTimeOffset ObservationEndTime { get; set; }
		
		/// <summary>
		/// Observation start time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observationStartTime")]
		public System.DateTimeOffset ObservationStartTime { get; set; }
		
		/// <summary>
		/// Observed metric name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observedMetric")]
		public string ObservedMetric { get; set; }
	}
	
	/// <summary>
	/// A list of query statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopQueryStatisticsResultList
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of top query statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public QueryStatistic[] Value { get; set; }
	}
	
	/// <summary>
	/// Resource properties including location and tags for track resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource : ProxyResource
	{
		
		/// <summary>
		/// The location the resource resides in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Application-specific metadata in the form of key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// A virtual network rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRule
	{
		
		/// <summary>
		/// Properties of a virtual network rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VirtualNetworkRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a virtual network rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRuleProperties
	{
		
		/// <summary>
		/// Create firewall rule before the virtual network has vnet service endpoint enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreMissingVnetServiceEndpoint")]
		public System.Nullable<System.Boolean> IgnoreMissingVnetServiceEndpoint { get; set; }
		
		/// <summary>
		/// Virtual Network Rule State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<VirtualNetworkRulePropertiesState> State { get; set; }
		
		/// <summary>
		/// The ARM resource id of the virtual network subnet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkSubnetId")]
		public string VirtualNetworkSubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum VirtualNetworkRulePropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initializing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 4,
	}
	
	/// <summary>
	/// A list of virtual network rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRuleListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VirtualNetworkRule[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a Wait Statistic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStatistic : ProxyResource
	{
		
		/// <summary>
		/// The properties of a wait statistic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WaitStatisticProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a wait statistic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStatisticProperties
	{
		
		/// <summary>
		/// Wait event count observed in this time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		/// <summary>
		/// Database Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Observation end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Wait event name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// Wait event type name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTypeName")]
		public string EventTypeName { get; set; }
		
		/// <summary>
		/// Database query identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public System.Nullable<System.Int64> QueryId { get; set; }
		
		/// <summary>
		/// Observation start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Total time of wait in milliseconds in this time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalTimeInMs")]
		public System.Nullable<System.Double> TotalTimeInMs { get; set; }
		
		/// <summary>
		/// Database user identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	/// <summary>
	/// Input to get wait statistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStatisticsInput
	{
		
		/// <summary>
		/// The properties for input to get wait statistics
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WaitStatisticsInputProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties for input to get wait statistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStatisticsInputProperties
	{
		
		/// <summary>
		/// Aggregation interval type in ISO 8601 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationWindow")]
		public string AggregationWindow { get; set; }
		
		/// <summary>
		/// Observation end time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observationEndTime")]
		public System.DateTimeOffset ObservationEndTime { get; set; }
		
		/// <summary>
		/// Observation start time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observationStartTime")]
		public System.DateTimeOffset ObservationStartTime { get; set; }
	}
	
	/// <summary>
	/// A list of wait statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStatisticsResultList
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of wait statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WaitStatistic[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available REST API operations.
		/// Operations_List providers/Microsoft.DBforMySQL/operations
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>OK</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DBforMySQL/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check the availability of name for resource
		/// CheckNameAvailability_Execute subscriptions/{subscriptionId}/providers/Microsoft.DBforMySQL/checkNameAvailability
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="requestBody">The required parameters for checking if resource name is available.</param>
		/// <returns>OK</returns>
		public async Task<NameAvailability> CheckNameAvailability_ExecuteAsync(string api_version, string subscriptionId, NameAvailabilityRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DBforMySQL/checkNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NameAvailability>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the performance tiers at specified location in a given subscription.
		/// LocationBasedPerformanceTier_List subscriptions/{subscriptionId}/providers/Microsoft.DBforMySQL/locations/{locationName}/performanceTiers
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="locationName">The name of the location.</param>
		/// <returns>OK</returns>
		public async Task<PerformanceTierListResult> LocationBasedPerformanceTier_ListAsync(string api_version, string subscriptionId, string locationName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DBforMySQL/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/performanceTiers?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PerformanceTierListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recommendation action session operation status.
		/// LocationBasedRecommendedActionSessionsOperationStatus_Get subscriptions/{subscriptionId}/providers/Microsoft.DBforMySQL/locations/{locationName}/recommendedActionSessionsAzureAsyncOperation/{operationId}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="locationName">The name of the location.</param>
		/// <param name="operationId">The operation identifier.</param>
		/// <returns>OK.</returns>
		public async Task<RecommendedActionSessionsOperationStatus> LocationBasedRecommendedActionSessionsOperationStatus_GetAsync(string api_version, string subscriptionId, string locationName, string operationId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DBforMySQL/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/recommendedActionSessionsAzureAsyncOperation/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendedActionSessionsOperationStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recommendation action session operation result.
		/// LocationBasedRecommendedActionSessionsResult_List subscriptions/{subscriptionId}/providers/Microsoft.DBforMySQL/locations/{locationName}/recommendedActionSessionsOperationResults/{operationId}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="locationName">The name of the location.</param>
		/// <param name="operationId">The operation identifier.</param>
		/// <returns>Created</returns>
		public async Task<RecommendationActionsResultList> LocationBasedRecommendedActionSessionsResult_ListAsync(string api_version, string subscriptionId, string locationName, string operationId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DBforMySQL/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/recommendedActionSessionsOperationResults/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationActionsResultList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the servers in a given subscription.
		/// Servers_List subscriptions/{subscriptionId}/providers/Microsoft.DBforMySQL/servers
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <returns>OK</returns>
		public async Task<ServerListResult> Servers_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DBforMySQL/servers?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the servers in a given resource group.
		/// Servers_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>OK</returns>
		public async Task<ServerListResult> Servers_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a server.
		/// Servers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<Server> Servers_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Server>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new server or updates an existing server. The update action will overwrite the existing server.
		/// Servers_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="requestBody">The required parameters for creating or updating a server.</param>
		/// <returns>OK</returns>
		public async Task<Server> Servers_CreateAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, ServerForCreate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Server>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a server.
		/// Servers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task Servers_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing server. The request body can contain one to many of the properties present in the normal server definition.
		/// Servers_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="requestBody">The required parameters for updating a server.</param>
		/// <returns>OK</returns>
		public async Task<Server> Servers_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, ServerUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Server>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a AAD server administrator.
		/// ServerAdministrators_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/Administrators/activeDirectory
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<ServerAdministratorResource> ServerAdministrators_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/Administrators/activeDirectory?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerAdministratorResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or update active directory administrator on an existing server. The update action will overwrite the existing administrator.
		/// ServerAdministrators_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/Administrators/activeDirectory
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="requestBody">The required parameters for creating or updating an AAD server administrator.</param>
		/// <returns>OK</returns>
		public async Task<ServerAdministratorResource> ServerAdministrators_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, ServerAdministratorResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/Administrators/activeDirectory?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerAdministratorResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes AAD Administrator.
		/// ServerAdministrators_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/Administrators/activeDirectory
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<ServerAdministratorResource> ServerAdministrators_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/Administrators/activeDirectory?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerAdministratorResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of server Administrators.
		/// ServerAdministrators_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/administrators
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<ServerAdministratorResourceListResult> ServerAdministrators_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/administrators?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerAdministratorResourceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List recommendation action advisors.
		/// Advisors_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<AdvisorsResultList> Advisors_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/advisors?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdvisorsResultList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a recommendation action advisor.
		/// Advisors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="advisorName">The advisor name for recommendation action.</param>
		/// <returns>OK</returns>
		public async Task<Advisor> Advisors_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string advisorName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Advisor>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create recommendation action session for the advisor.
		/// CreateRecommendedActionSession subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/createRecommendedActionSession
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="advisorName">The advisor name for recommendation action.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <returns>OK</returns>
		public async Task CreateRecommendedActionSessionAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string advisorName, string databaseName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"/createRecommendedActionSession?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&databaseName=" + (databaseName==null? "" : System.Uri.EscapeDataString(databaseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve recommended actions from the advisor.
		/// RecommendedActions_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/recommendedActions
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="advisorName">The advisor name for recommendation action.</param>
		/// <param name="sessionId">The recommendation action session identifier.</param>
		/// <returns>OK</returns>
		public async Task<RecommendationActionsResultList> RecommendedActions_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string advisorName, string sessionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"/recommendedActions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&sessionId=" + (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationActionsResultList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve recommended actions from the advisor.
		/// RecommendedActions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/advisors/{advisorName}/recommendedActions/{recommendedActionName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="advisorName">The advisor name for recommendation action.</param>
		/// <param name="recommendedActionName">The recommended action name.</param>
		/// <returns>OK</returns>
		public async Task<RecommendationAction> RecommendedActions_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string advisorName, string recommendedActionName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"/recommendedActions/"+ (recommendedActionName==null? "" : System.Uri.EscapeDataString(recommendedActionName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationAction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the configurations in a given server.
		/// Configurations_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/configurations
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<ConfigurationListResult> Configurations_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/configurations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigurationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a configuration of server.
		/// Configurations_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/configurations/{configurationName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="configurationName">The name of the server configuration.</param>
		/// <returns>OK</returns>
		public async Task<Configuration> Configurations_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string configurationName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/configurations/"+ (configurationName==null? "" : System.Uri.EscapeDataString(configurationName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Configuration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a configuration of a server.
		/// Configurations_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/configurations/{configurationName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="configurationName">The name of the server configuration.</param>
		/// <param name="requestBody">The required parameters for updating a server configuration.</param>
		/// <returns>OK</returns>
		public async Task<Configuration> Configurations_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string configurationName, Configuration requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/configurations/"+ (configurationName==null? "" : System.Uri.EscapeDataString(configurationName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Configuration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the databases in a given server.
		/// Databases_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/databases
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<DatabaseListResult> Databases_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DatabaseListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a database.
		/// Databases_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/databases/{databaseName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <returns>OK</returns>
		public async Task<Database> Databases_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Database>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new database or updates an existing database.
		/// Databases_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/databases/{databaseName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="requestBody">The required parameters for creating or updating a database.</param>
		/// <returns>OK</returns>
		public async Task<Database> Databases_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName, Database requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Database>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a database.
		/// Databases_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/databases/{databaseName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <returns>OK</returns>
		public async Task Databases_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the firewall rules in a given server.
		/// FirewallRules_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/firewallRules
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<FirewallRuleListResult> FirewallRules_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/firewallRules?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRuleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a server firewall rule.
		/// FirewallRules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="firewallRuleName">The name of the server firewall rule.</param>
		/// <returns>OK</returns>
		public async Task<FirewallRule> FirewallRules_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string firewallRuleName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new firewall rule or updates an existing firewall rule.
		/// FirewallRules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="firewallRuleName">The name of the server firewall rule.</param>
		/// <param name="requestBody">The required parameters for creating or updating a firewall rule.</param>
		/// <returns>OK</returns>
		public async Task<FirewallRule> FirewallRules_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string firewallRuleName, FirewallRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a server firewall rule.
		/// FirewallRules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/firewallRules/{firewallRuleName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="firewallRuleName">The name of the server firewall rule.</param>
		/// <returns>OK</returns>
		public async Task FirewallRules_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string firewallRuleName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/firewallRules/"+ (firewallRuleName==null? "" : System.Uri.EscapeDataString(firewallRuleName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the log files in a given server.
		/// LogFiles_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/logFiles
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<LogFileListResult> LogFiles_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/logFiles?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LogFileListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the Query-Store query texts for specified queryIds.
		/// QueryTexts_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/queryTexts
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="queryIds">The query identifiers</param>
		/// <returns>OK</returns>
		public async Task<QueryTextsResultList> QueryTexts_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string[] queryIds)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/queryTexts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&"+string.Join("&", queryIds.Select(z => $"queryIds={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryTextsResultList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the Query-Store query texts for the queryId.
		/// QueryTexts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/queryTexts/{queryId}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="queryId">The Query-Store query identifier.</param>
		/// <returns>OK</returns>
		public async Task<QueryText> QueryTexts_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string queryId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/queryTexts/"+ (queryId==null? "" : System.Uri.EscapeDataString(queryId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryText>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the replicas for a given server.
		/// Replicas_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/replicas
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<ServerListResult> Replicas_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/replicas?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restarts a server.
		/// Servers_Restart subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/restart
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task Servers_RestartAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/restart?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a server's security alert policy.
		/// ServerSecurityAlertPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="securityAlertPolicyName">The name of the security alert policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the server threat detection policy.</returns>
		public async Task<ServerSecurityAlertPolicy> ServerSecurityAlertPolicies_GetAsync(string resourceGroupName, string serverName, ServerSecurityAlertPolicies_GetSecurityAlertPolicyName securityAlertPolicyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/securityAlertPolicies/"+securityAlertPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerSecurityAlertPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a threat detection policy.
		/// ServerSecurityAlertPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="securityAlertPolicyName">The name of the threat detection policy.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The server security alert policy.</param>
		/// <returns>Successfully updated the threat detection policy.</returns>
		public async Task<ServerSecurityAlertPolicy> ServerSecurityAlertPolicies_CreateOrUpdateAsync(string resourceGroupName, string serverName, ServerSecurityAlertPolicies_GetSecurityAlertPolicyName securityAlertPolicyName, string subscriptionId, string api_version, ServerSecurityAlertPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/securityAlertPolicies/"+securityAlertPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServerSecurityAlertPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the Query-Store top queries for specified metric and aggregation.
		/// TopQueryStatistics_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/topQueryStatistics
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<TopQueryStatisticsResultList> TopQueryStatistics_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/topQueryStatistics?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TopQueryStatisticsResultList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the query statistic for specified identifier.
		/// TopQueryStatistics_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/topQueryStatistics/{queryStatisticId}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="queryStatisticId">The Query Statistic identifier.</param>
		/// <returns>OK</returns>
		public async Task<QueryStatistic> TopQueryStatistics_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string queryStatisticId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/topQueryStatistics/"+ (queryStatisticId==null? "" : System.Uri.EscapeDataString(queryStatisticId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryStatistic>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of virtual network rules in a server.
		/// VirtualNetworkRules_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/virtualNetworkRules
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of virtual network rules.</returns>
		public async Task<VirtualNetworkRuleListResult> VirtualNetworkRules_ListByServerAsync(string resourceGroupName, string serverName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/virtualNetworkRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VirtualNetworkRuleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a virtual network rule.
		/// VirtualNetworkRules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="virtualNetworkRuleName">The name of the virtual network rule.</param>
		/// <returns>Successfully retrieved a specified virtual network rule.</returns>
		public async Task<VirtualNetworkRule> VirtualNetworkRules_GetAsync(string resourceGroupName, string serverName, string subscriptionId, string api_version, string virtualNetworkRuleName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/virtualNetworkRules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VirtualNetworkRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an existing virtual network rule.
		/// VirtualNetworkRules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="virtualNetworkRuleName">The name of the virtual network rule.</param>
		/// <param name="requestBody">The requested virtual Network Rule Resource state.</param>
		/// <returns>Successfully updated a virtual network rule.</returns>
		public async Task<VirtualNetworkRule> VirtualNetworkRules_CreateOrUpdateAsync(string resourceGroupName, string serverName, string subscriptionId, string api_version, string virtualNetworkRuleName, VirtualNetworkRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/virtualNetworkRules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VirtualNetworkRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the virtual network rule with the given name.
		/// VirtualNetworkRules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="virtualNetworkRuleName">The name of the virtual network rule.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully deleted the virtual network rule.</returns>
		public async Task VirtualNetworkRules_DeleteAsync(string resourceGroupName, string serverName, string virtualNetworkRuleName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/virtualNetworkRules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve wait statistics for specified aggregation window.
		/// WaitStatistics_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<WaitStatisticsResultList> WaitStatistics_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/waitStatistics?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WaitStatisticsResultList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve wait statistics for specified identifier.
		/// WaitStatistics_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics/{waitStatisticsId}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="waitStatisticsId">The Wait Statistic identifier.</param>
		/// <returns>OK</returns>
		public async Task<WaitStatistic> WaitStatistics_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string waitStatisticsId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMySQL/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/waitStatistics/"+ (waitStatisticsId==null? "" : System.Uri.EscapeDataString(waitStatisticsId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WaitStatistic>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ServerSecurityAlertPolicies_GetSecurityAlertPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
