//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Properties for a product secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProductSecret
	{
		
		/// <summary>
		/// Properties of product secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProductSecretProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of product secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProductSecretProperties
	{
		
		/// <summary>
		/// The secret description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The expiration period of the secret (in ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresAfter")]
		public string ExpiresAfter { get; set; }
		
		/// <summary>
		/// Provisioning state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The secret type-specific descriptor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretDescriptor")]
		public SecretDescriptor SecretDescriptor { get; set; }
		
		/// <summary>
		/// Specifies the secret kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretKind")]
		public System.Nullable<ProductSecretPropertiesSecretKind> SecretKind { get; set; }
		
		/// <summary>
		/// Represents the secret state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretState")]
		public SecretState SecretState { get; set; }
	}
	
	/// <summary>
	/// The secret type-specific descriptor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretDescriptor
	{
		
		/// <summary>
		/// The allowed characters in the password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedCharacters")]
		public string AllowedCharacters { get; set; }
		
		/// <summary>
		/// Alternative DNS Names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternativeDnsNames")]
		public string[] AlternativeDnsNames { get; set; }
		
		/// <summary>
		/// The list of alternative IP addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternativeIpAddresses")]
		public string[] AlternativeIpAddresses { get; set; }
		
		/// <summary>
		/// The key length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyLength")]
		public System.Nullable<System.Int32> KeyLength { get; set; }
		
		/// <summary>
		/// The minimum password length is 8 characters, and the maximum password length is 128 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordLength")]
		public System.Nullable<System.Int32> PasswordLength { get; set; }
		
		/// <summary>
		/// Password validation regular expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordValidationRegex")]
		public string PasswordValidationRegex { get; set; }
		
		/// <summary>
		/// The storage account key secret rotation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotationStatus")]
		public System.Nullable<SecretDescriptorRotationStatus> RotationStatus { get; set; }
		
		/// <summary>
		/// A value indicating whether the secondary or primary storage account key is active as a secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryKeyIsActive")]
		public System.Nullable<System.Boolean> SecondaryKeyIsActive { get; set; }
		
		/// <summary>
		/// Certificate's subject
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecretDescriptorRotationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlantNewSak = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RotateInactiveSak = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProductSecretPropertiesSecretKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AdHoc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Certificate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Password = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StorageAccount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SymmetricKey = 4,
	}
	
	/// <summary>
	/// Represents the secret state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretState
	{
		
		/// <summary>
		/// The secret expiration date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// Specifies the secret rotation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotationStatus")]
		public System.Nullable<SecretStateRotationStatus> RotationStatus { get; set; }
		
		/// <summary>
		/// Specifies the secret status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<SecretStateStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecretStateRotationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecretStateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotUploaded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Uploaded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deployed = 2,
	}
	
	/// <summary>
	/// List of product secrets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProductSecretsList
	{
		
		/// <summary>
		/// URI to the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of product secrets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProductSecret[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters required for creating/updating a product secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretParameters
	{
		
		/// <summary>
		/// The password as a secure string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The pfx certificate file location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pfxFileName")]
		public string PfxFileName { get; set; }
		
		/// <summary>
		/// The pfx certificate file password as a secure string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pfxPassword")]
		public string PfxPassword { get; set; }
		
		/// <summary>
		/// The secret value in a secure string format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretValue")]
		public string SecretValue { get; set; }
		
		/// <summary>
		/// The symmetric key as a secure string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symmetricKey")]
		public string SymmetricKey { get; set; }
	}
	
	/// <summary>
	/// Specifies the secret rotation status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecretRotationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 2,
	}
	
	/// <summary>
	/// Specifies the secret status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecretStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotUploaded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Uploaded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deployed = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns an array of product secrets.
		/// ProductSecrets_List subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productPackages/{productId}/secrets
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="productId">The product identifier.</param>
		/// <returns>OK</returns>
		public async Task<ProductSecretsList> ProductSecrets_ListAsync(string subscriptionId, string api_version, string productId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Deployment.Admin/locations/global/productPackages/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/secrets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductSecretsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specific product secret details.
		/// ProductSecrets_Get subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/{productId}/secrets/{secretName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="productId">The product identifier.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="secretName">The secret name.</param>
		/// <returns>OK</returns>
		public async Task<ProductSecret> ProductSecrets_GetAsync(string subscriptionId, string productId, string api_version, string secretName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/secrets/"+ (secretName==null? "" : System.Uri.EscapeDataString(secretName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductSecret>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Imports a product secret.
		/// ProductSecrets_Import subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/{productId}/secrets/{secretName}/import
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="productId">The product identifier.</param>
		/// <param name="secretName">The secret name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The parameters required for creating/updating a product secret.</param>
		/// <returns>Accepted</returns>
		public async Task ProductSecrets_ImportAsync(string subscriptionId, string productId, string secretName, string api_version, SecretParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/secrets/"+ (secretName==null? "" : System.Uri.EscapeDataString(secretName))+"/import&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validates a product secret.
		/// ProductSecrets_Validate subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/{productId}/secrets/{secretName}/validate
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="productId">The product identifier.</param>
		/// <param name="secretName">The secret name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">The parameters required for creating/updating a product secret.</param>
		/// <returns>Accepted</returns>
		public async Task ProductSecrets_ValidateAsync(string subscriptionId, string productId, string secretName, string api_version, SecretParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Deployment.Admin/locations/global/productSecrets/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/secrets/"+ (secretName==null? "" : System.Uri.EscapeDataString(secretName))+"/validate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
