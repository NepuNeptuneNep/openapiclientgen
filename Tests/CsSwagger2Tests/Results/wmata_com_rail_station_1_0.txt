//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// XML - Lines
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns information about all rail lines.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Lines</td>
		/// 
		/// <td>
		/// Array containing line information (<a href="#Line">Line</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="Line" name="Line">Line Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DisplayName</td>
		/// 
		/// <td>Full name of line color.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>EndStationCode</td>
		/// 
		/// <td>End station code. For example, will be E10 (Greenbelt) for the
		/// Green Line, B11 (Glenmont) for the Red Line, etc. Use this value in
		/// other rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>InternalDestination1</td>
		/// 
		/// <td>Intermediate terminal station code. During normal service, some
		/// trains on some lines might end their trip prior to the
		/// StartStationCode or EndStationCode. A good example is on the Red
		/// Line where some trains stop at A11 (Grosvenor) or B08 (Silver
		/// Spring). Empty string if not defined.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>InternalDestination2</td>
		/// 
		/// <td>Similar to InternalDestination1.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode</td>
		/// 
		/// <td>Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,
		/// or SV).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StartStationCode</td>
		/// 
		/// <td>Start station code. For example, will be F11 (Branch Avenue)
		/// for the Green Line, A15 (Shady Grove) for the Red Line, etc. Use
		/// this value in other rail-related APIs to retrieve data about a
		/// station.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// LinesGet Lines
		/// </summary>
		/// <returns>Default response code.</returns>
		public async Task LinesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Lines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// XML - Path Between Stations
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns a set of ordered stations and distances between two stations on the
		/// <em>same line</em>.</p>
		/// 
		/// <p>Note that this method is not suitable on its own as a pathfinding solution
		/// between stations.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Path</td>
		/// 
		/// <td>
		/// Array containing path details (<a href=
		/// "#MetroPathItem">MetroPathItem</a>)
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="MetroPathItem" name="MetroPathItem">MetroPathItem
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DistanceToPrev</td>
		/// 
		/// <td>Distance in feet to the previous station in the list.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode</td>
		/// 
		/// <td>Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,
		/// or SV) this station's platform is on.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SeqNum</td>
		/// 
		/// <td>Ordered sequence number.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationCode</td>
		/// 
		/// <td>Station code for this station. Use this value in other
		/// rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationName</td>
		/// 
		/// <td>Full name for this station, as shown on the WMATA website.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// PathGetByFromStationCodeAndToStationCode Path
		/// </summary>
		/// <param name="FromStationCode">Station code for the origin station.  Use the Station List method to return a list of all station codes.</param>
		/// <param name="ToStationCode">Station code for the origin station.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task PathGetByFromStationCodeAndToStationCodeAsync(PathGetByFromStationCodeAndToStationCodeFromStationCode FromStationCode, PathGetByFromStationCodeAndToStationCodeToStationCode ToStationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Path?FromStationCode=" + FromStationCode+"&ToStationCode=" + ToStationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// XML - Station to Station Information
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns a distance, fare information, and estimated travel time between any
		/// two stations, including those on different lines. Omit both parameters to
		/// retrieve data for all stations.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>StationToStationInfos</td>
		/// 
		/// <td>
		/// Array containing station to station information (<a href=
		/// "#StationToStationInfo">StationToStationInfo</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="StationToStationInfo" name=
		/// "StationToStationInfo">StationToStationInfo Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>CompositeMiles</td>
		/// 
		/// <td>Average of distance traveled between two stations and straight-line distance (as used for WMATA fare calculations).  For more details, please refer to WMATA's <a href="https://www.wmata.com/about/records/public_docs/upload/Tariff-on-Fares-Annotated-2-12-18.pdf#page=6" target="_blank" rel="noopener noreferrer">Tariff on Fares</a>.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DestinationStation</td>
		/// 
		/// <td>Destination station code. Use this value in other rail-related
		/// APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>RailFare</td>
		/// 
		/// <td>
		/// Structure containing <a href="#RailFare">fare</a> information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>RailTime</td>
		/// 
		/// <td>Estimated travel time (schedule time) in minutes between the source and
		/// destination station. This is not correlated to minutes <span class="text-info">(Min)</span> in Real-Time Rail Predictions.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SourceStation</td>
		/// 
		/// <td>Origin station code. Use this value in other rail-related APIs
		/// to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="RailFare" name="RailFare">RailFare Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>OffPeakTime</td>
		/// 
		/// <td>Fare during off-peak times (times other than the ones described
		/// below).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>PeakTime</td>
		/// 
		/// <td>Fare during peak times (weekdays from opening to 9:30 AM and
		/// 3-7 PM, and weekends from midnight to closing).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SeniorDisabled</td>
		/// 
		/// <td>
		/// Reduced fare for <a href=
		/// "http://www.wmata.com/fares/reduced.cfm">senior citizens or
		/// people with disabilities</a>.
		/// </td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// SrcStationToDstStationInfoGetByFromStationCodeAndToStationCode SrcStationToDstStationInfo
		/// </summary>
		/// <param name="FromStationCode">Station code for the origin station.  Use the Station List method to return a list of all station codes.</param>
		/// <param name="ToStationCode">Station code for the destination station.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task SrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeAsync(SrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeFromStationCode FromStationCode, SrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeToStationCode ToStationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SrcStationToDstStationInfo?FromStationCode=" + FromStationCode+"&ToStationCode=" + ToStationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// XML - Station Entrances
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns a list of nearby station entrances based on latitude, longitude, and
		/// radius (meters). Omit search parameters to return all station entrances.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Entrances</td>
		/// 
		/// <td>
		/// Array containing detailed information about station entrances
		/// (<a href="#StationEntrance">StationEntrance</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="StationEntrance" name=
		/// "StationEntrance">StationEntrance Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Description</td>
		/// 
		/// <td>Additional information for the entrance, if available.
		/// Currently available data usually shows the same value as the Name
		/// element.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td style="text-decoration: line-through">ID</td>
		/// 
		/// <td><span class="text-danger">Deprecated.</span></td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lat</td>
		/// 
		/// <td>Latitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lon</td>
		/// 
		/// <td>Longitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Name</td>
		/// 
		/// <td>Name of the entrance (usually the station name and nearest
		/// intersection).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationCode1</td>
		/// 
		/// <td>The station code associated with this entrance. Use this value
		/// in other rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationCode2</td>
		/// 
		/// <td>For stations containing multiple platforms (e.g.: Gallery
		/// Place, Fort Totten, L'Enfant Plaza, and Metro Center), the other
		/// station code.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// StationEntrancesGetByLatAndLonAndRadius StationEntrances
		/// </summary>
		/// <param name="Lat">Center point Latitude, required if Longitude and Radius are specified.</param>
		/// <param name="Lon">Center point Longitude, required if Latitude and Radius are specified.</param>
		/// <param name="Radius">Radius (meters) to include in the search area, required if Latitude and Longitude are specified.</param>
		/// <returns>Default response code.</returns>
		public async Task StationEntrancesGetByLatAndLonAndRadiusAsync(StationEntrancesGetByLatAndLonAndRadiusLat Lat, StationEntrancesGetByLatAndLonAndRadiusLon Lon, StationEntrancesGetByLatAndLonAndRadiusRadius Radius, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StationEntrances?Lat="+Lat+"&Lon="+Lon+"&Radius="+Radius;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// XML - Station Information
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns station location and address information based on a given
		/// StationCode.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Address</td>
		/// 
		/// <td>
		/// Structure describing <a href="#Address">address</a> information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Code</td>
		/// 
		/// <td>Station code. Repeated from input.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lat</td>
		/// 
		/// <td>Latitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode1</td>
		/// 
		/// <td>Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,
		/// or SV) served by this station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode2</td>
		/// 
		/// <td>Additional line served by this station. This is often the case
		/// when stations have multiple platforms (e.g.: Gallery Place, Fort
		/// Totten, L'Enfant Plaza, and Metro Center).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode3</td>
		/// 
		/// <td>Similar to function as LineCodeX.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode4</td>
		/// 
		/// <td>Similar to function as LineCodeX. Currently not in use.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lon</td>
		/// 
		/// <td>Longitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Name</td>
		/// 
		/// <td>Station name.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationTogether1</td>
		/// 
		/// <td>For stations with multiple platforms (e.g.: Gallery Place, Fort
		/// Totten, L'Enfant Plaza, and Metro Center), the additional
		/// StationCode will be listed here.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationTogether2</td>
		/// 
		/// <td>Similar in function to StationTogether2. Currently not in
		/// use.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a name="Address">Address Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>City</td>
		/// 
		/// <td>City.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>State</td>
		/// 
		/// <td>State (abbreviated).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Street</td>
		/// 
		/// <td>Street address (for GPS use).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Zip</td>
		/// 
		/// <td>Zip code.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// StationInfoGetByStationCode StationInfo
		/// </summary>
		/// <param name="StationCode">Station code.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task StationInfoGetByStationCodeAsync(StationInfoGetByStationCodeStationCode StationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StationInfo?StationCode=" + StationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// XML - Parking Information
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns parking information at a station based on a given StationCode. Omit
		/// the StationCode to return parking information for all stations.</p>
		/// 
		/// <p>If a station has no parking, the StationsParking element will contain no
		/// child elements.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>StationsParking</td>
		/// 
		/// <td>
		/// Array containing station parking information (<a href=
		/// "#StationParking">StationParking</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="StationParking" name="StationParking">StationParking
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Code</td>
		/// 
		/// <td>Station code. Useful when returning parking information for all
		/// stations. Use this value in other rail-related APIs to retrieve
		/// data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Notes</td>
		/// 
		/// <td>When not NULL, provides additional parking resources such as
		/// nearby lots.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>AllDayParking</td>
		/// 
		/// <td>
		/// Structure describing <a href="#AllDayParking">all-day
		/// parking</a> options.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>ShortTermParking</td>
		/// 
		/// <td>
		/// Structure describing <a href="#ShortTermParking">short-term
		/// parking</a> options.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="AllDayParking" name="AllDayParking">AllDayParking
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>TotalCount</td>
		/// 
		/// <td>Number of all-day parking spots available at a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>RiderCost</td>
		/// 
		/// <td>All-day cost per day (weekday) for Metro riders. NULL when no all-day
		/// spots are available. For most stations, this value is identical to
		/// the NonRiderCost.<br>
		/// <br>
		/// For cases where the NonRiderCost is different, the lower cost per
		/// day requires a valid rail trip using a SmarTrip&reg; card
		/// originating from a station other than the one where the patron
		/// parked. To receive this lower rate, patrons must pay for their
		/// parking with the same SmarTrip&reg; card used to enter/exit
		/// Metrorail, and must exit the parking lot within two hours of
		/// exiting Metrorail.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>NonRiderCost</td>
		/// 
		/// <td>All-day cost per day (weekday) for non-Metro riders. NULL when no all-day
		/// spots are available.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="ShortTermParking" name=
		/// "ShortTermParking">ShortTermParking Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SaturdayRiderCost</td>
		/// 
		/// <td>Similar to RiderCost, except denoting Saturday prices.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SaturdayNonRiderCost</td>
		/// 
		/// <td>Similar to NonRiderCost, except denoting Saturday prices.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>TotalCount</td>
		/// 
		/// <td>Number of short-term parking spots available at a station
		/// (parking meters).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Notes</td>
		/// 
		/// <td>Misc. information relating to short-term parking. NULL when no
		/// short-term spots are available.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// StationParkingGetByStationCode StationParking
		/// </summary>
		/// <param name="StationCode">Station code.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task StationParkingGetByStationCodeAsync(StationParkingGetByStationCodeStationCode StationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StationParking?StationCode=" + StationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// XML - Station Timings
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns opening and scheduled first/last train times based on a given
		/// StationCode. Omit the StationCode to return timing information for all
		/// stations.</p>
		/// 
		/// <p>Note that for stations with multiple platforms (e.g.: Metro Center, L'Enfant
		/// Plaza, etc.), a distinct call is required for each StationCode to retrieve the
		/// full set of train times at such stations.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>StationTimes</td>
		/// 
		/// <td>
		/// Array containing station timing information (<a href=
		/// "#StationTime">StationTime</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="StationTime" name="StationTime">StationTime
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Code</td>
		/// 
		/// <td>Station code for this station. Use this value in other
		/// rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationName</td>
		/// 
		/// <td>Full name of the station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>*Day Elements</td>
		/// 
		/// <td>
		/// Container elements containing timing information based on
		/// <a href="#dow">day of the week.</a>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="dow" name="dow">Monday/Tuesday/Wednesday/etc.
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>OpeningTime</td>
		/// 
		/// <td>Station opening time. Format is HH:mm.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>FirstTrains</td>
		/// 
		/// <td>
		/// Structure containing <a href="#first">first train</a>
		/// information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LastTrains</td>
		/// 
		/// <td>
		/// Structure containing <a href="#last">last train</a>
		/// information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="first" name="first">FirstTrains Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Time</td>
		/// 
		/// <td>First train leaves the station at this time. Format is
		/// HH:mm.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DestinationStation</td>
		/// 
		/// <td>Station code for the train's destination. Use this value in
		/// other rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="last" name="last">LastTrains Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Time</td>
		/// 
		/// <td>Last train leaves the station at this time. Format is HH:mm.
		/// Note that when the time is AM, it signifies the next day. For
		/// example, a value of 02:30 under a Saturday element means the last
		/// train leaves on Sunday at 2:30 AM.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DestinationStation</td>
		/// 
		/// <td>Station code for the train's destination. Use this value in
		/// other rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// StationTimesGetByStationCode StationTimes
		/// </summary>
		/// <param name="StationCode">Station code.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task StationTimesGetByStationCodeAsync(SrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeFromStationCode StationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "StationTimes?StationCode=" + StationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// XML - Station List
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns a list of station location and address information based on a given
		/// LineCode. Omit the LineCode to return all stations. The response is an array of
		/// objects identical to those returned in the Station Information method.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Stations</td>
		/// 
		/// <td>
		/// Array containing station information (<a href=
		/// "#Station">Station</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="Station" name="Station">Station Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Address</td>
		/// 
		/// <td>
		/// Structure describing <a href="#Address">address</a> information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Code</td>
		/// 
		/// <td>Station code. Repeated from input.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lat</td>
		/// 
		/// <td>Latitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode1</td>
		/// 
		/// <td>Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,
		/// or SV) served by this station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode2</td>
		/// 
		/// <td>Additional line served by this station. This is often the case
		/// when stations have multiple platforms (e.g.: Gallery Place, Fort
		/// Totten, L'Enfant Plaza, and Metro Center).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode3</td>
		/// 
		/// <td>Similar to function as LineCodeX.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode4</td>
		/// 
		/// <td>Similar to function as LineCodeX. Currently not in use.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lon</td>
		/// 
		/// <td>Longitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Name</td>
		/// 
		/// <td>Station name.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationTogether1</td>
		/// 
		/// <td>For stations with multiple platforms (e.g.: Gallery Place, Fort
		/// Totten, L'Enfant Plaza, and Metro Center), the additional
		/// StationCode will be listed here.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationTogether2</td>
		/// 
		/// <td>Similar in function to StationTogether2. Currently not in
		/// use.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="Address" name="Address">Address Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>City</td>
		/// 
		/// <td>City.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>State</td>
		/// 
		/// <td>State (abbreviated).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Street</td>
		/// 
		/// <td>Street address (for GPS use).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Zip</td>
		/// 
		/// <td>Zip code.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// StationsGetByLineCode Stations
		/// </summary>
		/// <param name="LineCode">Two-letter line code abbreviation:
		///
		///<ul>
		///<li>RD - Red</li>
		///<li>YL - Yellow</li>
		///<li>GR - Green</li>
		///<li>BL - Blue</li>
		///<li>OR - Orange</li>
		///<li>SV - Silver</li>
		///</ul></param>
		/// <returns>Default response code.</returns>
		public async Task StationsGetByLineCodeAsync(StationsGetByLineCodeLineCode LineCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Stations?LineCode=" + LineCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON - Lines
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns information about all rail lines.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Lines</td>
		/// 
		/// <td>
		/// Array containing line information (<a href="#Line">Line</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="Line" name="Line">Line Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DisplayName</td>
		/// 
		/// <td>Full name of line color.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>EndStationCode</td>
		/// 
		/// <td>End station code. For example, will be E10 (Greenbelt) for the
		/// Green Line, B11 (Glenmont) for the Red Line, etc. Use this value in
		/// other rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>InternalDestination1</td>
		/// 
		/// <td>Intermediate terminal station code. During normal service, some
		/// trains on some lines might end their trip prior to the
		/// StartStationCode or EndStationCode. A good example is on the Red
		/// Line where some trains stop at A11 (Grosvenor) or B08 (Silver
		/// Spring). Empty string if not defined.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>InternalDestination2</td>
		/// 
		/// <td>Similar to InternalDestination1.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode</td>
		/// 
		/// <td>Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,
		/// or SV).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StartStationCode</td>
		/// 
		/// <td>Start station code. For example, will be F11 (Branch Avenue)
		/// for the Green Line, A15 (Shady Grove) for the Red Line, etc. Use
		/// this value in other rail-related APIs to retrieve data about a
		/// station.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// JsonJLinesGet json/jLines
		/// </summary>
		/// <returns>Default response code.</returns>
		public async Task JsonJLinesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/jLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON - Path Between Stations
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns a set of ordered stations and distances between two stations on the
		/// <em>same line</em>.</p>
		/// 
		/// <p>Note that this method is not suitable on its own as a pathfinding solution
		/// between stations.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Path</td>
		/// 
		/// <td>
		/// Array containing path details (<a href=
		/// "#MetroPathItem">MetroPathItem</a>)
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="MetroPathItem" name="MetroPathItem">MetroPathItem
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DistanceToPrev</td>
		/// 
		/// <td>Distance in feet to the previous station in the list.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode</td>
		/// 
		/// <td>Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,
		/// or SV) this station's platform is on.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SeqNum</td>
		/// 
		/// <td>Ordered sequence number.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationCode</td>
		/// 
		/// <td>Station code for this station. Use this value in other
		/// rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationName</td>
		/// 
		/// <td>Full name for this station, as shown on the WMATA website.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// JsonJPathGetByFromStationCodeAndToStationCode json/jPath
		/// </summary>
		/// <param name="FromStationCode">Station code for the origin station.  Use the Station List method to return a list of all station codes.</param>
		/// <param name="ToStationCode">Station code for the destination station.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task JsonJPathGetByFromStationCodeAndToStationCodeAsync(PathGetByFromStationCodeAndToStationCodeFromStationCode FromStationCode, PathGetByFromStationCodeAndToStationCodeToStationCode ToStationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/jPath?FromStationCode=" + FromStationCode+"&ToStationCode=" + ToStationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON - Station to Station Information
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns a distance, fare information, and estimated travel time between any
		/// two stations, including those on different lines. Omit both parameters to
		/// retrieve data for all stations.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>StationToStationInfos</td>
		/// 
		/// <td>
		/// Array containing station to station information (<a href=
		/// "#StationToStationInfo">StationToStationInfo</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="StationToStationInfo" name=
		/// "StationToStationInfo">StationToStationInfo Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>CompositeMiles</td>
		/// 
		/// <td>Average of distance traveled between two stations and straight-line distance (as used for WMATA fare calculations).  For more details, please refer to WMATA's <a href="https://www.wmata.com/about/records/public_docs/upload/Tariff-on-Fares-Annotated-2-12-18.pdf#page=6" target="_blank" rel="noopener noreferrer">Tariff on Fares</a>.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DestinationStation</td>
		/// 
		/// <td>Destination station code. Use this value in other rail-related
		/// APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>RailFare</td>
		/// 
		/// <td>
		/// Structure containing <a href="#RailFare">fare</a> information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>RailTime</td>
		/// 
		/// <td>Estimated travel time (schedule time) in minutes between the source and
		/// destination station. This is not correlated to minutes <span class="text-info">(Min)</span> in Real-Time Rail Predictions.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SourceStation</td>
		/// 
		/// <td>Origin station code. Use this value in other rail-related APIs
		/// to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="RailFare" name="RailFare">RailFare Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>OffPeakTime</td>
		/// 
		/// <td>Fare during off-peak times (times other than the ones described
		/// below).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>PeakTime</td>
		/// 
		/// <td>Fare during peak times (weekdays from opening to 9:30 AM and
		/// 3-7 PM, and weekends from midnight to closing).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SeniorDisabled</td>
		/// 
		/// <td>
		/// Reduced fare for <a href=
		/// "http://www.wmata.com/fares/reduced.cfm">senior citizens or
		/// people with disabilities</a>.
		/// </td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// JsonJSrcStationToDstStationInfoGetByFromStationCodeAndToStationCode json/jSrcStationToDstStationInfo
		/// </summary>
		/// <param name="FromStationCode">Station code for the origin station.  Use the Station List method to return a list of all station codes.</param>
		/// <param name="ToStationCode">Station code for the destination station.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task JsonJSrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeAsync(SrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeFromStationCode FromStationCode, SrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeToStationCode ToStationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/jSrcStationToDstStationInfo?FromStationCode=" + FromStationCode+"&ToStationCode=" + ToStationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON - Station Entrances
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns a list of nearby station entrances based on latitude, longitude, and
		/// radius (meters). Omit search parameters to return all station entrances.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Entrances</td>
		/// 
		/// <td>
		/// Array containing detailed information about station entrances
		/// (<a href="#StationEntrance">StationEntrance</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="StationEntrance" name=
		/// "StationEntrance">StationEntrance Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Description</td>
		/// 
		/// <td>Additional information for the entrance, if available.
		/// Currently available data usually shows the same value as the Name
		/// element.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td style="text-decoration: line-through">ID</td>
		/// 
		/// <td><span class="text-danger">Deprecated.</span></td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lat</td>
		/// 
		/// <td>Latitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lon</td>
		/// 
		/// <td>Longitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Name</td>
		/// 
		/// <td>Name of the entrance (usually the station name and nearest
		/// intersection).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationCode1</td>
		/// 
		/// <td>The station code associated with this entrance. Use this value
		/// in other rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationCode2</td>
		/// 
		/// <td>For stations containing multiple platforms (e.g.: Gallery
		/// Place, Fort Totten, L'Enfant Plaza, and Metro Center), the other
		/// station code.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// JsonJStationEntrancesGetByLatAndLonAndRadius json/jStationEntrances
		/// </summary>
		/// <param name="Lat">Center point Latitude, required if Longitude and Radius are specified.</param>
		/// <param name="Lon">Center point Longitude, required if Latitude and Radius are specified.</param>
		/// <param name="Radius">Radius (meters) to include in the search area, required if Latitude and Longitude are specified.</param>
		/// <returns>Default response code.</returns>
		public async Task JsonJStationEntrancesGetByLatAndLonAndRadiusAsync(JsonJStationEntrancesGetByLatAndLonAndRadiusLat Lat, JsonJStationEntrancesGetByLatAndLonAndRadiusLon Lon, JsonJStationEntrancesGetByLatAndLonAndRadiusRadius Radius, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/jStationEntrances?Lat="+Lat+"&Lon="+Lon+"&Radius="+Radius;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON - Station Information
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns station location and address information based on a given
		/// StationCode.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Address</td>
		/// 
		/// <td>
		/// Structure describing <a href="#Address">address</a> information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Code</td>
		/// 
		/// <td>Station code. Repeated from input.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lat</td>
		/// 
		/// <td>Latitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode1</td>
		/// 
		/// <td>Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,
		/// or SV) served by this station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode2</td>
		/// 
		/// <td>Additional line served by this station. This is often the case
		/// when stations have multiple platforms (e.g.: Gallery Place, Fort
		/// Totten, L'Enfant Plaza, and Metro Center).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode3</td>
		/// 
		/// <td>Similar to function as LineCodeX.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode4</td>
		/// 
		/// <td>Similar to function as LineCodeX. Currently not in use.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lon</td>
		/// 
		/// <td>Longitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Name</td>
		/// 
		/// <td>Station name.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationTogether1</td>
		/// 
		/// <td>For stations with multiple platforms (e.g.: Gallery Place, Fort
		/// Totten, L'Enfant Plaza, and Metro Center), the additional
		/// StationCode will be listed here.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationTogether2</td>
		/// 
		/// <td>Similar in function to StationTogether2. Currently not in
		/// use.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a name="Address">Address Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>City</td>
		/// 
		/// <td>City.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>State</td>
		/// 
		/// <td>State (abbreviated).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Street</td>
		/// 
		/// <td>Street address (for GPS use).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Zip</td>
		/// 
		/// <td>Zip code.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// JsonJStationInfoGetByStationCode json/jStationInfo
		/// </summary>
		/// <param name="StationCode">Station code.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task JsonJStationInfoGetByStationCodeAsync(StationInfoGetByStationCodeStationCode StationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/jStationInfo?StationCode=" + StationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON - Parking Information
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns parking information at a station based on a given StationCode. Omit
		/// the StationCode to return parking information for all stations.</p>
		/// 
		/// <p>If a station has no parking, the StationsParking element will contain no
		/// child elements.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>StationsParking</td>
		/// 
		/// <td>
		/// Array containing station parking information (<a href=
		/// "#StationParking">StationParking</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="StationParking" name="StationParking">StationParking
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Code</td>
		/// 
		/// <td>Station code. Useful when returning parking information for all
		/// stations. Use this value in other rail-related APIs to retrieve
		/// data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Notes</td>
		/// 
		/// <td>When not NULL, provides additional parking resources such as
		/// nearby lots.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>AllDayParking</td>
		/// 
		/// <td>
		/// Structure describing <a href="#AllDayParking">all-day
		/// parking</a> options.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>ShortTermParking</td>
		/// 
		/// <td>
		/// Structure describing <a href="#ShortTermParking">short-term
		/// parking</a> options.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="AllDayParking" name="AllDayParking">AllDayParking
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>TotalCount</td>
		/// 
		/// <td>Number of all-day parking spots available at a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>RiderCost</td>
		/// 
		/// <td>All-day cost per day (weekday) for Metro riders. NULL when no all-day
		/// spots are available. For most stations, this value is identical to
		/// the NonRiderCost.<br>
		/// <br>
		/// For cases where the NonRiderCost is different, the lower cost per
		/// day requires a valid rail trip using a SmarTrip&reg; card
		/// originating from a station other than the one where the patron
		/// parked. To receive this lower rate, patrons must pay for their
		/// parking with the same SmarTrip&reg; card used to enter/exit
		/// Metrorail, and must exit the parking lot within two hours of
		/// exiting Metrorail.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>NonRiderCost</td>
		/// 
		/// <td>All-day cost per day (weekday) for non-Metro riders. NULL when no all-day
		/// spots are available.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="ShortTermParking" name=
		/// "ShortTermParking">ShortTermParking Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SaturdayRiderCost</td>
		/// 
		/// <td>Similar to RiderCost, except denoting Saturday prices.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>SaturdayNonRiderCost</td>
		/// 
		/// <td>Similar to NonRiderCost, except denoting Saturday prices.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>TotalCount</td>
		/// 
		/// <td>Number of short-term parking spots available at a station
		/// (parking meters).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Notes</td>
		/// 
		/// <td>Misc. information relating to short-term parking. NULL when no
		/// short-term spots are available.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// JsonJStationParkingGetByStationCode json/jStationParking
		/// </summary>
		/// <param name="StationCode">Station code.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task JsonJStationParkingGetByStationCodeAsync(StationParkingGetByStationCodeStationCode StationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/jStationParking?StationCode=" + StationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON - Station Timings
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns opening and scheduled first/last train times based on a given
		/// StationCode. Omit the StationCode to return timing information for all
		/// stations.</p>
		/// 
		/// <p>Note that for stations with multiple platforms (e.g.: Metro Center, L'Enfant
		/// Plaza, etc.), a distinct call is required for each StationCode to retrieve the
		/// full set of train times at such stations.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>StationTimes</td>
		/// 
		/// <td>
		/// Array containing station timing information (<a href=
		/// "#StationTime">StationTime</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="StationTime" name="StationTime">StationTime
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Code</td>
		/// 
		/// <td>Station code for this station. Use this value in other
		/// rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationName</td>
		/// 
		/// <td>Full name of the station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>*Day Elements</td>
		/// 
		/// <td>
		/// Container elements containing timing information based on
		/// <a href="#dow">day of the week.</a>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="dow" name="dow">Monday/Tuesday/Wednesday/etc.
		/// Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>OpeningTime</td>
		/// 
		/// <td>Station opening time. Format is HH:mm.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>FirstTrains</td>
		/// 
		/// <td>
		/// Structure containing <a href="#first">first train</a>
		/// information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LastTrains</td>
		/// 
		/// <td>
		/// Structure containing <a href="#last">last train</a>
		/// information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="first" name="first">FirstTrains Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Time</td>
		/// 
		/// <td>First train leaves the station at this time. Format is
		/// HH:mm.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DestinationStation</td>
		/// 
		/// <td>Station code for the train's destination. Use this value in
		/// other rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="last" name="last">LastTrains Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Time</td>
		/// 
		/// <td>Last train leaves the station at this time. Format is HH:mm.
		/// Note that when the time is AM, it signifies the next day. For
		/// example, a value of 02:30 under a Saturday element means the last
		/// train leaves on Sunday at 2:30 AM.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DestinationStation</td>
		/// 
		/// <td>Station code for the train's destination. Use this value in
		/// other rail-related APIs to retrieve data about a station.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// JsonJStationTimesGetByStationCode json/jStationTimes
		/// </summary>
		/// <param name="StationCode">Station code.  Use the Station List method to return a list of all station codes.</param>
		/// <returns>Default response code.</returns>
		public async Task JsonJStationTimesGetByStationCodeAsync(SrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeFromStationCode StationCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/jStationTimes?StationCode=" + StationCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON - Station List
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns a list of station location and address information based on a given
		/// LineCode. Omit the LineCode to return all stations. The response is an array of
		/// objects identical to those returned in the Station Information method.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Stations</td>
		/// 
		/// <td>
		/// Array containing station information (<a href=
		/// "#Station">Station</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="Station" name="Station">Station Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Address</td>
		/// 
		/// <td>
		/// Structure describing <a href="#Address">address</a> information.
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Code</td>
		/// 
		/// <td>Station code. Repeated from input.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lat</td>
		/// 
		/// <td>Latitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode1</td>
		/// 
		/// <td>Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,
		/// or SV) served by this station.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode2</td>
		/// 
		/// <td>Additional line served by this station. This is often the case
		/// when stations have multiple platforms (e.g.: Gallery Place, Fort
		/// Totten, L'Enfant Plaza, and Metro Center).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode3</td>
		/// 
		/// <td>Similar to function as LineCodeX.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>LineCode4</td>
		/// 
		/// <td>Similar to function as LineCodeX. Currently not in use.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Lon</td>
		/// 
		/// <td>Longitude.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Name</td>
		/// 
		/// <td>Station name.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationTogether1</td>
		/// 
		/// <td>For stations with multiple platforms (e.g.: Gallery Place, Fort
		/// Totten, L'Enfant Plaza, and Metro Center), the additional
		/// StationCode will be listed here.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StationTogether2</td>
		/// 
		/// <td>Similar in function to StationTogether2. Currently not in
		/// use.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="Address" name="Address">Address Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>City</td>
		/// 
		/// <td>City.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>State</td>
		/// 
		/// <td>State (abbreviated).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Street</td>
		/// 
		/// <td>Street address (for GPS use).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Zip</td>
		/// 
		/// <td>Zip code.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// JsonJStationsGetByLineCode json/jStations
		/// </summary>
		/// <param name="LineCode">Two-letter line code abbreviation:
		///
		///<ul>
		///<li>RD - Red</li>
		///<li>YL - Yellow</li>
		///<li>GR - Green</li>
		///<li>BL - Blue</li>
		///<li>OR - Orange</li>
		///<li>SV - Silver</li>
		///</ul></param>
		/// <returns>Default response code.</returns>
		public async Task JsonJStationsGetByLineCodeAsync(StationsGetByLineCodeLineCode LineCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/jStations?LineCode=" + LineCode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum PathGetByFromStationCodeAndToStationCodeFromStationCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N06 = 0,
	}
	
	public enum PathGetByFromStationCodeAndToStationCodeToStationCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		G05 = 0,
	}
	
	public enum SrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeFromStationCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E10 = 0,
	}
	
	public enum SrcStationToDstStationInfoGetByFromStationCodeAndToStationCodeToStationCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		J03 = 0,
	}
	
	public enum StationEntrancesGetByLatAndLonAndRadiusLat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38.8978168")]
		_38_8978168 = 0,
	}
	
	public enum StationEntrancesGetByLatAndLonAndRadiusLon
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-77.0404246")]
		_Minus77_0404246 = 0,
	}
	
	public enum StationEntrancesGetByLatAndLonAndRadiusRadius
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="500")]
		_500 = 0,
	}
	
	public enum StationInfoGetByStationCodeStationCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A01 = 0,
	}
	
	public enum StationParkingGetByStationCodeStationCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E08 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F06 = 1,
	}
	
	public enum StationsGetByLineCodeLineCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SV = 5,
	}
	
	public enum JsonJStationEntrancesGetByLatAndLonAndRadiusLat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38.8978168")]
		_38_8978168 = 0,
	}
	
	public enum JsonJStationEntrancesGetByLatAndLonAndRadiusLon
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-77.0404246")]
		_Minus77_0404246 = 0,
	}
	
	public enum JsonJStationEntrancesGetByLatAndLonAndRadiusRadius
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="500")]
		_500 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
