//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ConfirmOrderBody
	{
		
		/// <summary>
		/// quote_id generated by the /order/create endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote_id")]
		public string Quote_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreateModelBody
	{
		
		/// <summary>
		/// URL to download the model data from. The URL must end in .STL or .OBJ -- the extension of the final segment of the URL is used to determine how ot parse the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_url")]
		public string File_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreateOrderBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="models")]
		public Print[] Models { get; set; }
		
		/// <summary>
		/// Any notes about this order. This field is always returned when reading the order back.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public ShippingAddress Shipping_address { get; set; }
		
		/// <summary>
		/// Service identifier string pulled from a specific rate returned by /order/shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_service")]
		public string Shipping_service { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Print
	{
		
		/// <summary>
		/// The unique identifier of the material you'd like to print in. This value comes from the id field of the material object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material_id")]
		public System.Nullable<System.Int32> Material_id { get; set; }
		
		/// <summary>
		/// The unique identifier of the model you'd like to print. This value comes from the id field of the model object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model_id")]
		public System.Nullable<System.Int32> Model_id { get; set; }
		
		/// <summary>
		/// Optional extra parameters for the production of this model. There may be additional charges for each enabled optional service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ProductionOptions Options { get; set; }
		
		/// <summary>
		/// The number of prints to order for this material/model pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The units of the model file. Either "mm", "cm", or "in". The correct value to pass here depends on which design program you're using. Defaults to "mm".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	/// <summary>
	/// Optional extra parameters for the production of this model. There may be additional charges for each enabled optional service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ProductionOptions
	{
		
		/// <summary>
		/// Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you're not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public System.Nullable<System.Boolean> Orientation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ShippingAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Contact email address for the recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Name of the recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// First line of the street address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street1")]
		public string Street1 { get; set; }
		
		/// <summary>
		/// Second line of the street address (Apartment or Suite number, etc). Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street2")]
		public string Street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Material
	{
		
		/// <summary>
		/// Name for the color of this material. This field is for display only and is not required for creating an order (use the material's id).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// A hex value providing an approximate visual sample of this color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color_sample")]
		public string Color_sample { get; set; }
		
		/// <summary>
		/// The unique identifier for this material. Use this value when submitting order items to specify that an ordered model should be printed with a specific material.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Type of material, excluding color. Will be one of "PLA", "Semi-flex TPU", or "Full-flex TPU". This field is for display only and is not required for creating an order (use the material's id).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Model
	{
		
		/// <summary>
		/// The unique identifier for this model. Use this value when submitting an order to specify the model you want to print.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// (reserved) URL with a rendering of the model. Value is null until the rendering is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rendering_url")]
		public string Rendering_url { get; set; }
		
		/// <summary>
		/// The unitless surface area of the submitted model. This is calculated when the model is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surface_area")]
		public System.Nullable<System.Double> Surface_area { get; set; }
		
		/// <summary>
		/// The unitless volume of the submitted model. This is calculated when the model is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public System.Nullable<System.Double> Volume { get; set; }
		
		/// <summary>
		/// The unitless x-axis length of the model's bounding box. This is calculated when the model is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x")]
		public System.Nullable<System.Double> X { get; set; }
		
		/// <summary>
		/// The unitless y-axis length of the model's bounding box. This is calculated when the model is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="y")]
		public System.Nullable<System.Double> Y { get; set; }
		
		/// <summary>
		/// The unitless z-axis length of the model's bounding box. This is calculated when the model is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="z")]
		public System.Nullable<System.Double> Z { get; set; }
	}
	
	/// <summary>
	/// Quote for a model in the given material_id, units, and quantity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ModelQuote
	{
		
		/// <summary>
		/// Requested material id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material_id")]
		public System.Nullable<System.Int32> Material_id { get; set; }
		
		/// <summary>
		/// Requested model id. Not present on the response from /model/quote_attrs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model_id")]
		public System.Nullable<System.Int32> Model_id { get; set; }
		
		/// <summary>
		/// Cost of any requested additional model services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ProductionOptionsCosts Options { get; set; }
		
		/// <summary>
		/// The cost for printing the model in the requested quantity, before any additional services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote")]
		public System.Nullable<System.Double> Quote { get; set; }
		
		/// <summary>
		/// The cost of a single print of the specified model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit_cost")]
		public System.Nullable<System.Double> Unit_cost { get; set; }
		
		/// <summary>
		/// Units for the requested print. One of "mm", "cm", or "in".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	/// <summary>
	/// Cost of any requested additional model services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ProductionOptionsCosts
	{
		
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public System.Nullable<System.Double> Orientation { get; set; }
	}
	
	/// <summary>
	/// An order contains all of the relevant information about a confirmed order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Order
	{
		
		/// <summary>
		/// Customer's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_contact_email")]
		public string Customer_contact_email { get; set; }
		
		/// <summary>
		/// Customer's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_name")]
		public string Customer_name { get; set; }
		
		/// <summary>
		/// Unique identifier for this order. Reference should be displayed and used for lookups instead of this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The notes field that was submitted with this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prints")]
		public OrderPrint[] Prints { get; set; }
		
		/// <summary>
		/// Unique identifier for this order. Used to retrieve info for a specific order from /order/{order_id}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// Planned ship date for this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ship_by")]
		public string Ship_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public ShippingAddress Shipping_address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class OrderPrint
	{
		
		[System.Runtime.Serialization.DataMember(Name="material")]
		public Material Material { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public Model Model { get; set; }
		
		/// <summary>
		/// The number of prints requested for this model and material pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Units for the requested print. One of "mm", "cm", or "in".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Quote
	{
		
		/// <summary>
		/// List of any issues quoting your order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string[] Errors { get; set; }
		
		/// <summary>
		/// Sum of items, shipping costs, and any calculated tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grand_total")]
		public System.Nullable<System.Double> Grand_total { get; set; }
		
		/// <summary>
		/// Cost to make the specified models in the specified materials and quantities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public System.Nullable<System.Double> Items { get; set; }
		
		/// <summary>
		/// Cost of any requested additional model services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ProductionOptionsCosts Options { get; set; }
		
		/// <summary>
		/// Cost of the selected shipping method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public System.Nullable<System.Double> Shipping { get; set; }
		
		/// <summary>
		/// The tax calculated for the given order. Tax is not applied to all orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Double> Tax { get; set; }
		
		/// <summary>
		/// Sum of items and shipping costs. This is the taxable subtotal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Rate
	{
		
		/// <summary>
		/// The target delivery date for the shipping method. Formatted as a datetime string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delivery_date")]
		public string Delivery_date { get; set; }
		
		/// <summary>
		/// The display name for this shipping service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// Certain shipping methods have guaranteed delivery dates. This field indicates whether delivery_date is guaranteed or if it is just an estimate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteed")]
		public System.Nullable<System.Boolean> Guaranteed { get; set; }
		
		/// <summary>
		/// The price of this shipping option for the given set of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// The identifier string for this shipping service. Use this value when creating an order with this as your requested shipping method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// The target ship date for the shipping method. Formatted as a datetime string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ship_date")]
		public string Ship_date { get; set; }
		
		/// <summary>
		/// Reserved field. Do not use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ShippingOptionsBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="models")]
		public Print[] Models { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public ShippingAddress Shipping_address { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Voodoo Manufacturing offers printing in a number of different materials, with different color options for each. Your organization can expose as many or as few material options as you want to your end-customer.
		/// 
		/// The Materials endpoint returns a list of materials that are currently available for production for your account.
		/// The responses include display details about each material, along with the unique id required to request a print in a specific material.
		/// 
		/// MaterialsGet materials
		/// </summary>
		/// <returns>Array of materials</returns>
		public async Task<Material[]> MaterialsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Material[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the models you've created.
		/// 
		/// Lists all of the models you've created.
		/// 
		/// ModelGet model
		/// </summary>
		/// <returns>Array of models</returns>
		public async Task<Model[]> ModelGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "model";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Model[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Models represent 3D design files that you'd like to produce. Creating models is generally the first step in creating an order.
		/// 
		/// Downloads the model data from the URL specified by file_url and saves it as a model. As a part of the model upload process, the file is run through a program that repairs the mesh (closing holes, flipping inverted normals, etc). In some cases, this may alter the geometry of your model. If you're noticing bad results for your created models, you might consider repairing your files before submitting them.
		/// 
		/// ModelPost model
		/// </summary>
		/// <returns>Model object</returns>
		public async Task<Model> ModelPostAsync(CreateModelBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "model";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Model>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a quote a given model id.
		/// 
		/// Calculates a quote for the given model in the given material and quantity. This endpoint required that you've already uploaded the model to our servers -- to get a quote for a model you haven't yet uploaded, you can try /model/quote_attrs.
		/// 
		/// ModelQuoteGetByModel_idAndMaterial_idAndQuantityAndUnitsAndOptions_orientation model/quote
		/// </summary>
		/// <param name="model_id">The unique id of the model you'd like to quote.</param>
		/// <param name="material_id">The unique id of the desired material.</param>
		/// <param name="quantity">The number of units in this quote.</param>
		/// <param name="units">The units of the model file. Either "mm", "cm", or "in". The correct value to pass here depends on which design program you're using. Defaults to "mm".</param>
		/// <param name="options_orientation">Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you're not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation.</param>
		/// <returns>Quote for model with attributes</returns>
		public async Task<ModelQuote> ModelQuoteGetByModel_idAndMaterial_idAndQuantityAndUnitsAndOptions_orientationAsync(int model_id, double material_id, double quantity, string units, bool options_orientation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "model/quote?model_id="+model_id+"&material_id="+material_id+"&quantity="+quantity+"&units=" + (units==null? "" : System.Uri.EscapeDataString(units))+"&options[orientation]="+options_orientation;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ModelQuote>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a quote for a model with the given attributes.
		/// 
		/// This endpoint will provide a quote for a model matching the submitted parameters. Note that this quote may be different than the quote provided by /model/quote in the case that your attribute calculations differ from the ones used by Voodoo Manufacturing.
		/// 
		/// ModelQuote_attrsGetByXAndYAndZAndVolumeAndSurface_areaAndMaterial_idAndQuantityAndUnitsAndOptions_orientation model/quote_attrs
		/// </summary>
		/// <param name="x">The calculated unitless x dimension of this model's bounding box.</param>
		/// <param name="y">The calculated unitless y dimension of this model's bounding box.</param>
		/// <param name="z">The calculated unitless z dimension of this model's bounding box.</param>
		/// <param name="volume">The calculated unitless volume of the model.</param>
		/// <param name="surface_area">The calculated unitless surface area of the model.</param>
		/// <param name="material_id">The unique id of the desired material.</param>
		/// <param name="quantity">The number of units in this quote.</param>
		/// <param name="units">The units of the model file. Either "mm", "cm", or "in". The correct value to pass here depends on which design program you're using. Defaults to "mm".</param>
		/// <param name="options_orientation">Indicates whether or not this model needs to be oriented prior to printing. If your model is already oriented for 3D printing, you can omit this flag (or set it to false) and it will not be re-oriented prior to printing. If true, it will be re-oriented prior to printing. If you're not sure if your model is oriented, you should set this flag to true. There is an additional charge for orientation.</param>
		/// <returns>Quote for model with attributes</returns>
		public async Task<ModelQuote> ModelQuote_attrsGetByXAndYAndZAndVolumeAndSurface_areaAndMaterial_idAndQuantityAndUnitsAndOptions_orientationAsync(double x, double y, double z, double volume, double surface_area, double material_id, double quantity, string units, bool options_orientation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "model/quote_attrs?x="+x+"&y="+y+"&z="+z+"&volume="+volume+"&surface_area="+surface_area+"&material_id="+material_id+"&quantity="+quantity+"&units=" + (units==null? "" : System.Uri.EscapeDataString(units))+"&options[orientation]="+options_orientation;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ModelQuote>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a previously created model by its id.
		/// 
		/// In cases where you're ordering models you've created previously, you can fetch a specific model by its id.
		/// 
		/// Model_model_idGet model/{model_id}
		/// </summary>
		/// <returns>Model object</returns>
		public async Task<Model> Model_model_idGetAsync(int model_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "model/"+model_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Model>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all orders.
		/// 
		/// Gets all of orders that you've confirmed.
		/// 
		/// OrderGet order
		/// </summary>
		/// <returns>Array of orders</returns>
		public async Task<Order[]> OrderGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Order[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Confirms an order from a quote_id and submits it to the Voodoo factory.
		/// 
		/// After generating a quote for an order, you can choose to confirm the order for manufacturing by hitting this endpoint with the quote_id returned by the /order/quote endpoint. Returns the order with a unique order_id in place of the quote_id.
		/// 
		/// OrderConfirmPost order/confirm
		/// </summary>
		/// <returns>Order info with order_id</returns>
		public async Task<OrderConfirmPostReturn> OrderConfirmPostAsync(ConfirmOrderBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order/confirm";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderConfirmPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Quotes an order and returns a quote_id that is used to confirm the order.
		/// 
		/// Creates an order for the requested items, shipping address, and shipping method. This method returns the order along with a quote_id, which needs to be confirmed with /order/confirm prior to the order actually being started. quote_ids are only valid for 15 minutes.
		/// 
		/// OrderCreatePost order/create
		/// </summary>
		/// <returns>Quote and order information.</returns>
		public async Task<OrderCreatePostReturn> OrderCreatePostAsync(CreateOrderBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order/create";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderCreatePostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List shipping options and prices for a given shipment.
		/// 
		/// Get quotes for shipping your order to the given shipping address. Because shipping quotes depend on the items being shipped, you should use the same array of print descriptions here that you do to create the order.
		/// 
		/// This endpoint should allow you to select the appropriate shipping method using the "service" field of the desired shipping method.
		/// 
		/// OrderShippingPost order/shipping
		/// </summary>
		/// <returns>Object containing an array of shipping rates</returns>
		public async Task<OrderShippingPostReturn> OrderShippingPostAsync(ShippingOptionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order/shipping";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderShippingPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a previously created model by its id.
		/// 
		/// In cases where you're ordering models you've created previously, you can fetch a specific model by its id.
		/// 
		/// Order_order_idGet order/{order_id}
		/// </summary>
		/// <returns>Model object</returns>
		public async Task<Order> Order_order_idGetAsync(string order_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order/"+ (order_id==null? "" : System.Uri.EscapeDataString(order_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Order>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class OrderConfirmPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public ShippingAddress Address { get; set; }
		
		/// <summary>
		/// The target delivery date for the shipping method. Formatted as a datetime string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delivery_date")]
		public string Delivery_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Unique identifier for referencing this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_items")]
		public Print[] Order_items { get; set; }
		
		/// <summary>
		/// true if the purchase was completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchased")]
		public System.Nullable<System.Boolean> Purchased { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quote")]
		public Quote Quote { get; set; }
		
		/// <summary>
		/// Service identifier string pulled from a specific rate returned by /order/shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_service")]
		public string Shipping_service { get; set; }
	}
	
	public class OrderCreatePostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public ShippingAddress Address { get; set; }
		
		/// <summary>
		/// The target delivery date for the shipping method. Formatted as a datetime string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delivery_date")]
		public string Delivery_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_items")]
		public Print[] Order_items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quote")]
		public Quote Quote { get; set; }
		
		/// <summary>
		/// Unique identifier for confirming this order. Use this value with /order/confirm place the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote_id")]
		public string Quote_id { get; set; }
		
		/// <summary>
		/// Service identifier string pulled from a specific rate returned by /order/shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_service")]
		public string Shipping_service { get; set; }
	}
	
	public class OrderShippingPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="rates")]
		public Rate[] Rates { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
