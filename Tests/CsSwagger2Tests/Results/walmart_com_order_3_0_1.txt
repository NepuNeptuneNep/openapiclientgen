//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all orders
		/// You can display a list of all orders with the query parameter filter criteria.
		/// GetAllOrders v3/orders
		/// </summary>
		/// <param name="shipNode">Ship Node</param>
		/// <param name="sku">Retrieves all orders with the specified SKU.</param>
		/// <param name="customerOrderId">Retrives the details of the specified customerOrderId.</param>
		/// <param name="purchaseOrderId">The purchase order ID associated with the order to retrieve. One customer order can have multiple purchase orders associated with it.</param>
		/// <param name="status">The list of orders corresponding to the requested status.</param>
		/// <param name="createdStartDate">Limit orders to those created after this date or a timestamp.</param>
		/// <param name="createdEndDate">Limit orders to those created before this date or timestamp.</param>
		/// <param name="fromExpectedShipDate">Limit orders to those that have order lines with an expected ship date after this date.</param>
		/// <param name="toExpectedShipDate">Limit orders to those that have order lines with an expected ship date before this date. </param>
		/// <param name="limit">The number of orders to be returned. Do not set this parameter to over 200 orders.</param>
		public async Task GetAllOrdersAsync(string shipNode, string sku, string customerOrderId, string purchaseOrderId, string status, string createdStartDate, string createdEndDate, string fromExpectedShipDate, string toExpectedShipDate, int limit)
		{
			var requestUri = "v3/orders?shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode))+"&sku=" + (sku==null? "" : System.Uri.EscapeDataString(sku))+"&customerOrderId=" + (customerOrderId==null? "" : System.Uri.EscapeDataString(customerOrderId))+"&purchaseOrderId=" + (purchaseOrderId==null? "" : System.Uri.EscapeDataString(purchaseOrderId))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&createdStartDate=" + (createdStartDate==null? "" : System.Uri.EscapeDataString(createdStartDate))+"&createdEndDate=" + (createdEndDate==null? "" : System.Uri.EscapeDataString(createdEndDate))+"&fromExpectedShipDate=" + (fromExpectedShipDate==null? "" : System.Uri.EscapeDataString(fromExpectedShipDate))+"&toExpectedShipDate=" + (toExpectedShipDate==null? "" : System.Uri.EscapeDataString(toExpectedShipDate))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all released orders
		/// You can display all released orders that have been created and are ready for fulfilment.
		/// GetReleasedOrders v3/orders/released
		/// </summary>
		/// <param name="shipNode">Ship Node</param>
		/// <param name="createdStartDate">Limit orders to those created after this date or a timestamp.</param>
		/// <param name="limit">The number of orders to be returned. Do not set this parameter to over 200 orders.</param>
		public async Task GetReleasedOrdersAsync(string shipNode, string createdStartDate, int limit)
		{
			var requestUri = "v3/orders/released?shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode))+"&createdStartDate=" + (createdStartDate==null? "" : System.Uri.EscapeDataString(createdStartDate))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get released orders for next page
		/// You can display all released orders that have been created and are ready for fulfilment with nextCursor path parameter.
		/// GetNextCursorReleasedOrders v3/orders/released{nextCursor}
		/// </summary>
		/// <param name="nextCursor">Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call.</param>
		public async Task GetNextCursorReleasedOrdersAsync(string nextCursor)
		{
			var requestUri = "v3/orders/released"+ (nextCursor==null? "" : System.Uri.EscapeDataString(nextCursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an order
		/// You can display details of a specific order based on the purchaseOrderId.
		/// GetOrderByPurchaseOrderId v3/orders/{purchaseOrderId}
		/// </summary>
		/// <param name="purchaseOrderId">Purchase Order ID</param>
		/// <param name="shipNode">Ship Node</param>
		public async Task GetOrderByPurchaseOrderIdAsync(string purchaseOrderId, string shipNode)
		{
			var requestUri = "v3/orders/"+ (purchaseOrderId==null? "" : System.Uri.EscapeDataString(purchaseOrderId))+"&shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Acknowledge orders
		/// You can acknowledge an entire order, including all of its order lines. Walmart business rules require to acknowledge orders within four hour of receipt of the order, except in extenuating circumstances.
		/// AcknowledgeOrders v3/orders/{purchaseOrderId}/acknowledge
		/// </summary>
		/// <param name="purchaseOrderId">Purchase Order ID</param>
		/// <param name="shipNode">Ship Node</param>
		public async Task AcknowledgeOrdersAsync(string purchaseOrderId, string shipNode)
		{
			var requestUri = "v3/orders/"+ (purchaseOrderId==null? "" : System.Uri.EscapeDataString(purchaseOrderId))+"/acknowledge&shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel order lines
		/// You can cancel one or more order lines. You must include a purchaseOrderLineNumber when cancelling an order. After cancelling your order, update the inventory for the cancelled order and send it in the next inventory feed.
		/// CancelOrder v3/orders/{purchaseOrderId}/cancel
		/// </summary>
		/// <param name="purchaseOrderId">Purchase Order ID</param>
		/// <param name="shipNode">Ship Node</param>
		/// <param name="requestBody">Request body</param>
		public async Task CancelOrderAsync(string purchaseOrderId, string shipNode, string requestBody)
		{
			var requestUri = "v3/orders/"+ (purchaseOrderId==null? "" : System.Uri.EscapeDataString(purchaseOrderId))+"/cancel&shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refund order lines
		/// You can refund one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line item.
		/// RefundOrder v3/orders/{purchaseOrderId}/refund
		/// </summary>
		/// <param name="purchaseOrderId">Purchase Order ID</param>
		/// <param name="shipNode">Ship Node</param>
		/// <param name="requestBody">Request body</param>
		public async Task RefundOrderAsync(string purchaseOrderId, string shipNode, string requestBody)
		{
			var requestUri = "v3/orders/"+ (purchaseOrderId==null? "" : System.Uri.EscapeDataString(purchaseOrderId))+"/refund&shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shipping updates
		/// You can change the status of order lines to "Shipped" and trigger the charge to a customer. You must acknowledge your orders before sending a shipping update to avoid underselling. An order line, once marked as shipped, cannot be updated.
		/// ShippingOrder v3/orders/{purchaseOrderId}/shipping
		/// </summary>
		/// <param name="purchaseOrderId">Purchase Order ID</param>
		/// <param name="shipNode">Ship Node</param>
		/// <param name="requestBody">Request body</param>
		public async Task ShippingOrderAsync(string purchaseOrderId, string shipNode, string requestBody)
		{
			var requestUri = "v3/orders/"+ (purchaseOrderId==null? "" : System.Uri.EscapeDataString(purchaseOrderId))+"/shipping&shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get orders for next page
		/// You can display a list of all orders with nextCursor path parameter pagination criteria.
		/// GetAllOrdersNext v3/orders{nextCursor}
		/// </summary>
		/// <param name="nextCursor">Used for pagination when there are more than 200 orders to retrieve. The nextCursor value of the returned response includes a link to another GET call to retrieve the next page. Copy the link and paste it in the next call.</param>
		public async Task GetAllOrdersNextAsync(string nextCursor)
		{
			var requestUri = "v3/orders"+ (nextCursor==null? "" : System.Uri.EscapeDataString(nextCursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetAllOrdersContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum GetAllOrdersAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum GetAllOrdersWM_CONSUMER_CHANNEL_TYPE
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWAGGER_CHANNEL_TYPE = 0,
	}
	
	public enum GetReleasedOrdersContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum GetReleasedOrdersAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum GetNextCursorReleasedOrdersContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum GetNextCursorReleasedOrdersAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum GetOrderByPurchaseOrderIdContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum GetOrderByPurchaseOrderIdAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum AcknowledgeOrdersContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum AcknowledgeOrdersAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum CancelOrderContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum CancelOrderAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum RefundOrderContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum RefundOrderAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum ShippingOrderContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum ShippingOrderAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum GetAllOrdersNextContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
	
	public enum GetAllOrdersNextAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/xml")]
		application_xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
