//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The public key of the gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionJwkResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="alg")]
		public string Alg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="e")]
		public string E { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kty")]
		public string Kty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="n")]
		public string N { get; set; }
	}
	
	/// <summary>
	/// Error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Collection of parameters for operations on a gateway resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewayParameters
	{
		
		/// <summary>
		/// Location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Collection of properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GatewayParametersProperties Properties { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class GatewayParametersProperties
	{
		
		/// <summary>
		/// The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeMode")]
		public System.Nullable<GatewayParametersPropertiesUpgradeMode> UpgradeMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GatewayParametersPropertiesUpgradeMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Manual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automatic = 1,
	}
	
	/// <summary>
	/// JSON properties that the gateway service uses know how to communicate with the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewayProfile
	{
		
		/// <summary>
		/// The Dataplane connection URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataPlaneServiceBaseAddress")]
		public string DataPlaneServiceBaseAddress { get; set; }
		
		/// <summary>
		/// The environment for the gateway (DEV, DogFood, or Production).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		/// <summary>
		/// The ID of the gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayId")]
		public string GatewayId { get; set; }
		
		/// <summary>
		/// Messaging Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messagingAccount")]
		public string MessagingAccount { get; set; }
		
		/// <summary>
		/// Messaging Key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messagingKey")]
		public string MessagingKey { get; set; }
		
		/// <summary>
		/// Messaging namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messagingNamespace")]
		public string MessagingNamespace { get; set; }
		
		/// <summary>
		/// Request queue name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestQueue")]
		public string RequestQueue { get; set; }
		
		/// <summary>
		/// Response topic name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseTopic")]
		public string ResponseTopic { get; set; }
		
		/// <summary>
		/// The gateway status blob SAS URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusBlobSignature")]
		public string StatusBlobSignature { get; set; }
		
		/// <summary>
		/// Gateway upgrade manifest URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeManifestUrl")]
		public string UpgradeManifestUrl { get; set; }
	}
	
	/// <summary>
	/// Data model for an arm gateway resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewayResource : Resource
	{
		
		/// <summary>
		/// Collection of properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GatewayResourceProperties Properties { get; set; }
	}
	
	public class GatewayResourceProperties
	{
		
		/// <summary>
		/// Number of active messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeMessageCount")]
		public System.Nullable<System.Int32> ActiveMessageCount { get; set; }
		
		/// <summary>
		/// UTC date and time when gateway was first added to management service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Latest available MSI version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredVersion")]
		public string DesiredVersion { get; set; }
		
		/// <summary>
		/// Installer download uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installerDownload")]
		public string InstallerDownload { get; set; }
		
		/// <summary>
		/// Names of the nodes in the gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public GatewayStatus[] Instances { get; set; }
		
		/// <summary>
		/// Last published MSI version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestPublishedMsiVersion")]
		public string LatestPublishedMsiVersion { get; set; }
		
		/// <summary>
		/// Minimum gateway version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumVersion")]
		public string MinimumVersion { get; set; }
		
		/// <summary>
		/// The date/time of the last published gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedTimeUtc")]
		public System.Nullable<System.DateTimeOffset> PublishedTimeUtc { get; set; }
		
		/// <summary>
		/// UTC date and time when node was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeMode")]
		public GatewayParametersPropertiesUpgradeMode UpgradeMode { get; set; }
	}
	
	/// <summary>
	/// Expanded gateway status information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewayStatus
	{
		
		/// <summary>
		/// Active message count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeMessageCount")]
		public System.Nullable<System.Int32> ActiveMessageCount { get; set; }
		
		/// <summary>
		/// Status of the allowGatewayGroupPolicy setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowGatewayGroupPolicyStatus")]
		public System.Nullable<System.Boolean> AllowGatewayGroupPolicyStatus { get; set; }
		
		/// <summary>
		/// The available memory on the gateway host machine in megabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableMemoryMByte")]
		public System.Nullable<System.Double> AvailableMemoryMByte { get; set; }
		
		/// <summary>
		/// Thumbprint of the encryption certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionCertificateThumbprint")]
		public string EncryptionCertificateThumbprint { get; set; }
		
		/// <summary>
		/// The public key of the gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionJwk")]
		public EncryptionJwkResource EncryptionJwk { get; set; }
		
		/// <summary>
		/// The Plaintext description of the OS on the gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyOsName")]
		public string FriendlyOsName { get; set; }
		
		/// <summary>
		/// The CPU utilization of the gateway process (numeric value between 0 and 100).
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayCpuUtilizationPercent")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Single> GatewayCpuUtilizationPercent { get; set; }
		
		/// <summary>
		/// The gateway resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayId")]
		public string GatewayId { get; set; }
		
		/// <summary>
		/// The version of the gateway that is installed on the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayVersion")]
		public string GatewayVersion { get; set; }
		
		/// <summary>
		/// The working set size of the gateway process in megabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayWorkingSetMByte")]
		public System.Nullable<System.Double> GatewayWorkingSetMByte { get; set; }
		
		/// <summary>
		/// The group policy error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupPolicyError")]
		public string GroupPolicyError { get; set; }
		
		/// <summary>
		/// The date the gateway was installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installedDate")]
		public System.Nullable<System.DateTimeOffset> InstalledDate { get; set; }
		
		/// <summary>
		/// Latest published version of the gateway install MSI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestPublishedMsiVersion")]
		public string LatestPublishedMsiVersion { get; set; }
		
		/// <summary>
		/// Number of logical processors in the gateway system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicalProcessorCount")]
		public System.Nullable<System.Int32> LogicalProcessorCount { get; set; }
		
		/// <summary>
		/// The computer name of the gateway system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gateway install MSI published time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedTimeUtc")]
		public System.Nullable<System.DateTimeOffset> PublishedTimeUtc { get; set; }
		
		/// <summary>
		/// Status of the requireMfaGroupPolicy setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireMfaGroupPolicyStatus")]
		public System.Nullable<System.Boolean> RequireMfaGroupPolicyStatus { get; set; }
		
		/// <summary>
		/// Secondary thumbprint of the encryption certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryEncryptionCertificateThumbprint")]
		public string SecondaryEncryptionCertificateThumbprint { get; set; }
		
		/// <summary>
		/// The public key of the gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryEncryptionJwk")]
		public EncryptionJwkResource SecondaryEncryptionJwk { get; set; }
		
		/// <summary>
		/// UTC date and time when gateway status was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusUpdated")]
		public System.Nullable<System.DateTimeOffset> StatusUpdated { get; set; }
		
		/// <summary>
		/// CPU Utilization of the whole system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCpuUtilizationPercent")]
		public System.Nullable<System.Double> TotalCpuUtilizationPercent { get; set; }
	}
	
	/// <summary>
	/// Collection of Gateway Resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewayResources
	{
		
		/// <summary>
		/// The URL to the next set of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of Gateway Resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GatewayResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameter collection for operations on arm node resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeParameters
	{
		
		/// <summary>
		/// Location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Collection of properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public NodeParametersProperties Properties { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class NodeParametersProperties
	{
		
		/// <summary>
		/// myhost.domain.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionName")]
		public string ConnectionName { get; set; }
		
		/// <summary>
		/// Gateway ID which will manage this node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayId")]
		public string GatewayId { get; set; }
		
		/// <summary>
		/// Password associated with user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// User name to be used to connect to node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// A Node Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeResource : Resource
	{
		
		/// <summary>
		/// Collection of properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public NodeResourceProperties Properties { get; set; }
	}
	
	public class NodeResourceProperties
	{
		
		/// <summary>
		/// myhost.domain.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionName")]
		public string ConnectionName { get; set; }
		
		/// <summary>
		/// UTC date and time when node was first added to management service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// ID of the gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayId")]
		public string GatewayId { get; set; }
		
		/// <summary>
		/// UTC date and time when node was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	/// <summary>
	/// A collection of node resource objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeResources
	{
		
		/// <summary>
		/// The URL to the next set of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of Node Resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NodeResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters to a PowerShell script execution command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerShellCommandParameters
	{
		
		/// <summary>
		/// Collection of properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PowerShellCommandParametersProperties Properties { get; set; }
	}
	
	public class PowerShellCommandParametersProperties
	{
		
		/// <summary>
		/// Script to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string Command { get; set; }
	}
	
	/// <summary>
	/// Results from invoking a PowerShell command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerShellCommandResult
	{
		
		/// <summary>
		/// The HTML color string representing the background color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public string BackgroundColor { get; set; }
		
		/// <summary>
		/// Text that precedes the prompt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Collection of PromptFieldDescription objects that contains the user input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptions")]
		public PromptFieldDescription[] Descriptions { get; set; }
		
		/// <summary>
		/// The exit code from a executable that was called from PowerShell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// The HTML color string representing the foreground color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foregroundColor")]
		public string ForegroundColor { get; set; }
		
		/// <summary>
		/// ID of the prompt message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Text of the prompt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The type of message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageType")]
		public System.Nullable<System.Int32> MessageType { get; set; }
		
		/// <summary>
		/// The interactive prompt message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prompt")]
		public string Prompt { get; set; }
		
		/// <summary>
		/// Actual result text from the PowerShell Command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Field description for the implementation of PSHostUserInterface.Prompt
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PromptFieldDescription
	{
		
		/// <summary>
		/// The help message of the prompt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpMessage")]
		public string HelpMessage { get; set; }
		
		/// <summary>
		/// The label text of the prompt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The name of the prompt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promptFieldType")]
		public System.Nullable<PromptFieldDescriptionPromptFieldType> PromptFieldType { get; set; }
		
		/// <summary>
		/// When set to 'true' the prompt field type is a list of values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promptFieldTypeIsList")]
		public System.Nullable<System.Boolean> PromptFieldTypeIsList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PromptFieldDescriptionPromptFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureString = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credential = 2,
	}
	
	/// <summary>
	/// A collection of results from a PowerShell command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerShellCommandResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string Command { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pssession")]
		public string Pssession { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PowerShellCommandResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Result status from invoking a PowerShell command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerShellCommandStatus : Resource
	{
		
		/// <summary>
		/// A collection of results from a PowerShell command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PowerShellCommandResults Properties { get; set; }
	}
	
	/// <summary>
	/// A PowerShell session resource (practically equivalent to a runspace instance).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerShellSessionResource : Resource
	{
		
		/// <summary>
		/// Collection of properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PowerShellSessionResourceProperties Properties { get; set; }
	}
	
	public class PowerShellSessionResourceProperties
	{
		
		/// <summary>
		/// Timestamp of last time the service disconnected from the runspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disconnectedOn")]
		public System.Nullable<System.DateTimeOffset> DisconnectedOn { get; set; }
		
		/// <summary>
		/// Timestamp when the runspace expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresOn")]
		public System.Nullable<System.DateTimeOffset> ExpiresOn { get; set; }
		
		/// <summary>
		/// Name of the runspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The availability of the runspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runspaceAvailability")]
		public string RunspaceAvailability { get; set; }
		
		/// <summary>
		/// The PowerShell Session ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// The runspace state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// A multipart-numeric version number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public Version Version { get; set; }
	}
	
	/// <summary>
	/// A collection of PowerShell session resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerShellSessionResources
	{
		
		/// <summary>
		/// The URL to the next set of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of PowerShell session resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PowerShellSessionResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Collection of parameters for PowerShell tab completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerShellTabCompletionParameters
	{
		
		/// <summary>
		/// Command to get tab completion for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string Command { get; set; }
	}
	
	/// <summary>
	/// An array of strings representing the different values that can be selected through.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerShellTabCompletionResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public string[] Results { get; set; }
	}
	
	/// <summary>
	/// The response to a prompt message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PromptMessageResponse
	{
		
		/// <summary>
		/// The list of responses a cmdlet expects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string[] Response { get; set; }
	}
	
	/// <summary>
	/// Resource Manager Resource Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Resource Manager Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource Manager Resource Location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource Manager Resource Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource Manager Resource Tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource Manager Resource Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Parameter collection for creation and other operations on sessions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SessionParameters
	{
		
		/// <summary>
		/// Collection of properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SessionParametersProperties Properties { get; set; }
	}
	
	public class SessionParametersProperties
	{
		
		/// <summary>
		/// Encryption certificate thumbprint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionCertificateThumbprint { get; set; }
		
		/// <summary>
		/// Credential data format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialDataFormat")]
		public System.Nullable<SessionParametersPropertiesCredentialDataFormat> CredentialDataFormat { get; set; }
		
		/// <summary>
		/// Encrypted Password associated with user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Session retention period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public System.Nullable<SessionParametersPropertiesRetentionPeriod> RetentionPeriod { get; set; }
		
		/// <summary>
		/// Encrypted User name to be used to connect to node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SessionParametersPropertiesCredentialDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RsaEncrypted = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SessionParametersPropertiesRetentionPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Persistent = 1,
	}
	
	/// <summary>
	/// The session object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SessionResource : Resource
	{
		
		/// <summary>
		/// Collection of properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SessionResourceProperties Properties { get; set; }
	}
	
	public class SessionResourceProperties
	{
		
		/// <summary>
		/// UTC date and time when node was first added to management service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// UTC date and time when node was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// The username connecting to the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// A multipart-numeric version number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Version
	{
		
		/// <summary>
		/// The third number of the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build")]
		public System.Nullable<System.Int32> Build { get; set; }
		
		/// <summary>
		/// The leftmost number of the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="major")]
		public System.Nullable<System.Int32> Major { get; set; }
		
		/// <summary>
		/// The MSW of the fourth part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="majorRevision")]
		public System.Nullable<System.Int32> MajorRevision { get; set; }
		
		/// <summary>
		/// The second leftmost number of the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minor")]
		public System.Nullable<System.Int32> Minor { get; set; }
		
		/// <summary>
		/// The LSW of the fourth part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minorRevision")]
		public System.Nullable<System.Int32> MinorRevision { get; set; }
		
		/// <summary>
		/// The fourth number of the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns gateways in a subscription.
		/// Gateway_List subscriptions/{subscriptionId}/providers/Microsoft.ServerManagement/gateways
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<GatewayResources> Gateway_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ServerManagement/gateways&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GatewayResources>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists nodes in a subscription.
		/// Node_List subscriptions/{subscriptionId}/providers/Microsoft.ServerManagement/nodes
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<NodeResources> Node_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ServerManagement/nodes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NodeResources>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns gateways in a resource group.
		/// Gateway_ListForResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<GatewayResources> Gateway_ListForResourceGroupAsync(string subscriptionId, string api_version, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/gateways&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GatewayResources>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a gateway.
		/// Gateway_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="gatewayName">The gateway name (256 characters maximum)
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="expand">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<GatewayResource> Gateway_GetAsync(string subscriptionId, string api_version, string resourceGroupName, string gatewayName, Gateway_GetExpand expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + expand;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GatewayResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a ManagementService gateway.
		/// Gateway_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="gatewayName">The gateway name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<GatewayResource> Gateway_CreateAsync(string subscriptionId, string api_version, string resourceGroupName, string gatewayName, GatewayParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GatewayResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a gateway from a resource group.
		/// Gateway_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="gatewayName">The gateway name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>The object exists and was deleted successfully.</returns>
		public async Task Gateway_DeleteAsync(string subscriptionId, string api_version, string resourceGroupName, string gatewayName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a gateway belonging to a resource group.
		/// Gateway_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="gatewayName">The gateway name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="requestBody">Parameters supplied to the Update operation.</param>
		/// <returns>Update completed successfully.</returns>
		public async Task<GatewayResource> Gateway_UpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string gatewayName, GatewayParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GatewayResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a gateway profile.
		/// Gateway_GetProfile subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/profile
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="gatewayName">The gateway name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<GatewayProfile> Gateway_GetProfileAsync(string subscriptionId, string api_version, string resourceGroupName, string gatewayName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"/profile&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GatewayProfile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerate a gateway's profile
		/// Gateway_RegenerateProfile subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/regenerateprofile
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="gatewayName">The gateway name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>The operation completed successfully.</returns>
		public async Task Gateway_RegenerateProfileAsync(string subscriptionId, string api_version, string resourceGroupName, string gatewayName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"/regenerateprofile&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upgrades a gateway.
		/// Gateway_Upgrade subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/upgradetolatest
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="gatewayName">The gateway name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>The operation completed successfully.</returns>
		public async Task Gateway_UpgradeAsync(string subscriptionId, string api_version, string resourceGroupName, string gatewayName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"/upgradetolatest&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists nodes in a resource group.
		/// Node_ListForResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<NodeResources> Node_ListForResourceGroupAsync(string subscriptionId, string api_version, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NodeResources>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a management node.
		/// Node_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>The object exists and was deleted successfully.</returns>
		public async Task<NodeResource> Node_GetAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NodeResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a management node.
		/// Node_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<NodeResource> Node_CreateAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, NodeParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NodeResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// deletes a management node
		/// Node_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <returns>The object exists and was deleted successfully.</returns>
		public async Task Node_DeleteAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a management node.
		/// Node_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<NodeResource> Node_UpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, NodeParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NodeResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a session for a node.
		/// Session_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<SessionResource> Session_GetAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SessionResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a session for a node.
		/// Session_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<SessionResource> Session_CreateAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session, SessionParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SessionResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a session for a node.
		/// Session_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task Session_DeleteAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the active sessions.
		/// PowerShell_ListSession subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<PowerShellSessionResources> PowerShell_ListSessionAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"/features/powerShellConsole/pssessions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PowerShellSessionResources>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the status of a command.
		/// PowerShell_GetCommandStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <param name="pssession">The PowerShell sessionId from the user.</param>
		/// <param name="expand">Gets current output from an ongoing call.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<PowerShellCommandStatus> PowerShell_GetCommandStatusAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session, string pssession, PowerShell_GetCommandStatusExpand expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"/features/powerShellConsole/pssessions/"+ (pssession==null? "" : System.Uri.EscapeDataString(pssession))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + expand;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PowerShellCommandStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a PowerShell session.
		/// PowerShell_CreateSession subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <param name="pssession">The PowerShell sessionId from the user.</param>
		/// <returns>The operation completed succesfully.</returns>
		public async Task<PowerShellSessionResource> PowerShell_CreateSessionAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session, string pssession)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"/features/powerShellConsole/pssessions/"+ (pssession==null? "" : System.Uri.EscapeDataString(pssession))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PowerShellSessionResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a running PowerShell command with more data.
		/// PowerShell_UpdateCommand subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <param name="pssession">The PowerShell sessionId from the user.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<PowerShellCommandResults> PowerShell_UpdateCommandAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session, string pssession)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"/features/powerShellConsole/pssessions/"+ (pssession==null? "" : System.Uri.EscapeDataString(pssession))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PowerShellCommandResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a PowerShell command.
		/// PowerShell_CancelCommand subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}/cancel
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <param name="pssession">The PowerShell sessionId from the user.</param>
		/// <returns>The cancellation was completed successfully.</returns>
		public async Task<PowerShellCommandResults> PowerShell_CancelCommandAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session, string pssession)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"/features/powerShellConsole/pssessions/"+ (pssession==null? "" : System.Uri.EscapeDataString(pssession))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PowerShellCommandResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a PowerShell script and invokes it.
		/// PowerShell_InvokeCommand subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}/invokeCommand
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <param name="pssession">The PowerShell sessionId from the user.</param>
		/// <param name="requestBody">Parameters supplied to the Invoke PowerShell Command operation.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<PowerShellCommandResults> PowerShell_InvokeCommandAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session, string pssession, PowerShellCommandParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"/features/powerShellConsole/pssessions/"+ (pssession==null? "" : System.Uri.EscapeDataString(pssession))+"/invokeCommand&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PowerShellCommandResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets tab completion values for a command.
		/// PowerShell_TabCompletion subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}/tab
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="resourceGroupName">The resource group name uniquely identifies the resource group within the user subscriptionId.
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The node name (256 characters maximum).
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="session">The sessionId from the user.</param>
		/// <param name="pssession">The PowerShell sessionId from the user.</param>
		/// <param name="requestBody">Parameters supplied to the tab completion call.</param>
		/// <returns>The request was succesfully completed.</returns>
		public async Task<PowerShellTabCompletionResults> PowerShell_TabCompletionAsync(string subscriptionId, string api_version, string resourceGroupName, string nodeName, string session, string pssession, PowerShellTabCompletionParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ServerManagement/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/sessions/"+ (session==null? "" : System.Uri.EscapeDataString(session))+"/features/powerShellConsole/pssessions/"+ (pssession==null? "" : System.Uri.EscapeDataString(pssession))+"/tab&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PowerShellTabCompletionResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Gateway_GetExpand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		status = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		download = 1,
	}
	
	public enum PowerShell_GetCommandStatusExpand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		output = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
