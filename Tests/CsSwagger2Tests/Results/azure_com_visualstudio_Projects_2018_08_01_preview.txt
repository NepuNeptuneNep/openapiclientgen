//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines the source application for a VSTS pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationSource
	{
		
		/// <summary>
		/// Application specific properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationConfiguration")]
		public System.Collections.Generic.Dictionary<string, string> ApplicationConfiguration { get; set; }
		
		/// <summary>
		/// Type of application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationType")]
		public ApplicationSourceApplicationType ApplicationType { get; set; }
		
		/// <summary>
		/// Type of application source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public ApplicationSourceSourceType SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationSourceApplicationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AspDotNet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AspDotNetCore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NodeJs = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationSourceSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeTemplate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeRepository = 1,
	}
	
	/// <summary>
	/// Defines the target resources for a VSTS pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationTarget
	{
		
		/// <summary>
		/// List of target resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public TargetResource[] Resources { get; set; }
		
		/// <summary>
		/// Type of target.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public ApplicationTargetTargetType TargetType { get; set; }
	}
	
	/// <summary>
	/// Defines a single resource used as target for a VSTS pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TargetResource
	{
		
		/// <summary>
		/// Reference to the authorization info used to access the target resource. This value is used as a key into the global authorization details dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationReference")]
		public string AuthorizationReference { get; set; }
		
		/// <summary>
		/// Unique identifier of the target resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Role of the target resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationTargetTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WindowsAppService = 0,
	}
	
	/// <summary>
	/// Defines the authorization type and its parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Authorization
	{
		
		/// <summary>
		/// Type of authorization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizationType")]
		public AuthorizationAuthorizationType AuthorizationType { get; set; }
		
		/// <summary>
		/// Authorization parameters corresponding to the authorization type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AuthorizationAuthorizationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authorizationToken = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personalAccessToken = 1,
	}
	
	/// <summary>
	/// Defines a code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CodeRepository
	{
		
		/// <summary>
		/// Defines the authorization type and its parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public Authorization Authorization { get; set; }
		
		/// <summary>
		/// Default branch for which continuous integration should be configured in the VSTS pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultBranch")]
		public string DefaultBranch { get; set; }
		
		/// <summary>
		/// Unique identifier of the code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Repository-specific properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Type of code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryType")]
		public CodeRepositoryRepositoryType RepositoryType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CodeRepositoryRepositoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gitHub = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vstsGit = 1,
	}
	
	/// <summary>
	/// Defines the source application, when it resides in a code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CodeRepositoryApplicationSource
	{
		
		/// <summary>
		/// Defines a code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public CodeRepositoryLegacy Repository { get; set; }
	}
	
	/// <summary>
	/// Defines a code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CodeRepositoryLegacy
	{
		
		/// <summary>
		/// Reference to the authorization info used to access the code repository. This value is used as a key into the global authorization details dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationReference")]
		public string AuthorizationReference { get; set; }
		
		/// <summary>
		/// Default branch for which continuous integration should be configured in the VSTS pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultBranch")]
		public string DefaultBranch { get; set; }
		
		/// <summary>
		/// Unique identifier of the code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Repository-specific properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Type of code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryType")]
		public CodeRepositoryRepositoryType RepositoryType { get; set; }
	}
	
	/// <summary>
	/// Defines the source application template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CodeTemplateApplicationSource
	{
	}
	
	/// <summary>
	/// Defines bootstrap configuration for a CI/CD pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineBootstrapConfiguration
	{
		
		/// <summary>
		/// Name of the bootstrap configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Defines a code repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public CodeRepository Repository { get; set; }
		
		/// <summary>
		/// Identifier of the pipeline template used for configuring pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		/// <summary>
		/// Dictionary of inputs used for configuring pipeline. The keys for inputs are defined by pipeline template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateParameters")]
		public System.Collections.Generic.Dictionary<string, string> TemplateParameters { get; set; }
	}
	
	/// <summary>
	/// Defines a VSTS pipeline template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineTemplateLegacy
	{
		
		/// <summary>
		/// Defines the source application for a VSTS pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationSource")]
		public ApplicationSource ApplicationSource { get; set; }
		
		/// <summary>
		/// Defines the target resources for a VSTS pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationTarget")]
		public ApplicationTarget ApplicationTarget { get; set; }
		
		/// <summary>
		/// Global dictionary of authorization details used by the pipeline, with a friendly name as key. Individual resource in the pipeline can reference to a specific authorization info using the friendly name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizationDetails")]
		public System.Collections.Generic.Dictionary<string, Authorization> AuthorizationDetails { get; set; }
	}
	
	/// <summary>
	/// A Visual Studio Team Services project resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectResource
	{
		
		/// <summary>
		/// Kind of project resource. A bootStrappedProject is a project which has additional bootstrap information to create a CI/CD pipeline in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<ProjectResourceKind> Kind { get; set; }
		
		/// <summary>
		/// Defines the custom properties of project resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProjectResourceProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProjectResourceKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		project = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bootstrappedProject = 1,
	}
	
	/// <summary>
	/// Defines the custom properties of project resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectResourceProperties
	{
		
		/// <summary>
		/// Defines a VSTS pipeline template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootstrapPipelineTemplate")]
		public PipelineTemplateLegacy BootstrapPipelineTemplate { get; set; }
		
		/// <summary>
		/// Optional UPN of the owner, on-behalf-of whom the project is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerUpn")]
		public string OwnerUpn { get; set; }
		
		/// <summary>
		/// Bootstrap configuration for pipelines in Team Project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineBootstrapConfigurations")]
		public PipelineBootstrapConfiguration[] PipelineBootstrapConfigurations { get; set; }
		
		/// <summary>
		/// Process template to use in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processTemplateId")]
		public System.Nullable<ProjectResourcePropertiesProcessTemplateId> ProcessTemplateId { get; set; }
		
		/// <summary>
		/// Unique identifier of the VSTS project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tfsUniqueIdentifier")]
		public string TfsUniqueIdentifier { get; set; }
		
		/// <summary>
		/// Version control to use for the default repo created in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionControlOption")]
		public System.Nullable<ProjectResourcePropertiesVersionControlOption> VersionControlOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProjectResourcePropertiesProcessTemplateId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scrum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Agile = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cmmi = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProjectResourcePropertiesVersionControlOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Git = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tfvc = 1,
	}
	
	/// <summary>
	/// The response to a request to list Team Services project resources in a resource group/account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectResourceListResult
	{
		
		/// <summary>
		/// List of project resource details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProjectResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters to update a project resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectResourceUpdateParameters
	{
		
		/// <summary>
		/// Custom properties of project resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProjectResourceUpdateParametersProperties Properties { get; set; }
		
		/// <summary>
		/// The custom tags to be set on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ProjectResourceUpdateParametersProperties
	{
		
		/// <summary>
		/// Bootstrap configurations for pipelines in Team Project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineBootstrapConfigurations")]
		public PipelineBootstrapConfiguration[] PipelineBootstrapConfigurations { get; set; }
	}
	
	/// <summary>
	/// A generic Azure Resource Manager resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Unique identifier of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Projects_ListByAccountResource
		/// Gets all Visual Studio Team Services project resources created in the specified Team Services account.
		/// Projects_ListByAccountResource subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="rootResourceName">Name of the Team Services account.</param>
		/// <returns>The operation succeeded. The response contains the details of the Visual Studio Team Services project resources created in the specified Team Services account.</returns>
		public async Task<ProjectResourceListResult> Projects_ListByAccountResourceAsync(string resourceGroupName, string subscriptionId, string api_version, string rootResourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (rootResourceName==null? "" : System.Uri.EscapeDataString(rootResourceName))+"/project&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectResourceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Projects_Get
		/// Gets the details of a Team Services project resource.
		/// Projects_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="rootResourceName">Name of the Team Services account.</param>
		/// <param name="resourceName">Name of the Team Services project.</param>
		/// <returns>The operation succeeded. The response contains the details of the updated team project resource.</returns>
		public async Task<ProjectResource> Projects_GetAsync(string resourceGroupName, string subscriptionId, string api_version, string rootResourceName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (rootResourceName==null? "" : System.Uri.EscapeDataString(rootResourceName))+"/project/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Projects_CreateOrUpdate
		/// Creates or updates a Team Services project in the collection with the specified name. 'VersionControlOption' and 'ProcessTemplateId' must be specified in the resource properties. Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId: 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC, 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process templates).
		/// Projects_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="rootResourceName">Name of the Team Services account.</param>
		/// <param name="resourceName">Name of the Team Services project.</param>
		/// <param name="validating">This parameter is ignored and should be set to an empty string.</param>
		/// <param name="requestBody">The request data.</param>
		/// <returns>The operation succeeded. The response contains the details of the created or updated team project resource.</returns>
		public async Task<ProjectResource> Projects_CreateOrUpdateAsync(string resourceGroupName, string subscriptionId, string api_version, string rootResourceName, string resourceName, string validating, ProjectResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (rootResourceName==null? "" : System.Uri.EscapeDataString(rootResourceName))+"/project/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&validating=" + (validating==null? "" : System.Uri.EscapeDataString(validating));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Projects_Update
		/// Updates the tags of the specified Team Services project.
		/// Projects_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="rootResourceName">Name of the Team Services account.</param>
		/// <param name="resourceName">Name of the Team Services project.</param>
		/// <param name="requestBody">The request data.</param>
		/// <returns>The operation succeeded. The response contains the details of the updated team project resource.</returns>
		public async Task<ProjectResource> Projects_UpdateAsync(string resourceGroupName, string subscriptionId, string api_version, string rootResourceName, string resourceName, ProjectResourceUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (rootResourceName==null? "" : System.Uri.EscapeDataString(rootResourceName))+"/project/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
