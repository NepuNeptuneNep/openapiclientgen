//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountListNodeAgentSkusResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NodeAgentSku[] Value { get; set; }
	}
	
	/// <summary>
	/// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeAgentSku
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public System.Nullable<NodeAgentSkuOsType> OsType { get; set; }
		
		/// <summary>
		/// This collection is not exhaustive (the node agent may be compatible with other images).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedImageReferences")]
		public ImageReference[] VerifiedImageReferences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NodeAgentSkuOsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		linux = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		windows = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageReference
	{
		
		/// <summary>
		/// For example, UbuntuServer or WindowsServer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// For example, Canonical or MicrosoftWindowsServer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// For example, 14.04.0-LTS or 2012-R2-Datacenter.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AffinityInformation
	{
		
		/// <summary>
		/// You can pass the affinityId of a compute node to indicate that this task needs to run on that compute node. Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="affinityId")]
		public string AffinityId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ApplicationSummary[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPackageReference
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// If this is omitted on a pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a task, and no default version is specified for this application, the task fails with a pre-processing error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthenticationTokenSettings
	{
		
		/// <summary>
		/// The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the job which contains the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string[] Access { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoPoolSpecification
	{
		
		/// <summary>
		/// The Batch service assigns each auto pool a unique identifier on creation. To distinguish between pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoPoolIdPrefix")]
		public string AutoPoolIdPrefix { get; set; }
		
		/// <summary>
		/// If false, the Batch service deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the job or job schedule completes. If true, the Batch service does not delete the pool automatically. It is up to the user to delete auto pools created with this option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepAlive")]
		public System.Nullable<System.Boolean> KeepAlive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pool")]
		public PoolSpecification Pool { get; set; }
		
		/// <summary>
		/// When the pool lifetime is jobSchedule the pool exists for the lifetime of the job schedule. The Batch Service creates the pool when it creates the first job on the schedule. You may apply this option only to job schedules, not to jobs. When the pool lifetime is job the pool exists for the lifetime of the job to which it is dedicated. The Batch service creates the pool when it creates the job. If the 'job' option is applied to a job schedule, the Batch service creates a new auto pool for every job created on the schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolLifetimeOption")]
		public AutoPoolSpecificationPoolLifetimeOption PoolLifetimeOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoPoolSpecificationPoolLifetimeOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jobSchedule = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		job = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoScaleRun
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public AutoScaleRunError Error { get; set; }
		
		/// <summary>
		/// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public string Results { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoScaleRunError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public NameValuePair[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameValuePair
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoUserSpecification
	{
		
		/// <summary>
		/// Values are:
		///
		/// nonAdmin - The user is a standard user without elevated access.
		/// admin - The user is a user with elevated access and operates with full Administrator permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elevationLevel")]
		public System.Nullable<AutoUserSpecificationElevationLevel> ElevationLevel { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// pool - specifies that the task runs as the common auto user account which is created on every node in a pool.
		/// task - specifies that the service should create a new user for the task.
		/// The default value is task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<AutoUserSpecificationScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoUserSpecificationElevationLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nonAdmin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoUserSpecificationScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		task = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pool = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public ErrorMessage Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public BatchErrorDetail[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchErrorDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Certificate
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleteCertificateError")]
		public DeleteCertificateError DeleteCertificateError { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - The certificate is available for use in pools.
		/// deleting - The user has requested that the certificate be deleted, but the delete operation has not yet completed. You may not reference the certificate when creating or updating pools.
		/// deletefailed - The user requested that the certificate be deleted, but there are pools that still have references to the certificate, or it is still installed on one or more compute nodes. (The latter can occur if the certificate has been removed from the pool, but the node has not yet restarted. Nodes refresh their certificates only when they restart.) You may use the cancel certificate delete operation to cancel the delete, or the delete certificate operation to retry the delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public System.Nullable<CertificatePreviousState> PreviousState { get; set; }
		
		/// <summary>
		/// This property is not set if the certificate is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicData")]
		public string PublicData { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - The certificate is available for use in pools.
		/// deleting - The user has requested that the certificate be deleted, but the delete operation has not yet completed. You may not reference the certificate when creating or updating pools.
		/// deletefailed - The user requested that the certificate be deleted, but there are pools that still have references to the certificate, or it is still installed on one or more compute nodes. (The latter can occur if the certificate has been removed from the pool, but the node has not yet restarted. Nodes refresh their certificates only when they restart.) You may use the cancel certificate delete operation to cancel the delete, or the delete certificate operation to retry the delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CertificatePreviousState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbprintAlgorithm")]
		public string ThumbprintAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificatePreviousState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleteFailed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateAddParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateFormat")]
		public System.Nullable<CertificateAddParameterCertificateFormat> CertificateFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// This is required if the certificate format is pfx. It should be omitted if the certificate format is cer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbprintAlgorithm")]
		public string ThumbprintAlgorithm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificateAddParameterCertificateFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pfx = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cer = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Certificate[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateReference
	{
		
		/// <summary>
		/// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeLocation")]
		public System.Nullable<CertificateReferenceStoreLocation> StoreLocation { get; set; }
		
		/// <summary>
		/// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbprintAlgorithm")]
		public string ThumbprintAlgorithm { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// starttask - The user account under which the start task is run.
		/// task - The accounts under which job tasks are run.
		/// remoteuser - The accounts under which users remotely access the node.
		///
		/// You can specify more than one visibility in this collection. The default is all accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public string[] Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificateReferenceStoreLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currentUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		localMachine = 1,
	}
	
	/// <summary>
	/// Values are:
	///
	/// active - The certificate is available for use in pools.
	/// deleting - The user has requested that the certificate be deleted, but the delete operation has not yet completed. You may not reference the certificate when creating or updating pools.
	/// deletefailed - The user requested that the certificate be deleted, but there are pools that still have references to the certificate, or it is still installed on one or more compute nodes. (The latter can occur if the certificate has been removed from the pool, but the node has not yet restarted. Nodes refresh their certificates only when they restart.) You may use the cancel certificate delete operation to cancel the delete, or the delete certificate operation to retry the delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleteFailed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJob
	{
		
		/// <summary>
		/// Individual tasks can override an environment setting specified here by specifying the same setting name with a different value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonEnvironmentSettings")]
		public EnvironmentSetting[] CommonEnvironmentSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This is an opaque string. You can use it to detect whether the job has changed between requests. In particular, you can be pass the ETag when updating a job to specify that your changes should take effect only if nobody else has modified the job in the meantime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public JobExecutionInformation ExecutionInfo { get; set; }
		
		/// <summary>
		/// The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobManagerTask")]
		public JobManagerTask JobManagerTask { get; set; }
		
		/// <summary>
		/// You can use Job Preparation to prepare a compute node to run tasks for the job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the tasks in the job. The Job Preparation task can download these common resource files to the shared location on the compute node. (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the compute node so that all tasks of that job can communicate with it. If the Job Preparation task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run tasks of this job on the compute node. The node remains ineligible to run tasks of this job until it is reimaged. The node remains active and can be used for other jobs. The Job Preparation task can run multiple times on the same compute node. Therefore, you should write the Job Preparation task to handle re-execution. If the compute node is rebooted, the Job Preparation task is run again on the node before scheduling any other task of the job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not previously complete. If the compute node is reimaged, the Job Preparation task is run again before scheduling any task of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobPreparationTask")]
		public JobPreparationTask JobPreparationTask { get; set; }
		
		/// <summary>
		/// The Job Release task runs when the job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the job is still active, the job's maximum wall clock time constraint is reached, and the job is still active, or the job's Job Manager task completed, and the job is configured to terminate when the Job Manager completes. The Job Release task runs on each compute node where tasks of the job have run and the Job Preparation task ran and completed. If you reimage a compute node after it has run the Job Preparation task, and the job ends without any further tasks of the job running on that compute node (and hence the Job Preparation task does not re-run), then the Job Release task does not run on that node. If a compute node reboots while the Job Release task is still running, the Job Release task runs again when the compute node starts up. The job is not marked as complete until all Job Release tasks have completed. The Job Release task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobReleaseTask")]
		public JobReleaseTask JobReleaseTask { get; set; }
		
		/// <summary>
		/// This is the last time at which the job level data, such as the job state or priority, changed. It does not factor in task-level changes such as adding new tasks or tasks changing state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// noAction - do nothing. The job remains active unless terminated or disabled by some other means.
		/// terminateJob - terminate the job. The job's terminateReason is set to 'AllTasksComplete'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onAllTasksComplete")]
		public System.Nullable<CloudJobOnAllTasksComplete> OnAllTasksComplete { get; set; }
		
		/// <summary>
		/// A task is considered to have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error. Values are:
		///
		/// noAction - do nothing.
		/// performExitOptionsJobAction - take the action associated with the task exit condition in the task's exitConditions collection. (This may still result in no action being taken, if that is what the task specifies.)
		///
		/// The default is noAction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onTaskFailure")]
		public System.Nullable<CloudJobOnTaskFailure> OnTaskFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - the job is available to have tasks scheduled.
		/// disabling - a user has requested that the job be disabled, but the disable operation is still in progress (for example, waiting for tasks to terminate).
		/// disabled - a user has disabled the job. No tasks are running, and no new tasks will be scheduled.
		/// enabling - a user has requested that the job be enabled, but the enable operation is still in progress.
		/// terminating - the job is about to complete, either because a Job Manager task has completed or because the user has terminated the job, but the terminate operation is still in progress (for example, because Job Release tasks are running).
		/// completed - all tasks have terminated, and the system will not accept any more tasks or any further changes to the job.
		/// deleting - a user has requested that the job be deleted, but the delete operation is still in progress (for example, because the system is still terminating running tasks).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public System.Nullable<CloudJobPreviousState> PreviousState { get; set; }
		
		/// <summary>
		/// This property is not set if the job is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		/// <summary>
		/// Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - the job is available to have tasks scheduled.
		/// disabling - a user has requested that the job be disabled, but the disable operation is still in progress (for example, waiting for tasks to terminate).
		/// disabled - a user has disabled the job. No tasks are running, and no new tasks will be scheduled.
		/// enabling - a user has requested that the job be enabled, but the enable operation is still in progress.
		/// terminating - the job is about to complete, either because a Job Manager task has completed or because the user has terminated the job, but the terminate operation is still in progress (for example, because Job Release tasks are running).
		/// completed - all tasks have terminated, and the system will not accept any more tasks or any further changes to the job.
		/// deleting - a user has requested that the job be deleted, but the delete operation is still in progress (for example, because the system is still terminating running tasks).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CloudJobPreviousState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public JobStatistics Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usesTaskDependencies")]
		public System.Nullable<System.Boolean> UsesTaskDependencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetadataItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudJobOnAllTasksComplete
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noAction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminateJob = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudJobOnTaskFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noAction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performExitOptionsJobAction = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudJobPreviousState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabling = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJobListPreparationAndReleaseTaskStatusResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobPreparationAndReleaseTaskExecutionInformation[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPreparationAndReleaseTaskExecutionInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobPreparationTaskExecutionInfo")]
		public JobPreparationTaskExecutionInformation JobPreparationTaskExecutionInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobReleaseTaskExecutionInfo")]
		public JobReleaseTaskExecutionInformation JobReleaseTaskExecutionInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeUrl")]
		public string NodeUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJobListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CloudJob[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJobSchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This is an opaque string. You can use it to detect whether the job schedule has changed between requests. In particular, you can be pass the ETag with an Update Job Schedule request to specify that your changes should take effect only if nobody else has modified the schedule in the meantime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public JobScheduleExecutionInformation ExecutionInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobSpecification")]
		public JobSpecification JobSpecification { get; set; }
		
		/// <summary>
		/// This is the last time at which the schedule level data, such as the job specification or recurrence information, changed. It does not factor in job-level changes such as new jobs being created or jobs changing state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - The job schedule is active and will create jobs as per its schedule.
		/// disabled - The user has disabled the schedule. The scheduler will not initiate any new jobs will on this schedule, but any existing active job will continue to run.
		/// terminating - The schedule has no more work to do, or has been explicitly terminated by the user, but the termination operation is still in progress. The scheduler will not initiate any new jobs for this schedule, nor is any existing job active.
		/// completed - The schedule has terminated, either by reaching its end time or by the user terminating it explicitly.
		/// deleting - The user has requested that the schedule be deleted, but the delete operation is still in progress. The scheduler will not initiate any new jobs for this schedule, and will delete any existing jobs and tasks under the schedule, including any active job. The schedule will be deleted when all jobs and tasks under the schedule have been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public System.Nullable<CloudJobSchedulePreviousState> PreviousState { get; set; }
		
		/// <summary>
		/// This property is not present if the job schedule is in its initial active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - The job schedule is active and will create jobs as per its schedule.
		/// disabled - The user has disabled the schedule. The scheduler will not initiate any new jobs will on this schedule, but any existing active job will continue to run.
		/// terminating - The schedule has no more work to do, or has been explicitly terminated by the user, but the termination operation is still in progress. The scheduler will not initiate any new jobs for this schedule, nor is any existing job active.
		/// completed - The schedule has terminated, either by reaching its end time or by the user terminating it explicitly.
		/// deleting - The user has requested that the schedule be deleted, but the delete operation is still in progress. The scheduler will not initiate any new jobs for this schedule, and will delete any existing jobs and tasks under the schedule, including any active job. The schedule will be deleted when all jobs and tasks under the schedule have been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CloudJobSchedulePreviousState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public JobScheduleStatistics Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudJobSchedulePreviousState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudJobScheduleListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CloudJobSchedule[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudPool
	{
		
		/// <summary>
		/// Values are:
		///
		/// steady - The pool is not resizing. There are no changes to the number of nodes in the pool in progress. A pool enters this state when it is created and when no operations are being performed on the pool to change the number of dedicated nodes.
		/// resizing - The pool is resizing; that is, compute nodes are being added to or removed from the pool.
		/// stopping - The pool was resizing, but the user has requested that the resize be stopped, but the stop request has not yet been completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocationState")]
		public System.Nullable<CloudPoolAllocationState> AllocationState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocationStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> AllocationStateTransitionTime { get; set; }
		
		/// <summary>
		/// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationLicenses")]
		public string[] ApplicationLicenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// This property is set only if the pool automatically scales, i.e. enableAutoScale is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleEvaluationInterval")]
		public string AutoScaleEvaluationInterval { get; set; }
		
		/// <summary>
		/// This property is set only if the pool automatically scales, i.e. enableAutoScale is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScaleRun")]
		public AutoScaleRun AutoScaleRun { get; set; }
		
		/// <summary>
		/// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloudServiceConfiguration")]
		public CloudServiceConfiguration CloudServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentDedicatedNodes")]
		public System.Nullable<System.Int32> CurrentDedicatedNodes { get; set; }
		
		/// <summary>
		/// Low-priority compute nodes which have been preempted are included in this count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLowPriorityNodes")]
		public System.Nullable<System.Int32> CurrentLowPriorityNodes { get; set; }
		
		/// <summary>
		/// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This is an opaque string. You can use it to detect whether the pool has changed between requests. In particular, you can be pass the ETag when updating a pool to specify that your changes should take effect only if nobody else has modified the pool in the meantime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the pool automatically resizes according to the formula. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoScale")]
		public System.Nullable<System.Boolean> EnableAutoScale { get; set; }
		
		/// <summary>
		/// This imposes restrictions on which nodes can be assigned to the pool. Specifying this value can reduce the chance of the requested number of nodes to be allocated in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableInterNodeCommunication")]
		public System.Nullable<System.Boolean> EnableInterNodeCommunication { get; set; }
		
		/// <summary>
		/// The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// This is the last time at which the pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a compute node changing state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxTasksPerNode")]
		public System.Nullable<System.Int32> MaxTasksPerNode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// The network configuration for a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		/// <summary>
		/// This property is set only if one or more errors occurred during the last pool resize, and only when the pool allocationState is Steady.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeErrors")]
		public ResizeError[] ResizeErrors { get; set; }
		
		/// <summary>
		/// This is the timeout for the most recent resize operation. (The initial sizing when the pool is created counts as a resize.) The default value is 15 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - The pool is available to run tasks subject to the availability of compute nodes.
		/// deleting - The user has requested that the pool be deleted, but the delete operation has not yet completed.
		/// upgrading - The user has requested that the operating system of the pool's nodes be upgraded, but the upgrade operation has not yet completed (that is, some nodes in the pool have not yet been upgraded). While upgrading, the pool may be able to run tasks (with reduced capacity) but this is not guaranteed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CloudPoolState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public PoolStatistics Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetDedicatedNodes")]
		public System.Nullable<System.Int32> TargetDedicatedNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetLowPriorityNodes")]
		public System.Nullable<System.Int32> TargetLowPriorityNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskSchedulingPolicy")]
		public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAccounts")]
		public UserAccount[] UserAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfiguration")]
		public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
		
		/// <summary>
		/// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudPoolAllocationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		steady = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		resizing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stopping = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResizeError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public NameValuePair[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudPoolState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upgrading = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserAccount
	{
		
		/// <summary>
		/// Values are:
		///
		/// nonAdmin - The user is a standard user without elevated access.
		/// admin - The user is a user with elevated access and operates with full Administrator permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elevationLevel")]
		public AutoUserSpecificationElevationLevel ElevationLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linuxUserConfiguration")]
		public LinuxUserConfiguration LinuxUserConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudPoolListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CloudPool[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudServiceConfiguration
	{
		
		/// <summary>
		/// This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentOSVersion")]
		public string CurrentOSVersion { get; set; }
		
		/// <summary>
		/// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="osFamily")]
		public string OsFamily { get; set; }
		
		/// <summary>
		/// The default value is * which specifies the latest operating system version for the specified OS family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetOSVersion")]
		public string TargetOSVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="affinityInfo")]
		public AffinityInformation AffinityInfo { get; set; }
		
		/// <summary>
		/// Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationTokenSettings")]
		public AuthenticationTokenSettings AuthenticationTokenSettings { get; set; }
		
		/// <summary>
		/// For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public TaskDependencies DependsOn { get; set; }
		
		/// <summary>
		/// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This is an opaque string. You can use it to detect whether the task has changed between requests. In particular, you can be pass the ETag when updating a task to specify that your changes should take effect only if nobody else has modified the task in the meantime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public TaskExecutionInformation ExecutionInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exitConditions")]
		public ExitConditions ExitConditions { get; set; }
		
		/// <summary>
		/// The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// Multi-instance tasks are commonly used to support MPI tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiInstanceSettings")]
		public MultiInstanceSettings MultiInstanceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeInfo")]
		public ComputeNodeInformation NodeInfo { get; set; }
		
		/// <summary>
		/// For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputFiles")]
		public OutputFile[] OutputFiles { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - The task is queued and able to run, but is not currently assigned to a compute node. A task enters this state when it is created, when it is enabled after being disabled, or when it is awaiting a retry after a failed run.
		/// preparing - The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will return to active and will be eligible to be assigned to a different node.
		/// running - The task is running on a compute node. This includes task-level preparation such as downloading resource files or deploying application packages specified on the task - it does not necessarily mean that the task command line has started executing.
		/// completed - The task is no longer eligible to run, usually because the task has finished successfully, or the task has finished unsuccessfully and has exhausted its retry limit. A task is also marked as completed if an error occurred launching the task, or when the task has been terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public System.Nullable<CloudTaskPreviousState> PreviousState { get; set; }
		
		/// <summary>
		/// This property is not set if the task is in its initial Active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		/// <summary>
		/// For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - The task is queued and able to run, but is not currently assigned to a compute node. A task enters this state when it is created, when it is enabled after being disabled, or when it is awaiting a retry after a failed run.
		/// preparing - The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will return to active and will be eligible to be assigned to a different node.
		/// running - The task is running on a compute node. This includes task-level preparation such as downloading resource files or deploying application packages specified on the task - it does not necessarily mean that the task command line has started executing.
		/// completed - The task is no longer eligible to run, usually because the task has finished successfully, or the task has finished unsuccessfully and has exhausted its retry limit. A task is also marked as completed if an error occurred launching the task, or when the task has been terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CloudTaskPreviousState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public TaskStatistics Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Specify either the userName or autoUser property, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIdentity")]
		public UserIdentity UserIdentity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OutputFile
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public OutputFileDestination Destination { get; set; }
		
		/// <summary>
		/// Both relative and absolute paths are supported. Relative paths are relative to the task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with "." it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\*.txt matches any file that does not start in '.' and ends with .txt in the task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePattern")]
		public string FilePattern { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadOptions")]
		public OutputFileUploadOptions UploadOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CloudTaskPreviousState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preparing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceFile
	{
		
		/// <summary>
		/// This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blobSource")]
		public string BlobSource { get; set; }
		
		/// <summary>
		/// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public string FileMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudTaskListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CloudTask[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudTaskListSubtasksResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SubtaskInformation[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubtaskInformation
	{
		
		/// <summary>
		/// This property is set only if the subtask is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureInfo")]
		public TaskFailureInformation FailureInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeInfo")]
		public ComputeNodeInformation NodeInfo { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// preparing - The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will be eligible to be assigned to a different node.
		/// running - The subtask is running on a compute node.
		/// completed - The subtask is no longer eligible to run, usually because the subtask has finished successfully, or the subtask has finished unsuccessfully and has exhausted its retry limit. A subtask is also marked as completed if an error occurred launching the subtask, or when the task has been terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public System.Nullable<SubtaskInformationPreviousState> PreviousState { get; set; }
		
		/// <summary>
		/// This property is not set if the subtask is in its initial running state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousStateTransitionTime { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// success - The task ran successfully.
		/// failure - There was an error during processing of the task. The failure may have occurred before the task process was launched, while the task process was executing, or after the task process exited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<SubtaskInformationResult> Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// preparing - The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will be eligible to be assigned to a different node.
		/// running - The subtask is running on a compute node.
		/// completed - The subtask is no longer eligible to run, usually because the subtask has finished successfully, or the subtask has finished unsuccessfully and has exhausted its retry limit. A subtask is also marked as completed if an error occurred launching the subtask, or when the task has been terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public SubtaskInformationPreviousState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SubtaskInformationPreviousState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preparing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SubtaskInformationResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failure = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNode
	{
		
		/// <summary>
		/// Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affinityId")]
		public string AffinityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocationTime")]
		public System.Nullable<System.DateTimeOffset> AllocationTime { get; set; }
		
		/// <summary>
		/// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointConfiguration")]
		public ComputeNodeEndpointConfiguration EndpointConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ComputeNodeError[] Errors { get; set; }
		
		/// <summary>
		/// Every node that is added to a pool is assigned a unique ID. Whenever a node is removed from a pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Every node that is added to a pool is assigned a unique IP address. Whenever a node is removed from a pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDedicated")]
		public System.Nullable<System.Boolean> IsDedicated { get; set; }
		
		/// <summary>
		/// This property may not be present if the node state is unusable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastBootTime")]
		public System.Nullable<System.DateTimeOffset> LastBootTime { get; set; }
		
		/// <summary>
		/// This property is present only if at least one task has run on this node since it was assigned to the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentTasks")]
		public TaskInformation[] RecentTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runningTasksCount")]
		public System.Nullable<System.Int32> RunningTasksCount { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// enabled - Tasks can be scheduled on the node.
		/// disabled - No new tasks will be scheduled on the node. Tasks already running on the node may still run to completion. All nodes start with scheduling enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingState")]
		public System.Nullable<ComputeNodeSchedulingState> SchedulingState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTaskInfo")]
		public StartTaskInformation StartTaskInfo { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// idle - The node is not currently running a task.
		/// rebooting - The node is rebooting.
		/// reimaging - The node is reimaging.
		/// running - The node is running one or more tasks (other than a start task).
		/// unusable - The node cannot be used for task execution due to errors.
		/// creating - The Batch service has obtained the underlying virtual machine from Azure Compute, but it has not yet started to join the pool.
		/// starting - the Batch service is starting on the underlying virtual machine.
		/// waitingforstarttask - The start task has started running on the compute node, but waitForSuccess is set and the start task has not yet completed.
		/// starttaskfailed - The start task has failed on the compute node (and exhausted all retries), and waitForSuccess is set. The node is not usable for running tasks.
		/// unknown - The Batch service has lost contact with the node, and does not know its true state.
		/// leavingpool - The node is leaving the pool, either because the user explicitly removed it or because the pool is resizing or autoscaling down.
		/// offline - The node is not currently running a task, and scheduling of new tasks to the node is disabled.
		/// preempted - The low-priority node has been preempted. Tasks which were running on the node when it was preempted will be rescheduled when another node becomes available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ComputeNodeState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> StateTransitionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalTasksRun")]
		public System.Nullable<System.Int32> TotalTasksRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalTasksSucceeded")]
		public System.Nullable<System.Int32> TotalTasksSucceeded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public NameValuePair[] ErrorDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public TaskExecutionInformation ExecutionInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtaskId")]
		public System.Nullable<System.Int32> SubtaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// active - The task is queued and able to run, but is not currently assigned to a compute node. A task enters this state when it is created, when it is enabled after being disabled, or when it is awaiting a retry after a failed run.
		/// preparing - The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will return to active and will be eligible to be assigned to a different node.
		/// running - The task is running on a compute node. This includes task-level preparation such as downloading resource files or deploying application packages specified on the task - it does not necessarily mean that the task command line has started executing.
		/// completed - The task is no longer eligible to run, usually because the task has finished successfully, or the task has finished unsuccessfully and has exhausted its retry limit. A task is also marked as completed if an error occurred launching the task, or when the task has been terminated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskState")]
		public CloudTaskPreviousState TaskState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskUrl")]
		public string TaskUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComputeNodeSchedulingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComputeNodeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idle = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rebooting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reimaging = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unusable = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		starting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waitingForStartTask = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		startTaskFailed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		leavingPool = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		offline = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preempted = 12,
	}
	
	/// <summary>
	/// Values are:
	///
	/// requeue - Terminate running tasks and requeue them. The tasks will run again when the job is enabled. Remove nodes as soon as tasks have been terminated.
	/// terminate - Terminate running tasks. The tasks will not run again. Remove nodes as soon as tasks have been terminated.
	/// taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Remove nodes when all tasks have completed.
	/// retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Remove nodes when all task retention periods have expired.
	///
	/// The default value is requeue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComputeNodeDeallocationOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requeue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taskCompletion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		retainedData = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeEndpointConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inboundEndpoints")]
		public InboundEndpoint[] InboundEndpoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InboundEndpoint
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendPort")]
		public int BackendPort { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frontendPort")]
		public int FrontendPort { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public InboundEndpointProtocol Protocol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicFQDN")]
		public string PublicFQDN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicIPAddress")]
		public string PublicIPAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InboundEndpointProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tcp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		udp = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeGetRemoteLoginSettingsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteLoginIPAddress")]
		public string RemoteLoginIPAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteLoginPort")]
		public int RemoteLoginPort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="affinityId")]
		public string AffinityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeUrl")]
		public string NodeUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectory")]
		public string TaskRootDirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectoryUrl")]
		public string TaskRootDirectoryUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ComputeNode[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeNodeUser
	{
		
		/// <summary>
		/// If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTime")]
		public System.Nullable<System.DateTimeOffset> ExpiryTime { get; set; }
		
		/// <summary>
		/// The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAdmin")]
		public System.Nullable<System.Boolean> IsAdmin { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshPublicKey")]
		public string SshPublicKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteCertificateError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// This list includes details such as the active pools and nodes referencing this certificate. However, if a large number of resources reference the certificate, the list contains only about the first hundred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public NameValuePair[] Values { get; set; }
	}
	
	/// <summary>
	/// Values are:
	///
	/// nonAdmin - The user is a standard user without elevated access.
	/// admin - The user is a user with elevated access and operates with full Administrator permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ElevationLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nonAdmin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		userError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		serverError = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExitCodeMapping
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public int Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exitOptions")]
		public ExitOptions ExitOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExitCodeRangeMapping
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end")]
		public int End { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exitOptions")]
		public ExitOptions ExitOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public int Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExitConditions
	{
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public ExitOptions Default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exitCodeRanges")]
		public ExitCodeRangeMapping[] ExitCodeRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exitCodes")]
		public ExitCodeMapping[] ExitCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileUploadError")]
		public ExitOptions FileUploadError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preProcessingError")]
		public ExitOptions PreProcessingError { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExitOptions
	{
		
		/// <summary>
		/// Values are:
		///
		/// satisfy - Satisfy the task's dependencies.
		/// block - Block the task's dependencies.
		///
		/// The default is 'satisfy' for exit code 0, and 'block' for all other exit conditions. If the job's usesTaskDependencies property is set to false, then specifying the dependencyAction property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400  (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencyAction")]
		public System.Nullable<ExitOptionsDependencyAction> DependencyAction { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// none - Take no action.
		/// disable - Disable the job. This is equivalent to calling the disable job API, with a disableTasks value of requeue.
		/// terminate - Terminate the job. The terminateReason in the job's executionInfo is set to "TaskFailed". The default is none for exit code 0 and terminate for all other exit conditions.
		///
		/// If the job's onTaskFailed property is noAction, then specifying this property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobAction")]
		public System.Nullable<ExitOptionsJobAction> JobAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExitOptionsDependencyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		satisfy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		block = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExitOptionsJobAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contentLength")]
		public long ContentLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The creation time is not returned for files on Linux compute nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The file mode is returned only for files on Linux compute nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public string FileMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.DateTimeOffset LastModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InboundNATPool
	{
		
		/// <summary>
		/// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendPort")]
		public int BackendPort { get; set; }
		
		/// <summary>
		/// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frontendPortRangeEnd")]
		public int FrontendPortRangeEnd { get; set; }
		
		/// <summary>
		/// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frontendPortRangeStart")]
		public int FrontendPortRangeStart { get; set; }
		
		/// <summary>
		/// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkSecurityGroupRules")]
		public NetworkSecurityGroupRule[] NetworkSecurityGroupRules { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public InboundEndpointProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkSecurityGroupRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access")]
		public NetworkSecurityGroupRuleAccess Access { get; set; }
		
		/// <summary>
		/// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public int Priority { get; set; }
		
		/// <summary>
		/// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAddressPrefix")]
		public string SourceAddressPrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkSecurityGroupRuleAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deny = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobAddParameter
	{
		
		/// <summary>
		/// Individual tasks can override an environment setting specified here by specifying the same setting name with a different value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonEnvironmentSettings")]
		public EnvironmentSetting[] CommonEnvironmentSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		/// <summary>
		/// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobManagerTask")]
		public JobManagerTask JobManagerTask { get; set; }
		
		/// <summary>
		/// You can use Job Preparation to prepare a compute node to run tasks for the job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the tasks in the job. The Job Preparation task can download these common resource files to the shared location on the compute node. (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the compute node so that all tasks of that job can communicate with it. If the Job Preparation task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run tasks of this job on the compute node. The node remains ineligible to run tasks of this job until it is reimaged. The node remains active and can be used for other jobs. The Job Preparation task can run multiple times on the same compute node. Therefore, you should write the Job Preparation task to handle re-execution. If the compute node is rebooted, the Job Preparation task is run again on the node before scheduling any other task of the job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not previously complete. If the compute node is reimaged, the Job Preparation task is run again before scheduling any task of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobPreparationTask")]
		public JobPreparationTask JobPreparationTask { get; set; }
		
		/// <summary>
		/// The Job Release task runs when the job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the job is still active, the job's maximum wall clock time constraint is reached, and the job is still active, or the job's Job Manager task completed, and the job is configured to terminate when the Job Manager completes. The Job Release task runs on each compute node where tasks of the job have run and the Job Preparation task ran and completed. If you reimage a compute node after it has run the Job Preparation task, and the job ends without any further tasks of the job running on that compute node (and hence the Job Preparation task does not re-run), then the Job Release task does not run on that node. If a compute node reboots while the Job Release task is still running, the Job Release task runs again when the compute node starts up. The job is not marked as complete until all Job Release tasks have completed. The Job Release task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobReleaseTask")]
		public JobReleaseTask JobReleaseTask { get; set; }
		
		/// <summary>
		/// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// noAction - do nothing. The job remains active unless terminated or disabled by some other means.
		/// terminateJob - terminate the job. The job's terminateReason is set to 'AllTasksComplete'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onAllTasksComplete")]
		public CloudJobOnAllTasksComplete OnAllTasksComplete { get; set; }
		
		/// <summary>
		/// A task is considered to have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error. Values are:
		///
		/// noAction - do nothing.
		/// performExitOptionsJobAction - take the action associated with the task exit condition in the task's exitConditions collection. (This may still result in no action being taken, if that is what the task specifies.)
		///
		/// The default is noAction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onTaskFailure")]
		public CloudJobOnTaskFailure OnTaskFailure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usesTaskDependencies")]
		public System.Nullable<System.Boolean> UsesTaskDependencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobConstraints
	{
		
		/// <summary>
		/// Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTaskRetryCount")]
		public System.Nullable<System.Int32> MaxTaskRetryCount { get; set; }
		
		/// <summary>
		/// If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxWallClockTime")]
		public string MaxWallClockTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDisableParameter
	{
		
		/// <summary>
		/// Values are:
		///
		/// requeue - Terminate running tasks and requeue them. The tasks will run again when the job is enabled.
		/// terminate - Terminate running tasks. The tasks will not run again.
		/// wait - Allow currently running tasks to complete.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disableTasks")]
		public JobDisableParameterDisableTasks DisableTasks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobDisableParameterDisableTasks
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requeue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wait = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobExecutionInformation
	{
		
		/// <summary>
		/// This property is set only if the job is in the completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// This element contains the actual pool where the job is assigned. When you get job details from the service, they also contain a poolInfo element, which contains the pool configuration data from when the job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the job ran on an auto pool, and this property contains the ID of that auto pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedulingError")]
		public JobSchedulingError SchedulingError { get; set; }
		
		/// <summary>
		/// This is the time at which the job was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// This property is set only if the job is in the completed state. If the Batch service terminates the job, it sets the reason as follows: JMComplete - the Job Manager task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the job reached its maxWallClockTime constraint. TerminateJobSchedule - the job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the job's onAllTasksComplete attribute is set to terminateJob, and all tasks in the job are complete. TaskFailed - the job's onTaskFailure attribute is set to performExitOptionsJobAction, and a task in the job failed with an exit condition that specified a jobAction of terminateJob. Any other string is a user-defined reason specified in a call to the 'Terminate a job' operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminateReason")]
		public string TerminateReason { get; set; }
	}
	
	/// <summary>
	/// The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobManagerTask
	{
		
		/// <summary>
		/// The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowLowPriorityNode")]
		public System.Nullable<System.Boolean> AllowLowPriorityNode { get; set; }
		
		/// <summary>
		/// Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationTokenSettings")]
		public AuthenticationTokenSettings AuthenticationTokenSettings { get; set; }
		
		/// <summary>
		/// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
		
		/// <summary>
		/// It need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="killJobOnCompletion")]
		public System.Nullable<System.Boolean> KillJobOnCompletion { get; set; }
		
		/// <summary>
		/// For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputFiles")]
		public OutputFile[] OutputFiles { get; set; }
		
		/// <summary>
		/// Files listed under this element are located in the task's working directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runExclusive")]
		public System.Nullable<System.Boolean> RunExclusive { get; set; }
		
		/// <summary>
		/// Specify either the userName or autoUser property, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIdentity")]
		public UserIdentity UserIdentity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPatchParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		/// <summary>
		/// If omitted, the existing job metadata is left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// noAction - do nothing. The job remains active unless terminated or disabled by some other means.
		/// terminateJob - terminate the job. The job's terminateReason is set to 'AllTasksComplete'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onAllTasksComplete")]
		public CloudJobOnAllTasksComplete OnAllTasksComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the job is left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	/// <summary>
	/// You can use Job Preparation to prepare a compute node to run tasks for the job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the tasks in the job. The Job Preparation task can download these common resource files to the shared location on the compute node. (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the compute node so that all tasks of that job can communicate with it. If the Job Preparation task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run tasks of this job on the compute node. The node remains ineligible to run tasks of this job until it is reimaged. The node remains active and can be used for other jobs. The Job Preparation task can run multiple times on the same compute node. Therefore, you should write the Job Preparation task to handle re-execution. If the compute node is rebooted, the Job Preparation task is run again on the node before scheduling any other task of the job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not previously complete. If the compute node is reimaged, the Job Preparation task is run again before scheduling any task of the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPreparationTask
	{
		
		/// <summary>
		/// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other task in the job can have the same ID as the Job Preparation task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Job Preparation task is always rerun if a compute node is reimaged, or if the Job Preparation task did not complete (e.g. because the reboot occurred while the task was running). Therefore, you should always write a Job Preparation task to be idempotent and to behave correctly if run multiple times. The default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rerunOnNodeRebootAfterSuccess")]
		public System.Nullable<System.Boolean> RerunOnNodeRebootAfterSuccess { get; set; }
		
		/// <summary>
		/// Files listed under this element are located in the task's working directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Specify either the userName or autoUser property, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIdentity")]
		public UserIdentity UserIdentity { get; set; }
		
		/// <summary>
		/// If true and the Job Preparation task fails on a compute node, the Batch service retries the Job Preparation task up to its maximum retry count (as specified in the constraints element). If the task has still not completed successfully after all retries, then the Batch service will not schedule tasks of the job to the compute node. The compute node remains active and eligible to run tasks of other jobs. If false, the Batch service will not wait for the Job Preparation task to complete. In this case, other tasks of the job can start executing on the compute node while the Job Preparation task is still running; and even if the Job Preparation task fails, new tasks will continue to be scheduled on the node. The default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitForSuccess")]
		public System.Nullable<System.Boolean> WaitForSuccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPreparationTaskExecutionInformation
	{
		
		/// <summary>
		/// This property is set only if the task is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// This parameter is returned only if the task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the compute node operating system, such as when a process is forcibly terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureInfo")]
		public TaskFailureInformation FailureInfo { get; set; }
		
		/// <summary>
		/// This property is set only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRetryTime")]
		public System.Nullable<System.DateTimeOffset> LastRetryTime { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// success - The task ran successfully.
		/// failure - There was an error during processing of the task. The failure may have occurred before the task process was launched, while the task process was executing, or after the task process exited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public SubtaskInformationResult Result { get; set; }
		
		/// <summary>
		/// Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public int RetryCount { get; set; }
		
		/// <summary>
		/// If the task has been restarted or retried, this is the most recent time at which the task started running.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// running - the task is currently running (including retrying).
		/// completed - the task has exited with exit code 0, or the task has exhausted its retry limit, or the Batch service was unable to start the task due to task preparation errors (such as resource file download failures).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public JobPreparationTaskExecutionInformationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectory")]
		public string TaskRootDirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectoryUrl")]
		public string TaskRootDirectoryUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobPreparationTaskExecutionInformationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
	}
	
	/// <summary>
	/// The Job Release task runs when the job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the job is still active, the job's maximum wall clock time constraint is reached, and the job is still active, or the job's Job Manager task completed, and the job is configured to terminate when the Job Manager completes. The Job Release task runs on each compute node where tasks of the job have run and the Job Preparation task ran and completed. If you reimage a compute node after it has run the Job Preparation task, and the job ends without any further tasks of the job running on that compute node (and hence the Job Preparation task does not re-run), then the Job Release task does not run on that node. If a compute node reboots while the Job Release task is still running, the Job Release task runs again when the compute node starts up. The job is not marked as complete until all Job Release tasks have completed. The Job Release task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobReleaseTask
	{
		
		/// <summary>
		/// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other task in the job can have the same ID as the Job Release task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxWallClockTime")]
		public string MaxWallClockTime { get; set; }
		
		/// <summary>
		/// Files listed under this element are located in the task's working directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionTime")]
		public string RetentionTime { get; set; }
		
		/// <summary>
		/// Specify either the userName or autoUser property, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIdentity")]
		public UserIdentity UserIdentity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobReleaseTaskExecutionInformation
	{
		
		/// <summary>
		/// This property is set only if the task is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// This parameter is returned only if the task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the compute node operating system, such as when a process is forcibly terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureInfo")]
		public TaskFailureInformation FailureInfo { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// success - The task ran successfully.
		/// failure - There was an error during processing of the task. The failure may have occurred before the task process was launched, while the task process was executing, or after the task process exited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public SubtaskInformationResult Result { get; set; }
		
		/// <summary>
		/// If the task has been restarted or retried, this is the most recent time at which the task started running.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// running - the task is currently running (including retrying).
		/// completed - the task has exited, or the Batch service was unable to start the task due to task preparation errors (such as resource file download failures).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public JobPreparationTaskExecutionInformationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectory")]
		public string TaskRootDirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskRootDirectoryUrl")]
		public string TaskRootDirectoryUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobScheduleAddParameter
	{
		
		/// <summary>
		/// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSpecification")]
		public JobSpecification JobSpecification { get; set; }
		
		/// <summary>
		/// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobScheduleExecutionInformation
	{
		
		/// <summary>
		/// This property is set only if the job schedule is in the completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// This property is meaningful only if the schedule is in the active state when the time comes around. For example, if the schedule is disabled, no job will be created at nextRunTime unless the job is enabled before then.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRunTime")]
		public System.Nullable<System.DateTimeOffset> NextRunTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recentJob")]
		public RecentJob RecentJob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobSchedulePatchParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobSpecification")]
		public JobSpecification JobSpecification { get; set; }
		
		/// <summary>
		/// If you do not specify this element, existing metadata is left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
	}
	
	/// <summary>
	/// Values are:
	///
	/// active - The job schedule is active and will create jobs as per its schedule.
	/// disabled - The user has disabled the schedule. The scheduler will not initiate any new jobs will on this schedule, but any existing active job will continue to run.
	/// terminating - The schedule has no more work to do, or has been explicitly terminated by the user, but the termination operation is still in progress. The scheduler will not initiate any new jobs for this schedule, nor is any existing job active.
	/// completed - The schedule has terminated, either by reaching its end time or by the user terminating it explicitly.
	/// deleting - The user has requested that the schedule be deleted, but the delete operation is still in progress. The scheduler will not initiate any new jobs for this schedule, and will delete any existing jobs and tasks under the schedule, including any active job. The schedule will be deleted when all jobs and tasks under the schedule have been deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobScheduleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobScheduleStatistics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kernelCPUTime")]
		public string KernelCPUTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numFailedTasks")]
		public long NumFailedTasks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numSucceededTasks")]
		public long NumSucceededTasks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numTaskRetries")]
		public long NumTaskRetries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOGiB")]
		public double ReadIOGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOps")]
		public long ReadIOps { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userCPUTime")]
		public string UserCPUTime { get; set; }
		
		/// <summary>
		/// This value is only reported in the account lifetime statistics; it is not included in the job statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waitTime")]
		public string WaitTime { get; set; }
		
		/// <summary>
		/// The wall clock time is the elapsed time from when the task started running on a compute node to when it finished (or to the last time the statistics were updated, if the task had not finished by then). If a task was retried, this includes the wall clock time of all the task retries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wallClockTime")]
		public string WallClockTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOGiB")]
		public double WriteIOGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOps")]
		public long WriteIOps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobScheduleUpdateParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSpecification")]
		public JobSpecification JobSpecification { get; set; }
		
		/// <summary>
		/// If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobSchedulingError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ErrorCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public NameValuePair[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobSpecification
	{
		
		/// <summary>
		/// Individual tasks can override an environment setting specified here by specifying the same setting name with a different value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonEnvironmentSettings")]
		public EnvironmentSetting[] CommonEnvironmentSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		/// <summary>
		/// The name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobManagerTask")]
		public JobManagerTask JobManagerTask { get; set; }
		
		/// <summary>
		/// You can use Job Preparation to prepare a compute node to run tasks for the job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the tasks in the job. The Job Preparation task can download these common resource files to the shared location on the compute node. (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the compute node so that all tasks of that job can communicate with it. If the Job Preparation task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run tasks of this job on the compute node. The node remains ineligible to run tasks of this job until it is reimaged. The node remains active and can be used for other jobs. The Job Preparation task can run multiple times on the same compute node. Therefore, you should write the Job Preparation task to handle re-execution. If the compute node is rebooted, the Job Preparation task is run again on the node before scheduling any other task of the job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not previously complete. If the compute node is reimaged, the Job Preparation task is run again before scheduling any task of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobPreparationTask")]
		public JobPreparationTask JobPreparationTask { get; set; }
		
		/// <summary>
		/// The Job Release task runs when the job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the job is still active, the job's maximum wall clock time constraint is reached, and the job is still active, or the job's Job Manager task completed, and the job is configured to terminate when the Job Manager completes. The Job Release task runs on each compute node where tasks of the job have run and the Job Preparation task ran and completed. If you reimage a compute node after it has run the Job Preparation task, and the job ends without any further tasks of the job running on that compute node (and hence the Job Preparation task does not re-run), then the Job Release task does not run on that node. If a compute node reboots while the Job Release task is still running, the Job Release task runs again when the compute node starts up. The job is not marked as complete until all Job Release tasks have completed. The Job Release task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobReleaseTask")]
		public JobReleaseTask JobReleaseTask { get; set; }
		
		/// <summary>
		/// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// noAction - do nothing. The job remains active unless terminated or disabled by some other means.
		/// terminateJob - terminate the job. The job's terminateReason is set to 'AllTasksComplete'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onAllTasksComplete")]
		public CloudJobOnAllTasksComplete OnAllTasksComplete { get; set; }
		
		/// <summary>
		/// A task is considered to have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error. Values are:
		///
		/// noAction - do nothing.
		/// performExitOptionsJobAction - take the action associated with the task exit condition in the task's exitConditions collection. (This may still result in no action being taken, if that is what the task specifies.)
		///
		/// The default is noAction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onTaskFailure")]
		public CloudJobOnTaskFailure OnTaskFailure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usesTaskDependencies")]
		public System.Nullable<System.Boolean> UsesTaskDependencies { get; set; }
	}
	
	/// <summary>
	/// Values are:
	///
	/// active - the job is available to have tasks scheduled.
	/// disabling - a user has requested that the job be disabled, but the disable operation is still in progress (for example, waiting for tasks to terminate).
	/// disabled - a user has disabled the job. No tasks are running, and no new tasks will be scheduled.
	/// enabling - a user has requested that the job be enabled, but the enable operation is still in progress.
	/// terminating - the job is about to complete, either because a Job Manager task has completed or because the user has terminated the job, but the terminate operation is still in progress (for example, because Job Release tasks are running).
	/// completed - all tasks have terminated, and the system will not accept any more tasks or any further changes to the job.
	/// deleting - a user has requested that the job be deleted, but the delete operation is still in progress (for example, because the system is still terminating running tasks).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabling = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStatistics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kernelCPUTime")]
		public string KernelCPUTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// A task fails if it exhausts its maximum retry count without returning exit code 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numFailedTasks")]
		public long NumFailedTasks { get; set; }
		
		/// <summary>
		/// A task completes successfully if it returns exit code 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numSucceededTasks")]
		public long NumSucceededTasks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numTaskRetries")]
		public long NumTaskRetries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOGiB")]
		public double ReadIOGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOps")]
		public long ReadIOps { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userCPUTime")]
		public string UserCPUTime { get; set; }
		
		/// <summary>
		/// The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.) This value is only reported in the account lifetime statistics; it is not included in the job statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waitTime")]
		public string WaitTime { get; set; }
		
		/// <summary>
		///  The wall clock time is the elapsed time from when the task started running on a compute node to when it finished (or to the last time the statistics were updated, if the task had not finished by then). If a task was retried, this includes the wall clock time of all the task retries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wallClockTime")]
		public string WallClockTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOGiB")]
		public double WriteIOGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOps")]
		public long WriteIOps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobTerminateParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="terminateReason")]
		public string TerminateReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobUpdateParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public JobConstraints Constraints { get; set; }
		
		/// <summary>
		/// If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// noAction - do nothing. The job remains active unless terminated or disabled by some other means.
		/// terminateJob - terminate the job. The job's terminateReason is set to 'AllTasksComplete'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onAllTasksComplete")]
		public CloudJobOnAllTasksComplete OnAllTasksComplete { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolInfo")]
		public PoolInformation PoolInfo { get; set; }
		
		/// <summary>
		/// Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinuxUserConfiguration
	{
		
		/// <summary>
		/// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public System.Nullable<System.Int32> Gid { get; set; }
		
		/// <summary>
		/// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshPrivateKey")]
		public string SshPrivateKey { get; set; }
		
		/// <summary>
		/// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public System.Nullable<System.Int32> Uid { get; set; }
	}
	
	/// <summary>
	/// Multi-instance tasks are commonly used to support MPI tasks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MultiInstanceSettings
	{
		
		/// <summary>
		/// The difference between common resource files and task resource files is that common resource files are downloaded for all subtasks including the primary, whereas task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the task working directory, but instead are downloaded to the task root directory (one directory above the working directory).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonResourceFiles")]
		public ResourceFile[] CommonResourceFiles { get; set; }
		
		/// <summary>
		/// A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coordinationCommandLine")]
		public string CoordinationCommandLine { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfInstances")]
		public int NumberOfInstances { get; set; }
	}
	
	/// <summary>
	/// The network configuration for a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="endpointConfiguration")]
		public PoolEndpointConfiguration EndpointConfiguration { get; set; }
		
		/// <summary>
		/// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created via virtualMachineConfiguration the Batch account must have poolAllocationMode userSubscription in order to use a VNet. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeDisableSchedulingParameter
	{
		
		/// <summary>
		/// Values are:
		///
		/// requeue - Terminate running task processes and requeue the tasks. The tasks may run again on other compute nodes, or when task scheduling is re-enabled on this node. Enter offline state as soon as tasks have been terminated.
		/// terminate - Terminate running tasks. The tasks will not run again. Enter offline state as soon as tasks have been terminated.
		/// taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Enter offline state when all tasks have completed.
		///
		/// The default value is requeue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDisableSchedulingOption")]
		public System.Nullable<NodeDisableSchedulingParameterNodeDisableSchedulingOption> NodeDisableSchedulingOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NodeDisableSchedulingParameterNodeDisableSchedulingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requeue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taskCompletion = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="isDirectory")]
		public System.Nullable<System.Boolean> IsDirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FileProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeFileListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NodeFile[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeRebootParameter
	{
		
		/// <summary>
		/// Values are:
		///
		/// requeue - Terminate running task processes and requeue the tasks. The tasks will run again when a node is available. Restart the node as soon as tasks have been terminated.
		/// terminate - Terminate running tasks. The tasks will not run again. Restart the node as soon as tasks have been terminated.
		/// taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Restart the node when all tasks have completed.
		/// retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Restart the node when all task retention periods have expired.
		///
		/// The default value is requeue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeRebootOption")]
		public ComputeNodeDeallocationOption NodeRebootOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeReimageParameter
	{
		
		/// <summary>
		/// Values are:
		///
		/// requeue - Terminate running task processes and requeue the tasks. The tasks will run again when a node is available. Reimage the node as soon as tasks have been terminated.
		/// terminate - Terminate running tasks. The tasks will not run again. Reimage the node as soon as tasks have been terminated.
		/// taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Reimage the node when all tasks have completed.
		/// retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Reimage the node when all task retention periods have expired.
		///
		/// The default value is requeue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeReimageOption")]
		public ComputeNodeDeallocationOption NodeReimageOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeRemoveParameter
	{
		
		/// <summary>
		/// Values are:
		///
		/// requeue - Terminate running tasks and requeue them. The tasks will run again when the job is enabled. Remove nodes as soon as tasks have been terminated.
		/// terminate - Terminate running tasks. The tasks will not run again. Remove nodes as soon as tasks have been terminated.
		/// taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Remove nodes when all tasks have completed.
		/// retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Remove nodes when all task retention periods have expired.
		///
		/// The default value is requeue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDeallocationOption")]
		public ComputeNodeDeallocationOption NodeDeallocationOption { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeList")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] NodeList { get; set; }
		
		/// <summary>
		/// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeUpdateUserParameter
	{
		
		/// <summary>
		/// If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTime")]
		public System.Nullable<System.DateTimeOffset> ExpiryTime { get; set; }
		
		/// <summary>
		/// The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property. If omitted, any existing password is removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If omitted, any existing SSH public key is removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshPublicKey")]
		public string SshPublicKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OSDisk
	{
		
		/// <summary>
		/// Values are:
		///
		/// none - The caching mode for the disk is not enabled.
		/// readOnly - The caching mode for the disk is read only.
		/// readWrite - The caching mode for the disk is read and write.
		///
		/// The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caching")]
		public System.Nullable<OSDiskCaching> Caching { get; set; }
		
		/// <summary>
		/// All the VHDs must be identical and must reside in an Azure Storage account within the same subscription and same region as the Batch account. For best performance, it is recommended that each VHD resides in a separate Azure Storage account. Each VHD can serve up to 20 Windows compute nodes or 40 Linux compute nodes. You must supply enough VHD URIs to satisfy the 'targetDedicated' property of the pool. If you do not supply enough VHD URIs, the pool will partially allocate compute nodes, and a resize error will occur.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageUris")]
		public string[] ImageUris { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OSDiskCaching
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		readOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		readWrite = 2,
	}
	
	/// <summary>
	/// Values are:
	///
	/// noAction - do nothing. The job remains active unless terminated or disabled by some other means.
	/// terminateJob - terminate the job. The job's terminateReason is set to 'AllTasksComplete'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OnAllTasksComplete
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noAction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminateJob = 1,
	}
	
	/// <summary>
	/// A task is considered to have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error. Values are:
	///
	/// noAction - do nothing.
	/// performExitOptionsJobAction - take the action associated with the task exit condition in the task's exitConditions collection. (This may still result in no action being taken, if that is what the task specifies.)
	///
	/// The default is noAction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OnTaskFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noAction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performExitOptionsJobAction = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OutputFileBlobContainerDestination
	{
		
		/// <summary>
		/// The URL must include a Shared Access Signature (SAS) granting write permissions to the container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerUrl")]
		public string ContainerUrl { get; set; }
		
		/// <summary>
		/// If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OutputFileDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="container")]
		public OutputFileBlobContainerDestination Container { get; set; }
	}
	
	/// <summary>
	/// Values are:
	///
	/// taskSuccess - Upload the file(s) only after the task process exits with an exit code of 0.
	/// taskFailure - Upload the file(s) only after the task process exits with a nonzero exit code.
	/// taskCompletion - Upload the file(s) after the task process exits, no matter what the exit code was.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OutputFileUploadCondition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taskSuccess = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taskFailure = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taskCompletion = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OutputFileUploadOptions
	{
		
		/// <summary>
		/// Values are:
		///
		/// taskSuccess - Upload the file(s) only after the task process exits with an exit code of 0.
		/// taskFailure - Upload the file(s) only after the task process exits with a nonzero exit code.
		/// taskCompletion - Upload the file(s) after the task process exits, no matter what the exit code was.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadCondition")]
		public OutputFileUploadCondition UploadCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolAddParameter
	{
		
		/// <summary>
		/// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationLicenses")]
		public string[] ApplicationLicenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleEvaluationInterval")]
		public string AutoScaleEvaluationInterval { get; set; }
		
		/// <summary>
		/// This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see 'Automatically scale compute nodes in an Azure Batch pool' (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
		
		/// <summary>
		/// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloudServiceConfiguration")]
		public CloudServiceConfiguration CloudServiceConfiguration { get; set; }
		
		/// <summary>
		/// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the pool automatically resizes according to the formula. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoScale")]
		public System.Nullable<System.Boolean> EnableAutoScale { get; set; }
		
		/// <summary>
		/// Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableInterNodeCommunication")]
		public System.Nullable<System.Boolean> EnableInterNodeCommunication { get; set; }
		
		/// <summary>
		/// The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two pool IDs within an account that differ only by case).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTasksPerNode")]
		public System.Nullable<System.Int32> MaxTasksPerNode { get; set; }
		
		/// <summary>
		/// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// The network configuration for a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		/// <summary>
		/// This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
		
		/// <summary>
		/// This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetDedicatedNodes")]
		public System.Nullable<System.Int32> TargetDedicatedNodes { get; set; }
		
		/// <summary>
		/// This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLowPriorityNodes")]
		public System.Nullable<System.Int32> TargetLowPriorityNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskSchedulingPolicy")]
		public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAccounts")]
		public UserAccount[] UserAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfiguration")]
		public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
		
		/// <summary>
		/// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolEnableAutoScaleParameter
	{
		
		/// <summary>
		/// The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval, then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation schedule will be started, with its starting time being the time when this request was issued.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleEvaluationInterval")]
		public string AutoScaleEvaluationInterval { get; set; }
		
		/// <summary>
		/// The formula is checked for validity before it is applied to the pool. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolEndpointConfiguration
	{
		
		/// <summary>
		/// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inboundNATPools")]
		public InboundNATPool[] InboundNATPools { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolEvaluateAutoScaleParameter
	{
		
		/// <summary>
		/// The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoPoolSpecification")]
		public AutoPoolSpecification AutoPoolSpecification { get; set; }
		
		/// <summary>
		/// You must ensure that the pool referenced by this property exists. If the pool does not exist at the time the Batch service tries to schedule a job, no tasks for the job will run until you create a pool with that id. Note that the Batch service will not reject the job request; it will simply not run tasks until the pool exists. You must specify either the pool ID or the auto pool specification, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolListUsageMetricsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="odata.nextLink")]
		public string Odata_nextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PoolUsageMetrics[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolUsageMetrics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataEgressGiB")]
		public double DataEgressGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataIngressGiB")]
		public double DataIngressGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		public string PoolId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCoreHours")]
		public double TotalCoreHours { get; set; }
		
		/// <summary>
		/// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, STANDARD_A1_V2 and STANDARD_A2_V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolPatchParameter
	{
		
		/// <summary>
		/// Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If this element is present, it replaces any existing application package references. If you specify an empty collection, then all application package references are removed from the pool. If omitted, any existing application package references are left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// If this element is present, it replaces any existing certificate references configured on the pool. If omitted, any existing certificate references are left unchanged. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		/// <summary>
		/// If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolResizeParameter
	{
		
		/// <summary>
		/// Values are:
		///
		/// requeue - Terminate running tasks and requeue them. The tasks will run again when the job is enabled. Remove nodes as soon as tasks have been terminated.
		/// terminate - Terminate running tasks. The tasks will not run again. Remove nodes as soon as tasks have been terminated.
		/// taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Remove nodes when all tasks have completed.
		/// retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Remove nodes when all task retention periods have expired.
		///
		/// The default value is requeue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDeallocationOption")]
		public ComputeNodeDeallocationOption NodeDeallocationOption { get; set; }
		
		/// <summary>
		/// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetDedicatedNodes")]
		public System.Nullable<System.Int32> TargetDedicatedNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetLowPriorityNodes")]
		public System.Nullable<System.Int32> TargetLowPriorityNodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolSpecification
	{
		
		/// <summary>
		/// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationLicenses")]
		public string[] ApplicationLicenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleEvaluationInterval")]
		public string AutoScaleEvaluationInterval { get; set; }
		
		/// <summary>
		/// This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScaleFormula")]
		public string AutoScaleFormula { get; set; }
		
		/// <summary>
		/// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloudServiceConfiguration")]
		public CloudServiceConfiguration CloudServiceConfiguration { get; set; }
		
		/// <summary>
		/// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula element is required. The pool automatically resizes according to the formula. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoScale")]
		public System.Nullable<System.Boolean> EnableAutoScale { get; set; }
		
		/// <summary>
		/// Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableInterNodeCommunication")]
		public System.Nullable<System.Boolean> EnableInterNodeCommunication { get; set; }
		
		/// <summary>
		/// The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTasksPerNode")]
		public System.Nullable<System.Int32> MaxTasksPerNode { get; set; }
		
		/// <summary>
		/// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// The network configuration for a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		/// <summary>
		/// This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
		
		/// <summary>
		/// This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetDedicatedNodes")]
		public System.Nullable<System.Int32> TargetDedicatedNodes { get; set; }
		
		/// <summary>
		/// This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLowPriorityNodes")]
		public System.Nullable<System.Int32> TargetLowPriorityNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskSchedulingPolicy")]
		public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAccounts")]
		public UserAccount[] UserAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfiguration")]
		public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
		
		/// <summary>
		/// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolStatistics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceStats")]
		public ResourceStatistics ResourceStats { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usageStats")]
		public UsageStatistics UsageStats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolUpdatePropertiesParameter
	{
		
		/// <summary>
		/// The list replaces any existing application package references on the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		/// <summary>
		/// This list replaces any existing certificate references configured on the pool. If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public CertificateReference[] CertificateReferences { get; set; }
		
		/// <summary>
		/// This list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolUpgradeOSParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetOSVersion")]
		public string TargetOSVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecentJob
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceStatistics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avgCPUPercentage")]
		public double AvgCPUPercentage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avgDiskGiB")]
		public double AvgDiskGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avgMemoryGiB")]
		public double AvgMemoryGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskReadGiB")]
		public double DiskReadGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskReadIOps")]
		public long DiskReadIOps { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskWriteGiB")]
		public double DiskWriteGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskWriteIOps")]
		public long DiskWriteIOps { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkReadGiB")]
		public double NetworkReadGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="networkWriteGiB")]
		public double NetworkWriteGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="peakDiskGiB")]
		public double PeakDiskGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="peakMemoryGiB")]
		public double PeakMemoryGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Schedule
	{
		
		/// <summary>
		/// If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotRunAfter")]
		public System.Nullable<System.DateTimeOffset> DoNotRunAfter { get; set; }
		
		/// <summary>
		/// If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotRunUntil")]
		public System.Nullable<System.DateTimeOffset> DoNotRunUntil { get; set; }
		
		/// <summary>
		/// Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrenceInterval")]
		public string RecurrenceInterval { get; set; }
		
		/// <summary>
		/// If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startWindow")]
		public string StartWindow { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartTask
	{
		
		/// <summary>
		/// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTaskRetryCount")]
		public System.Nullable<System.Int32> MaxTaskRetryCount { get; set; }
		
		/// <summary>
		/// Files listed under this element are located in the task's working directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Specify either the userName or autoUser property, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIdentity")]
		public UserIdentity UserIdentity { get; set; }
		
		/// <summary>
		/// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitForSuccess")]
		public System.Nullable<System.Boolean> WaitForSuccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartTaskInformation
	{
		
		/// <summary>
		/// This is the end time of the most recent run of the start task, if that run has completed (even if that run failed and a retry is pending). This element is not present if the start task is currently running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// This property is set only if the start task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the start task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureInfo")]
		public TaskFailureInformation FailureInfo { get; set; }
		
		/// <summary>
		/// This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRetryTime")]
		public System.Nullable<System.DateTimeOffset> LastRetryTime { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// success - The task ran successfully.
		/// failure - There was an error during processing of the task. The failure may have occurred before the task process was launched, while the task process was executing, or after the task process exited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public SubtaskInformationResult Result { get; set; }
		
		/// <summary>
		/// Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public int RetryCount { get; set; }
		
		/// <summary>
		/// This value is reset every time the task is restarted or retried (that is, this is the most recent time at which the start task started running).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// running - The start task is currently running.
		/// completed - The start task has exited with exit code 0, or the start task has failed and the retry limit has reached, or the start task process did not run due to task preparation errors (such as resource file download failures).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public JobPreparationTaskExecutionInformationState State { get; set; }
	}
	
	/// <summary>
	/// Values are:
	///
	/// preparing - The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will be eligible to be assigned to a different node.
	/// running - The subtask is running on a compute node.
	/// completed - The subtask is no longer eligible to run, usually because the subtask has finished successfully, or the subtask has finished unsuccessfully and has exhausted its retry limit. A subtask is also marked as completed if an error occurred launching the subtask, or when the task has been terminated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SubtaskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preparing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskAddCollectionParameter
	{
		
		/// <summary>
		/// The total serialized size of this collection must be less than 4MB. If it is greater than 4MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks.
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public TaskAddParameter[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskAddParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="affinityInfo")]
		public AffinityInformation AffinityInfo { get; set; }
		
		/// <summary>
		/// Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPackageReferences")]
		public ApplicationPackageReference[] ApplicationPackageReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationTokenSettings")]
		public AuthenticationTokenSettings AuthenticationTokenSettings { get; set; }
		
		/// <summary>
		/// For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public TaskDependencies DependsOn { get; set; }
		
		/// <summary>
		/// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exitConditions")]
		public ExitConditions ExitConditions { get; set; }
		
		/// <summary>
		/// The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a job that differ only by case).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Multi-instance tasks are commonly used to support MPI tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiInstanceSettings")]
		public MultiInstanceSettings MultiInstanceSettings { get; set; }
		
		/// <summary>
		/// For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputFiles")]
		public OutputFile[] OutputFiles { get; set; }
		
		/// <summary>
		/// For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Specify either the userName or autoUser property, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIdentity")]
		public UserIdentity UserIdentity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskAddCollectionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TaskAddResult[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskAddResult
	{
		
		/// <summary>
		/// You can use this to detect whether the task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the job in the meantime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public BatchError Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// success - Task was added successfully.
		/// clienterror - Task failed to add due to a client error and should not be retried without modifying the request as appropriate.
		/// servererror - Task failed to add due to a server error and can be retried without modification.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TaskAddResultStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskAddResultStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		clientError = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		serverError = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskConstraints
	{
		
		/// <summary>
		/// Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTaskRetryCount")]
		public System.Nullable<System.Int32> MaxTaskRetryCount { get; set; }
		
		/// <summary>
		/// If this is not specified, there is no time limit on how long the task may run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxWallClockTime")]
		public string MaxWallClockTime { get; set; }
		
		/// <summary>
		/// The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionTime")]
		public string RetentionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskCounts
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public int Active { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public int Completed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public int Failed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="running")]
		public int Running { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="succeeded")]
		public int Succeeded { get; set; }
		
		/// <summary>
		/// If the validationStatus is unvalidated, then the Batch service has not been able to check state counts against the task states as reported in the List Tasks API. The validationStatus may be unvalidated if the job contains more than 200,000 tasks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validationStatus")]
		public TaskCountsValidationStatus ValidationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskCountsValidationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		validated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unvalidated = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskDependencies
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskIdRanges")]
		public TaskIdRange[] TaskIdRanges { get; set; }
		
		/// <summary>
		/// The taskIds collection is limited to 64000 characters total (i.e. the combined length of all task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong. In this case consider using task ID ranges instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskIds")]
		public string[] TaskIds { get; set; }
	}
	
	/// <summary>
	/// The start and end of the range are inclusive. For example, if a range has start 9 and end 12, then it represents tasks '9', '10', '11' and '12'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskIdRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end")]
		public int End { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public int Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskExecutionInformation
	{
		
		/// <summary>
		/// This property is set only if the task is in the Completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// This property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureInfo")]
		public TaskFailureInformation FailureInfo { get; set; }
		
		/// <summary>
		/// This property is set only if the requeueCount is nonzero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRequeueTime")]
		public System.Nullable<System.DateTimeOffset> LastRequeueTime { get; set; }
		
		/// <summary>
		/// This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRetryTime")]
		public System.Nullable<System.DateTimeOffset> LastRetryTime { get; set; }
		
		/// <summary>
		/// When the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requeueCount")]
		public int RequeueCount { get; set; }
		
		/// <summary>
		/// Values are:
		///
		/// success - The task ran successfully.
		/// failure - There was an error during processing of the task. The failure may have occurred before the task process was launched, while the task process was executing, or after the task process exited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public SubtaskInformationResult Result { get; set; }
		
		/// <summary>
		/// Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public int RetryCount { get; set; }
		
		/// <summary>
		/// 'Running' corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Values are:
	///
	/// success - The task ran successfully.
	/// failure - There was an error during processing of the task. The failure may have occurred before the task process was launched, while the task process was executing, or after the task process exited.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskExecutionResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failure = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskFailureInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ErrorCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public NameValuePair[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskSchedulingPolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeFillType")]
		public TaskSchedulingPolicyNodeFillType NodeFillType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskSchedulingPolicyNodeFillType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spread = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pack = 1,
	}
	
	/// <summary>
	/// Values are:
	///
	/// active - The task is queued and able to run, but is not currently assigned to a compute node. A task enters this state when it is created, when it is enabled after being disabled, or when it is awaiting a retry after a failed run.
	/// preparing - The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will return to active and will be eligible to be assigned to a different node.
	/// running - The task is running on a compute node. This includes task-level preparation such as downloading resource files or deploying application packages specified on the task - it does not necessarily mean that the task command line has started executing.
	/// completed - The task is no longer eligible to run, usually because the task has finished successfully, or the task has finished unsuccessfully and has exhausted its retry limit. A task is also marked as completed if an error occurred launching the task, or when the task has been terminated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preparing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskStatistics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kernelCPUTime")]
		public string KernelCPUTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOGiB")]
		public double ReadIOGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readIOps")]
		public long ReadIOps { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userCPUTime")]
		public string UserCPUTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waitTime")]
		public string WaitTime { get; set; }
		
		/// <summary>
		/// The wall clock time is the elapsed time from when the task started running on a compute node to when it finished (or to the last time the statistics were updated, if the task had not finished by then). If the task was retried, this includes the wall clock time of all the task retries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wallClockTime")]
		public string WallClockTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOGiB")]
		public double WriteIOGiB { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="writeIOps")]
		public long WriteIOps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskUpdateParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public TaskConstraints Constraints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageStatistics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dedicatedCoreTime")]
		public string DedicatedCoreTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	/// <summary>
	/// Specify either the userName or autoUser property, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoUser")]
		public AutoUserSpecification AutoUser { get; set; }
		
		/// <summary>
		/// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageReference")]
		public ImageReference ImageReference { get; set; }
		
		/// <summary>
		/// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeAgentSKUId")]
		public string NodeAgentSKUId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osDisk")]
		public OSDisk OsDisk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windowsConfiguration")]
		public WindowsConfiguration WindowsConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WindowsConfiguration
	{
		
		/// <summary>
		/// If omitted, the default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutomaticUpdates")]
		public System.Nullable<System.Boolean> EnableAutomaticUpdates { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the applications available in the specified account.
		/// This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.
		/// Application_List applications
		/// </summary>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 applications can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of applications.</returns>
		public async Task<ApplicationListResult> Application_ListAsync(int maxresults, int timeout, string api_version)
		{
			var requestUri = "applications?maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified application.
		/// This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.
		/// Application_Get applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">The ID of the application.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the application.</returns>
		public async Task<ApplicationSummary> Application_GetAsync(string applicationId, int timeout, string api_version)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the certificates that have been added to the specified account.
		/// Certificate_List certificates
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 certificates can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of certificates.</returns>
		public async Task<CertificateListResult> Certificate_ListAsync(string filter, string select, int maxresults, int timeout, string api_version)
		{
			var requestUri = "certificates?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CertificateListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified certificate.
		/// Certificate_Get certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})
		/// </summary>
		/// <param name="thumbprintAlgorithm">The algorithm used to derive the thumbprint parameter. This must be sha1.</param>
		/// <param name="thumbprint">The thumbprint of the certificate to get.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the certificate.</returns>
		public async Task<Certificate> Certificate_GetAsync(string thumbprintAlgorithm, string thumbprint, string select, int timeout, string api_version)
		{
			var requestUri = "certificates(thumbprintAlgorithm="+ (thumbprintAlgorithm==null? "" : System.Uri.EscapeDataString(thumbprintAlgorithm))+",thumbprint="+ (thumbprint==null? "" : System.Uri.EscapeDataString(thumbprint))+")&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Certificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a certificate from the specified account.
		/// You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that the certificate is not associated with any existing pools, the certificate is not installed on any compute nodes (even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart), and no running tasks depend on the certificate. If you try to delete a certificate that is in use, the deletion fails. The certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the certificate.
		/// Certificate_Delete certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})
		/// </summary>
		/// <param name="thumbprintAlgorithm">The algorithm used to derive the thumbprint parameter. This must be sha1.</param>
		/// <param name="thumbprint">The thumbprint of the certificate to be deleted.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Certificate_DeleteAsync(string thumbprintAlgorithm, string thumbprint, int timeout, string api_version)
		{
			var requestUri = "certificates(thumbprintAlgorithm="+ (thumbprintAlgorithm==null? "" : System.Uri.EscapeDataString(thumbprintAlgorithm))+",thumbprint="+ (thumbprint==null? "" : System.Uri.EscapeDataString(thumbprint))+")&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a failed deletion of a certificate from the specified account.
		/// If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.
		/// Certificate_CancelDeletion certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete
		/// </summary>
		/// <param name="thumbprintAlgorithm">The algorithm used to derive the thumbprint parameter. This must be sha1.</param>
		/// <param name="thumbprint">The thumbprint of the certificate being deleted.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Certificate_CancelDeletionAsync(string thumbprintAlgorithm, string thumbprint, int timeout, string api_version)
		{
			var requestUri = "certificates(thumbprintAlgorithm="+ (thumbprintAlgorithm==null? "" : System.Uri.EscapeDataString(thumbprintAlgorithm))+",thumbprint="+ (thumbprint==null? "" : System.Uri.EscapeDataString(thumbprint))+")/canceldelete&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the jobs in the specified account.
		/// Job_List jobs
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 jobs can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of jobs.</returns>
		public async Task<CloudJobListResult> Job_ListAsync(string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobs?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified job.
		/// Job_Get jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The ID of the job.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the job.</returns>
		public async Task<CloudJob> Job_GetAsync(string jobId, string select, string expand, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJob>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a job.
		/// Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents.  When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.
		/// Job_Delete jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The ID of the job to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Job_DeleteAsync(string jobId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the specified job, allowing new tasks to run.
		/// When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 7 days. Therefore, if you enable a job containing active tasks which were added more than 7 days ago, those tasks will not run.
		/// Job_Enable jobs/{jobId}/enable
		/// </summary>
		/// <param name="jobId">The ID of the job to enable.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Job_EnableAsync(string jobId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/enable&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run.
		/// This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.
		/// Job_ListPreparationAndReleaseTaskStatus jobs/{jobId}/jobpreparationandreleasetaskstatus
		/// </summary>
		/// <param name="jobId">The ID of the job.</param>
		/// <param name="filter">An OData $filter clause. To get the status of the Job Preparation and Job Release tasks on a specific compute node, use "nodeId eq '{desired-node-id}'"</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 tasks can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing a list of Job Preparation and Job Release task statuses.</returns>
		public async Task<CloudJobListPreparationAndReleaseTaskStatusResult> Job_ListPreparationAndReleaseTaskStatusAsync(string jobId, string filter, string select, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/jobpreparationandreleasetaskstatus&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobListPreparationAndReleaseTaskStatusResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the task counts for the specified job.
		/// Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running. If the validationStatus is unvalidated, then the Batch service has not been able to check state counts against the task states as reported in the List Tasks API. The validationStatus may be unvalidated if the job contains more than 200,000 tasks.
		/// Job_GetTaskCounts jobs/{jobId}/taskcounts
		/// </summary>
		/// <param name="jobId">The ID of the job.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the task counts for the specified job.</returns>
		public async Task<TaskCounts> Job_GetTaskCountsAsync(string jobId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/taskcounts&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TaskCounts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the tasks that are associated with the specified job.
		/// For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.
		/// Task_List jobs/{jobId}/tasks
		/// </summary>
		/// <param name="jobId">The ID of the job.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 tasks can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of tasks.</returns>
		public async Task<CloudTaskListResult> Task_ListAsync(string jobId, string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudTaskListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified task.
		/// For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.
		/// Task_Get jobs/{jobId}/tasks/{taskId}
		/// </summary>
		/// <param name="jobId">The ID of the job that contains the task.</param>
		/// <param name="taskId">The ID of the task to get information about.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the task.</returns>
		public async Task<CloudTask> Task_GetAsync(string jobId, string taskId, string select, string expand, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudTask>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a task from the specified job.
		/// When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
		/// Task_Delete jobs/{jobId}/tasks/{taskId}
		/// </summary>
		/// <param name="jobId">The ID of the job from which to delete the task.</param>
		/// <param name="taskId">The ID of the task to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The request to the Batch service was successful.</returns>
		public async Task Task_DeleteAsync(string jobId, string taskId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the files in a task's directory on its compute node.
		/// File_ListFromTask jobs/{jobId}/tasks/{taskId}/files
		/// </summary>
		/// <param name="jobId">The ID of the job that contains the task.</param>
		/// <param name="taskId">The ID of the task whose files you want to list.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="recursive">Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 files can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of files.</returns>
		public async Task<NodeFileListResult> File_ListFromTaskAsync(string jobId, string taskId, string filter, bool recursive, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/files&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&recursive="+recursive+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NodeFileListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the content of the specified task file.
		/// File_GetFromTask jobs/{jobId}/tasks/{taskId}/files/{filePath}
		/// </summary>
		/// <param name="jobId">The ID of the job that contains the task.</param>
		/// <param name="taskId">The ID of the task whose file you want to retrieve.</param>
		/// <param name="filePath">The path to the task file that you want to get the content of.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the file content.</returns>
		public async Task<string> File_GetFromTaskAsync(string jobId, string taskId, string filePath, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/files/"+ (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified task file from the compute node where the task ran.
		/// File_DeleteFromTask jobs/{jobId}/tasks/{taskId}/files/{filePath}
		/// </summary>
		/// <param name="jobId">The ID of the job that contains the task.</param>
		/// <param name="taskId">The ID of the task whose file you want to delete.</param>
		/// <param name="filePath">The path to the task file or directory that you want to delete.</param>
		/// <param name="recursive">Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The request to the Batch service was successful.</returns>
		public async Task File_DeleteFromTaskAsync(string jobId, string taskId, string filePath, bool recursive, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/files/"+ (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&recursive="+recursive+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reactivates a task, allowing it to run again even if its retry count has been exhausted.
		/// Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).
		/// Task_Reactivate jobs/{jobId}/tasks/{taskId}/reactivate
		/// </summary>
		/// <param name="jobId">The ID of the job containing the task.</param>
		/// <param name="taskId">The ID of the task to reactivate.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Task_ReactivateAsync(string jobId, string taskId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/reactivate&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the subtasks that are associated with the specified multi-instance task.
		/// If the task is not a multi-instance task then this returns an empty collection.
		/// Task_ListSubtasks jobs/{jobId}/tasks/{taskId}/subtasksinfo
		/// </summary>
		/// <param name="jobId">The ID of the job.</param>
		/// <param name="taskId">The ID of the task.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of subtasks.</returns>
		public async Task<CloudTaskListSubtasksResult> Task_ListSubtasksAsync(string jobId, string taskId, string select, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/subtasksinfo&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudTaskListSubtasksResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminates the specified task.
		/// When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
		/// Task_Terminate jobs/{jobId}/tasks/{taskId}/terminate
		/// </summary>
		/// <param name="jobId">The ID of the job containing the task.</param>
		/// <param name="taskId">The ID of the task to terminate.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Task_TerminateAsync(string jobId, string taskId, int timeout, string api_version)
		{
			var requestUri = "jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId))+"/terminate&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the job schedules in the specified account.
		/// JobSchedule_List jobschedules
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 job schedules can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of job schedules.</returns>
		public async Task<CloudJobScheduleListResult> JobSchedule_ListAsync(string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobschedules?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobScheduleListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified job schedule.
		/// JobSchedule_Get jobschedules/{jobScheduleId}
		/// </summary>
		/// <param name="jobScheduleId">The ID of the job schedule to get.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the job schedule.</returns>
		public async Task<CloudJobSchedule> JobSchedule_GetAsync(string jobScheduleId, string select, string expand, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobSchedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a job schedule from the specified account.
		/// When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.
		/// JobSchedule_Delete jobschedules/{jobScheduleId}
		/// </summary>
		/// <param name="jobScheduleId">The ID of the job schedule to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task JobSchedule_DeleteAsync(string jobScheduleId, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables a job schedule.
		/// No new jobs will be created until the job schedule is enabled again.
		/// JobSchedule_Disable jobschedules/{jobScheduleId}/disable
		/// </summary>
		/// <param name="jobScheduleId">The ID of the job schedule to disable.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task JobSchedule_DisableAsync(string jobScheduleId, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"/disable&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables a job schedule.
		/// JobSchedule_Enable jobschedules/{jobScheduleId}/enable
		/// </summary>
		/// <param name="jobScheduleId">The ID of the job schedule to enable.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task JobSchedule_EnableAsync(string jobScheduleId, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"/enable&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the jobs that have been created under the specified job schedule.
		/// Job_ListFromJobSchedule jobschedules/{jobScheduleId}/jobs
		/// </summary>
		/// <param name="jobScheduleId">The ID of the job schedule from which you want to get a list of jobs.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 jobs can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of jobs.</returns>
		public async Task<CloudJobListResult> Job_ListFromJobScheduleAsync(string jobScheduleId, string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"/jobs&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudJobListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminates a job schedule.
		/// JobSchedule_Terminate jobschedules/{jobScheduleId}/terminate
		/// </summary>
		/// <param name="jobScheduleId">The ID of the job schedule to terminates.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task JobSchedule_TerminateAsync(string jobScheduleId, int timeout, string api_version)
		{
			var requestUri = "jobschedules/"+ (jobScheduleId==null? "" : System.Uri.EscapeDataString(jobScheduleId))+"/terminate&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets lifetime summary statistics for all of the jobs in the specified account.
		/// Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics.
		/// Job_GetAllLifetimeStatistics lifetimejobstats
		/// </summary>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the job statistics for the lifetime of the Batch account.</returns>
		public async Task<JobStatistics> Job_GetAllLifetimeStatisticsAsync(int timeout, string api_version)
		{
			var requestUri = "lifetimejobstats?timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobStatistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets lifetime summary statistics for all of the pools in the specified account.
		/// Statistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics.
		/// Pool_GetAllLifetimeStatistics lifetimepoolstats
		/// </summary>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the pool statistics for the lifetime of the Batch account.</returns>
		public async Task<PoolStatistics> Pool_GetAllLifetimeStatisticsAsync(int timeout, string api_version)
		{
			var requestUri = "lifetimepoolstats?timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PoolStatistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all node agent SKUs supported by the Azure Batch service.
		/// Account_ListNodeAgentSkus nodeagentskus
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 results will be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of node agent SKUs.</returns>
		public async Task<AccountListNodeAgentSkusResult> Account_ListNodeAgentSkusAsync(string filter, int maxresults, int timeout, string api_version)
		{
			var requestUri = "nodeagentskus?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountListNodeAgentSkusResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the pools in the specified account.
		/// Pool_List pools
		/// </summary>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 pools can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of pools.</returns>
		public async Task<CloudPoolListResult> Pool_ListAsync(string filter, string select, string expand, int maxresults, int timeout, string api_version)
		{
			var requestUri = "pools?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudPoolListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified pool.
		/// Pool_Get pools/{poolId}
		/// </summary>
		/// <param name="poolId">The ID of the pool to get.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="expand">An OData $expand clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the pool.</returns>
		public async Task<CloudPool> Pool_GetAsync(string poolId, string select, string expand, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CloudPool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pool from the specified account.
		/// When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.
		/// Pool_Delete pools/{poolId}
		/// </summary>
		/// <param name="poolId">The ID of the pool to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Pool_DeleteAsync(string poolId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables automatic scaling for a pool.
		/// Pool_DisableAutoScale pools/{poolId}/disableautoscale
		/// </summary>
		/// <param name="poolId">The ID of the pool on which to disable automatic scaling.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The request to the Batch service was successful.</returns>
		public async Task Pool_DisableAutoScaleAsync(string poolId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/disableautoscale&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the compute nodes in the specified pool.
		/// ComputeNode_List pools/{poolId}/nodes
		/// </summary>
		/// <param name="poolId">The ID of the pool from which you want to list nodes.</param>
		/// <param name="filter">An OData $filter clause..</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 nodes can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of nodes.</returns>
		public async Task<ComputeNodeListResult> ComputeNode_ListAsync(string poolId, string filter, string select, int maxresults, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputeNodeListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified compute node.
		/// ComputeNode_Get pools/{poolId}/nodes/{nodeId}
		/// </summary>
		/// <param name="poolId">The ID of the pool that contains the compute node.</param>
		/// <param name="nodeId">The ID of the compute node that you want to get information about.</param>
		/// <param name="select">An OData $select clause.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the compute node.</returns>
		public async Task<ComputeNode> ComputeNode_GetAsync(string poolId, string nodeId, string select, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputeNode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables task scheduling on the specified compute node.
		/// You can enable task scheduling on a node only if its current scheduling state is disabled
		/// ComputeNode_EnableScheduling pools/{poolId}/nodes/{nodeId}/enablescheduling
		/// </summary>
		/// <param name="poolId">The ID of the pool that contains the compute node.</param>
		/// <param name="nodeId">The ID of the compute node on which you want to enable task scheduling.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The request to the Batch service was successful.</returns>
		public async Task ComputeNode_EnableSchedulingAsync(string poolId, string nodeId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/enablescheduling&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the files in task directories on the specified compute node.
		/// File_ListFromComputeNode pools/{poolId}/nodes/{nodeId}/files
		/// </summary>
		/// <param name="poolId">The ID of the pool that contains the compute node.</param>
		/// <param name="nodeId">The ID of the compute node whose files you want to list.</param>
		/// <param name="filter">An OData $filter clause.</param>
		/// <param name="recursive">Whether to list children of a directory.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 files can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of files.</returns>
		public async Task<NodeFileListResult> File_ListFromComputeNodeAsync(string poolId, string nodeId, string filter, bool recursive, int maxresults, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/files&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&recursive="+recursive+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NodeFileListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the content of the specified compute node file.
		/// File_GetFromComputeNode pools/{poolId}/nodes/{nodeId}/files/{filePath}
		/// </summary>
		/// <param name="poolId">The ID of the pool that contains the compute node.</param>
		/// <param name="nodeId">The ID of the compute node that contains the file.</param>
		/// <param name="filePath">The path to the compute node file that you want to get the content of.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The file content.</returns>
		public async Task<string> File_GetFromComputeNodeAsync(string poolId, string nodeId, string filePath, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/files/"+ (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified file from the compute node.
		/// File_DeleteFromComputeNode pools/{poolId}/nodes/{nodeId}/files/{filePath}
		/// </summary>
		/// <param name="poolId">The ID of the pool that contains the compute node.</param>
		/// <param name="nodeId">The ID of the compute node from which you want to delete the file.</param>
		/// <param name="filePath">The path to the file or directory that you want to delete.</param>
		/// <param name="recursive">Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The request to the Batch service was successful.</returns>
		public async Task File_DeleteFromComputeNodeAsync(string poolId, string nodeId, string filePath, bool recursive, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/files/"+ (filePath==null? "" : System.Uri.EscapeDataString(filePath))+"&recursive="+recursive+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Remote Desktop Protocol file for the specified compute node.
		/// Before you can access a node by using the RDP file, you must create a user account on the node. This API can only be invoked on pools created with a cloud service configuration. For pools created with a virtual machine configuration, see the GetRemoteLoginSettings API.
		/// ComputeNode_GetRemoteDesktop pools/{poolId}/nodes/{nodeId}/rdp
		/// </summary>
		/// <param name="poolId">The ID of the pool that contains the compute node.</param>
		/// <param name="nodeId">The ID of the compute node for which you want to get the Remote Desktop Protocol file.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the RDP information.</returns>
		public async Task<string> ComputeNode_GetRemoteDesktopAsync(string poolId, string nodeId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/rdp&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the settings required for remote login to a compute node.
		/// Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property. For pools created with a cloud service configuration, see the GetRemoteDesktop API.
		/// ComputeNode_GetRemoteLoginSettings pools/{poolId}/nodes/{nodeId}/remoteloginsettings
		/// </summary>
		/// <param name="poolId">The ID of the pool that contains the compute node.</param>
		/// <param name="nodeId">The ID of the compute node for which to obtain the remote login settings.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the login settings.</returns>
		public async Task<ComputeNodeGetRemoteLoginSettingsResult> ComputeNode_GetRemoteLoginSettingsAsync(string poolId, string nodeId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/remoteloginsettings&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ComputeNodeGetRemoteLoginSettingsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a user account from the specified compute node.
		/// You can delete a user account to a node only when it is in the idle or running state.
		/// ComputeNode_DeleteUser pools/{poolId}/nodes/{nodeId}/users/{userName}
		/// </summary>
		/// <param name="poolId">The ID of the pool that contains the compute node.</param>
		/// <param name="nodeId">The ID of the machine on which you want to delete a user account.</param>
		/// <param name="userName">The name of the user account to delete.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>The request to the Batch service was successful.</returns>
		public async Task ComputeNode_DeleteUserAsync(string poolId, string nodeId, string userName, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/nodes/"+ (nodeId==null? "" : System.Uri.EscapeDataString(nodeId))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an ongoing resize operation on the pool.
		/// This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.
		/// Pool_StopResize pools/{poolId}/stopresize
		/// </summary>
		/// <param name="poolId">The ID of the pool whose resizing you want to stop.</param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		public async Task Pool_StopResizeAsync(string poolId, int timeout, string api_version)
		{
			var requestUri = "pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/stopresize&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the usage metrics, aggregated by pool across individual time intervals, for the specified account.
		/// If you do not specify a $filter clause including a poolId, the response includes all pools that existed in the account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.
		/// Pool_ListUsageMetrics poolusagemetrics
		/// </summary>
		/// <param name="starttime">The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available.</param>
		/// <param name="endtime">The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available.</param>
		/// <param name="filter">An OData $filter clause. If this is not specified the response includes all pools that existed in the account in the time range of the returned aggregation intervals.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 results will be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="timeout">The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>A response containing the list of pool usage details.</returns>
		public async Task<PoolListUsageMetricsResult> Pool_ListUsageMetricsAsync(System.DateTimeOffset starttime, System.DateTimeOffset endtime, string filter, int maxresults, int timeout, string api_version)
		{
			var requestUri = "poolusagemetrics?starttime=" + starttime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endtime=" + endtime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxresults="+maxresults+"&timeout="+timeout+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PoolListUsageMetricsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
