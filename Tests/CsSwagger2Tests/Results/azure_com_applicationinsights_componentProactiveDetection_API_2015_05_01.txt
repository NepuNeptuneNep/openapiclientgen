//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Properties that define a ProactiveDetection configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationInsightsComponentProactiveDetectionConfiguration
	{
		
		/// <summary>
		/// Custom email addresses for this rule notifications
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] CustomEmails { get; set; }
		
		/// <summary>
		/// A flag that indicates whether this rule is enabled by the user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The last time this rule was updated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTime { get; set; }
		
		/// <summary>
		/// The rule name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Static definitions of the ProactiveDetection configuration rule (same values for all components).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions RuleDefinitions { get; set; }
		
		/// <summary>
		/// A flag that indicated whether notifications on this rule should be sent to subscription owners
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendEmailsToSubscriptionOwners { get; set; }
	}
	
	public class ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions
	{
		
		/// <summary>
		/// The rule description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The rule name as it is displayed in UI
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URL which displays additional info about the proactive detection rule
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HelpUrl { get; set; }
		
		/// <summary>
		/// A flag indicating whether the rule is enabled by default
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsEnabledByDefault { get; set; }
		
		/// <summary>
		/// A flag indicating whether the rule is hidden (from the UI)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsHidden { get; set; }
		
		/// <summary>
		/// A flag indicating whether the rule is in preview
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsInPreview { get; set; }
		
		/// <summary>
		/// The rule name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A flag indicating whether email notifications are supported for detections for this rule
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsEmailNotifications { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of ProactiveDetection configurations of an Application Insights component.
		/// ProactiveDetectionConfigurations_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceName">The name of the Application Insights component resource.</param>
		/// <returns>A list containing 0 or more ProactiveDetection configurations of an Application Insights component.</returns>
		public async Task<ApplicationInsightsComponentProactiveDetectionConfiguration[]> ProactiveDetectionConfigurations_ListAsync(string resourceGroupName, string api_version, string subscriptionId, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/components/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/ProactiveDetectionConfigs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationInsightsComponentProactiveDetectionConfiguration[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the ProactiveDetection configuration for this configuration id.
		/// ProactiveDetectionConfigurations_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceName">The name of the Application Insights component resource.</param>
		/// <param name="ConfigurationId">The ProactiveDetection configuration ID. This is unique within a Application Insights component.</param>
		/// <returns>The ProactiveDetection configuration for this configuration id.</returns>
		public async Task<ApplicationInsightsComponentProactiveDetectionConfiguration> ProactiveDetectionConfigurations_GetAsync(string resourceGroupName, string api_version, string subscriptionId, string resourceName, string ConfigurationId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/components/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/ProactiveDetectionConfigs/"+ (ConfigurationId==null? "" : System.Uri.EscapeDataString(ConfigurationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationInsightsComponentProactiveDetectionConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the ProactiveDetection configuration for this configuration id.
		/// ProactiveDetectionConfigurations_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceName">The name of the Application Insights component resource.</param>
		/// <param name="ConfigurationId">The ProactiveDetection configuration ID. This is unique within a Application Insights component.</param>
		/// <param name="requestBody">Properties that need to be specified to update the ProactiveDetection configuration.</param>
		/// <returns>The ProactiveDetection configuration that was successfully updated.</returns>
		public async Task<ApplicationInsightsComponentProactiveDetectionConfiguration> ProactiveDetectionConfigurations_UpdateAsync(string resourceGroupName, string api_version, string subscriptionId, string resourceName, string ConfigurationId, ApplicationInsightsComponentProactiveDetectionConfiguration requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/components/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/ProactiveDetectionConfigs/"+ (ConfigurationId==null? "" : System.Uri.EscapeDataString(ConfigurationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationInsightsComponentProactiveDetectionConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
