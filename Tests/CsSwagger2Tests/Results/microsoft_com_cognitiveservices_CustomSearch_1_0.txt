//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Answer
	{
		
		[System.Runtime.Serialization.DataMember(Name="followUpQueries")]
		public Query[] FollowUpQueries { get; set; }
	}
	
	/// <summary>
	/// Defines a search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Query
	{
		
		/// <summary>
		/// The display version of the query term. This version of the query term may contain special characters that highlight the search term found in the query string. The string contains the highlighting characters only if the query enabled hit highlighting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayText")]
		public string DisplayText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchLink")]
		public string SearchLink { get; set; }
		
		/// <summary>
		/// The query string. Use this string as the query term in a new search request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The URL that takes the user to the Bing search results page for the query.Only related search results include this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webSearchUrl")]
		public string WebSearchUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreativeWork
	{
		
		/// <summary>
		/// The source of the creative work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public Thing[] Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The URL to a thumbnail of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Thing
	{
		
		/// <summary>
		/// An ID that uniquely identifies this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bingId")]
		public string BingId { get; set; }
		
		/// <summary>
		/// A short description of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the thing represented by this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL to get more information about the thing represented by this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Defines the error that occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// The error code that identifies the category of error.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ErrorCode.None)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ErrorCode Code { get; set; } = ErrorCode.None;
		
		/// <summary>
		/// A description of the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A description that provides additional information about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreDetails")]
		public string MoreDetails { get; set; }
		
		/// <summary>
		/// The parameter in the request that caused the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// The error code that further helps to identify the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCode")]
		public System.Nullable<ErrorSubCode> SubCode { get; set; }
		
		/// <summary>
		/// The parameter's value in the request that was not valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServerError = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidRequest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RateLimitExceeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidAuthorization = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientAuthorization = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorSubCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnexpectedError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceError = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotImplemented = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ParameterMissing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ParameterInvalidValue = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HttpNotAllowed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blocked = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthorizationMissing = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthorizationRedundancy = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthorizationDisabled = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthorizationExpired = 10,
	}
	
	/// <summary>
	/// The top-level response that represents a failed request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// A list of errors that describe the reasons why the request failed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the identity of a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identifiable
	{
		
		/// <summary>
		/// A String identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Defines the query context that Bing used for the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryContext
	{
		
		/// <summary>
		/// A Boolean value that indicates whether the specified query has adult intent. The value is true if the query has adult intent; otherwise, false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adultIntent")]
		public System.Nullable<System.Boolean> AdultIntent { get; set; }
		
		/// <summary>
		/// The query string to use to force Bing to use the original string. For example, if the query string is "saling downwind", the override query string will be "+saling downwind". Remember to encode the query string which results in "%2Bsaling+downwind". This field is included only if the original query string contains a spelling mistake.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alterationOverrideQuery")]
		public string AlterationOverrideQuery { get; set; }
		
		/// <summary>
		/// The query string used by Bing to perform the query. Bing uses the altered query string if the original query string contained spelling mistakes. For example, if the query string is "saling downwind", the altered query string will be "sailing downwind". This field is included only if the original query string contains a spelling mistake.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alteredQuery")]
		public string AlteredQuery { get; set; }
		
		/// <summary>
		/// The query string as specified in the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="originalQuery")]
		public string OriginalQuery { get; set; }
	}
	
	/// <summary>
	/// Defines a response. All schemas that could be returned at the root of a response should inherit from this
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Response
	{
		
		/// <summary>
		/// The URL To Bing's search result for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webSearchUrl")]
		public string WebSearchUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResponseBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string _type { get; set; }
	}
	
	/// <summary>
	/// Defines the top-level object that the response includes when the request succeeds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SearchResponse
	{
		
		/// <summary>
		/// Defines the query context that Bing used for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryContext")]
		public QueryContext QueryContext { get; set; }
		
		/// <summary>
		/// Defines a list of relevant webpage links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webPages")]
		public WebWebAnswer WebPages { get; set; }
	}
	
	/// <summary>
	/// Defines a list of relevant webpage links.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebWebAnswer
	{
		
		/// <summary>
		/// A Boolean value that indicates whether the response excluded some results from the answer. If Bing excluded some results, the value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="someResultsRemoved")]
		public System.Nullable<System.Boolean> SomeResultsRemoved { get; set; }
		
		/// <summary>
		/// A list of webpages that are relevant to the query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WebPage[] Value { get; set; }
	}
	
	/// <summary>
	/// Defines a webpage that is relevant to the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebPage
	{
		
		/// <summary>
		/// The last time that Bing crawled the webpage. The date is in the form, YYYY-MM-DDTHH:MM:SS. For example, 2015-04-13T05:23:39.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateLastCrawled")]
		public string DateLastCrawled { get; set; }
		
		/// <summary>
		/// A list of links to related content that Bing found in the website that contains this webpage. The Webpage object in this context includes only the name, url, urlPingSuffix, and snippet fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deepLinks")]
		public WebPage[] DeepLinks { get; set; }
		
		/// <summary>
		/// The display URL of the webpage. The URL is meant for display purposes only and is not well formed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayUrl")]
		public string DisplayUrl { get; set; }
		
		/// <summary>
		/// A list of search tags that the webpage owner specified on the webpage. The API returns only indexed search tags. The name field of the MetaTag object contains the indexed search tag. Search tags begin with search.* (for example, search.assetId). The content field contains the tag's value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchTags")]
		public WebMetaTag[] SearchTags { get; set; }
		
		/// <summary>
		/// A snippet of text from the webpage that describes its contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snippet")]
		public string Snippet { get; set; }
	}
	
	/// <summary>
	/// Defines a webpage's metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebMetaTag
	{
		
		/// <summary>
		/// The name of the metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SearchResultsAnswer
	{
		
		[System.Runtime.Serialization.DataMember(Name="isFamilyFriendly")]
		public System.Nullable<System.Boolean> IsFamilyFriendly { get; set; }
		
		/// <summary>
		/// Defines the query context that Bing used for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryContext")]
		public QueryContext QueryContext { get; set; }
		
		/// <summary>
		/// The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalEstimatedMatches")]
		public System.Nullable<System.Int64> TotalEstimatedMatches { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// The Custom Search API lets you send a search query to Bing and get back web pages found in your custom view of the web.
		/// CustomInstance_Search search
		/// </summary>
		/// <param name="customConfig">The identifier for the custom search configuration</param>
		/// <param name="cc">A 2-character country code of the country where the results come from. This API supports only the United States market. If you specify this query parameter, it must be set to us. If you set this parameter, you must also specify the Accept-Language header. Bing uses the first supported language it finds from the languages list, and combine that language with the country code that you specify to determine the market to return results for. If the languages list does not include a supported language, Bing finds the closest language and market that supports the request, or it may use an aggregated or default market for the results instead of a specified one. You should use this query parameter and the Accept-Language query parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang query parameters. This parameter and the mkt query parameter are mutually exclusive—do not specify both.</param>
		/// <param name="count">The number of search results to return in the response. The default is 10 and the maximum value is 50. The actual number delivered may be less than requested.Use this parameter along with the offset parameter to page results.For example, if your user interface displays 10 search results per page, set count to 10 and offset to 0 to get the first page of results. For each subsequent page, increment offset by 10 (for example, 0, 10, 20). It is possible for multiple pages to include some overlap in results.</param>
		/// <param name="mkt">The market where the results come from. Typically, mkt is the country where the user is making the request from. However, it could be a different country if the user is not located in a country where Bing delivers results. The market must be in the form <language code>-<country code>. For example, en-US. The string is case insensitive. If known, you are encouraged to always specify the market. Specifying the market helps Bing route the request and return an appropriate and optimal response. If you specify a market that is not listed in Market Codes, Bing uses a best fit market code based on an internal mapping that is subject to change. This parameter and the cc query parameter are mutually exclusive—do not specify both.</param>
		/// <param name="offset">The zero-based offset that indicates the number of search results to skip before returning results. The default is 0. The offset should be less than (totalEstimatedMatches - count). Use this parameter along with the count parameter to page results. For example, if your user interface displays 10 search results per page, set count to 10 and offset to 0 to get the first page of results. For each subsequent page, increment offset by 10 (for example, 0, 10, 20). it is possible for multiple pages to include some overlap in results.</param>
		/// <param name="q">The user's search query term. The term may not be empty. The term may contain Bing Advanced Operators. For example, to limit results to a specific domain, use the site: operator.</param>
		/// <param name="safeSearch">A filter used to filter adult content. Off: Return webpages with adult text, images, or videos. Moderate: Return webpages with adult text, but not adult images or videos. Strict: Do not return webpages with adult text, images, or videos. The default is Moderate. If the request comes from a market that Bing's adult policy requires that safeSearch is set to Strict, Bing ignores the safeSearch value and uses Strict. If you use the site: query operator, there is the chance that the response may contain adult content regardless of what the safeSearch query parameter is set to. Use site: only if you are aware of the content on the site and your scenario supports the possibility of adult content.</param>
		/// <param name="setLang">The language to use for user interface strings. Specify the language using the ISO 639-1 2-letter language code. For example, the language code for English is EN. The default is EN (English). Although optional, you should always specify the language. Typically, you set setLang to the same language specified by mkt unless the user wants the user interface strings displayed in a different language. This parameter and the Accept-Language header are mutually exclusive; do not specify both. A user interface string is a string that's used as a label in a user interface. There are few user interface strings in the JSON response objects. Also, any links to Bing.com properties in the response objects apply the specified language.</param>
		/// <param name="textDecorations">A Boolean value that determines whether display strings should contain decoration markers such as hit highlighting characters. If true, the strings may include markers. The default is false. To specify whether to use Unicode characters or HTML tags as the markers, see the textFormat query parameter.</param>
		/// <param name="textFormat">The type of markers to use for text decorations (see the textDecorations query parameter). Possible values are Raw—Use Unicode characters to mark content that needs special formatting. The Unicode characters are in the range E000 through E019. For example, Bing uses E000 and E001 to mark the beginning and end of query terms for hit highlighting. HTML—Use HTML tags to mark content that needs special formatting. For example, use <b> tags to highlight query terms in display strings. The default is Raw. For display strings that contain escapable HTML characters such as <, >, and &, if textFormat is set to HTML, Bing escapes the characters as appropriate (for example, < is escaped to &lt;).</param>
		/// <returns>Success.</returns>
		public async Task<SearchResponse> CustomInstance_SearchAsync(string customConfig, string cc, int count, string mkt, int offset, string q, CustomInstance_SearchSafeSearch safeSearch, string setLang, bool textDecorations, CustomInstance_SearchTextFormat textFormat)
		{
			var requestUri = "search?customConfig=" + (customConfig==null? "" : System.Uri.EscapeDataString(customConfig))+"&cc=" + (cc==null? "" : System.Uri.EscapeDataString(cc))+"&count="+count+"&mkt=" + (mkt==null? "" : System.Uri.EscapeDataString(mkt))+"&offset="+offset+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&safeSearch=" + safeSearch+"&setLang=" + (setLang==null? "" : System.Uri.EscapeDataString(setLang))+"&textDecorations="+textDecorations+"&textFormat=" + textFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum CustomInstance_SearchX_BingApis_SDK
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
	}
	
	public enum CustomInstance_SearchSafeSearch
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Off = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moderate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Strict = 2,
	}
	
	public enum CustomInstance_SearchTextFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Raw = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Html = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
