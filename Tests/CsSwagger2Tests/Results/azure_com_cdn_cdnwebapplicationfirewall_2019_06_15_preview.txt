//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines the action to take on rule match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Block = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Log = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Redirect = 3,
	}
	
	/// <summary>
	/// Defines the ARM Resource ID for the linked endpoints
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CdnEndpoint
	{
		
		/// <summary>
		/// ARM Resource ID string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CdnWebApplicationFirewallPolicy
	{
	}
	
	/// <summary>
	/// Defines a list of WebApplicationFirewallPolicies for Azure CDN. It contains a list of WebApplicationFirewallPolicy objects and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CdnWebApplicationFirewallPolicyList
	{
		
		/// <summary>
		/// URL to get the next set of WebApplicationFirewallPolicy objects if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Azure CDN WebApplicationFirewallPolicies within a resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CdnWebApplicationFirewallPolicy[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties required to update a CdnWebApplicationFirewallPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CdnWebApplicationFirewallPolicyPatchParameters
	{
		
		/// <summary>
		/// CdnWebApplicationFirewallPolicy tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Defines CDN web application firewall policy properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CdnWebApplicationFirewallPolicyProperties
	{
		
		/// <summary>
		/// Defines contents of custom rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRules")]
		public CustomRuleList CustomRules { get; set; }
		
		/// <summary>
		/// Describes Azure CDN endpoints associated with this Web Application Firewall policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointLinks")]
		public CdnEndpoint[] EndpointLinks { get; set; }
		
		/// <summary>
		/// Defines the list of managed rule sets for the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedRules")]
		public ManagedRuleSetList ManagedRules { get; set; }
		
		/// <summary>
		/// Defines contents of a web application firewall global configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySettings")]
		public PolicySettings PolicySettings { get; set; }
		
		/// <summary>
		/// Provisioning state of the WebApplicationFirewallPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<CdnWebApplicationFirewallPolicyPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Defines contents of rate limit rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateLimitRules")]
		public RateLimitRuleList RateLimitRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceState")]
		public System.Nullable<CdnWebApplicationFirewallPolicyPropertiesResourceState> ResourceState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CdnWebApplicationFirewallPolicyPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CdnWebApplicationFirewallPolicyPropertiesResourceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabling = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 5,
	}
	
	/// <summary>
	/// Defines the common attributes for a custom rule that can be included in a waf policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomRule
	{
		
		/// <summary>
		/// Defines the action to take on rule match.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public ActionType Action { get; set; }
		
		/// <summary>
		/// Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledState")]
		public System.Nullable<CustomRuleEnabledState> EnabledState { get; set; }
		
		/// <summary>
		/// List of match conditions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchConditions")]
		public MatchCondition[] MatchConditions { get; set; }
		
		/// <summary>
		/// Defines the name of the custom rule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Defines in what order this rule be evaluated in the overall list of custom rules
		/// Required
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public int Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomRuleEnabledState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Define match conditions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MatchCondition
	{
		
		/// <summary>
		/// List of possible match values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchValue")]
		public string[] MatchValue { get; set; }
		
		/// <summary>
		/// Match variable to compare against.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchVariable")]
		public MatchConditionMatchVariable MatchVariable { get; set; }
		
		/// <summary>
		/// Describes if the result of this condition should be negated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negateCondition")]
		public System.Nullable<System.Boolean> NegateCondition { get; set; }
		
		/// <summary>
		/// Describes operator to be matched
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public MatchConditionOperator Operator { get; set; }
		
		/// <summary>
		/// Selector can used to match a specific key for QueryString, RequestUri, RequestHeaders or RequestBody.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
		
		/// <summary>
		/// List of transforms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transforms")]
		public TransformType[] Transforms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MatchConditionMatchVariable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RemoteAddr = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Country = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestMethod = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestHeader = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestUri = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QueryString = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestBody = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cookies = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PostArgs = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MatchConditionOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPMatch = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GeoMatch = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contains = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanOrEqual = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanOrEqual = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BeginsWith = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EndsWith = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegEx = 11,
	}
	
	/// <summary>
	/// Describes what transforms were applied before matching.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TransformType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lowercase = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Uppercase = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trim = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UrlDecode = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UrlEncode = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RemoveNulls = 5,
	}
	
	/// <summary>
	/// Defines contents of custom rules
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomRuleList
	{
		
		/// <summary>
		/// List of rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public CustomRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Describes a managed rule definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedRuleDefinition
	{
		
		/// <summary>
		/// Describes the functionality of the managed rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Identifier for the managed rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleId")]
		public string RuleId { get; set; }
	}
	
	/// <summary>
	/// Describes a managed rule group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedRuleGroupDefinition
	{
		
		/// <summary>
		/// Description of the managed rule group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the managed rule group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleGroupName")]
		public string RuleGroupName { get; set; }
		
		/// <summary>
		/// List of rules within the managed rule group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public ManagedRuleDefinition[] Rules { get; set; }
	}
	
	/// <summary>
	/// Defines a managed rule group override setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedRuleGroupOverride
	{
		
		/// <summary>
		/// Describes the managed rule group within the rule set to override
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleGroupName")]
		public string RuleGroupName { get; set; }
		
		/// <summary>
		/// List of rules that will be disabled. If none specified, all rules in the group will be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public ManagedRuleOverride[] Rules { get; set; }
	}
	
	/// <summary>
	/// Defines a managed rule group override setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedRuleOverride
	{
		
		/// <summary>
		/// Defines the action to take on rule match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public ActionType Action { get; set; }
		
		/// <summary>
		/// Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledState")]
		public CustomRuleEnabledState EnabledState { get; set; }
		
		/// <summary>
		/// Identifier for the managed rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleId")]
		public string RuleId { get; set; }
	}
	
	/// <summary>
	/// Defines a managed rule set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedRuleSet
	{
		
		/// <summary>
		/// Verizon only : If the rule set supports anomaly detection mode, this describes the threshold for blocking requests.
		/// Minimum: 0
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anomalyScore")]
		[System.ComponentModel.DataAnnotations.Range(0, 20)]
		public System.Nullable<System.Int32> AnomalyScore { get; set; }
		
		/// <summary>
		/// Defines the rule overrides to apply to the rule set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleGroupOverrides")]
		public ManagedRuleGroupOverride[] RuleGroupOverrides { get; set; }
		
		/// <summary>
		/// Defines the rule set type to use.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleSetType")]
		public string RuleSetType { get; set; }
		
		/// <summary>
		/// Defines the version of the rule set to use.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleSetVersion")]
		public string RuleSetVersion { get; set; }
	}
	
	public class ManagedRuleSetDefinition
	{
	}
	
	/// <summary>
	/// List of managed rule set definitions available for use in a policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedRuleSetDefinitionList
	{
		
		/// <summary>
		/// URL to retrieve next set of managed rule set definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of managed rule set definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ManagedRuleSetDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties for a managed rule set definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedRuleSetDefinitionProperties
	{
		
		/// <summary>
		/// Provisioning state of the managed rule set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Rule groups of the managed rule set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleGroups")]
		public ManagedRuleGroupDefinition[] RuleGroups { get; set; }
		
		/// <summary>
		/// Type of the managed rule set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleSetType")]
		public string RuleSetType { get; set; }
		
		/// <summary>
		/// Version of the managed rule set type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleSetVersion")]
		public string RuleSetVersion { get; set; }
	}
	
	/// <summary>
	/// Defines the list of managed rule sets for the policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedRuleSetList
	{
		
		/// <summary>
		/// List of rule sets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedRuleSets")]
		public ManagedRuleSet[] ManagedRuleSets { get; set; }
	}
	
	/// <summary>
	/// Defines a rate limiting rule that can be included in a waf policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RateLimitRule
	{
		
		/// <summary>
		/// Defines rate limit duration. Default is 1 minute.
		/// Required
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rateLimitDurationInMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public int RateLimitDurationInMinutes { get; set; }
		
		/// <summary>
		/// Defines rate limit threshold.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rateLimitThreshold")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int RateLimitThreshold { get; set; }
	}
	
	/// <summary>
	/// Defines contents of rate limit rules
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RateLimitRuleList
	{
		
		/// <summary>
		/// List of rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public RateLimitRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Defines contents of a web application firewall global configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicySettings
	{
		
		/// <summary>
		/// If the action type is block, customer can override the response body. The body must be specified in base64 encoding.
		/// Pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCustomBlockResponseBody")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$")]
		public string DefaultCustomBlockResponseBody { get; set; }
		
		/// <summary>
		/// If the action type is block, this field defines the default customer overridable http response status code.
		/// Minimum: 200
		/// Maximum: 599
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCustomBlockResponseStatusCode")]
		[System.ComponentModel.DataAnnotations.Range(200, 599)]
		public System.Nullable<System.Int32> DefaultCustomBlockResponseStatusCode { get; set; }
		
		/// <summary>
		/// If action type is redirect, this field represents the default redirect URL for the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultRedirectUrl")]
		public string DefaultRedirectUrl { get; set; }
		
		/// <summary>
		/// describes if the policy is in enabled state or disabled state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledState")]
		public CustomRuleEnabledState EnabledState { get; set; }
		
		/// <summary>
		/// Describes if it is in detection mode or prevention mode at policy level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<PolicySettingsMode> Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PolicySettingsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Prevention = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Detection = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all available managed rule sets.
		/// ManagedRuleSets_List subscriptions/{subscriptionId}/providers/Microsoft.Cdn/CdnWebApplicationFirewallManagedRuleSets
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-02.</param>
		/// <returns>Success. The operation returns a list of all available web application firewall managed rule sets.</returns>
		public async Task<ManagedRuleSetDefinitionList> ManagedRuleSets_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Cdn/CdnWebApplicationFirewallManagedRuleSets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ManagedRuleSetDefinitionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the protection policies within a resource group.
		/// Policies_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-02.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CdnWebApplicationFirewallPolicyList> Policies_ListAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CdnWebApplicationFirewallPolicyList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve protection policy with specified name within a resource group.
		/// Policies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/{policyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.</param>
		/// <param name="policyName">The name of the CdnWebApplicationFirewallPolicy.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-02.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CdnWebApplicationFirewallPolicy> Policies_GetAsync(string resourceGroupName, string policyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CdnWebApplicationFirewallPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update policy with specified rule set name within a resource group.
		/// Policies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/{policyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.</param>
		/// <param name="policyName">The name of the CdnWebApplicationFirewallPolicy.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-02.</param>
		/// <param name="requestBody">Policy to be created.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CdnWebApplicationFirewallPolicy> Policies_CreateOrUpdateAsync(string resourceGroupName, string policyName, string subscriptionId, string api_version, CdnWebApplicationFirewallPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CdnWebApplicationFirewallPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes Policy
		/// Policies_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/{policyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.</param>
		/// <param name="policyName">The name of the CdnWebApplicationFirewallPolicy.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-02.</param>
		/// <returns>Delete successful.</returns>
		public async Task Policies_DeleteAsync(string resourceGroupName, string policyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing CdnWebApplicationFirewallPolicy with the specified policy name under the specified subscription and resource group
		/// Policies_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/{policyName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.</param>
		/// <param name="policyName">The name of the CdnWebApplicationFirewallPolicy.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2017-04-02.</param>
		/// <param name="requestBody">CdnWebApplicationFirewallPolicy parameters to be patched.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CdnWebApplicationFirewallPolicy> Policies_UpdateAsync(string resourceGroupName, string policyName, string subscriptionId, string api_version, CdnWebApplicationFirewallPolicyPatchParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Cdn/CdnWebApplicationFirewallPolicies/"+ (policyName==null? "" : System.Uri.EscapeDataString(policyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CdnWebApplicationFirewallPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
