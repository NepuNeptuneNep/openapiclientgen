//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Get Data Plane read only token response definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccessPolicyResponse
	{
		
		/// <summary>
		/// Data Plane read only access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Data Plane service base URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataPlaneUrl")]
		public string DataPlaneUrl { get; set; }
		
		/// <summary>
		/// Get Data Plane read only token request definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public UserAccessPolicy Policy { get; set; }
	}
	
	/// <summary>
	/// Information about an activity run in a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActivityRun
	{
		
		/// <summary>
		/// The name of the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityName")]
		public string ActivityName { get; set; }
		
		/// <summary>
		/// The end time of the activity run in 'ISO 8601' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityRunEnd")]
		public System.Nullable<System.DateTimeOffset> ActivityRunEnd { get; set; }
		
		/// <summary>
		/// The id of the activity run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityRunId")]
		public string ActivityRunId { get; set; }
		
		/// <summary>
		/// The start time of the activity run in 'ISO 8601' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityRunStart")]
		public System.Nullable<System.DateTimeOffset> ActivityRunStart { get; set; }
		
		/// <summary>
		/// The type of the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public string ActivityType { get; set; }
		
		/// <summary>
		/// The duration of the activity run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationInMs")]
		public System.Nullable<System.Int32> DurationInMs { get; set; }
		
		/// <summary>
		/// The error if any from the activity run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// The input for the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// The name of the compute linked service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedServiceName")]
		public string LinkedServiceName { get; set; }
		
		/// <summary>
		/// The output for the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string Output { get; set; }
		
		/// <summary>
		/// The name of the pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// The id of the pipeline run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineRunId")]
		public string PipelineRunId { get; set; }
		
		/// <summary>
		/// The status of the activity run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// A list activity runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActivityRunsQueryResponse
	{
		
		/// <summary>
		/// The continuation token for getting the next page of results, if any remaining results exist, null otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// List of activity runs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ActivityRun[] Value { get; set; }
	}
	
	/// <summary>
	/// Response body structure for starting data flow debug session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AddDataFlowToDebugSessionResponse
	{
		
		/// <summary>
		/// The ID of data flow debug job version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobVersion")]
		public string JobVersion { get; set; }
	}
	
	/// <summary>
	/// Azure Key Vault secret reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureKeyVaultSecretReference
	{
		
		/// <summary>
		/// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		public string SecretName { get; set; }
		
		/// <summary>
		/// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretVersion")]
		public string SecretVersion { get; set; }
		
		/// <summary>
		/// Linked service reference type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="store")]
		public LinkedServiceReference Store { get; set; }
	}
	
	/// <summary>
	/// The object that defines the structure of an Azure Data Factory error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// The object that defines the structure of an Azure Data Factory error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// The object that defines the structure of an Azure Data Factory error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// Error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Array with additional error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudError[] Details { get; set; }
		
		/// <summary>
		/// Error message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Property name/path in request associated with error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Request body structure for creating data flow debug session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateDataFlowDebugSessionRequest
	{
		
		/// <summary>
		/// Compute type of the cluster. The value will be overwritten by the same setting in integration runtime if provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeType")]
		public string ComputeType { get; set; }
		
		/// <summary>
		/// Core count of the cluster. The value will be overwritten by the same setting in integration runtime if provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coreCount")]
		public System.Nullable<System.Int32> CoreCount { get; set; }
		
		/// <summary>
		/// Integration runtime debug resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationRuntime")]
		public IntegrationRuntimeDebugResource IntegrationRuntime { get; set; }
		
		/// <summary>
		/// Time to live setting of the cluster in minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeToLive")]
		public System.Nullable<System.Int32> TimeToLive { get; set; }
	}
	
	/// <summary>
	/// Response body structure for creating data flow debug session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateDataFlowDebugSessionResponse
	{
		
		/// <summary>
		/// The ID of data flow debug session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// The state of the debug session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The linked integration runtime information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateLinkedIntegrationRuntimeRequest
	{
		
		/// <summary>
		/// The location of the data factory that the linked integration runtime belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFactoryLocation")]
		public string DataFactoryLocation { get; set; }
		
		/// <summary>
		/// The name of the data factory that the linked integration runtime belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFactoryName")]
		public string DataFactoryName { get; set; }
		
		/// <summary>
		/// The name of the linked integration runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the subscription that the linked integration runtime belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// Response body with a run identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateRunResponse
	{
		
		/// <summary>
		/// Identifier of a run.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
	}
	
	/// <summary>
	/// Structure of command payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowDebugCommandPayload
	{
		
		/// <summary>
		/// Array of column names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public string[] Columns { get; set; }
		
		/// <summary>
		/// The expression which is used for preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Row limits for preview response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowLimits")]
		public System.Nullable<System.Int32> RowLimits { get; set; }
		
		/// <summary>
		/// The stream name which is used for preview.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streamName")]
		public string StreamName { get; set; }
	}
	
	/// <summary>
	/// Request body structure for data flow debug command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowDebugCommandRequest
	{
		
		/// <summary>
		/// The command type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public System.Nullable<DataFlowDebugCommandRequestCommand> Command { get; set; }
		
		/// <summary>
		/// Structure of command payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandPayload")]
		public DataFlowDebugCommandPayload CommandPayload { get; set; }
		
		/// <summary>
		/// The ID of data flow debug session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataFlowDebugCommandRequestCommand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		executePreviewQuery = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		executeStatisticsQuery = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		executeExpressionQuery = 2,
	}
	
	/// <summary>
	/// Response body structure of data flow result for data preview, statistics or expression preview.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowDebugCommandResponse
	{
		
		/// <summary>
		/// The result data of data preview, statistics or expression preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The run status of data preview, statistics or expression preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Request body structure for starting data flow debug session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowDebugPackage
	{
		
		/// <summary>
		/// Data flow debug resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFlow")]
		public DataFlowDebugResource DataFlow { get; set; }
		
		/// <summary>
		/// List of datasets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasets")]
		public DatasetDebugResource[] Datasets { get; set; }
		
		/// <summary>
		/// Data flow debug settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugSettings")]
		public DataFlowDebugPackageDebugSettings DebugSettings { get; set; }
		
		/// <summary>
		/// List of linked services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedServices")]
		public LinkedServiceDebugResource[] LinkedServices { get; set; }
		
		/// <summary>
		/// The ID of data flow debug session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Staging info for execute data flow activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staging")]
		public DataFlowStagingInfo Staging { get; set; }
	}
	
	/// <summary>
	/// Dataset debug resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatasetDebugResource : SubResourceDebugResource
	{
		
		/// <summary>
		/// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatasetDebugResourceProperties Properties { get; set; }
	}
	
	public class DatasetDebugResourceProperties
	{
		
		/// <summary>
		/// List of tags that can be used for describing the Dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// Dataset description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public DatasetDebugResourcePropertiesFolder Folder { get; set; }
		
		/// <summary>
		/// Linked service reference type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedServiceName")]
		public object LinkedServiceName { get; set; }
		
		/// <summary>
		/// Definition of all parameters for an entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, DatasetDebugResourcePropertiesParameters> Parameters { get; set; }
		
		/// <summary>
		/// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structure")]
		public string Structure { get; set; }
		
		/// <summary>
		/// Type of dataset.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class DatasetDebugResourcePropertiesFolder
	{
		
		/// <summary>
		/// The name of the folder that this Dataset is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class DatasetDebugResourcePropertiesParameters
	{
		
		/// <summary>
		/// Default value of parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Parameter type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DatasetDebugResourcePropertiesParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatasetDebugResourcePropertiesParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Object = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Float = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bool = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Array = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureString = 6,
	}
	
	public class DataFlowDebugPackageDebugSettings
	{
		
		/// <summary>
		/// Parameters for dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetParameters")]
		public string DatasetParameters { get; set; }
		
		/// <summary>
		/// An object mapping parameter names to argument values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterValueSpecification Parameters { get; set; }
		
		/// <summary>
		/// Source setting for data flow debug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceSettings")]
		public DataFlowSourceSetting[] SourceSettings { get; set; }
	}
	
	/// <summary>
	/// An object mapping parameter names to argument values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterValueSpecification
	{
	}
	
	/// <summary>
	/// Definition of data flow source setting for debug.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowSourceSetting
	{
		
		/// <summary>
		/// Defines the row limit of data flow source in debug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowLimit")]
		public System.Nullable<System.Int32> RowLimit { get; set; }
		
		/// <summary>
		/// The data flow source name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
	}
	
	/// <summary>
	/// Linked service debug resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinkedServiceDebugResource : SubResourceDebugResource
	{
		
		/// <summary>
		/// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LinkedServiceDebugResourceProperties Properties { get; set; }
	}
	
	public class LinkedServiceDebugResourceProperties
	{
		
		/// <summary>
		/// List of tags that can be used for describing the linked service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// Integration runtime reference type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectVia")]
		public object ConnectVia { get; set; }
		
		/// <summary>
		/// Linked service description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Definition of all parameters for an entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, LinkedServiceDebugResourcePropertiesParameters> Parameters { get; set; }
		
		/// <summary>
		/// Type of linked service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class LinkedServiceDebugResourcePropertiesParameters
	{
		
		/// <summary>
		/// Default value of parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Parameter type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DatasetDebugResourcePropertiesParametersType Type { get; set; }
	}
	
	/// <summary>
	/// Data flow debug resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowDebugResource : SubResourceDebugResource
	{
		
		/// <summary>
		/// Azure Data Factory nested object which contains a flow with data movements and transformations.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataFlowDebugResourceProperties Properties { get; set; }
	}
	
	public class DataFlowDebugResourceProperties
	{
		
		/// <summary>
		/// List of tags that can be used for describing the data flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// The description of the data flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public DataFlowDebugResourcePropertiesFolder Folder { get; set; }
		
		/// <summary>
		/// Type of data flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class DataFlowDebugResourcePropertiesFolder
	{
		
		/// <summary>
		/// The name of the folder that this data flow is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Data flow debug session info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowDebugSessionInfo
	{
		
		/// <summary>
		/// Compute type of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeType")]
		public string ComputeType { get; set; }
		
		/// <summary>
		/// Core count of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coreCount")]
		public System.Nullable<System.Int32> CoreCount { get; set; }
		
		/// <summary>
		/// The name of the data flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFlowName")]
		public string DataFlowName { get; set; }
		
		/// <summary>
		/// Attached integration runtime name of data flow debug session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationRuntimeName")]
		public string IntegrationRuntimeName { get; set; }
		
		/// <summary>
		/// Last activity time of data flow debug session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastActivityTime")]
		public string LastActivityTime { get; set; }
		
		/// <summary>
		/// Node count of the cluster. (deprecated property)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		/// <summary>
		/// The ID of data flow debug session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Start time of data flow debug session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Compute type of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeToLiveInMinutes")]
		public System.Nullable<System.Int32> TimeToLiveInMinutes { get; set; }
	}
	
	/// <summary>
	/// A list of data flow resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowListResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of data flows.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataFlowResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Data flow resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowResource : SubResource
	{
		
		/// <summary>
		/// Azure Data Factory nested object which contains a flow with data movements and transformations.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataFlowResourceProperties Properties { get; set; }
	}
	
	public class DataFlowResourceProperties
	{
		
		/// <summary>
		/// List of tags that can be used for describing the data flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// The description of the data flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public DataFlowResourcePropertiesFolder Folder { get; set; }
		
		/// <summary>
		/// Type of data flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class DataFlowResourcePropertiesFolder
	{
		
		/// <summary>
		/// The name of the folder that this data flow is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Data flow reference type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowReference
	{
		
		/// <summary>
		/// Reference data flow parameters from dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetParameters")]
		public string DatasetParameters { get; set; }
		
		/// <summary>
		/// Reference data flow name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceName")]
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Data flow reference type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DataFlowReferenceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataFlowReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DataFlowReference = 0,
	}
	
	/// <summary>
	/// Staging info for execute data flow activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataFlowStagingInfo
	{
		
		/// <summary>
		/// Folder path for staging blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// Linked service reference type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedService")]
		public LinkedServiceReference LinkedService { get; set; }
	}
	
	/// <summary>
	/// A list of dataset resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatasetListResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of datasets.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DatasetResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Dataset resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatasetResource : SubResource
	{
		
		/// <summary>
		/// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatasetResourceProperties Properties { get; set; }
	}
	
	public class DatasetResourceProperties
	{
		
		/// <summary>
		/// List of tags that can be used for describing the Dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// Dataset description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public DatasetResourcePropertiesFolder Folder { get; set; }
		
		/// <summary>
		/// Linked service reference type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedServiceName")]
		public object LinkedServiceName { get; set; }
		
		/// <summary>
		/// Definition of all parameters for an entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, DatasetResourcePropertiesParameters> Parameters { get; set; }
		
		/// <summary>
		/// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structure")]
		public string Structure { get; set; }
		
		/// <summary>
		/// Type of dataset.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class DatasetResourcePropertiesFolder
	{
		
		/// <summary>
		/// The name of the folder that this Dataset is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class DatasetResourcePropertiesParameters
	{
		
		/// <summary>
		/// Default value of parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Parameter type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DatasetDebugResourcePropertiesParametersType Type { get; set; }
	}
	
	/// <summary>
	/// Dataset reference type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatasetReference
	{
		
		/// <summary>
		/// An object mapping parameter names to argument values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterValueSpecification Parameters { get; set; }
		
		/// <summary>
		/// Reference dataset name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceName")]
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Dataset reference type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DatasetReferenceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatasetReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DatasetReference = 0,
	}
	
	/// <summary>
	/// Request body structure for deleting data flow debug session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteDataFlowDebugSessionRequest
	{
		
		/// <summary>
		/// The ID of data flow debug session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	/// <summary>
	/// The exposure control request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExposureControlRequest
	{
		
		/// <summary>
		/// The feature name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureName")]
		public string FeatureName { get; set; }
		
		/// <summary>
		/// The feature type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureType")]
		public string FeatureType { get; set; }
	}
	
	/// <summary>
	/// The exposure control response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExposureControlResponse
	{
		
		/// <summary>
		/// The feature name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureName")]
		public string FeatureName { get; set; }
		
		/// <summary>
		/// The feature value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Azure Data Factory expression definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Expression
	{
		
		/// <summary>
		/// Expression type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ExpressionType Type { get; set; }
		
		/// <summary>
		/// Expression value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expression = 0,
	}
	
	/// <summary>
	/// Factory resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Factory
	{
		
		/// <summary>
		/// Identity properties of the factory resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public FactoryIdentity Identity { get; set; }
		
		/// <summary>
		/// Factory resource properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FactoryProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Factory's GitHub repo information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FactoryGitHubConfiguration
	{
		
		/// <summary>
		/// GitHub Enterprise host name. For example: https://github.mydomain.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostName")]
		public string HostName { get; set; }
	}
	
	/// <summary>
	/// Identity properties of the factory resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FactoryIdentity
	{
		
		/// <summary>
		/// The principal id of the identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The client tenant id of the identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type. Currently the only supported type is 'SystemAssigned'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FactoryIdentityType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum FactoryIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
	}
	
	/// <summary>
	/// A list of factory resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FactoryListResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of factories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Factory[] Value { get; set; }
	}
	
	/// <summary>
	/// Factory resource properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FactoryProperties
	{
		
		/// <summary>
		/// Time the factory was created in ISO8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// Factory provisioning state, example Succeeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Factory's git repo information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoConfiguration")]
		public FactoryRepoConfiguration RepoConfiguration { get; set; }
		
		/// <summary>
		/// Version of the factory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Factory's git repo information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FactoryRepoConfiguration
	{
		
		/// <summary>
		/// Account name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Collaboration branch.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="collaborationBranch")]
		public string CollaborationBranch { get; set; }
		
		/// <summary>
		/// Last commit id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCommitId")]
		public string LastCommitId { get; set; }
		
		/// <summary>
		/// Repository name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Root folder.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rootFolder")]
		public string RootFolder { get; set; }
		
		/// <summary>
		/// Type of repo configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Factory's git repo information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FactoryRepoUpdate
	{
		
		/// <summary>
		/// The factory resource id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factoryResourceId")]
		public string FactoryResourceId { get; set; }
		
		/// <summary>
		/// Factory's git repo information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoConfiguration")]
		public FactoryRepoConfiguration RepoConfiguration { get; set; }
	}
	
	/// <summary>
	/// Parameters for updating a factory resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FactoryUpdateParameters
	{
		
		/// <summary>
		/// Identity properties of the factory resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public FactoryIdentity Identity { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Factory's VSTS repo information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FactoryVSTSConfiguration
	{
		
		/// <summary>
		/// VSTS project name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// VSTS tenant id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// Response body structure for get data factory operation status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetDataFactoryOperationStatusResponse
	{
		
		/// <summary>
		/// Status of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The request payload of get SSIS object metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetSsisObjectMetadataRequest
	{
		
		/// <summary>
		/// Metadata path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataPath")]
		public string MetadataPath { get; set; }
	}
	
	/// <summary>
	/// Get GitHub access token request definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GitHubAccessTokenRequest
	{
		
		/// <summary>
		/// GitHub access code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitHubAccessCode")]
		public string GitHubAccessCode { get; set; }
		
		/// <summary>
		/// GitHub access token base URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gitHubAccessTokenBaseUrl")]
		public string GitHubAccessTokenBaseUrl { get; set; }
		
		/// <summary>
		/// GitHub application client ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitHubClientId")]
		public string GitHubClientId { get; set; }
	}
	
	/// <summary>
	/// Get GitHub access token response definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GitHubAccessTokenResponse
	{
		
		/// <summary>
		/// GitHub access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitHubAccessToken")]
		public string GitHubAccessToken { get; set; }
	}
	
	/// <summary>
	/// Integration runtime debug resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationRuntimeDebugResource : SubResourceDebugResource
	{
		
		/// <summary>
		/// Azure Data Factory nested object which serves as a compute resource for activities.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationRuntimeDebugResourceProperties Properties { get; set; }
	}
	
	public class IntegrationRuntimeDebugResourceProperties
	{
		
		/// <summary>
		/// Integration runtime description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of integration runtime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IntegrationRuntimeDebugResourcePropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationRuntimeDebugResourcePropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Managed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SelfHosted = 1,
	}
	
	/// <summary>
	/// A list of integration runtime resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationRuntimeListResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of integration runtimes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationRuntimeResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Integration runtime resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationRuntimeResource : SubResource
	{
		
		/// <summary>
		/// Azure Data Factory nested object which serves as a compute resource for activities.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationRuntimeResourceProperties Properties { get; set; }
	}
	
	public class IntegrationRuntimeResourceProperties
	{
		
		/// <summary>
		/// Integration runtime description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of integration runtime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IntegrationRuntimeDebugResourcePropertiesType Type { get; set; }
	}
	
	/// <summary>
	/// Integration runtime reference type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationRuntimeReference
	{
		
		/// <summary>
		/// An object mapping parameter names to argument values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
		
		/// <summary>
		/// Reference integration runtime name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceName")]
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Type of integration runtime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IntegrationRuntimeReferenceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationRuntimeReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntegrationRuntimeReference = 0,
	}
	
	/// <summary>
	/// A list of integration runtime status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationRuntimeStatusListResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of integration runtime status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationRuntimeStatusResponse[] Value { get; set; }
	}
	
	/// <summary>
	/// Integration runtime status response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationRuntimeStatusResponse
	{
		
		/// <summary>
		/// The integration runtime name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Integration runtime status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationRuntimeStatusResponseProperties Properties { get; set; }
	}
	
	public class IntegrationRuntimeStatusResponseProperties
	{
		
		/// <summary>
		/// The data factory name which the integration runtime belong to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFactoryName")]
		public string DataFactoryName { get; set; }
		
		/// <summary>
		/// The state of integration runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<IntegrationRuntimeStatusResponsePropertiesState> State { get; set; }
		
		/// <summary>
		/// The type of integration runtime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IntegrationRuntimeDebugResourcePropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationRuntimeStatusResponsePropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NeedRegistration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Online = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Limited = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Offline = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessDenied = 9,
	}
	
	/// <summary>
	/// Data factory name for linked integration runtime request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinkedIntegrationRuntimeRequest
	{
		
		/// <summary>
		/// The data factory name for linked integration runtime.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="factoryName")]
		public string FactoryName { get; set; }
	}
	
	/// <summary>
	/// A list of linked service resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinkedServiceListResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of linked services.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public LinkedServiceResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Linked service resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinkedServiceResource : SubResource
	{
		
		/// <summary>
		/// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LinkedServiceResourceProperties Properties { get; set; }
	}
	
	public class LinkedServiceResourceProperties
	{
		
		/// <summary>
		/// List of tags that can be used for describing the linked service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// Integration runtime reference type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectVia")]
		public object ConnectVia { get; set; }
		
		/// <summary>
		/// Linked service description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Definition of all parameters for an entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, LinkedServiceResourcePropertiesParameters> Parameters { get; set; }
		
		/// <summary>
		/// Type of linked service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class LinkedServiceResourcePropertiesParameters
	{
		
		/// <summary>
		/// Default value of parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Parameter type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DatasetDebugResourcePropertiesParametersType Type { get; set; }
	}
	
	/// <summary>
	/// Linked service reference type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinkedServiceReference
	{
		
		/// <summary>
		/// An object mapping parameter names to argument values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
		
		/// <summary>
		/// Reference LinkedService name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceName")]
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Linked service reference type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LinkedServiceReferenceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LinkedServiceReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LinkedServiceReference = 0,
	}
	
	/// <summary>
	/// Azure Data Factory API operation definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Metadata associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The intended executor of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Additional details about an operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OperationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Additional details about an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationProperties
	{
		
		/// <summary>
		/// Details about a service operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceSpecification")]
		public OperationServiceSpecification ServiceSpecification { get; set; }
	}
	
	/// <summary>
	/// Details about a service operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationServiceSpecification
	{
		
		/// <summary>
		/// Details about operations related to logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logSpecifications")]
		public OperationLogSpecification[] LogSpecifications { get; set; }
		
		/// <summary>
		/// Details about operations related to metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricSpecifications")]
		public OperationMetricSpecification[] MetricSpecifications { get; set; }
	}
	
	/// <summary>
	/// Details about an operation related to logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationLogSpecification
	{
		
		/// <summary>
		/// Blobs created in the customer storage account, per hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobDuration")]
		public string BlobDuration { get; set; }
		
		/// <summary>
		/// Localized display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The name of the log category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Details about an operation related to metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetricSpecification
	{
		
		/// <summary>
		/// The type of metric aggregation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public string AggregationType { get; set; }
		
		/// <summary>
		/// Defines how often data for metrics becomes available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilities")]
		public OperationMetricAvailability[] Availabilities { get; set; }
		
		/// <summary>
		/// Defines the metric dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public OperationMetricDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// The description of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDescription")]
		public string DisplayDescription { get; set; }
		
		/// <summary>
		/// Localized display name of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Whether or not the service is using regional MDM accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableRegionalMdmAccount")]
		public string EnableRegionalMdmAccount { get; set; }
		
		/// <summary>
		/// The name of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the MDM account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceMdmAccount")]
		public string SourceMdmAccount { get; set; }
		
		/// <summary>
		/// The name of the MDM namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceMdmNamespace")]
		public string SourceMdmNamespace { get; set; }
		
		/// <summary>
		/// The unit that the metric is measured in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Defines how often data for a metric becomes available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetricAvailability
	{
		
		/// <summary>
		/// Blob created in the customer storage account, per hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobDuration")]
		public string BlobDuration { get; set; }
		
		/// <summary>
		/// The granularity for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
	}
	
	/// <summary>
	/// Defines the metric dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetricDimension
	{
		
		/// <summary>
		/// The display name of the metric dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The name of the dimension for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether the dimension should be exported to Azure Monitor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toBeExportedForShoebox")]
		public System.Nullable<System.Boolean> ToBeExportedForShoebox { get; set; }
	}
	
	/// <summary>
	/// A list of operations that can be performed by the Data Factory service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Data Factory operations supported by the Data Factory resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Definition of all parameters for an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterDefinitionSpecification
	{
	}
	
	/// <summary>
	/// Definition of a single parameter for an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterSpecification
	{
		
		/// <summary>
		/// Default value of parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Parameter type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DatasetDebugResourcePropertiesParametersType Type { get; set; }
	}
	
	/// <summary>
	/// A list of pipeline resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineListResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of pipelines.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PipelineResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Pipeline resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineResource
	{
		
		/// <summary>
		/// A data factory pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PipelineResourceProperties Properties { get; set; }
	}
	
	public class PipelineResourceProperties
	{
		
		/// <summary>
		/// List of activities in pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public PipelineResourcePropertiesActivities[] PipelineResourcePropertiesActivities { get; set; }
		
		/// <summary>
		/// List of tags that can be used for describing the Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// The max number of concurrent runs for the pipeline.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrency")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Concurrency { get; set; }
		
		/// <summary>
		/// The description of the pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public PipelineResourcePropertiesFolder Folder { get; set; }
		
		/// <summary>
		/// Definition of all parameters for an entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, PipelineResourcePropertiesParameters> Parameters { get; set; }
		
		/// <summary>
		/// Dimensions emitted by Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runDimensions")]
		public System.Collections.Generic.Dictionary<string, object> RunDimensions { get; set; }
		
		/// <summary>
		/// Definition of variable for a Pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public System.Collections.Generic.Dictionary<string, PipelineResourcePropertiesVariables> Variables { get; set; }
	}
	
	public class PipelineResourcePropertiesActivities
	{
		
		/// <summary>
		/// Activity depends on condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public PipelineResourcePropertiesActivitiesDependsOn[] PipelineResourcePropertiesActivitiesDependsOn { get; set; }
		
		/// <summary>
		/// Activity description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Activity name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of activity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Activity user properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userProperties")]
		public PipelineResourcePropertiesActivitiesUserProperties[] PipelineResourcePropertiesActivitiesUserProperties { get; set; }
	}
	
	public class PipelineResourcePropertiesActivitiesDependsOn
	{
		
		/// <summary>
		/// Activity name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activity")]
		public string Activity { get; set; }
		
		/// <summary>
		/// Match-Condition for the dependency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dependencyConditions")]
		public string[] DependencyConditions { get; set; }
	}
	
	public class PipelineResourcePropertiesActivitiesUserProperties
	{
		
		/// <summary>
		/// User property name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User property value. Type: string (or Expression with resultType string).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PipelineResourcePropertiesFolder
	{
		
		/// <summary>
		/// The name of the folder that this Pipeline is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class PipelineResourcePropertiesParameters
	{
		
		/// <summary>
		/// Default value of parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Parameter type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DatasetDebugResourcePropertiesParametersType Type { get; set; }
	}
	
	public class PipelineResourcePropertiesVariables
	{
		
		/// <summary>
		/// Default value of variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Variable type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PipelineResourcePropertiesVariablesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PipelineResourcePropertiesVariablesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bool = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Array = 2,
	}
	
	/// <summary>
	/// Pipeline reference type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineReference
	{
		
		/// <summary>
		/// Reference name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reference pipeline name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceName")]
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Pipeline reference type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PipelineReferenceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PipelineReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PipelineReference = 0,
	}
	
	/// <summary>
	/// Information about a pipeline run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineRun
	{
		
		/// <summary>
		/// The duration of a pipeline run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationInMs")]
		public System.Nullable<System.Int32> DurationInMs { get; set; }
		
		/// <summary>
		/// Provides entity name and id that started the pipeline run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invokedBy")]
		public PipelineRunInvokedBy InvokedBy { get; set; }
		
		/// <summary>
		/// Indicates if the recovered pipeline run is the latest in its group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLatest")]
		public System.Nullable<System.Boolean> IsLatest { get; set; }
		
		/// <summary>
		/// The last updated timestamp for the pipeline run event in ISO8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The message from a pipeline run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The full or partial list of parameter name, value pair used in the pipeline run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// The pipeline name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Run dimensions emitted by Pipeline run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runDimensions")]
		public System.Collections.Generic.Dictionary<string, string> RunDimensions { get; set; }
		
		/// <summary>
		/// The end time of a pipeline run in ISO8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runEnd")]
		public System.Nullable<System.DateTimeOffset> RunEnd { get; set; }
		
		/// <summary>
		/// Identifier that correlates all the recovery runs of a pipeline run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runGroupId")]
		public string RunGroupId { get; set; }
		
		/// <summary>
		/// Identifier of a run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// The start time of a pipeline run in ISO8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runStart")]
		public System.Nullable<System.DateTimeOffset> RunStart { get; set; }
		
		/// <summary>
		/// The status of a pipeline run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Provides entity name and id that started the pipeline run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineRunInvokedBy
	{
		
		/// <summary>
		/// The ID of the entity that started the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of the entity that started the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invokedByType")]
		public string InvokedByType { get; set; }
		
		/// <summary>
		/// Name of the entity that started the pipeline run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A list pipeline runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineRunsQueryResponse
	{
		
		/// <summary>
		/// The continuation token for getting the next page of results, if any remaining results exist, null otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// List of pipeline runs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PipelineRun[] Value { get; set; }
	}
	
	/// <summary>
	/// A list of active debug sessions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryDataFlowDebugSessionsResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array with all active debug sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataFlowDebugSessionInfo[] Value { get; set; }
	}
	
	/// <summary>
	/// A list of rerun triggers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RerunTriggerListResponse
	{
		
		/// <summary>
		/// The continuation token for getting the next page of results, if any remaining results exist, null otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of rerun triggers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RerunTriggerResource[] Value { get; set; }
	}
	
	/// <summary>
	/// RerunTrigger resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RerunTriggerResource : SubResource
	{
		
		/// <summary>
		/// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RerunTriggerResourceProperties Properties { get; set; }
	}
	
	public class RerunTriggerResourceProperties
	{
		
		/// <summary>
		/// Rerun Trigger properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeProperties")]
		public object TypeProperties { get; set; }
	}
	
	/// <summary>
	/// Rerun tumbling window trigger Parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RerunTumblingWindowTriggerActionParameters
	{
		
		/// <summary>
		/// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
		/// Required
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxConcurrency")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public int MaxConcurrency { get; set; }
		
		/// <summary>
		/// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	/// <summary>
	/// Azure Data Factory top-level resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Etag identifies change in the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Query parameters for listing runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunFilterParameters
	{
		
		/// <summary>
		/// The continuation token for getting the next page of results. Null for first page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// List of filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public RunQueryFilter[] Filters { get; set; }
		
		/// <summary>
		/// The time at or after which the run event was updated in 'ISO 8601' format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAfter")]
		public System.DateTimeOffset LastUpdatedAfter { get; set; }
		
		/// <summary>
		/// The time at or before which the run event was updated in 'ISO 8601' format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBefore")]
		public System.DateTimeOffset LastUpdatedBefore { get; set; }
		
		/// <summary>
		/// List of OrderBy option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public RunQueryOrderBy[] OrderBy { get; set; }
	}
	
	/// <summary>
	/// Query filter option for listing runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunQueryFilter
	{
		
		/// <summary>
		/// Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart, RunEnd and Status; to query activity runs are ActivityName, ActivityRunStart, ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operand")]
		public RunQueryFilterOperand Operand { get; set; }
		
		/// <summary>
		/// Operator to be used for filter.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public RunQueryFilterOperator Operator { get; set; }
		
		/// <summary>
		/// List of filter values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunQueryFilterOperand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PipelineName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RunStart = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RunEnd = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityName = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityRunStart = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityRunEnd = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityType = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TriggerName = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TriggerRunTimestamp = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RunGroupId = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LatestOnly = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunQueryFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equals = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEquals = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		In = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotIn = 3,
	}
	
	/// <summary>
	/// An object to provide order by options for listing runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunQueryOrderBy
	{
		
		/// <summary>
		/// Sorting order of the parameter.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public RunQueryOrderByOrder Order { get; set; }
		
		/// <summary>
		/// Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName, RunStart, RunEnd and Status; for activity runs are ActivityName, ActivityRunStart, ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public RunQueryOrderByOrderBy OrderBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunQueryOrderByOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunQueryOrderByOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RunStart = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RunEnd = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PipelineName = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityName = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityRunStart = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityRunEnd = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TriggerName = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TriggerRunTimestamp = 8,
	}
	
	/// <summary>
	/// The base definition of a secret type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretBase
	{
		
		/// <summary>
		/// Type of the secret.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecureString
	{
		
		/// <summary>
		/// Value of secure string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The status of the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SsisObjectMetadataStatusResponse
	{
		
		/// <summary>
		/// The operation error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// The operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The operation properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
		
		/// <summary>
		/// The status of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Azure Data Factory nested resource, which belongs to a factory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResource
	{
		
		/// <summary>
		/// Etag identifies change in the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Azure Data Factory nested debug resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResourceDebugResource
	{
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A list of trigger resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerListResponse
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of triggers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TriggerResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Trigger resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerResource : SubResource
	{
		
		/// <summary>
		/// Azure data factory nested object which contains information about creating pipeline run
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TriggerResourceProperties Properties { get; set; }
	}
	
	public class TriggerResourceProperties
	{
		
		/// <summary>
		/// List of tags that can be used for describing the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// Trigger description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Enumerates possible state of Triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeState")]
		public System.Nullable<TriggerResourcePropertiesRuntimeState> RuntimeState { get; set; }
		
		/// <summary>
		/// Trigger type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TriggerResourcePropertiesRuntimeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	/// <summary>
	/// Pipeline that needs to be triggered with the given parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerPipelineReference
	{
		
		/// <summary>
		/// An object mapping parameter names to argument values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterValueSpecification Parameters { get; set; }
		
		/// <summary>
		/// Pipeline reference type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineReference")]
		public PipelineReference PipelineReference { get; set; }
	}
	
	/// <summary>
	/// Trigger runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerRun
	{
		
		/// <summary>
		/// Status of the upstream pipelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencyStatus")]
		public System.Collections.Generic.Dictionary<string, object> DependencyStatus { get; set; }
		
		/// <summary>
		/// Trigger error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// List of property name and value related to trigger run. Name, value pair depends on type of trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Run dimension for which trigger was fired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runDimension")]
		public System.Collections.Generic.Dictionary<string, string> RunDimension { get; set; }
		
		/// <summary>
		/// Trigger run status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TriggerRunStatus> Status { get; set; }
		
		/// <summary>
		/// Trigger name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerName")]
		public string TriggerName { get; set; }
		
		/// <summary>
		/// Trigger run id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerRunId")]
		public string TriggerRunId { get; set; }
		
		/// <summary>
		/// Trigger run start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerRunTimestamp")]
		public System.Nullable<System.DateTimeOffset> TriggerRunTimestamp { get; set; }
		
		/// <summary>
		/// Trigger type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public string TriggerType { get; set; }
		
		/// <summary>
		/// List of pipeline name and run Id triggered by the trigger run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggeredPipelines")]
		public System.Collections.Generic.Dictionary<string, string> TriggeredPipelines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TriggerRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inprogress = 2,
	}
	
	/// <summary>
	/// A list of trigger runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerRunsQueryResponse
	{
		
		/// <summary>
		/// The continuation token for getting the next page of results, if any remaining results exist, null otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// List of trigger runs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TriggerRun[] Value { get; set; }
	}
	
	/// <summary>
	/// Defines the response of a trigger subscription operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerSubscriptionOperationStatus
	{
		
		/// <summary>
		/// Event Subscription Status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TriggerSubscriptionOperationStatusStatus> Status { get; set; }
		
		/// <summary>
		/// Trigger name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerName")]
		public string TriggerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TriggerSubscriptionOperationStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deprovisioning = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 4,
	}
	
	/// <summary>
	/// Update integration runtime node request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateIntegrationRuntimeNodeRequest
	{
		
		/// <summary>
		/// The number of concurrent jobs permitted to run on the integration runtime node. Values between 1 and maxConcurrentJobs(inclusive) are allowed.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrentJobsLimit")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ConcurrentJobsLimit { get; set; }
	}
	
	/// <summary>
	/// Update integration runtime request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateIntegrationRuntimeRequest
	{
		
		/// <summary>
		/// The state of integration runtime auto update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpdate")]
		public System.Nullable<UpdateIntegrationRuntimeRequestAutoUpdate> AutoUpdate { get; set; }
		
		/// <summary>
		/// The time offset (in hours) in the day, e.g., PT03H is 3 hours. The integration runtime auto update will happen on that time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDelayOffset")]
		public string UpdateDelayOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UpdateIntegrationRuntimeRequestAutoUpdate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		On = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Off = 1,
	}
	
	/// <summary>
	/// Get Data Plane read only token request definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserAccessPolicy
	{
		
		/// <summary>
		/// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessResourcePath")]
		public string AccessResourcePath { get; set; }
		
		/// <summary>
		/// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string Permissions { get; set; }
		
		/// <summary>
		/// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Start time for the token. If not specified the current time will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Definition of variable for a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VariableDefinitionSpecification
	{
	}
	
	/// <summary>
	/// Definition of a single variable for a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VariableSpecification
	{
		
		/// <summary>
		/// Default value of variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Variable type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PipelineResourcePropertiesVariablesType Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the available Azure Data Factory API operations.
		/// Operations_List providers/Microsoft.DataFactory/operations
		/// </summary>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<OperationListResponse> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DataFactory/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists factories under the specified subscription.
		/// Factories_List subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/factories
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<FactoryListResponse> Factories_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataFactory/factories&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FactoryListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a factory's repo information.
		/// Factories_ConfigureFactoryRepo subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/locations/{locationId}/configureFactoryRepo
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="locationId">The location identifier.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Update factory repo request definition.</param>
		/// <returns>OK.</returns>
		public async Task<Factory> Factories_ConfigureFactoryRepoAsync(string subscriptionId, string locationId, string api_version, FactoryRepoUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataFactory/locations/"+ (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"/configureFactoryRepo&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Factory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get exposure control feature for specific location.
		/// ExposureControl_GetFeatureValue subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/locations/{locationId}/getFeatureValue
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="locationId">The location identifier.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The exposure control request.</param>
		/// <returns>OK.</returns>
		public async Task<ExposureControlResponse> ExposureControl_GetFeatureValueAsync(string subscriptionId, string locationId, string api_version, ExposureControlRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataFactory/locations/"+ (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"/getFeatureValue&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExposureControlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists factories.
		/// Factories_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<FactoryListResponse> Factories_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FactoryListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a factory.
		/// Factories_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<Factory> Factories_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Factory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a factory.
		/// Factories_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Factory resource definition.</param>
		/// <returns>OK.</returns>
		public async Task<Factory> Factories_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, Factory requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Factory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a factory.
		/// Factories_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task Factories_DeleteAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a factory.
		/// Factories_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The parameters for updating a factory.</param>
		/// <returns>OK.</returns>
		public async Task<Factory> Factories_UpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, FactoryUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Factory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a data flow into debug session.
		/// DataFlowDebugSession_AddDataFlow subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/addDataFlowToDebugSession
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Data flow debug session definition with debug content.</param>
		/// <returns>OK.</returns>
		public async Task<AddDataFlowToDebugSessionResponse> DataFlowDebugSession_AddDataFlowAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, DataFlowDebugPackage requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/addDataFlowToDebugSession&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddDataFlowToDebugSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a data flow debug session.
		/// DataFlowDebugSession_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Data flow debug session definition</param>
		/// <returns>OK.</returns>
		public async Task<CreateDataFlowDebugSessionResponse> DataFlowDebugSession_CreateAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, CreateDataFlowDebugSessionRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/createDataFlowDebugSession&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDataFlowDebugSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists data flows.
		/// DataFlows_ListByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<DataFlowListResponse> DataFlows_ListByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/dataflows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataFlowListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a data flow.
		/// DataFlows_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="dataFlowName">The data flow name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<DataFlowResource> DataFlows_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string dataFlowName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/dataflows/"+ (dataFlowName==null? "" : System.Uri.EscapeDataString(dataFlowName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataFlowResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a data flow.
		/// DataFlows_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="dataFlowName">The data flow name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Data flow resource definition.</param>
		/// <returns>OK.</returns>
		public async Task<DataFlowResource> DataFlows_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string dataFlowName, string api_version, DataFlowResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/dataflows/"+ (dataFlowName==null? "" : System.Uri.EscapeDataString(dataFlowName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataFlowResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a data flow.
		/// DataFlows_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="dataFlowName">The data flow name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task DataFlows_DeleteAsync(string subscriptionId, string resourceGroupName, string factoryName, string dataFlowName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/dataflows/"+ (dataFlowName==null? "" : System.Uri.EscapeDataString(dataFlowName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists datasets.
		/// Datasets_ListByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<DatasetListResponse> Datasets_ListByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/datasets&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DatasetListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a dataset.
		/// Datasets_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="datasetName">The dataset name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<DatasetResource> Datasets_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string datasetName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DatasetResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a dataset.
		/// Datasets_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="datasetName">The dataset name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Dataset resource definition.</param>
		/// <returns>OK.</returns>
		public async Task<DatasetResource> Datasets_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string datasetName, string api_version, DatasetResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DatasetResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a dataset.
		/// Datasets_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="datasetName">The dataset name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task Datasets_DeleteAsync(string subscriptionId, string resourceGroupName, string factoryName, string datasetName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a data flow debug session.
		/// DataFlowDebugSession_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/deleteDataFlowDebugSession
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Data flow debug session definition for deletion</param>
		/// <returns>OK.</returns>
		public async Task DataFlowDebugSession_DeleteAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, DeleteDataFlowDebugSessionRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/deleteDataFlowDebugSession&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Execute a data flow debug command.
		/// DataFlowDebugSession_ExecuteCommand subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Data flow debug command definition.</param>
		/// <returns>OK.</returns>
		public async Task<DataFlowDebugCommandResponse> DataFlowDebugSession_ExecuteCommandAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, DataFlowDebugCommandRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/executeDataFlowDebugCommand&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DataFlowDebugCommandResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Data Plane access.
		/// Factories_GetDataPlaneAccess subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getDataPlaneAccess
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Data Plane user access policy definition.</param>
		/// <returns>OK.</returns>
		public async Task<AccessPolicyResponse> Factories_GetDataPlaneAccessAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, UserAccessPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/getDataPlaneAccess&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get exposure control feature for specific factory.
		/// ExposureControl_GetFeatureValueByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getFeatureValue
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The exposure control request.</param>
		/// <returns>OK.</returns>
		public async Task<ExposureControlResponse> ExposureControl_GetFeatureValueByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, ExposureControlRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/getFeatureValue&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExposureControlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get GitHub Access Token.
		/// Factories_GetGitHubAccessToken subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getGitHubAccessToken
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Get GitHub access token request definition.</param>
		/// <returns>OK.</returns>
		public async Task<GitHubAccessTokenResponse> Factories_GetGitHubAccessTokenAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, GitHubAccessTokenRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/getGitHubAccessToken&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GitHubAccessTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists integration runtimes.
		/// IntegrationRuntimes_ListByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimeListResponse> IntegrationRuntimes_ListByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimeListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an integration runtime.
		/// IntegrationRuntimes_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimeResource> IntegrationRuntimes_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimeResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an integration runtime.
		/// IntegrationRuntimes_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Integration runtime resource definition.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimeResource> IntegrationRuntimes_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version, IntegrationRuntimeResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimeResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an integration runtime.
		/// IntegrationRuntimes_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task IntegrationRuntimes_DeleteAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an integration runtime.
		/// IntegrationRuntimes_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The parameters for updating an integration runtime.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimeResource> IntegrationRuntimes_UpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version, UpdateIntegrationRuntimeRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimeResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the on-premises integration runtime connection information for encrypting the on-premises data source credentials.
		/// IntegrationRuntimes_GetConnectionInfo subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getConnectionInfo
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimes_GetConnectionInfoReturn> IntegrationRuntimes_GetConnectionInfoAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/getConnectionInfo&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimes_GetConnectionInfoReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a SSIS integration runtime object metadata by specified path. The return is pageable metadata list.
		/// IntegrationRuntimeObjectMetadata_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getObjectMetadata
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The parameters for getting a SSIS object metadata.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimeObjectMetadata_GetReturn> IntegrationRuntimeObjectMetadata_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version, GetSsisObjectMetadataRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/getObjectMetadata&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimeObjectMetadata_GetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets detailed status information for an integration runtime.
		/// IntegrationRuntimes_GetStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/getStatus
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimeStatusResponse> IntegrationRuntimes_GetStatusAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/getStatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimeStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a linked integration runtime entry in a shared integration runtime.
		/// IntegrationRuntimes_CreateLinkedIntegrationRuntime subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/linkedIntegrationRuntime
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The linked integration runtime properties.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimeStatusResponse> IntegrationRuntimes_CreateLinkedIntegrationRuntimeAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version, CreateLinkedIntegrationRuntimeRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/linkedIntegrationRuntime&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimeStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the authentication keys for an integration runtime.
		/// IntegrationRuntimes_ListAuthKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/listAuthKeys
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimes_ListAuthKeysReturn> IntegrationRuntimes_ListAuthKeysAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/listAuthKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimes_ListAuthKeysReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the integration runtime monitoring data, which includes the monitor data for all the nodes under this integration runtime.
		/// IntegrationRuntimes_GetMonitoringData subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/monitoringData
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimes_GetMonitoringDataReturn> IntegrationRuntimes_GetMonitoringDataAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/monitoringData&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimes_GetMonitoringDataReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a self-hosted integration runtime node.
		/// IntegrationRuntimeNodes_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The integration runtime node name.
		/// Max length: 150
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<object> IntegrationRuntimeNodes_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a self-hosted integration runtime node.
		/// IntegrationRuntimeNodes_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The integration runtime node name.
		/// Max length: 150
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task IntegrationRuntimeNodes_DeleteAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a self-hosted integration runtime node.
		/// IntegrationRuntimeNodes_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The integration runtime node name.
		/// Max length: 150
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The parameters for updating an integration runtime node.</param>
		/// <returns>OK.</returns>
		public async Task<object> IntegrationRuntimeNodes_UpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName, string api_version, UpdateIntegrationRuntimeNodeRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the IP address of self-hosted integration runtime node.
		/// IntegrationRuntimeNodes_GetIpAddress subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/nodes/{nodeName}/ipAddress
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="nodeName">The integration runtime node name.
		/// Max length: 150
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimeNodes_GetIpAddressReturn> IntegrationRuntimeNodes_GetIpAddressAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string nodeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/nodes/"+ (nodeName==null? "" : System.Uri.EscapeDataString(nodeName))+"/ipAddress&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimeNodes_GetIpAddressReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refresh a SSIS integration runtime object metadata.
		/// IntegrationRuntimeObjectMetadata_Refresh subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/refreshObjectMetadata
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<SsisObjectMetadataStatusResponse> IntegrationRuntimeObjectMetadata_RefreshAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/refreshObjectMetadata&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SsisObjectMetadataStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates the authentication key for an integration runtime.
		/// IntegrationRuntimes_RegenerateAuthKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/regenerateAuthKey
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The parameters for regenerating integration runtime authentication key.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimes_RegenerateAuthKeyReturn> IntegrationRuntimes_RegenerateAuthKeyAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version, IntegrationRuntimes_RegenerateAuthKeyPostBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/regenerateAuthKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimes_RegenerateAuthKeyReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove all linked integration runtimes under specific data factory in a self-hosted integration runtime.
		/// IntegrationRuntimes_RemoveLinks subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/removeLinks
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The data factory name for the linked integration runtime.</param>
		/// <returns>OK.</returns>
		public async Task IntegrationRuntimes_RemoveLinksAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version, LinkedIntegrationRuntimeRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/removeLinks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a ManagedReserved type integration runtime.
		/// IntegrationRuntimes_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/start
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<IntegrationRuntimeStatusResponse> IntegrationRuntimes_StartAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationRuntimeStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a ManagedReserved type integration runtime.
		/// IntegrationRuntimes_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/stop
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task IntegrationRuntimes_StopAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Force the integration runtime to synchronize credentials across integration runtime nodes, and this will override the credentials across all worker nodes with those available on the dispatcher node. If you already have the latest credential backup file, you should manually import it (preferred) on any self-hosted integration runtime node than using this API directly.
		/// IntegrationRuntimes_SyncCredentials subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/syncCredentials
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task IntegrationRuntimes_SyncCredentialsAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/syncCredentials&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upgrade self-hosted integration runtime to latest version if availability.
		/// IntegrationRuntimes_Upgrade subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}/upgrade
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="integrationRuntimeName">The integration runtime name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task IntegrationRuntimes_UpgradeAsync(string subscriptionId, string resourceGroupName, string factoryName, string integrationRuntimeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/integrationRuntimes/"+ (integrationRuntimeName==null? "" : System.Uri.EscapeDataString(integrationRuntimeName))+"/upgrade&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists linked services.
		/// LinkedServices_ListByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<LinkedServiceListResponse> LinkedServices_ListByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/linkedservices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedServiceListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a linked service.
		/// LinkedServices_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="linkedServiceName">The linked service name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<LinkedServiceResource> LinkedServices_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string linkedServiceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/linkedservices/"+ (linkedServiceName==null? "" : System.Uri.EscapeDataString(linkedServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedServiceResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a linked service.
		/// LinkedServices_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="linkedServiceName">The linked service name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Linked service resource definition.</param>
		/// <returns>OK.</returns>
		public async Task<LinkedServiceResource> LinkedServices_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string linkedServiceName, string api_version, LinkedServiceResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/linkedservices/"+ (linkedServiceName==null? "" : System.Uri.EscapeDataString(linkedServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LinkedServiceResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a linked service.
		/// LinkedServices_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="linkedServiceName">The linked service name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task LinkedServices_DeleteAsync(string subscriptionId, string resourceGroupName, string factoryName, string linkedServiceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/linkedservices/"+ (linkedServiceName==null? "" : System.Uri.EscapeDataString(linkedServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a pipeline run by its run ID.
		/// PipelineRuns_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="runId">The pipeline run identifier.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<PipelineRun> PipelineRuns_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string runId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/pipelineruns/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PipelineRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel a pipeline run by its run ID.
		/// PipelineRuns_Cancel subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/cancel
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="runId">The pipeline run identifier.</param>
		/// <param name="isRecursive">If true, cancel all the Child pipelines that are triggered by the current pipeline.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Pipeline run has been canceled successfully. </returns>
		public async Task PipelineRuns_CancelAsync(string subscriptionId, string resourceGroupName, string factoryName, string runId, bool isRecursive, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/pipelineruns/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/cancel&isRecursive="+isRecursive+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query activity runs based on input filter conditions.
		/// ActivityRuns_QueryByPipelineRun subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/queryActivityruns
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="runId">The pipeline run identifier.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Parameters to filter the activity runs.</param>
		/// <returns>OK.</returns>
		public async Task<ActivityRunsQueryResponse> ActivityRuns_QueryByPipelineRunAsync(string subscriptionId, string resourceGroupName, string factoryName, string runId, string api_version, RunFilterParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/pipelineruns/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/queryActivityruns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityRunsQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists pipelines.
		/// Pipelines_ListByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<PipelineListResponse> Pipelines_ListByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/pipelines&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PipelineListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a pipeline.
		/// Pipelines_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="pipelineName">The pipeline name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<PipelineResource> Pipelines_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string pipelineName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PipelineResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a pipeline.
		/// Pipelines_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="pipelineName">The pipeline name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Pipeline resource definition.</param>
		/// <returns>OK.</returns>
		public async Task<PipelineResource> Pipelines_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string pipelineName, string api_version, PipelineResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PipelineResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a pipeline.
		/// Pipelines_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="pipelineName">The pipeline name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task Pipelines_DeleteAsync(string subscriptionId, string resourceGroupName, string factoryName, string pipelineName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a run of a pipeline.
		/// Pipelines_CreateRun subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}/createRun
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="pipelineName">The pipeline name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="referencePipelineRunId">The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run.</param>
		/// <param name="isRecovery">Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId.</param>
		/// <param name="startActivityName">In recovery mode, the rerun will start from this activity. If not specified, all activities will run.</param>
		/// <param name="requestBody">Parameters of the pipeline run. These parameters will be used only if the runId is not specified.</param>
		/// <returns>OK.</returns>
		public async Task<CreateRunResponse> Pipelines_CreateRunAsync(string subscriptionId, string resourceGroupName, string factoryName, string pipelineName, string api_version, string referencePipelineRunId, bool isRecovery, string startActivityName, ParameterValueSpecification requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"/createRun&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&referencePipelineRunId=" + (referencePipelineRunId==null? "" : System.Uri.EscapeDataString(referencePipelineRunId))+"&isRecovery="+isRecovery+"&startActivityName=" + (startActivityName==null? "" : System.Uri.EscapeDataString(startActivityName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRunResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query all active data flow debug sessions.
		/// DataFlowDebugSession_QueryByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryDataFlowDebugSessions
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<QueryDataFlowDebugSessionsResponse> DataFlowDebugSession_QueryByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/queryDataFlowDebugSessions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryDataFlowDebugSessionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query pipeline runs in the factory based on input filter conditions.
		/// PipelineRuns_QueryByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryPipelineRuns
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Parameters to filter the pipeline run.</param>
		/// <returns>OK.</returns>
		public async Task<PipelineRunsQueryResponse> PipelineRuns_QueryByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, RunFilterParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/queryPipelineRuns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PipelineRunsQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query trigger runs.
		/// TriggerRuns_QueryByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryTriggerRuns
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Parameters to filter the pipeline run.</param>
		/// <returns>OK.</returns>
		public async Task<TriggerRunsQueryResponse> TriggerRuns_QueryByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version, RunFilterParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/queryTriggerRuns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TriggerRunsQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists triggers.
		/// Triggers_ListByFactory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<TriggerListResponse> Triggers_ListByFactoryAsync(string subscriptionId, string resourceGroupName, string factoryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TriggerListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a trigger.
		/// Triggers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<TriggerResource> Triggers_GetAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TriggerResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a trigger.
		/// Triggers_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Trigger resource definition.</param>
		/// <returns>OK.</returns>
		public async Task<TriggerResource> Triggers_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string api_version, TriggerResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TriggerResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a trigger.
		/// Triggers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task Triggers_DeleteAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a trigger's event subscription status.
		/// Triggers_GetEventSubscriptionStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/getEventSubscriptionStatus
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Trigger event subscription state.</returns>
		public async Task<TriggerSubscriptionOperationStatus> Triggers_GetEventSubscriptionStatusAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/getEventSubscriptionStatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TriggerSubscriptionOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists rerun triggers by an original trigger name.
		/// RerunTriggers_ListByTrigger subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>OK.</returns>
		public async Task<RerunTriggerListResponse> RerunTriggers_ListByTriggerAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/rerunTriggers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RerunTriggerListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a rerun trigger.
		/// RerunTriggers_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="rerunTriggerName">The rerun trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">Rerun tumbling window trigger action parameters.</param>
		/// <returns>OK.</returns>
		public async Task<TriggerResource> RerunTriggers_CreateAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, string api_version, RerunTumblingWindowTriggerActionParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/rerunTriggers/"+ (rerunTriggerName==null? "" : System.Uri.EscapeDataString(rerunTriggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TriggerResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels a trigger.
		/// RerunTriggers_Cancel subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/cancel
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="rerunTriggerName">The rerun trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Trigger has been canceled successfully.</returns>
		public async Task RerunTriggers_CancelAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/rerunTriggers/"+ (rerunTriggerName==null? "" : System.Uri.EscapeDataString(rerunTriggerName))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a trigger.
		/// RerunTriggers_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/start
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="rerunTriggerName">The rerun trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Trigger has been started successfully.</returns>
		public async Task RerunTriggers_StartAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/rerunTriggers/"+ (rerunTriggerName==null? "" : System.Uri.EscapeDataString(rerunTriggerName))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a trigger.
		/// RerunTriggers_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/rerunTriggers/{rerunTriggerName}/stop
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="rerunTriggerName">The rerun trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Trigger has been stopped successfully.</returns>
		public async Task RerunTriggers_StopAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/rerunTriggers/"+ (rerunTriggerName==null? "" : System.Uri.EscapeDataString(rerunTriggerName))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a trigger.
		/// Triggers_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/start
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Trigger has been started successfully.</returns>
		public async Task Triggers_StartAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a trigger.
		/// Triggers_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/stop
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Trigger has been stopped successfully.</returns>
		public async Task Triggers_StopAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe event trigger to events.
		/// Triggers_SubscribeToEvents subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/subscribeToEvents
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Trigger is subscribed to events.</returns>
		public async Task<TriggerSubscriptionOperationStatus> Triggers_SubscribeToEventsAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/subscribeToEvents&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TriggerSubscriptionOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rerun single trigger instance by runId.
		/// TriggerRuns_Rerun subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/triggerRuns/{runId}/rerun
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="runId">The pipeline run identifier.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>TriggerRun has been restarted.</returns>
		public async Task TriggerRuns_RerunAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string runId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/triggerRuns/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/rerun&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe event trigger from events.
		/// Triggers_UnsubscribeFromEvents subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}/unsubscribeFromEvents
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The resource group name.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="factoryName">The factory name.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="triggerName">The trigger name.
		/// Max length: 260
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Trigger is unsubscribed from events.</returns>
		public async Task<TriggerSubscriptionOperationStatus> Triggers_UnsubscribeFromEventsAsync(string subscriptionId, string resourceGroupName, string factoryName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataFactory/factories/"+ (factoryName==null? "" : System.Uri.EscapeDataString(factoryName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"/unsubscribeFromEvents&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TriggerSubscriptionOperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class IntegrationRuntimes_GetConnectionInfoReturn
	{
		
		/// <summary>
		/// The on-premises integration runtime host URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostServiceUri")]
		public string HostServiceUri { get; set; }
		
		/// <summary>
		/// The integration runtime SSL certificate thumbprint. Click-Once application uses it to do server validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityCertThumbprint")]
		public string IdentityCertThumbprint { get; set; }
		
		/// <summary>
		/// Whether the identity certificate is expired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isIdentityCertExprired")]
		public System.Nullable<System.Boolean> IsIdentityCertExprired { get; set; }
		
		/// <summary>
		/// The public key for encrypting a credential when transferring the credential to the integration runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
		
		/// <summary>
		/// The token generated in service. Callers use this token to authenticate to integration runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceToken")]
		public string ServiceToken { get; set; }
		
		/// <summary>
		/// The integration runtime version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class IntegrationRuntimeObjectMetadata_GetReturn
	{
		
		/// <summary>
		/// The link to the next page of results, if any remaining results exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of SSIS object metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationRuntimeObjectMetadata_GetReturnValue[] IntegrationRuntimeObjectMetadata_GetReturnValue { get; set; }
	}
	
	public class IntegrationRuntimeObjectMetadata_GetReturnValue
	{
		
		/// <summary>
		/// Metadata description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Metadata id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Metadata name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of SSIS object metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IntegrationRuntimeObjectMetadata_GetReturnValueType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationRuntimeObjectMetadata_GetReturnValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Folder = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Project = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Package = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Environment = 3,
	}
	
	public class IntegrationRuntimes_ListAuthKeysReturn
	{
		
		/// <summary>
		/// The primary integration runtime authentication key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authKey1")]
		public string AuthKey1 { get; set; }
		
		/// <summary>
		/// The secondary integration runtime authentication key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authKey2")]
		public string AuthKey2 { get; set; }
	}
	
	public class IntegrationRuntimes_GetMonitoringDataReturn
	{
		
		/// <summary>
		/// Integration runtime name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Integration runtime node monitoring data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public IntegrationRuntimes_GetMonitoringDataReturnNodes[] IntegrationRuntimes_GetMonitoringDataReturnNodes { get; set; }
	}
	
	public class IntegrationRuntimes_GetMonitoringDataReturnNodes
	{
		
		/// <summary>
		/// Available memory (MB) on the integration runtime node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableMemoryInMB")]
		public System.Nullable<System.Int32> AvailableMemoryInMB { get; set; }
		
		/// <summary>
		/// Maximum concurrent jobs on the integration runtime node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrentJobsLimit")]
		public System.Nullable<System.Int32> ConcurrentJobsLimit { get; set; }
		
		/// <summary>
		/// The number of jobs currently running on the integration runtime node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrentJobsRunning")]
		public System.Nullable<System.Int32> ConcurrentJobsRunning { get; set; }
		
		/// <summary>
		/// CPU percentage on the integration runtime node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuUtilization")]
		public System.Nullable<System.Int32> CpuUtilization { get; set; }
		
		/// <summary>
		/// The maximum concurrent jobs in this integration runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxConcurrentJobs")]
		public System.Nullable<System.Int32> MaxConcurrentJobs { get; set; }
		
		/// <summary>
		/// Name of the integration runtime node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeName")]
		public string NodeName { get; set; }
		
		/// <summary>
		/// Received bytes on the integration runtime node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivedBytes")]
		public System.Nullable<System.Double> ReceivedBytes { get; set; }
		
		/// <summary>
		/// Sent bytes on the integration runtime node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentBytes")]
		public System.Nullable<System.Double> SentBytes { get; set; }
	}
	
	public class IntegrationRuntimeNodes_GetIpAddressReturn
	{
		
		/// <summary>
		/// The IP address of self-hosted integration runtime node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
	}
	
	public class IntegrationRuntimes_RegenerateAuthKeyPostBody
	{
		
		/// <summary>
		/// The name of the authentication key to regenerate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public System.Nullable<IntegrationRuntimes_RegenerateAuthKeyPostBodyKeyName> KeyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IntegrationRuntimes_RegenerateAuthKeyPostBodyKeyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authKey1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authKey2 = 1,
	}
	
	public class IntegrationRuntimes_RegenerateAuthKeyReturn
	{
		
		/// <summary>
		/// The primary integration runtime authentication key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authKey1")]
		public string AuthKey1 { get; set; }
		
		/// <summary>
		/// The secondary integration runtime authentication key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authKey2")]
		public string AuthKey2 { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
