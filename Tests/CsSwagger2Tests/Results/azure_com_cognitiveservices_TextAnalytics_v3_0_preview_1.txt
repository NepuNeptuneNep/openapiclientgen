//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetectedLanguage
	{
		
		/// <summary>
		/// A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iso6391Name")]
		public string Iso6391Name { get; set; }
		
		/// <summary>
		/// Long name of a detected language (e.g. English, French).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		public double Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentEntities
	{
		
		/// <summary>
		/// Recognized entities in the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Entity[] Entities { get; set; }
		
		/// <summary>
		/// Unique, non-empty document identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the document payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public DocumentStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Entity
	{
		
		/// <summary>
		/// Length (in Unicode characters) for the entity text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public int Length { get; set; }
		
		/// <summary>
		/// Start position (in Unicode characters) for the entity text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public int Offset { get; set; }
		
		/// <summary>
		/// Confidence score between 0 and 1 of the extracted entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		public double Score { get; set; }
		
		/// <summary>
		/// Entity sub type, such as Age/Year/TimeRange etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public string Subtype { get; set; }
		
		/// <summary>
		/// Entity text as appears in the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Entity type, such as Person/Location/Org/SSN etc
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// if showStats=true was specified in the request this field will contain information about the document payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentStatistics
	{
		
		/// <summary>
		/// Number of text elements recognized in the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="charactersCount")]
		public int CharactersCount { get; set; }
		
		/// <summary>
		/// Number of transactions for the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionsCount")]
		public int TransactionsCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public TextAnalyticsError Error { get; set; }
		
		/// <summary>
		/// Document Id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TextAnalyticsError
	{
		
		/// <summary>
		/// Error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public TextAnalyticsErrorCode Code { get; set; }
		
		/// <summary>
		/// Details about specific errors that led to this reported error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public TextAnalyticsError[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerError InnerError { get; set; }
		
		/// <summary>
		/// Error message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Error target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TextAnalyticsErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalidRequest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalidArgument = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		internalServerError = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		serviceUnavailable = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InnerError
	{
		
		/// <summary>
		/// Error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public InnerErrorCode Code { get; set; }
		
		/// <summary>
		/// Error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public System.Collections.Generic.Dictionary<string, string> Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerError InnerError1 { get; set; }
		
		/// <summary>
		/// Error message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Error target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InnerErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalidParameterValue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalidRequestBodyFormat = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		emptyRequest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		missingInputRecords = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalidDocument = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modelVersionIncorrect = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalidDocumentBatch = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unsupportedLanguageCode = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalidCountryHint = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentKeyPhrases
	{
		
		/// <summary>
		/// Unique, non-empty document identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyPhrases")]
		public string[] KeyPhrases { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the document payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public DocumentStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentLanguage
	{
		
		/// <summary>
		/// A list of extracted languages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detectedLanguages")]
		public DetectedLanguage[] DetectedLanguages { get; set; }
		
		/// <summary>
		/// Unique, non-empty document identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the document payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public DocumentStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentLinkedEntities
	{
		
		/// <summary>
		/// Recognized well-known entities in the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public LinkedEntity[] Entities { get; set; }
		
		/// <summary>
		/// Unique, non-empty document identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the document payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public DocumentStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinkedEntity
	{
		
		/// <summary>
		/// Data source used to extract entity linking, such as Wiki/Bing etc.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public string DataSource { get; set; }
		
		/// <summary>
		/// Unique identifier of the recognized entity from the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Language used in the data source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// List of instances this entity appears in the text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matches")]
		public Match[] Matches { get; set; }
		
		/// <summary>
		/// Entity Linking formal name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// URL for the entity's page from the data source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Match
	{
		
		/// <summary>
		/// Length (in Unicode characters) for the entity match text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public int Length { get; set; }
		
		/// <summary>
		/// Start position (in Unicode characters) for the entity match text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public int Offset { get; set; }
		
		/// <summary>
		/// If a well-known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		public double Score { get; set; }
		
		/// <summary>
		/// Entity text as appears in the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentSentiment
	{
		
		/// <summary>
		/// Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentScores")]
		public SentimentConfidenceScorePerLabel DocumentScores { get; set; }
		
		/// <summary>
		/// Unique, non-empty document identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Sentence level sentiment analysis.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sentences")]
		public SentenceSentiment[] Sentences { get; set; }
		
		/// <summary>
		/// Predicted sentiment for document (Negative, Neutral, Positive, or Mixed).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public DocumentSentimentSentiment Sentiment { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the document payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public DocumentStatistics Statistics { get; set; }
	}
	
	/// <summary>
	/// Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SentimentConfidenceScorePerLabel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public double Negative { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="neutral")]
		public double Neutral { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="positive")]
		public double Positive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SentenceSentiment
	{
		
		/// <summary>
		/// The length of the sentence by Unicode standard.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public int Length { get; set; }
		
		/// <summary>
		/// The sentence offset from the start of the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public int Offset { get; set; }
		
		/// <summary>
		/// Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sentenceScores")]
		public SentimentConfidenceScorePerLabel SentenceScores { get; set; }
		
		/// <summary>
		/// The predicted Sentiment for the sentence.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public SentenceSentimentSentiment Sentiment { get; set; }
		
		/// <summary>
		/// The warnings generated for the sentence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SentenceSentimentSentiment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		positive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		neutral = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		negative = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DocumentSentimentSentiment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		positive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		neutral = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		negative = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mixed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EntitiesResult
	{
		
		/// <summary>
		/// Response by document
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public DocumentEntities[] Documents { get; set; }
		
		/// <summary>
		/// Errors by document id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public DocumentError[] Errors { get; set; }
		
		/// <summary>
		/// This field indicates which model is used for scoring.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelVersion")]
		public string ModelVersion { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the request payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public RequestStatistics Statistics { get; set; }
	}
	
	/// <summary>
	/// if showStats=true was specified in the request this field will contain information about the request payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RequestStatistics
	{
		
		/// <summary>
		/// Number of documents submitted in the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentsCount")]
		public int DocumentsCount { get; set; }
		
		/// <summary>
		/// Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="erroneousDocumentsCount")]
		public int ErroneousDocumentsCount { get; set; }
		
		/// <summary>
		/// Number of transactions for the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionsCount")]
		public long TransactionsCount { get; set; }
		
		/// <summary>
		/// Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validDocumentsCount")]
		public int ValidDocumentsCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EntityLinkingResult
	{
		
		/// <summary>
		/// Response by document
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public DocumentLinkedEntities[] Documents { get; set; }
		
		/// <summary>
		/// Errors by document id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public DocumentError[] Errors { get; set; }
		
		/// <summary>
		/// This field indicates which model is used for scoring.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelVersion")]
		public string ModelVersion { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the request payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public RequestStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyPhraseResult
	{
		
		/// <summary>
		/// Response by document
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public DocumentKeyPhrases[] Documents { get; set; }
		
		/// <summary>
		/// Errors by document id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public DocumentError[] Errors { get; set; }
		
		/// <summary>
		/// This field indicates which model is used for scoring.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelVersion")]
		public string ModelVersion { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the request payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public RequestStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LanguageBatchInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public LanguageInput[] Documents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LanguageInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="countryHint")]
		public string CountryHint { get; set; }
		
		/// <summary>
		/// Unique, non-empty document identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LanguageResult
	{
		
		/// <summary>
		/// Response by document
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public DocumentLanguage[] Documents { get; set; }
		
		/// <summary>
		/// Errors by document id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public DocumentError[] Errors { get; set; }
		
		/// <summary>
		/// This field indicates which model is used for scoring.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelVersion")]
		public string ModelVersion { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the request payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public RequestStatistics Statistics { get; set; }
	}
	
	/// <summary>
	/// Contains a set of input documents to be analyzed by the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MultiLanguageBatchInput
	{
		
		/// <summary>
		/// The set of documents to process as part of this batch.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public MultiLanguageInput[] Documents { get; set; }
	}
	
	/// <summary>
	/// Contains an input document to be analyzed by the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MultiLanguageInput
	{
		
		/// <summary>
		/// A unique, non-empty document identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The input text to process.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SentimentResponse
	{
		
		/// <summary>
		/// Sentiment analysis per document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public DocumentSentiment[] Documents { get; set; }
		
		/// <summary>
		/// Errors by document id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public DocumentError[] Errors { get; set; }
		
		/// <summary>
		/// This field indicates which model is used for scoring.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelVersion")]
		public string ModelVersion { get; set; }
		
		/// <summary>
		/// if showStats=true was specified in the request this field will contain information about the request payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public RequestStatistics Statistics { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Linked entities from a well-known knowledge base
		/// The API returns a list of recognized entities with links to a well-known knowledge base. See the <a href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled languages.
		/// EntitiesLinking entities/linking
		/// </summary>
		/// <param name="model_version">(Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. </param>
		/// <param name="showStats">(Optional) if set to true, response will contain input and document level statistics.</param>
		/// <param name="requestBody">Collection of documents to analyze.</param>
		/// <returns>A successful call results in a list of recognized entities with links to a well-known knowledge base returned for each valid document</returns>
		public async Task<EntityLinkingResult> EntitiesLinkingAsync(string model_version, bool showStats, MultiLanguageBatchInput requestBody)
		{
			var requestUri = "entities/linking?model-version=" + (model_version==null? "" : System.Uri.EscapeDataString(model_version))+"&showStats="+showStats;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntityLinkingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Named Entity Recognition
		/// The API returns a list of general named entities in a given document. For the list of supported entity types, check <a href="https://aka.ms/taner">Supported Entity Types in Text Analytics API</a>. See the <a href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled languages.
		/// EntitiesRecognitionGeneral entities/recognition/general
		/// </summary>
		/// <param name="model_version">(Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. </param>
		/// <param name="showStats">(Optional) if set to true, response will contain input and document level statistics.</param>
		/// <param name="requestBody">Collection of documents to analyze.</param>
		/// <returns>A successful call results in a list of recognized entities returned for each valid document.</returns>
		public async Task<EntitiesResult> EntitiesRecognitionGeneralAsync(string model_version, bool showStats, MultiLanguageBatchInput requestBody)
		{
			var requestUri = "entities/recognition/general?model-version=" + (model_version==null? "" : System.Uri.EscapeDataString(model_version))+"&showStats="+showStats;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntitiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Entities containing personal information
		/// The API returns a list of entities with personal information (\"SSN\", \"Bank Account\" etc) in the document. For the list of supported entity types, check <a href="https://aka.ms/tanerpii">Supported Entity Types in Text Analytics API</a>. See the <a href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled languages.
		/// 
		/// EntitiesRecognitionPii entities/recognition/pii
		/// </summary>
		/// <param name="model_version">(Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. </param>
		/// <param name="showStats">(Optional) if set to true, response will contain input and document level statistics.</param>
		/// <param name="requestBody">Collection of documents to analyze.</param>
		/// <returns>A successful call results in a list of entities containing personal information returned for each valid document</returns>
		public async Task<EntitiesResult> EntitiesRecognitionPiiAsync(string model_version, bool showStats, MultiLanguageBatchInput requestBody)
		{
			var requestUri = "entities/recognition/pii?model-version=" + (model_version==null? "" : System.Uri.EscapeDataString(model_version))+"&showStats="+showStats;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntitiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Key Phrases
		/// The API returns a list of strings denoting the key phrases in the input text. See the <a href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled languages.
		/// KeyPhrases keyPhrases
		/// </summary>
		/// <param name="model_version">(Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. </param>
		/// <param name="showStats">(Optional) if set to true, response will contain input and document level statistics.</param>
		/// <param name="requestBody">Collection of documents to analyze. Documents can now contain a language field to indicate the text language</param>
		/// <returns>A successful response results in 0 or more key phrases identified in each valid document</returns>
		public async Task<KeyPhraseResult> KeyPhrasesAsync(string model_version, bool showStats, MultiLanguageBatchInput requestBody)
		{
			var requestUri = "keyPhrases?model-version=" + (model_version==null? "" : System.Uri.EscapeDataString(model_version))+"&showStats="+showStats;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeyPhraseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Detect Language
		/// The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. See the <a href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled languages.
		/// Languages languages
		/// </summary>
		/// <param name="model_version">(Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. </param>
		/// <param name="showStats">(Optional) if set to true, response will contain input and document level statistics.</param>
		/// <param name="requestBody">Collection of documents to analyze.</param>
		/// <returns>A successful call results in the detected language with the highest probability for each valid document</returns>
		public async Task<LanguageResult> LanguagesAsync(string model_version, bool showStats, LanguageBatchInput requestBody)
		{
			var requestUri = "languages?model-version=" + (model_version==null? "" : System.Uri.EscapeDataString(model_version))+"&showStats="+showStats;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LanguageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sentiment
		/// The API returns a sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) for the document and each sentence within it. See the <a href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled languages.
		/// Sentiment sentiment
		/// </summary>
		/// <param name="model_version">(Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. </param>
		/// <param name="showStats">(Optional) if set to true, response will contain input and document level statistics.</param>
		/// <param name="requestBody">Collection of documents to analyze.</param>
		/// <returns>A successful call results in a document sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral)</returns>
		public async Task<SentimentResponse> SentimentAsync(string model_version, bool showStats, MultiLanguageBatchInput requestBody)
		{
			var requestUri = "sentiment?model-version=" + (model_version==null? "" : System.Uri.EscapeDataString(model_version))+"&showStats="+showStats;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SentimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
