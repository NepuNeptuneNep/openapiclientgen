//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents an instance of an Analysis Services resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnalysisServicesServer
	{
		
		/// <summary>
		/// Properties of Analysis Services resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AnalysisServicesServerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of Analysis Services resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnalysisServicesServerProperties
	{
		
		/// <summary>
		/// The current deployment state of Analysis Services resource. The provisioningState is to indicate states for resource provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<AnalysisServicesServerPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The full name of the Analysis Services resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverFullName")]
		public string ServerFullName { get; set; }
		
		/// <summary>
		/// The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AnalysisServicesServerPropertiesProvisioningState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnalysisServicesServerPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paused = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspending = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pausing = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resuming = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Preparing = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scaling = 11,
	}
	
	/// <summary>
	/// An object that represents a set of mutable Analysis Services resource properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnalysisServicesServerMutableProperties
	{
		
		/// <summary>
		/// An array of administrator user identities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asAdministrators")]
		public ServerAdministrators AsAdministrators { get; set; }
		
		/// <summary>
		/// The SAS container URI to the backup container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupBlobContainerUri")]
		public string BackupBlobContainerUri { get; set; }
		
		/// <summary>
		/// The gateway details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayDetails")]
		public GatewayDetails GatewayDetails { get; set; }
		
		/// <summary>
		/// An array of firewall rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipV4FirewallSettings")]
		public IPv4FirewallSettings IpV4FirewallSettings { get; set; }
		
		/// <summary>
		/// How the read-write server's participation in the query pool is controlled.<br/>It can have the following values: <ul><li>readOnly - indicates that the read-write server is intended not to participate in query operations</li><li>all - indicates that the read-write server can participate in query operations</li></ul>Specifying readOnly when capacity is 1 results in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="querypoolConnectionMode")]
		public System.Nullable<AnalysisServicesServerMutablePropertiesQuerypoolConnectionMode> QuerypoolConnectionMode { get; set; }
	}
	
	/// <summary>
	/// An array of administrator user identities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerAdministrators
	{
		
		/// <summary>
		/// An array of administrator user identities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
	}
	
	/// <summary>
	/// The gateway details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewayDetails
	{
		
		/// <summary>
		/// Uri of the DMTS cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dmtsClusterUri")]
		public string DmtsClusterUri { get; set; }
		
		/// <summary>
		/// Gateway object id from in the DMTS cluster for the gateway resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayObjectId")]
		public string GatewayObjectId { get; set; }
		
		/// <summary>
		/// Gateway resource to be associated with the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayResourceId")]
		public string GatewayResourceId { get; set; }
	}
	
	/// <summary>
	/// An array of firewall rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IPv4FirewallSettings
	{
		
		/// <summary>
		/// The indicator of enabling PBI service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePowerBIService")]
		public System.Nullable<System.Boolean> EnablePowerBIService { get; set; }
		
		/// <summary>
		/// An array of firewall rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public IPv4FirewallRule[] FirewallRules { get; set; }
	}
	
	/// <summary>
	/// The detail of firewall rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IPv4FirewallRule
	{
		
		/// <summary>
		/// The rule name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRuleName")]
		public string FirewallRuleName { get; set; }
		
		/// <summary>
		/// The end range of IPv4.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rangeEnd")]
		public string RangeEnd { get; set; }
		
		/// <summary>
		/// The start range of IPv4.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rangeStart")]
		public string RangeStart { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnalysisServicesServerMutablePropertiesQuerypoolConnectionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadOnly = 1,
	}
	
	/// <summary>
	/// Provision request specification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnalysisServicesServerUpdateParameters
	{
		
		/// <summary>
		/// An object that represents a set of mutable Analysis Services resource properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AnalysisServicesServerMutableProperties Properties { get; set; }
		
		/// <summary>
		/// Represents the SKU name and Azure pricing tier for Analysis Services resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ResourceSku Sku { get; set; }
		
		/// <summary>
		/// Key-value pairs of additional provisioning properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Represents the SKU name and Azure pricing tier for Analysis Services resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceSku
	{
		
		/// <summary>
		/// The number of instances in the read only query pool.
		/// Minimum: 1
		/// Maximum: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		[System.ComponentModel.DataAnnotations.Range(1, 8)]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Name of the SKU level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the Azure pricing tier to which the SKU applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<ResourceSkuTier> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceSkuTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Development = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 2,
	}
	
	/// <summary>
	/// An array of Analysis Services resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnalysisServicesServers
	{
		
		/// <summary>
		/// An array of Analysis Services resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AnalysisServicesServer[] Value { get; set; }
	}
	
	/// <summary>
	/// Details of server name request body.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckServerNameAvailabilityParameters
	{
		
		/// <summary>
		/// Name for checking availability.
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[a-z][a-z0-9]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-z][a-z0-9]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type of azure analysis services.
		/// </summary>
		[System.ComponentModel.DefaultValue("Microsoft.AnalysisServices/servers")]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "Microsoft.AnalysisServices/servers";
	}
	
	/// <summary>
	/// The checking result of server name availability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckServerNameAvailabilityResult
	{
		
		/// <summary>
		/// The detailed message of the request unavailability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Indicator of available of the server name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason of unavailability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Detail of gateway errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewayError
	{
		
		/// <summary>
		/// Error code of list gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message of list gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Status of gateway is error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewayListStatusError
	{
		
		/// <summary>
		/// Detail of gateway errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public GatewayError Error { get; set; }
	}
	
	/// <summary>
	/// Status of gateway is live.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewayListStatusLive
	{
		
		/// <summary>
		/// Live message of list gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GatewayListStatusLiveStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GatewayListStatusLiveStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Live = 0,
	}
	
	/// <summary>
	/// A Consumption REST API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of listing consumption operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of analysis services operations supported by the Microsoft.AnalysisServices resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The status of operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationStatus
	{
		
		/// <summary>
		/// The end time of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Describes the format of Error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorResponse Error { get; set; }
		
		/// <summary>
		/// The operation Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The start time of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The status of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Represents an instance of an Analysis Services resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// An identifier that represents the Analysis Services resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Location of the Analysis Services resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the Analysis Services resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents the SKU name and Azure pricing tier for Analysis Services resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ResourceSku Sku { get; set; }
		
		/// <summary>
		/// Key-value pairs of additional resource provisioning properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the Analysis Services resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An object that represents SKU details for existing resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuDetailsForExistingResource
	{
		
		/// <summary>
		/// Represents the SKU name and Azure pricing tier for Analysis Services resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ResourceSku Sku { get; set; }
	}
	
	/// <summary>
	/// An object that represents enumerating SKUs for existing resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuEnumerationForExistingResourceResult
	{
		
		/// <summary>
		/// The collection of available SKUs for existing resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SkuDetailsForExistingResource[] Value { get; set; }
	}
	
	/// <summary>
	/// An object that represents enumerating SKUs for new resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuEnumerationForNewResourceResult
	{
		
		/// <summary>
		/// The collection of available SKUs for new resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ResourceSku[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available consumption REST API operations.
		/// Operations_List providers/Microsoft.AnalysisServices/operations
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.AnalysisServices/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check the name availability in the target location.
		/// Servers_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/checkNameAvailability
		/// </summary>
		/// <param name="location">The region name which the operation will lookup into.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Contains the information used to provision the Analysis Services server.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CheckServerNameAvailabilityResult> Servers_CheckNameAvailabilityAsync(string location, string api_version, string subscriptionId, CheckServerNameAvailabilityParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AnalysisServices/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckServerNameAvailabilityResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the result of the specified operation.
		/// Servers_ListOperationResults subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationresults/{operationId}
		/// </summary>
		/// <param name="location">The region name which the operation will lookup into.</param>
		/// <param name="operationId">The target operation Id.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The operation completed.</returns>
		public async Task Servers_ListOperationResultsAsync(string location, string operationId, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AnalysisServices/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/operationresults/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the status of operation.
		/// Servers_ListOperationStatuses subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationstatuses/{operationId}
		/// </summary>
		/// <param name="location">The region name which the operation will lookup into.</param>
		/// <param name="operationId">The target operation Id.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The operation completed.</returns>
		public async Task<OperationStatus> Servers_ListOperationStatusesAsync(string location, string operationId, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AnalysisServices/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/operationstatuses/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the Analysis Services servers for the given subscription.
		/// Servers_List subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK</returns>
		public async Task<AnalysisServicesServers> Servers_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AnalysisServices/servers?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalysisServicesServers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists eligible SKUs for Analysis Services resource provider.
		/// Servers_ListSkusForNew subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/skus
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK</returns>
		public async Task<SkuEnumerationForNewResourceResult> Servers_ListSkusForNewAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AnalysisServices/skus?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SkuEnumerationForNewResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the Analysis Services servers for the given resource group.
		/// Servers_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK</returns>
		public async Task<AnalysisServicesServers> Servers_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalysisServicesServers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about the specified Analysis Services server.
		/// Servers_GetDetails subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK. The operation was successful.</returns>
		public async Task<AnalysisServicesServer> Servers_GetDetailsAsync(string resourceGroupName, string serverName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalysisServicesServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provisions the specified Analysis Services server based on the configuration specified in the request.
		/// Servers_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Contains the information used to provision the Analysis Services server.</param>
		/// <returns>OK. The operation completed successfully.</returns>
		public async Task<AnalysisServicesServer> Servers_CreateAsync(string resourceGroupName, string serverName, string api_version, string subscriptionId, AnalysisServicesServer requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalysisServicesServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Analysis Services server.
		/// Servers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK.</returns>
		public async Task Servers_DeleteAsync(string resourceGroupName, string serverName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the current state of the specified Analysis Services server.
		/// Servers_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Request object that contains the updated information for the server.</param>
		/// <returns>OK</returns>
		public async Task<AnalysisServicesServer> Servers_UpdateAsync(string resourceGroupName, string serverName, string api_version, string subscriptionId, AnalysisServicesServerUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalysisServicesServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Dissociates a Unified Gateway associated with the server.
		/// Servers_DissociateGateway subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/dissociateGateway
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK.</returns>
		public async Task Servers_DissociateGatewayAsync(string resourceGroupName, string serverName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/dissociateGateway&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return the gateway status of the specified Analysis Services server instance.
		/// Servers_ListGatewayStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/listGatewayStatus
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the Analysis Services server.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK.</returns>
		public async Task<GatewayListStatusLive> Servers_ListGatewayStatusAsync(string resourceGroupName, string serverName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/listGatewayStatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GatewayListStatusLive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resumes operation of the specified Analysis Services server instance.
		/// Servers_Resume subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK</returns>
		public async Task Servers_ResumeAsync(string resourceGroupName, string serverName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/resume&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists eligible SKUs for an Analysis Services resource.
		/// Servers_ListSkusForExisting subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/skus
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK</returns>
		public async Task<SkuEnumerationForExistingResourceResult> Servers_ListSkusForExistingAsync(string resourceGroupName, string serverName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/skus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SkuEnumerationForExistingResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Suspends operation of the specified Analysis Services server instance.
		/// Servers_Suspend subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend
		/// </summary>
		/// <param name="resourceGroupName">The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
		/// Max length: 63
		/// Min length: 3
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>OK.</returns>
		public async Task Servers_SuspendAsync(string resourceGroupName, string serverName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AnalysisServices/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/suspend&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
