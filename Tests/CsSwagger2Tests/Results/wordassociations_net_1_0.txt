//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Body
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public Request Request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public Response[] Response { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Request
	{
		
		[System.Runtime.Serialization.DataMember(Name="indent")]
		public string Indent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pos")]
		public string Pos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string[] Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Item
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public string Item1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pos")]
		public string Pos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Double> Weight { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets associations with the given word or phrase.
		/// 
		/// JsonSearchGetByTextAndLangAndTypeAndLimitAndPosAndIndent json/search
		/// </summary>
		/// <param name="text">Word or phrase to find associations with.
		///Tip. You can use multiple parameters 'text' in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response.
		///Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text.
		///</param>
		/// <param name="lang">Query language. Use language code for the language of the text:
		///* de - German;
		///* en - English;
		///* es - Spanish;
		///* fr - French;
		///* it - Italian;
		///* pt - Portuguese;
		///* ru - Russian;
		///</param>
		/// <param name="type">Type of result.
		///Possible values: 
		///* stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word;
		///* response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word.
		///</param>
		/// <param name="limit">Maximum number of results to return.
		///Allows to limit the number of results (associations) in response.
		///The value of this parameter is an integer number from 1 to 300 inclusive.
		///
		/// Minimum: 1
		/// Maximum: 300
		// </param>
		/// <param name="pos">Parts of speech to return.
		///Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma.
		///The following parts of speech codes are supported:
		///* noun
		///* adjective
		///* verb
		///* adverb
		///</param>
		/// <param name="indent">Indentation switch for pretty printing of JSON response.
		///Allows to either turn on or off space indentation for a response.
		///The following values are allowed:
		///* yes - turns indentation with spaces on;
		///* no - turn indentation with spaces off;
		///</param>
		/// <returns>Successful response</returns>
		public async Task<Body> JsonSearchGetByTextAndLangAndTypeAndLimitAndPosAndIndentAsync(string[] text, JsonSearchGetByTextAndLangAndTypeAndLimitAndPosAndIndentLang lang, JsonSearchGetByTextAndLangAndTypeAndLimitAndPosAndIndentType type, int limit, string[] pos, JsonSearchGetByTextAndLangAndTypeAndLimitAndPosAndIndentIndent indent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/search?"+string.Join("&", text.Select(z => $"text={System.Uri.EscapeDataString(z.ToString())}"))+"&lang=" + lang+"&type=" + type+"&limit="+limit+"&"+string.Join("&", pos.Select(z => $"pos={System.Uri.EscapeDataString(z.ToString())}"))+"&indent=" + indent;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Body>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum JsonSearchGetByTextAndLangAndTypeAndLimitAndPosAndIndentLang
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 6,
	}
	
	public enum JsonSearchGetByTextAndLangAndTypeAndLimitAndPosAndIndentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stimulus = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		response = 1,
	}
	
	public enum JsonSearchGetByTextAndLangAndTypeAndLimitAndPosAndIndentIndent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
