//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExecAPI
	{
		
		[System.Runtime.Serialization.DataMember(Name="marketstat")]
		public ExecAPIMarketstat[] ExecAPIMarketstat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class ExecAPIMarketstat
	{
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public TypeStatXML Buy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public TypeStatXML Sell { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TypeStatXML
	{
		
		/// <summary>
		/// Weighted Average Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg")]
		public System.Nullable<System.Double> Avg { get; set; }
		
		/// <summary>
		/// Maximum Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		/// <summary>
		/// Median Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Double> Median { get; set; }
		
		/// <summary>
		/// Minimum Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
		
		/// <summary>
		/// 5% Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentile")]
		public System.Nullable<System.Double> Percentile { get; set; }
		
		/// <summary>
		/// Standard Deviation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stddev")]
		public System.Nullable<System.Double> Stddev { get; set; }
		
		/// <summary>
		/// Order Volume
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public System.Nullable<System.Int64> Volume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ForQuery
	{
		
		/// <summary>
		/// is buy?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bid")]
		public System.Nullable<System.Boolean> Bid { get; set; }
		
		/// <summary>
		/// always 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// always 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minq")]
		public System.Nullable<System.Int32> Minq { get; set; }
		
		/// <summary>
		/// Region IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public int[] Regions { get; set; }
		
		/// <summary>
		/// System IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systems")]
		public int[] Systems { get; set; }
		
		/// <summary>
		/// Type IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public int[] Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MarketStatXMLElement
	{
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public TypeStatXML Buy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public TypeStatXML Sell { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Type
	{
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public TypeStat Buy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public TypeStat Sell { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TypeStat
	{
		
		/// <summary>
		/// Average Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg")]
		public System.Nullable<System.Double> Avg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fivePercent")]
		public System.Nullable<System.Double> FivePercent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forQuery")]
		public ForQuery ForQuery { get; set; }
		
		/// <summary>
		/// Generated at (UNIX Timestamp msec)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generated")]
		public System.Nullable<System.Int64> Generated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="highToLow")]
		public System.Nullable<System.Boolean> HighToLow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		/// <summary>
		/// Median Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="median")]
		public System.Nullable<System.Double> Median { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
		
		/// <summary>
		/// Standard Deviation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stdDev")]
		public System.Nullable<System.Double> StdDev { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variance")]
		public System.Nullable<System.Double> Variance { get; set; }
		
		/// <summary>
		/// Order Volume
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public System.Nullable<System.Int64> Volume { get; set; }
		
		/// <summary>
		/// Weighted Average Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wavg")]
		public System.Nullable<System.Double> Wavg { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// XML Marketstat
		/// MarketstatGetByTypeidAndRegionlimitAndUsesystem marketstat
		/// </summary>
		/// <param name="typeid">TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request):
		///typeid=34&typeid=35 or typeid=34,35
		///</param>
		/// <param name="regionlimit">Limit the statistics to a single region.</param>
		/// <param name="usesystem">Limit the statistics to a single solar system.</param>
		/// <returns>Successful Request</returns>
		public async Task MarketstatGetByTypeidAndRegionlimitAndUsesystemAsync(int[] typeid, int regionlimit, int usesystem)
		{
			var requestUri = "marketstat?"+string.Join("&", typeid.Select(z => $"typeid={z}"))+"&regionlimit="+regionlimit+"&usesystem="+usesystem;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON Marketstat
		/// MarketstatGet marketstat/json
		/// </summary>
		/// <returns>Successful Request</returns>
		public async Task<Type[]> MarketstatGetAsync()
		{
			var requestUri = "marketstat/json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON Marketstat
		/// MarketstatPostByTypeidAndRegionlimitAndUsesystem marketstat/json
		/// </summary>
		/// <param name="typeid">TypeID. Multiple TypeIDs can be specified in the following format (up to 200 TypeIDs per request):
		///typeid=34&typeid=35 or typeid=34,35
		///</param>
		/// <param name="regionlimit">Limit the statistics to a single region.</param>
		/// <param name="usesystem">Limit the statistics to a single region.</param>
		/// <returns>Successful Request</returns>
		public async Task<Type[]> MarketstatPostByTypeidAndRegionlimitAndUsesystemAsync(int[] typeid, int regionlimit, int usesystem)
		{
			var requestUri = "marketstat/json?"+string.Join("&", typeid.Select(z => $"typeid={z}"))+"&regionlimit="+regionlimit+"&usesystem="+usesystem;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
