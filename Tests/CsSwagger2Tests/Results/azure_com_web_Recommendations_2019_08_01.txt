//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a recommendation result generated by the recommendation engine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Recommendation
	{
		
		/// <summary>
		/// Recommendation resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of recommendations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendationCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Recommendation[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a recommendation rule that the recommendation engine can perform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendationRule
	{
		
		/// <summary>
		/// RecommendationRule resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all recommendations for a subscription.
		/// Description for List all recommendations for a subscription.
		/// Recommendations_List subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations
		/// </summary>
		/// <param name="featured">Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.</param>
		/// <param name="filter">Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RecommendationCollection> Recommendations_ListAsync(bool featured, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/recommendations?featured="+featured+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset all recommendation opt-out settings for a subscription.
		/// Description for Reset all recommendation opt-out settings for a subscription.
		/// Recommendations_ResetAllFilters subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task Recommendations_ResetAllFiltersAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/recommendations/reset&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables the specified rule so it will not apply to a subscription in the future.
		/// Description for Disables the specified rule so it will not apply to a subscription in the future.
		/// Recommendations_DisableRecommendationForSubscription subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable
		/// </summary>
		/// <param name="name">Rule name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully disabled recommendations.</returns>
		public async Task Recommendations_DisableRecommendationForSubscriptionAsync(string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/recommendations/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/disable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get past recommendations for an app, optionally specified by the time range.
		/// Description for Get past recommendations for an app, optionally specified by the time range.
		/// Recommendations_ListHistoryForHostingEnvironment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendationHistory
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="hostingEnvironmentName">Name of the hosting environment.</param>
		/// <param name="expiredOnly">Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.</param>
		/// <param name="filter">Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RecommendationCollection> Recommendations_ListHistoryForHostingEnvironmentAsync(string resourceGroupName, string hostingEnvironmentName, bool expiredOnly, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/hostingEnvironments/"+ (hostingEnvironmentName==null? "" : System.Uri.EscapeDataString(hostingEnvironmentName))+"/recommendationHistory&expiredOnly="+expiredOnly+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all recommendations for an app.
		/// Description for Get all recommendations for an app.
		/// Recommendations_ListRecommendedRulesForHostingEnvironment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="hostingEnvironmentName">Name of the app.</param>
		/// <param name="featured">Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.</param>
		/// <param name="filter">Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RecommendationCollection> Recommendations_ListRecommendedRulesForHostingEnvironmentAsync(string resourceGroupName, string hostingEnvironmentName, bool featured, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/hostingEnvironments/"+ (hostingEnvironmentName==null? "" : System.Uri.EscapeDataString(hostingEnvironmentName))+"/recommendations&featured="+featured+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable all recommendations for an app.
		/// Description for Disable all recommendations for an app.
		/// Recommendations_DisableAllForHostingEnvironment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/disable
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="environmentName">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task Recommendations_DisableAllForHostingEnvironmentAsync(string resourceGroupName, string environmentName, string hostingEnvironmentName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/hostingEnvironments/"+ (hostingEnvironmentName==null? "" : System.Uri.EscapeDataString(hostingEnvironmentName))+"/recommendations/disable&environmentName=" + (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset all recommendation opt-out settings for an app.
		/// Description for Reset all recommendation opt-out settings for an app.
		/// Recommendations_ResetAllFiltersForHostingEnvironment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/reset
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="environmentName">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task Recommendations_ResetAllFiltersForHostingEnvironmentAsync(string resourceGroupName, string environmentName, string hostingEnvironmentName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/hostingEnvironments/"+ (hostingEnvironmentName==null? "" : System.Uri.EscapeDataString(hostingEnvironmentName))+"/recommendations/reset&environmentName=" + (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a recommendation rule for an app.
		/// Description for Get a recommendation rule for an app.
		/// Recommendations_GetRuleDetailsByHostingEnvironment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="hostingEnvironmentName">Name of the hosting environment.</param>
		/// <param name="name">Name of the recommendation.</param>
		/// <param name="updateSeen">Specify <code>true</code> to update the last-seen timestamp of the recommendation object.</param>
		/// <param name="recommendationId">The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RecommendationRule> Recommendations_GetRuleDetailsByHostingEnvironmentAsync(string resourceGroupName, string hostingEnvironmentName, string name, bool updateSeen, string recommendationId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/hostingEnvironments/"+ (hostingEnvironmentName==null? "" : System.Uri.EscapeDataString(hostingEnvironmentName))+"/recommendations/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateSeen="+updateSeen+"&recommendationId=" + (recommendationId==null? "" : System.Uri.EscapeDataString(recommendationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables the specific rule for a web site permanently.
		/// Description for Disables the specific rule for a web site permanently.
		/// Recommendations_DisableRecommendationForHostingEnvironment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}/disable
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="environmentName">Site name</param>
		/// <param name="name">Rule name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully disabled recommendations.</returns>
		public async Task Recommendations_DisableRecommendationForHostingEnvironmentAsync(string resourceGroupName, string environmentName, string name, string hostingEnvironmentName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/hostingEnvironments/"+ (hostingEnvironmentName==null? "" : System.Uri.EscapeDataString(hostingEnvironmentName))+"/recommendations/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/disable&environmentName=" + (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get past recommendations for an app, optionally specified by the time range.
		/// Description for Get past recommendations for an app, optionally specified by the time range.
		/// Recommendations_ListHistoryForWebApp subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Name of the app.</param>
		/// <param name="expiredOnly">Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.</param>
		/// <param name="filter">Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RecommendationCollection> Recommendations_ListHistoryForWebAppAsync(string resourceGroupName, string siteName, bool expiredOnly, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/recommendationHistory&expiredOnly="+expiredOnly+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all recommendations for an app.
		/// Description for Get all recommendations for an app.
		/// Recommendations_ListRecommendedRulesForWebApp subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Name of the app.</param>
		/// <param name="featured">Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.</param>
		/// <param name="filter">Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RecommendationCollection> Recommendations_ListRecommendedRulesForWebAppAsync(string resourceGroupName, string siteName, bool featured, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/recommendations&featured="+featured+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable all recommendations for an app.
		/// Description for Disable all recommendations for an app.
		/// Recommendations_DisableAllForWebApp subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/disable
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task Recommendations_DisableAllForWebAppAsync(string resourceGroupName, string siteName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/recommendations/disable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset all recommendation opt-out settings for an app.
		/// Description for Reset all recommendation opt-out settings for an app.
		/// Recommendations_ResetAllFiltersForWebApp subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/reset
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Name of the app.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task Recommendations_ResetAllFiltersForWebAppAsync(string resourceGroupName, string siteName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/recommendations/reset&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a recommendation rule for an app.
		/// Description for Get a recommendation rule for an app.
		/// Recommendations_GetRuleDetailsByWebApp subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Name of the app.</param>
		/// <param name="name">Name of the recommendation.</param>
		/// <param name="updateSeen">Specify <code>true</code> to update the last-seen timestamp of the recommendation object.</param>
		/// <param name="recommendationId">The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<RecommendationRule> Recommendations_GetRuleDetailsByWebAppAsync(string resourceGroupName, string siteName, string name, bool updateSeen, string recommendationId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/recommendations/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateSeen="+updateSeen+"&recommendationId=" + (recommendationId==null? "" : System.Uri.EscapeDataString(recommendationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables the specific rule for a web site permanently.
		/// Description for Disables the specific rule for a web site permanently.
		/// Recommendations_DisableRecommendationForSite subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}/disable
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site name</param>
		/// <param name="name">Rule name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully disabled recommendations.</returns>
		public async Task Recommendations_DisableRecommendationForSiteAsync(string resourceGroupName, string siteName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/recommendations/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/disable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
