//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Class representing Abnormal Time Period identified in diagnosis
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AbnormalTimePeriod
	{
		
		/// <summary>
		/// End time of the downtime
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// List of Possible Cause of downtime
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public DetectorAbnormalTimePeriod[] Events { get; set; }
		
		/// <summary>
		/// List of proposed solutions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solutions")]
		public Solution[] Solutions { get; set; }
		
		/// <summary>
		/// Start time of the downtime
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Class representing Abnormal Time Period detected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetectorAbnormalTimePeriod
	{
		
		/// <summary>
		/// End time of the correlated event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Message describing the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Downtime metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metaData")]
		public string[] MetaData { get; set; }
		
		/// <summary>
		/// Represents the rank of the Detector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Double> Priority { get; set; }
		
		/// <summary>
		/// List of proposed solutions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="solutions")]
		public Solution[] Solutions { get; set; }
		
		/// <summary>
		/// Represents the name of the Detector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Start time of the correlated event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Represents the type of the Detector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DetectorAbnormalTimePeriodType> Type { get; set; }
	}
	
	/// <summary>
	/// Class Representing Solution for problems detected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Solution
	{
		
		/// <summary>
		/// Solution Data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
		
		/// <summary>
		/// Description of the solution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display Name of the solution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Solution Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		/// <summary>
		/// Solution Metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string[] Metadata { get; set; }
		
		/// <summary>
		/// Order of the solution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Double> Order { get; set; }
		
		/// <summary>
		/// Type of Solution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SolutionType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SolutionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QuickSolution = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeepInvestigation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BestPractices = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DetectorAbnormalTimePeriodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceIncident = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AppDeployment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AppCrash = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RuntimeIssueDetected = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AseDeployment = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserIssue = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlatformIssue = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 7,
	}
	
	/// <summary>
	/// Class Representing Detector Evidence used for analysis
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnalysisData
	{
		
		/// <summary>
		/// Additional Source Data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
		
		/// <summary>
		/// Class representing detector definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectorDefinition")]
		public DetectorDefinition DetectorDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detectorMetaData")]
		public ResponseMetaData DetectorMetaData { get; set; }
		
		/// <summary>
		/// Source Metrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public DiagnosticMetricSet[] Metrics { get; set; }
		
		/// <summary>
		/// Name of the Detector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	/// <summary>
	/// Class representing detector definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetectorDefinition
	{
		
		/// <summary>
		/// DetectorDefinition resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResponseMetaData
	{
		
		/// <summary>
		/// Class representing data source used by the detectors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public DataSource DataSource { get; set; }
	}
	
	/// <summary>
	/// Class representing data source used by the detectors
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataSource
	{
		
		/// <summary>
		/// Datasource Uri Links
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceUri")]
		public DataSourceDataSourceUri[] DataSourceDataSourceUri { get; set; }
		
		/// <summary>
		/// Instructions if any for the data source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instructions")]
		public string[] Instructions { get; set; }
	}
	
	public class DataSourceDataSourceUri
	{
		
		/// <summary>
		/// Pair name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pair value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Class representing Diagnostic Metric information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticMetricSet
	{
		
		/// <summary>
		/// End time of the period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Name of the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start time of the period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Presented time grain. Supported grains at the moment are PT1M, PT1H, P1D
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
		
		/// <summary>
		/// Metric's unit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Collection of metric values for the selected period based on the {Microsoft.Web.Hosting.Administration.DiagnosticMetricSet.TimeGrain}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public DiagnosticMetricSample[] Values { get; set; }
	}
	
	/// <summary>
	/// Class representing Diagnostic Metric
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticMetricSample
	{
		
		/// <summary>
		/// Whether the values are aggregates across all workers or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAggregated")]
		public System.Nullable<System.Boolean> IsAggregated { get; set; }
		
		/// <summary>
		/// Maximum of the metric sampled during the time period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Double> Maximum { get; set; }
		
		/// <summary>
		/// Minimum of the metric sampled during the time period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Double> Minimum { get; set; }
		
		/// <summary>
		/// Role Instance. Null if this counter is not per instance 
		///This is returned and should be whichever instance name we desire to be returned
		///i.e. CPU and Memory return RDWORKERNAME (LargeDed..._IN_0) 
		///where RDWORKERNAME is Machine name below and RoleInstance name in parenthesis
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleInstance")]
		public string RoleInstance { get; set; }
		
		/// <summary>
		/// Time at which metric is measured
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// Total value of the metric. If multiple measurements are made this will have sum of all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	/// <summary>
	/// Definition of Analysis
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnalysisDefinition
	{
		
		/// <summary>
		/// AnalysisDefinition resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Column definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataTableResponseColumn
	{
		
		/// <summary>
		/// Name of the column
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnName")]
		public string ColumnName { get; set; }
		
		/// <summary>
		/// Column Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnType")]
		public string ColumnType { get; set; }
		
		/// <summary>
		/// Data type which looks like 'String' or 'Int32'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
	}
	
	/// <summary>
	/// Data Table which defines columns and raw row values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataTableResponseObject
	{
		
		/// <summary>
		/// List of columns with data types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public DataTableResponseColumn[] Columns { get; set; }
		
		/// <summary>
		/// Raw row values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public string[] Rows { get; set; }
		
		/// <summary>
		/// Name of the table
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// Definition of Detector
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetectorInfo
	{
		
		/// <summary>
		/// Support Category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Short description of the detector and its purpose
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Support Sub Category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
		
		/// <summary>
		/// Support Topic Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportTopicId")]
		public string SupportTopicId { get; set; }
	}
	
	/// <summary>
	/// Class representing Response from Detector
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetectorResponse
	{
		
		/// <summary>
		/// DetectorResponse resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of detector responses
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetectorResponseCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DetectorResponse[] Value { get; set; }
	}
	
	/// <summary>
	/// Class representing a diagnostic analysis done on an application
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticAnalysis
	{
		
		/// <summary>
		/// DiagnosticAnalysis resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Diagnostic Analyses
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticAnalysisCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AnalysisDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Class representing detector definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticCategory
	{
		
		/// <summary>
		/// DiagnosticCategory resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Diagnostic Categories
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticCategoryCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DiagnosticCategory[] Value { get; set; }
	}
	
	/// <summary>
	/// Set of data with rendering instructions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticData
	{
		
		/// <summary>
		/// Instructions for rendering the data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderingProperties")]
		public Rendering RenderingProperties { get; set; }
		
		/// <summary>
		/// Data Table which defines columns and raw row values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public DataTableResponseObject Table { get; set; }
	}
	
	/// <summary>
	/// Instructions for rendering the data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Rendering
	{
		
		/// <summary>
		/// Description of the data that will help it be interpreted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Title of data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Rendering Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RenderingType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RenderingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoGraph = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Table = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeSeries = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeSeriesPerInstance = 3,
	}
	
	/// <summary>
	/// Collection of Diagnostic Detectors
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticDetectorCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DetectorDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Class representing Response from Diagnostic Detectors
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticDetectorResponse
	{
		
		/// <summary>
		/// DiagnosticDetectorResponse resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Hosting Environment Detector Responses
		/// Description for List Hosting Environment Detector Responses
		/// Diagnostics_ListHostingEnvironmentDetectorResponses subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">Site Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DetectorResponseCollection> Diagnostics_ListHostingEnvironmentDetectorResponsesAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/hostingEnvironments/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/detectors&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectorResponseCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Hosting Environment Detector Response
		/// Description for Get Hosting Environment Detector Response
		/// Diagnostics_GetHostingEnvironmentDetectorResponse subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="name">App Service Environment Name</param>
		/// <param name="detectorName">Detector Resource Name</param>
		/// <param name="startTime">Start Time</param>
		/// <param name="endTime">End Time</param>
		/// <param name="timeGrain">Time Grain</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DetectorResponse> Diagnostics_GetHostingEnvironmentDetectorResponseAsync(string resourceGroupName, string name, string detectorName, System.DateTimeOffset startTime, System.DateTimeOffset endTime, string timeGrain, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/hostingEnvironments/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/detectors/"+ (detectorName==null? "" : System.Uri.EscapeDataString(detectorName))+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&timeGrain=" + (timeGrain==null? "" : System.Uri.EscapeDataString(timeGrain))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectorResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Site Detector Responses
		/// Description for List Site Detector Responses
		/// Diagnostics_ListSiteDetectorResponses subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DetectorResponseCollection> Diagnostics_ListSiteDetectorResponsesAsync(string resourceGroupName, string siteName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/detectors&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectorResponseCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get site detector response
		/// Description for Get site detector response
		/// Diagnostics_GetSiteDetectorResponse subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="detectorName">Detector Resource Name</param>
		/// <param name="startTime">Start Time</param>
		/// <param name="endTime">End Time</param>
		/// <param name="timeGrain">Time Grain</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DetectorResponse> Diagnostics_GetSiteDetectorResponseAsync(string resourceGroupName, string siteName, string detectorName, System.DateTimeOffset startTime, System.DateTimeOffset endTime, string timeGrain, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/detectors/"+ (detectorName==null? "" : System.Uri.EscapeDataString(detectorName))+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&timeGrain=" + (timeGrain==null? "" : System.Uri.EscapeDataString(timeGrain))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectorResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Diagnostics Categories
		/// Description for Get Diagnostics Categories
		/// Diagnostics_ListSiteDiagnosticCategories subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticCategoryCollection> Diagnostics_ListSiteDiagnosticCategoriesAsync(string resourceGroupName, string siteName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/diagnostics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticCategoryCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Diagnostics Category
		/// Description for Get Diagnostics Category
		/// Diagnostics_GetSiteDiagnosticCategory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticCategory> Diagnostics_GetSiteDiagnosticCategoryAsync(string resourceGroupName, string siteName, string diagnosticCategory, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticCategory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Site Analyses
		/// Description for Get Site Analyses
		/// Diagnostics_ListSiteAnalyses subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticAnalysisCollection> Diagnostics_ListSiteAnalysesAsync(string resourceGroupName, string siteName, string diagnosticCategory, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/analyses&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticAnalysisCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Site Analysis
		/// Description for Get Site Analysis
		/// Diagnostics_GetSiteAnalysis subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="analysisName">Analysis Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AnalysisDefinition> Diagnostics_GetSiteAnalysisAsync(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/analyses/"+ (analysisName==null? "" : System.Uri.EscapeDataString(analysisName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AnalysisDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute Analysis
		/// Description for Execute Analysis
		/// Diagnostics_ExecuteSiteAnalysis subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Category Name</param>
		/// <param name="analysisName">Analysis Resource Name</param>
		/// <param name="startTime">Start Time</param>
		/// <param name="endTime">End Time</param>
		/// <param name="timeGrain">Time Grain</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticAnalysis> Diagnostics_ExecuteSiteAnalysisAsync(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, System.DateTimeOffset startTime, System.DateTimeOffset endTime, string timeGrain, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/analyses/"+ (analysisName==null? "" : System.Uri.EscapeDataString(analysisName))+"/execute&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&timeGrain=" + (timeGrain==null? "" : System.Uri.EscapeDataString(timeGrain))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticAnalysis>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Detectors
		/// Description for Get Detectors
		/// Diagnostics_ListSiteDetectors subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticDetectorCollection> Diagnostics_ListSiteDetectorsAsync(string resourceGroupName, string siteName, string diagnosticCategory, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/detectors&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticDetectorCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Detector
		/// Description for Get Detector
		/// Diagnostics_GetSiteDetector subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="detectorName">Detector Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DetectorDefinition> Diagnostics_GetSiteDetectorAsync(string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/detectors/"+ (detectorName==null? "" : System.Uri.EscapeDataString(detectorName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectorDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute Detector
		/// Description for Execute Detector
		/// Diagnostics_ExecuteSiteDetector subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="detectorName">Detector Resource Name</param>
		/// <param name="diagnosticCategory">Category Name</param>
		/// <param name="startTime">Start Time</param>
		/// <param name="endTime">End Time</param>
		/// <param name="timeGrain">Time Grain</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticDetectorResponse> Diagnostics_ExecuteSiteDetectorAsync(string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, System.DateTimeOffset startTime, System.DateTimeOffset endTime, string timeGrain, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/detectors/"+ (detectorName==null? "" : System.Uri.EscapeDataString(detectorName))+"/execute&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&timeGrain=" + (timeGrain==null? "" : System.Uri.EscapeDataString(timeGrain))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticDetectorResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Site Detector Responses
		/// Description for List Site Detector Responses
		/// Diagnostics_ListSiteDetectorResponsesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="slot">Slot Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DetectorResponseCollection> Diagnostics_ListSiteDetectorResponsesSlotAsync(string resourceGroupName, string siteName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/detectors&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectorResponseCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get site detector response
		/// Description for Get site detector response
		/// Diagnostics_GetSiteDetectorResponseSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="detectorName">Detector Resource Name</param>
		/// <param name="slot">Slot Name</param>
		/// <param name="startTime">Start Time</param>
		/// <param name="endTime">End Time</param>
		/// <param name="timeGrain">Time Grain</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DetectorResponse> Diagnostics_GetSiteDetectorResponseSlotAsync(string resourceGroupName, string siteName, string detectorName, string slot, System.DateTimeOffset startTime, System.DateTimeOffset endTime, string timeGrain, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/detectors/"+ (detectorName==null? "" : System.Uri.EscapeDataString(detectorName))+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&timeGrain=" + (timeGrain==null? "" : System.Uri.EscapeDataString(timeGrain))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectorResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Diagnostics Categories
		/// Description for Get Diagnostics Categories
		/// Diagnostics_ListSiteDiagnosticCategoriesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="slot">Slot Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticCategoryCollection> Diagnostics_ListSiteDiagnosticCategoriesSlotAsync(string resourceGroupName, string siteName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/diagnostics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticCategoryCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Diagnostics Category
		/// Description for Get Diagnostics Category
		/// Diagnostics_GetSiteDiagnosticCategorySlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="slot">Slot Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticCategory> Diagnostics_GetSiteDiagnosticCategorySlotAsync(string resourceGroupName, string siteName, string diagnosticCategory, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticCategory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Site Analyses
		/// Description for Get Site Analyses
		/// Diagnostics_ListSiteAnalysesSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="slot">Slot Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticAnalysisCollection> Diagnostics_ListSiteAnalysesSlotAsync(string resourceGroupName, string siteName, string diagnosticCategory, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/analyses&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticAnalysisCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Site Analysis
		/// Description for Get Site Analysis
		/// Diagnostics_GetSiteAnalysisSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="analysisName">Analysis Name</param>
		/// <param name="slot">Slot - optional</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AnalysisDefinition> Diagnostics_GetSiteAnalysisSlotAsync(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/analyses/"+ (analysisName==null? "" : System.Uri.EscapeDataString(analysisName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AnalysisDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute Analysis
		/// Description for Execute Analysis
		/// Diagnostics_ExecuteSiteAnalysisSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Category Name</param>
		/// <param name="analysisName">Analysis Resource Name</param>
		/// <param name="slot">Slot Name</param>
		/// <param name="startTime">Start Time</param>
		/// <param name="endTime">End Time</param>
		/// <param name="timeGrain">Time Grain</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticAnalysis> Diagnostics_ExecuteSiteAnalysisSlotAsync(string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot, System.DateTimeOffset startTime, System.DateTimeOffset endTime, string timeGrain, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/analyses/"+ (analysisName==null? "" : System.Uri.EscapeDataString(analysisName))+"/execute&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&timeGrain=" + (timeGrain==null? "" : System.Uri.EscapeDataString(timeGrain))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticAnalysis>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Detectors
		/// Description for Get Detectors
		/// Diagnostics_ListSiteDetectorsSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="slot">Slot Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticDetectorCollection> Diagnostics_ListSiteDetectorsSlotAsync(string resourceGroupName, string siteName, string diagnosticCategory, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/detectors&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticDetectorCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Detector
		/// Description for Get Detector
		/// Diagnostics_GetSiteDetectorSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="diagnosticCategory">Diagnostic Category</param>
		/// <param name="detectorName">Detector Name</param>
		/// <param name="slot">Slot Name</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DetectorDefinition> Diagnostics_GetSiteDetectorSlotAsync(string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, string slot, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/detectors/"+ (detectorName==null? "" : System.Uri.EscapeDataString(detectorName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DetectorDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute Detector
		/// Description for Execute Detector
		/// Diagnostics_ExecuteSiteDetectorSlot subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="siteName">Site Name</param>
		/// <param name="detectorName">Detector Resource Name</param>
		/// <param name="diagnosticCategory">Category Name</param>
		/// <param name="slot">Slot Name</param>
		/// <param name="startTime">Start Time</param>
		/// <param name="endTime">End Time</param>
		/// <param name="timeGrain">Time Grain</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DiagnosticDetectorResponse> Diagnostics_ExecuteSiteDetectorSlotAsync(string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, string slot, System.DateTimeOffset startTime, System.DateTimeOffset endTime, string timeGrain, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/slots/"+ (slot==null? "" : System.Uri.EscapeDataString(slot))+"/diagnostics/"+ (diagnosticCategory==null? "" : System.Uri.EscapeDataString(diagnosticCategory))+"/detectors/"+ (detectorName==null? "" : System.Uri.EscapeDataString(detectorName))+"/execute&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&timeGrain=" + (timeGrain==null? "" : System.Uri.EscapeDataString(timeGrain))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiagnosticDetectorResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
