//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiStatus")]
		public string ApiStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiStatusMessage")]
		public string ApiStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DateRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.DateTimeOffset> From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.DateTimeOffset> To { get; set; }
	}
	
	/// <summary>
	/// Used to return an error to the client
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// The error object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public PersonalizerError Error { get; set; }
	}
	
	/// <summary>
	/// The error object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PersonalizerError
	{
		
		/// <summary>
		/// High level error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public PersonalizerErrorCode Code { get; set; }
		
		/// <summary>
		/// An array of details about specific errors that led to this reported error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public PersonalizerError[] Details { get; set; }
		
		/// <summary>
		/// An object containing more specific information than the parent object about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InternalError InnerError { get; set; }
		
		/// <summary>
		/// A message explaining the error reported by the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Error source element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PersonalizerErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceNotFound = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalServerError = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidServiceConfiguration = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidPolicyConfiguration = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidPolicyContract = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidEvaluationContract = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidRewardRequest = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidEventIdToActivate = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidRankRequest = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidExportLogsRequest = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidContainer = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FrontEndNotFound = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EvaluationNotFound = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LogsPropertiesNotFound = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RankNullResponse = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateConfigurationFailed = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModelResetFailed = 17,
	}
	
	/// <summary>
	/// An object containing more specific information than the parent object about the error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InternalError
	{
		
		/// <summary>
		/// Detailed error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// An object containing more specific information than the parent object about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innererror")]
		public InternalError Innererror { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Evaluation
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featureImportance")]
		public string[] FeatureImportance { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyResults")]
		public PolicyResult[] PolicyResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<EvaluationStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string Arguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public PolicyResultSummary[] Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalSummary")]
		public PolicyResultSummary TotalSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyResultSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregateTimeWindow")]
		public string AggregateTimeWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confidenceInterval")]
		public System.Nullable<System.Single> ConfidenceInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipsEstimatorDenominator")]
		public System.Nullable<System.Single> IpsEstimatorDenominator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipsEstimatorNumerator")]
		public System.Nullable<System.Single> IpsEstimatorNumerator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonZeroProbability")]
		public System.Nullable<System.Single> NonZeroProbability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snipsEstimatorDenominator")]
		public System.Nullable<System.Single> SnipsEstimatorDenominator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sumOfSquares")]
		public System.Nullable<System.Single> SumOfSquares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EvaluationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notSubmitted = 3,
	}
	
	/// <summary>
	/// A counterfactual evaluation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EvaluationContract
	{
		
		/// <summary>
		/// True if the evaluation should explore for a more optimal Learning settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableOfflineExperimentation")]
		public System.Nullable<System.Boolean> EnableOfflineExperimentation { get; set; }
		
		/// <summary>
		/// The end time of the evaluation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// The name of the evaluation.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional Learning settings to evaluate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public PolicyContract[] Policies { get; set; }
		
		/// <summary>
		/// The start time of the evaluation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	/// <summary>
	/// Learning settings specifying how to train the model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyContract
	{
		
		/// <summary>
		/// Arguments of the Learning settings.
		/// Required
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Arguments { get; set; }
		
		/// <summary>
		/// Name of the Learning settings.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogsProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
	}
	
	/// <summary>
	/// Request a set of actions to be ranked by the Personalizer service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RankRequest
	{
		
		/// <summary>
		/// The set of actions the Personalizer service can pick from.
		///The set should not contain more than 50 actions.
		///The order of the actions does not affect the rank result but the order
		///should match the sequence your application would have used to display them.
		///The first item in the array will be used as Baseline item in Offline evaluations.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public RankableAction[] Actions { get; set; }
		
		/// <summary>
		/// Features of the context used for Personalizer as a
		///dictionary of dictionaries. This depends on the application, and
		///typically includes features about the current user, their
		///device, profile information, aggregated data about time and date, etc.
		///Features should not include personally identifiable information (PII),
		///unique UserIDs, or precise timestamps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextFeatures")]
		public string[] ContextFeatures { get; set; }
		
		/// <summary>
		/// Send false if it is certain the rewardActionId in rank results will be shown to the user, therefore
		///Personalizer will expect a Reward call, otherwise it will assign the default
		///Reward to the event. Send true if it is possible the user will not see the
		///action specified in the rank results, because the page is rendering later, or the Rank results may be
		///overridden by code further downstream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deferActivation")]
		public System.Nullable<System.Boolean> DeferActivation { get; set; }
		
		/// <summary>
		/// Optionally pass an eventId that uniquely identifies this Rank event.
		///If null, the service generates a unique eventId. The eventId will be used for
		///associating this request with its reward, as well as seeding the pseudo-random
		///generator when making a Personalizer call.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string EventId { get; set; }
		
		/// <summary>
		/// The set of action ids to exclude from ranking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedActions")]
		public string[] ExcludedActions { get; set; }
	}
	
	/// <summary>
	/// An action with it's associated features used for ranking.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RankableAction
	{
		
		/// <summary>
		/// List of dictionaries containing features.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="features")]
		public string[] Features { get; set; }
		
		/// <summary>
		/// Id of the action.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Returns which action to use as rewardActionId, and additional information about each action as a result of a Rank request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RankResponse
	{
		
		/// <summary>
		/// The eventId for the round trip from request to response.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string EventId { get; set; }
		
		/// <summary>
		/// The calculated ranking for the current request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ranking")]
		public RankedAction[] Ranking { get; set; }
		
		/// <summary>
		/// The action chosen by the Personalizer service. This is the action your application should display, and for which to report the reward. This might not be the
		///first found in 'ranking' if an action in the request in first position was part of the excluded ids.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardActionId")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string RewardActionId { get; set; }
	}
	
	/// <summary>
	/// A ranked action with its resulting probability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RankedAction
	{
		
		/// <summary>
		/// Id of the action
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
		
		/// <summary>
		/// Probability of the action
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probability")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Single> Probability { get; set; }
	}
	
	/// <summary>
	/// Reward given to a rank response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RewardRequest
	{
		
		/// <summary>
		/// Reward to be assigned to an action. Value should be between -1 and 1 inclusive.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public float Value { get; set; }
	}
	
	/// <summary>
	/// The configuration of the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceConfiguration
	{
		
		/// <summary>
		/// The reward given if a reward is not received within the specified wait time.
		/// Required
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultReward")]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public float DefaultReward { get; set; }
		
		/// <summary>
		/// The percentage of rank responses that will use exploration.
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="explorationPercentage")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public float ExplorationPercentage { get; set; }
		
		/// <summary>
		/// Flag indicates whether log mirroring is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logMirrorEnabled")]
		public System.Nullable<System.Boolean> LogMirrorEnabled { get; set; }
		
		/// <summary>
		/// Azure storage account container SAS URI for log mirroring.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logMirrorSasUri")]
		public string LogMirrorSasUri { get; set; }
		
		/// <summary>
		/// Number of days historical logs are to be maintained. -1 implies the logs will never be deleted.
		/// Required
		/// Minimum: -1
		/// Maximum: 2147483647
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logRetentionDays")]
		[System.ComponentModel.DataAnnotations.Range(-1, 2147483647)]
		public int LogRetentionDays { get; set; }
		
		/// <summary>
		/// Personalizer will start using the most updated trained model for online ranks automatically every specified time period.
		///For example, PT5M (5 mins). For information about the time format,
		///see http://en.wikipedia.org/wiki/ISO_8601#Durations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modelExportFrequency")]
		public string ModelExportFrequency { get; set; }
		
		/// <summary>
		/// The function used to process rewards, if multiple reward scores are received before rewardWaitTime is over.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rewardAggregation")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string RewardAggregation { get; set; }
		
		/// <summary>
		/// The time span waited until a request is marked with the default reward.
		///For example, PT5M (5 mins). For information about the time format,
		///see http://en.wikipedia.org/wiki/ISO_8601#Durations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rewardWaitTime")]
		public string RewardWaitTime { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Policy.
		/// Get the Learning settings currently used by the Personalizer service.
		/// Policy_Get configurations/policy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PolicyContract> Policy_GetAsync()
		{
			var requestUri = "configurations/policy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PolicyContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Policy.
		/// Update the Learning settings that the Personalizer service will use to train models.
		/// Policy_Update configurations/policy
		/// </summary>
		/// <param name="requestBody">The Learning settings.</param>
		/// <returns>Success</returns>
		public async Task<PolicyContract> Policy_UpdateAsync(PolicyContract requestBody)
		{
			var requestUri = "configurations/policy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PolicyContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset Policy.
		/// Resets the Learning settings of the Personalizer service to default.
		/// Policy_Reset configurations/policy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PolicyContract> Policy_ResetAsync()
		{
			var requestUri = "configurations/policy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PolicyContract>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Service Configuration.
		/// Get the Personalizer service configuration.
		/// ServiceConfiguration_Get configurations/service
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceConfiguration> ServiceConfiguration_GetAsync()
		{
			var requestUri = "configurations/service";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Service Configuration.
		/// Update the Personalizer service configuration.
		/// ServiceConfiguration_Update configurations/service
		/// </summary>
		/// <param name="requestBody">The personalizer service configuration.</param>
		/// <returns>Success</returns>
		public async Task<ServiceConfiguration> ServiceConfiguration_UpdateAsync(ServiceConfiguration requestBody)
		{
			var requestUri = "configurations/service";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Evaluations.
		/// List all the submitted evaluations.
		/// Evaluations_List evaluations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Evaluation[]> Evaluations_ListAsync()
		{
			var requestUri = "evaluations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Evaluation[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Evaluation.
		/// Submit a new evaluation job.
		/// Evaluations_Create evaluations
		/// </summary>
		/// <param name="requestBody">The evaluation job definition.</param>
		public async Task Evaluations_CreateAsync(EvaluationContract requestBody)
		{
			var requestUri = "evaluations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Evaluation.
		/// Get the evaluation associated with the Id.
		/// Evaluations_Get evaluations/{evaluationId}
		/// </summary>
		/// <param name="evaluationId">Id of the evaluation.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<Evaluation> Evaluations_GetAsync(string evaluationId)
		{
			var requestUri = "evaluations/"+ (evaluationId==null? "" : System.Uri.EscapeDataString(evaluationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Evaluation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Evaluation.
		/// Delete the evaluation associated with the Id.
		/// Evaluations_Delete evaluations/{evaluationId}
		/// </summary>
		/// <param name="evaluationId">Id of the evaluation to delete.
		/// Max length: 256
		// </param>
		public async Task Evaluations_DeleteAsync(string evaluationId)
		{
			var requestUri = "evaluations/"+ (evaluationId==null? "" : System.Uri.EscapeDataString(evaluationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate Event.
		/// Report that the specified event was actually displayed to the user and a reward should be expected for it
		/// Events_Activate events/{eventId}/activate
		/// </summary>
		/// <param name="eventId">The event ID this activation applies to.
		/// Max length: 256
		// </param>
		public async Task Events_ActivateAsync(string eventId)
		{
			var requestUri = "events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post Reward.
		/// Report reward that resulted from using the action specified in rewardActionId for the specified event.
		/// Events_Reward events/{eventId}/reward
		/// </summary>
		/// <param name="eventId">The event id this reward applies to.
		/// Max length: 256
		// </param>
		/// <param name="requestBody">The reward should be a floating point number, typically between 0 and 1.</param>
		public async Task Events_RewardAsync(string eventId, RewardRequest requestBody)
		{
			var requestUri = "events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/reward";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes Logs.
		/// Delete all generated logs.
		/// Log_Delete logs
		/// </summary>
		public async Task Log_DeleteAsync()
		{
			var requestUri = "logs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Log Properties.
		/// Get properties of generated logs.
		/// Log_GetProperties logs/properties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LogsProperties> Log_GetPropertiesAsync()
		{
			var requestUri = "logs/properties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LogsProperties>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Model.
		/// Get the model file generated by Personalizer service.
		/// Model_Get model
		/// </summary>
		/// <returns>Success</returns>
		public async Task Model_GetAsync()
		{
			var requestUri = "model";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset Model.
		/// Resets the model file generated by Personalizer service.
		/// Model_Reset model
		/// </summary>
		public async Task Model_ResetAsync()
		{
			var requestUri = "model";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Model Properties.
		/// Get properties of the model file generated by Personalizer service.
		/// Model_GetProperties model/properties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModelProperties> Model_GetPropertiesAsync()
		{
			var requestUri = "model/properties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelProperties>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post Rank.
		/// Submit a Personalizer rank request, to get which of the provided actions should be used in the provided context.
		/// Rank rank
		/// </summary>
		/// <param name="requestBody">A Personalizer request.</param>
		public async Task RankAsync(RankRequest requestBody)
		{
			var requestUri = "rank";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
