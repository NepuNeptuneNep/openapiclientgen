//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Role definition permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Permission
	{
		
		/// <summary>
		/// Allowed actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// Denied actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notActions")]
		public string[] NotActions { get; set; }
	}
	
	/// <summary>
	/// Permissions information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PermissionGetResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Permission[] Value { get; set; }
	}
	
	/// <summary>
	/// Operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProviderOperation
	{
		
		/// <summary>
		/// The operation description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The operation display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The operation origin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The operation properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	/// <summary>
	/// Provider Operations metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProviderOperationsMetadata
	{
		
		/// <summary>
		/// The provider display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The provider id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The provider name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The provider operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public ProviderOperation[] Operations { get; set; }
		
		/// <summary>
		/// The provider resource types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTypes")]
		public ResourceType[] ResourceTypes { get; set; }
		
		/// <summary>
		/// The provider type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Resource Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceType
	{
		
		/// <summary>
		/// The resource type display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The resource type name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public ProviderOperation[] Operations { get; set; }
	}
	
	/// <summary>
	/// Provider operations metadata list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProviderOperationsMetadataListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of providers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProviderOperationsMetadata[] Value { get; set; }
	}
	
	/// <summary>
	/// Role Assignments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignment
	{
		
		/// <summary>
		/// The role assignment ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The role assignment name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Role assignment properties with scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RoleAssignmentPropertiesWithScope Properties { get; set; }
		
		/// <summary>
		/// The role assignment type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Role assignment create parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignmentCreateParameters
	{
		
		/// <summary>
		/// Role assignment properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RoleAssignmentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Role Assignments filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignmentFilter
	{
		
		/// <summary>
		/// Returns role assignment of the specific principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// Role assignment list operation result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignmentListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Role assignment list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RoleAssignment[] Value { get; set; }
	}
	
	/// <summary>
	/// Role assignment properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignmentProperties
	{
		
		/// <summary>
		/// The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The role definition ID used in the role assignment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleDefinitionId")]
		public string RoleDefinitionId { get; set; }
	}
	
	/// <summary>
	/// Role assignment properties with scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleAssignmentPropertiesWithScope
	{
		
		/// <summary>
		/// The principal ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The role definition ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleDefinitionId")]
		public string RoleDefinitionId { get; set; }
		
		/// <summary>
		/// The role assignment scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
	}
	
	/// <summary>
	/// Role definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleDefinition
	{
		
		/// <summary>
		/// The role definition ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The role definition name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Role definition properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RoleDefinitionProperties Properties { get; set; }
		
		/// <summary>
		/// The role definition type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Role Definitions filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleDefinitionFilter
	{
		
		/// <summary>
		/// Returns role definition with the specific name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
	}
	
	/// <summary>
	/// Role definition list operation result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleDefinitionListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Role definition list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RoleDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Role definition properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleDefinitionProperties
	{
		
		/// <summary>
		/// Role definition assignable scopes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignableScopes")]
		public string[] AssignableScopes { get; set; }
		
		/// <summary>
		/// The role definition description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Role definition permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Permission[] Permissions { get; set; }
		
		/// <summary>
		/// The role name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		/// <summary>
		/// The role type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Elevates access for a Global Administrator.
		/// ElevateAccess_Post providers/Microsoft.Authorization/elevateAccess
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns an HttpResponseMessage with HttpStatusCode 200.</returns>
		public async Task ElevateAccess_PostAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Authorization/elevateAccess?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets provider operations metadata for all resource providers.
		/// ProviderOperationsMetadata_List providers/Microsoft.Authorization/providerOperations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="expand">Specifies whether to expand the values.</param>
		/// <returns>OK - Returns an array of the operations metadata.</returns>
		public async Task<ProviderOperationsMetadataListResult> ProviderOperationsMetadata_ListAsync(string api_version, string expand)
		{
			var requestUri = "providers/Microsoft.Authorization/providerOperations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProviderOperationsMetadataListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets provider operations metadata for the specified resource provider.
		/// ProviderOperationsMetadata_Get providers/Microsoft.Authorization/providerOperations/{resourceProviderNamespace}
		/// </summary>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="expand">Specifies whether to expand the values.</param>
		/// <returns>OK - Returns the operations metadata.</returns>
		public async Task<ProviderOperationsMetadata> ProviderOperationsMetadata_GetAsync(string resourceProviderNamespace, string api_version, string expand)
		{
			var requestUri = "providers/Microsoft.Authorization/providerOperations/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProviderOperationsMetadata>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all role assignments for the subscription.
		/// RoleAssignments_List subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleAssignments
		/// </summary>
		/// <param name="filter">The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of role assignments.</returns>
		public async Task<RoleAssignmentListResult> RoleAssignments_ListAsync(string filter, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Authorization/roleAssignments?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets role assignments for a resource group.
		/// RoleAssignments_ListForResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/roleAssignments
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="filter">The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of role assignments.</returns>
		public async Task<RoleAssignmentListResult> RoleAssignments_ListForResourceGroupAsync(string resourceGroupName, string filter, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Authorization/roleAssignments&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all permissions the caller has for a resource group.
		/// Permissions_ListForResourceGroup subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Authorization/permissions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group to get the permissions for. The name is case insensitive.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of permissions.</returns>
		public async Task<PermissionGetResult> Permissions_ListForResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Authorization/permissions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionGetResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all permissions the caller has for a resource.
		/// Permissions_ListForResource subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/permissions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the resource. The name is case insensitive.</param>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider.</param>
		/// <param name="parentResourcePath">The parent resource identity.</param>
		/// <param name="resourceType">The resource type of the resource.</param>
		/// <param name="resourceName">The name of the resource to get the permissions for.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of permissions.</returns>
		public async Task<PermissionGetResult> Permissions_ListForResourceAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"/"+ (parentResourcePath==null? "" : System.Uri.EscapeDataString(parentResourcePath))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Authorization/permissions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionGetResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets role assignments for a resource.
		/// RoleAssignments_ListForResource subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/roleAssignments
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider.</param>
		/// <param name="parentResourcePath">The parent resource identity.</param>
		/// <param name="resourceType">The resource type of the resource.</param>
		/// <param name="resourceName">The name of the resource to get role assignments for.</param>
		/// <param name="filter">The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of role assignments.</returns>
		public async Task<RoleAssignmentListResult> RoleAssignments_ListForResourceAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"/"+ (parentResourcePath==null? "" : System.Uri.EscapeDataString(parentResourcePath))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/providers/Microsoft.Authorization/roleAssignments&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a role assignment by ID.
		/// RoleAssignments_GetById {roleAssignmentId}
		/// </summary>
		/// <param name="roleAssignmentId">The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns the role assignment.</returns>
		public async Task<RoleAssignment> RoleAssignments_GetByIdAsync(string roleAssignmentId, string api_version)
		{
			var requestUri = ""+ (roleAssignmentId==null? "" : System.Uri.EscapeDataString(roleAssignmentId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a role assignment by ID.
		/// RoleAssignments_CreateById {roleAssignmentId}
		/// </summary>
		/// <param name="roleAssignmentId">The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Parameters for the role assignment.</param>
		public async Task RoleAssignments_CreateByIdAsync(string roleAssignmentId, string api_version, RoleAssignmentCreateParameters requestBody)
		{
			var requestUri = ""+ (roleAssignmentId==null? "" : System.Uri.EscapeDataString(roleAssignmentId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a role assignment.
		/// RoleAssignments_DeleteById {roleAssignmentId}
		/// </summary>
		/// <param name="roleAssignmentId">The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the role assignment.</returns>
		public async Task<RoleAssignment> RoleAssignments_DeleteByIdAsync(string roleAssignmentId, string api_version)
		{
			var requestUri = ""+ (roleAssignmentId==null? "" : System.Uri.EscapeDataString(roleAssignmentId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets role assignments for a scope.
		/// RoleAssignments_ListForScope {scope}/providers/Microsoft.Authorization/roleAssignments
		/// </summary>
		/// <param name="scope">The scope of the role assignments.</param>
		/// <param name="filter">The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns an array of role assignments.</returns>
		public async Task<RoleAssignmentListResult> RoleAssignments_ListForScopeAsync(string scope, string filter, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Authorization/roleAssignments&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specified role assignment.
		/// RoleAssignments_Get {scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}
		/// </summary>
		/// <param name="scope">The scope of the role assignment.</param>
		/// <param name="roleAssignmentName">The name of the role assignment to get.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the role assignment.</returns>
		public async Task<RoleAssignment> RoleAssignments_GetAsync(string scope, string roleAssignmentName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Authorization/roleAssignments/"+ (roleAssignmentName==null? "" : System.Uri.EscapeDataString(roleAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a role assignment.
		/// RoleAssignments_Create {scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}
		/// </summary>
		/// <param name="scope">The scope of the role assignment to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.</param>
		/// <param name="roleAssignmentName">The name of the role assignment to create. It can be any valid GUID.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Parameters for the role assignment.</param>
		public async Task RoleAssignments_CreateAsync(string scope, string roleAssignmentName, string api_version, RoleAssignmentCreateParameters requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Authorization/roleAssignments/"+ (roleAssignmentName==null? "" : System.Uri.EscapeDataString(roleAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a role assignment.
		/// RoleAssignments_Delete {scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}
		/// </summary>
		/// <param name="scope">The scope of the role assignment to delete.</param>
		/// <param name="roleAssignmentName">The name of the role assignment to delete.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the role assignment.</returns>
		public async Task<RoleAssignment> RoleAssignments_DeleteAsync(string scope, string roleAssignmentName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Authorization/roleAssignments/"+ (roleAssignmentName==null? "" : System.Uri.EscapeDataString(roleAssignmentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all role definitions that are applicable at scope and above.
		/// RoleDefinitions_List {scope}/providers/Microsoft.Authorization/roleDefinitions
		/// </summary>
		/// <param name="scope">The scope of the role definition.</param>
		/// <param name="filter">The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns an array of role definitions.</returns>
		public async Task<RoleDefinitionListResult> RoleDefinitions_ListAsync(string scope, string filter, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Authorization/roleDefinitions&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get role definition by name (GUID).
		/// RoleDefinitions_Get {scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
		/// </summary>
		/// <param name="scope">The scope of the role definition.</param>
		/// <param name="roleDefinitionId">The ID of the role definition.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the role definition.</returns>
		public async Task<RoleDefinition> RoleDefinitions_GetAsync(string scope, string roleDefinitionId, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Authorization/roleDefinitions/"+ (roleDefinitionId==null? "" : System.Uri.EscapeDataString(roleDefinitionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a role definition.
		/// RoleDefinitions_CreateOrUpdate {scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
		/// </summary>
		/// <param name="scope">The scope of the role definition.</param>
		/// <param name="roleDefinitionId">The ID of the role definition.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">The values for the role definition.</param>
		public async Task RoleDefinitions_CreateOrUpdateAsync(string scope, string roleDefinitionId, string api_version, RoleDefinition requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Authorization/roleDefinitions/"+ (roleDefinitionId==null? "" : System.Uri.EscapeDataString(roleDefinitionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a role definition.
		/// RoleDefinitions_Delete {scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
		/// </summary>
		/// <param name="scope">The scope of the role definition.</param>
		/// <param name="roleDefinitionId">The ID of the role definition to delete.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the role definition.</returns>
		public async Task<RoleDefinition> RoleDefinitions_DeleteAsync(string scope, string roleDefinitionId, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Authorization/roleDefinitions/"+ (roleDefinitionId==null? "" : System.Uri.EscapeDataString(roleDefinitionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
