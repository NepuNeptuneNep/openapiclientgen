//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes how data from an input is serialized or how data is serialized when written to an output in Avro format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvroSerialization : Serialization
	{
		
		/// <summary>
		/// The properties that are associated with the Avro serialization type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AvroSerializationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with the Avro serialization type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvroSerializationProperties
	{
	}
	
	/// <summary>
	/// The properties that are associated with a blob data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobDataSourceProperties
	{
		
		/// <summary>
		/// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateFormat")]
		public string DateFormat { get; set; }
		
		/// <summary>
		/// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathPattern")]
		public string PathPattern { get; set; }
		
		/// <summary>
		/// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccounts")]
		public StorageAccount[] StorageAccounts { get; set; }
		
		/// <summary>
		/// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public string TimeFormat { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with an Azure Storage account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccount
	{
		
		/// <summary>
		/// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountKey")]
		public string AccountKey { get; set; }
		
		/// <summary>
		/// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
	}
	
	/// <summary>
	/// Describes a blob input data source that contains reference data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobReferenceInputDataSource : ReferenceInputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with a blob input containing reference data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlobReferenceInputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with a blob input containing reference data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobReferenceInputDataSourceProperties
	{
	}
	
	/// <summary>
	/// Describes a blob input data source that contains stream data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobStreamInputDataSource : StreamInputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with a blob input containing stream data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlobStreamInputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with a blob input containing stream data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobStreamInputDataSourceProperties : BlobDataSourceProperties
	{
		
		/// <summary>
		/// The partition count of the blob input data source. Range 1 - 256.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourcePartitionCount")]
		public System.Nullable<System.Int32> SourcePartitionCount { get; set; }
	}
	
	/// <summary>
	/// Describes how data from an input is serialized or how data is serialized when written to an output in CSV format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CsvSerialization : Serialization
	{
		
		/// <summary>
		/// The properties that are associated with the CSV serialization type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CsvSerializationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with the CSV serialization type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CsvSerializationProperties
	{
		
		/// <summary>
		/// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public System.Nullable<CsvSerializationPropertiesEncoding> Encoding { get; set; }
		
		/// <summary>
		/// Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldDelimiter")]
		public string FieldDelimiter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CsvSerializationPropertiesEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTF8 = 0,
	}
	
	/// <summary>
	/// Condition applicable to the resource, or to the job overall, that warrant customer attention.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiagnosticCondition
	{
		
		/// <summary>
		/// The opaque diagnostic code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The human-readable message describing the condition in detail. Localized in the Accept-Language of the client request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the ops log around this time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="since")]
		public string Since { get; set; }
	}
	
	/// <summary>
	/// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Diagnostics
	{
		
		/// <summary>
		/// A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public DiagnosticCondition[] Conditions { get; set; }
	}
	
	/// <summary>
	/// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum Encoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTF8 = 0,
	}
	
	/// <summary>
	/// Describes the error that occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code associated with the error that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Describes the error in detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The common properties that are associated with Event Hub data sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubDataSourceProperties : ServiceBusDataSourceProperties
	{
		
		/// <summary>
		/// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventHubName")]
		public string EventHubName { get; set; }
	}
	
	/// <summary>
	/// Describes an Event Hub input data source that contains stream data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubStreamInputDataSource : StreamInputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with a Event Hub input containing stream data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EventHubStreamInputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with a Event Hub input containing stream data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubStreamInputDataSourceProperties : EventHubDataSourceProperties
	{
		
		/// <summary>
		/// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerGroupName")]
		public string ConsumerGroupName { get; set; }
	}
	
	/// <summary>
	/// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Input : SubResource
	{
		
		/// <summary>
		/// The properties that are associated with an input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public InputProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Object containing a list of inputs under a streaming job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InputListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of inputs under a streaming job. Populated by a 'List' operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Input[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with an input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InputProperties
	{
		
		/// <summary>
		/// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnostics")]
		public Diagnostics Diagnostics { get; set; }
		
		/// <summary>
		/// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Describes how data from an input is serialized or how data is serialized when written to an output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialization")]
		public Serialization Serialization { get; set; }
		
		/// <summary>
		/// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Describes an IoT Hub input data source that contains stream data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTHubStreamInputDataSource : StreamInputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with a IoT Hub input containing stream data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IoTHubStreamInputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with a IoT Hub input containing stream data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTHubStreamInputDataSourceProperties
	{
		
		/// <summary>
		/// The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerGroupName")]
		public string ConsumerGroupName { get; set; }
		
		/// <summary>
		/// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iotHubNamespace")]
		public string IotHubNamespace { get; set; }
		
		/// <summary>
		/// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAccessPolicyKey")]
		public string SharedAccessPolicyKey { get; set; }
		
		/// <summary>
		/// The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAccessPolicyName")]
		public string SharedAccessPolicyName { get; set; }
	}
	
	/// <summary>
	/// Specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JsonOutputSerializationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LineSeparated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Array = 1,
	}
	
	/// <summary>
	/// Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JsonSerialization : Serialization
	{
		
		/// <summary>
		/// The properties that are associated with the JSON serialization type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JsonSerializationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with the JSON serialization type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JsonSerializationProperties
	{
		
		/// <summary>
		/// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public CsvSerializationPropertiesEncoding Encoding { get; set; }
		
		/// <summary>
		/// Specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public JsonOutputSerializationFormat Format { get; set; }
	}
	
	/// <summary>
	/// Describes an input data source that contains reference data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReferenceInputDataSource
	{
		
		/// <summary>
		/// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with an input containing reference data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReferenceInputProperties : InputProperties
	{
		
		/// <summary>
		/// Describes an input data source that contains reference data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasource")]
		public ReferenceInputDataSource Datasource { get; set; }
	}
	
	/// <summary>
	/// Describes the status of the test operation along with error information, if applicable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceTestStatus
	{
		
		/// <summary>
		/// Describes the error that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorResponse Error { get; set; }
		
		/// <summary>
		/// The status of the test operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Describes how data from an input is serialized or how data is serialized when written to an output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Serialization
	{
		
		/// <summary>
		/// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The common properties that are associated with Service Bus data sources (Queues, Topics, Event Hubs, etc.).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusDataSourceProperties
	{
		
		/// <summary>
		/// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceBusNamespace")]
		public string ServiceBusNamespace { get; set; }
		
		/// <summary>
		/// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAccessPolicyKey")]
		public string SharedAccessPolicyKey { get; set; }
		
		/// <summary>
		/// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAccessPolicyName")]
		public string SharedAccessPolicyName { get; set; }
	}
	
	/// <summary>
	/// Describes an input data source that contains stream data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StreamInputDataSource
	{
		
		/// <summary>
		/// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with an input containing stream data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StreamInputProperties : InputProperties
	{
		
		/// <summary>
		/// Describes an input data source that contains stream data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasource")]
		public StreamInputDataSource Datasource { get; set; }
	}
	
	/// <summary>
	/// The base sub-resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the inputs under the specified streaming job.
		/// Inputs_ListByStreamingJob subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs
		/// </summary>
		/// <param name="select">The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or "*" to include all properties. By default, all properties are returned except diagnostics. Currently only accepts '*' as a valid value.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <returns>Successfully listed the inputs under the specified streaming job.</returns>
		public async Task<InputListResult> Inputs_ListByStreamingJobAsync(string select, string api_version, string subscriptionId, string resourceGroupName, string jobName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/inputs?$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InputListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about the specified input.
		/// Inputs_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="inputName">The name of the input.</param>
		/// <returns>Successfully retrieved the specified input.</returns>
		public async Task<Input> Inputs_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string inputName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/inputs/"+ (inputName==null? "" : System.Uri.EscapeDataString(inputName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Input>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an input or replaces an already existing input under an existing streaming job.
		/// Inputs_CreateOrReplace subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="inputName">The name of the input.</param>
		/// <param name="requestBody">The definition of the input that will be used to create a new input or replace the existing one under the streaming job.</param>
		/// <returns>The input was successfully created or replaced.</returns>
		public async Task<Input> Inputs_CreateOrReplaceAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string inputName, Input requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/inputs/"+ (inputName==null? "" : System.Uri.EscapeDataString(inputName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Input>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an input from the streaming job.
		/// Inputs_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="inputName">The name of the input.</param>
		/// <returns>The input was successfully deleted.</returns>
		public async Task Inputs_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string inputName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/inputs/"+ (inputName==null? "" : System.Uri.EscapeDataString(inputName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing input under an existing streaming job. This can be used to partially update (ie. update one or two properties) an input without affecting the rest the job or input definition.
		/// Inputs_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="inputName">The name of the input.</param>
		/// <param name="requestBody">An Input object. The properties specified here will overwrite the corresponding properties in the existing input (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing input will remain the same and not change as a result of this PATCH operation.</param>
		/// <returns>The input was successfully updated.</returns>
		public async Task<Input> Inputs_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string inputName, Input requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/inputs/"+ (inputName==null? "" : System.Uri.EscapeDataString(inputName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Input>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
		/// Inputs_Test subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}/test
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="inputName">The name of the input.</param>
		/// <param name="requestBody">If the input specified does not already exist, this parameter must contain the full input definition intended to be tested. If the input specified already exists, this parameter can be left null to test the existing input as is or if specified, the properties specified will overwrite the corresponding properties in the existing input (exactly like a PATCH operation) and the resulting input will be tested.</param>
		/// <returns>The test operation completed successfully.</returns>
		public async Task<ResourceTestStatus> Inputs_TestAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string inputName, Input requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/inputs/"+ (inputName==null? "" : System.Uri.EscapeDataString(inputName))+"/test?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceTestStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
