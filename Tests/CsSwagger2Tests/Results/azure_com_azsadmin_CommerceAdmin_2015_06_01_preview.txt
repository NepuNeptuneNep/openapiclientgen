//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Base Resource Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// URI of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Location where resource is location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of key value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Type of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Aggregate usage values for resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageAggregate
	{
		
		/// <summary>
		/// Properties for aggregate usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UsageAggregateModel Properties { get; set; }
	}
	
	/// <summary>
	/// Properties for aggregate usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageAggregateModel
	{
		
		/// <summary>
		/// Key-value pairs of instance details represented as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceData")]
		public string InstanceData { get; set; }
		
		/// <summary>
		/// Unique ID for the resource that was consumed (aka ResourceID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meterId")]
		public string MeterId { get; set; }
		
		/// <summary>
		/// The amount of the resource consumption that occurred in this time frame.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Subscription id of tenant using plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// UTC end time for the usage bucket to which this usage aggregate belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageEndTime")]
		public System.Nullable<System.DateTimeOffset> UsageEndTime { get; set; }
		
		/// <summary>
		/// UTC start time for the usage bucket to which this usage aggregate belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageStartTime")]
		public System.Nullable<System.DateTimeOffset> UsageStartTime { get; set; }
	}
	
	/// <summary>
	/// Holds an array of usage aggregates and the continuation token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageAggregatePage
	{
		
		/// <summary>
		/// Continuation token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of usage aggregates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public UsageAggregate[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a collection of SubscriberUsageAggregates, which are UsageAggregates from direct tenants.
		/// SubscriberUsageAggregates_List subscriptions/{subscriptionId}/providers/Microsoft.Commerce/subscriberUsageAggregates
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="reportedStartTime">The reported start time (inclusive).</param>
		/// <param name="reportedEndTime">The reported end time (exclusive).</param>
		/// <param name="aggregationGranularity">The aggregation granularity.</param>
		/// <param name="subscriberId">The tenant subscription identifier.</param>
		/// <param name="continuationToken">The continuation token.</param>
		/// <returns>OK</returns>
		public async Task<UsageAggregatePage> SubscriberUsageAggregates_ListAsync(string subscriptionId, string api_version, System.DateTimeOffset reportedStartTime, System.DateTimeOffset reportedEndTime, string aggregationGranularity, string subscriberId, string continuationToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Commerce/subscriberUsageAggregates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&reportedStartTime=" + reportedStartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&reportedEndTime=" + reportedEndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&aggregationGranularity=" + (aggregationGranularity==null? "" : System.Uri.EscapeDataString(aggregationGranularity))+"&subscriberId=" + (subscriberId==null? "" : System.Uri.EscapeDataString(subscriberId))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsageAggregatePage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
