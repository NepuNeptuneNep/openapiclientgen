//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An alert rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertRule
	{
		
		/// <summary>
		/// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public RuleAction[] Actions { get; set; }
		
		/// <summary>
		/// The condition that results in the alert rule being activated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public RuleCondition Condition { get; set; }
		
		/// <summary>
		/// the description of the alert rule that will be included in the alert email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// the flag that indicates whether the alert rule is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Last time the rule was updated in ISO8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		/// <summary>
		/// the name of the alert rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The action that is performed when the alert rule becomes active, and when an alert condition is resolved.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuleAction
	{
		
		/// <summary>
		/// specifies the type of the action. There are two types of actions: RuleEmailAction and RuleWebhookAction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="odata.type")]
		public string Odata_type { get; set; }
	}
	
	/// <summary>
	/// The condition that results in the alert rule being activated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuleCondition
	{
		
		/// <summary>
		/// The resource from which the rule collects its data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public RuleDataSource DataSource { get; set; }
		
		/// <summary>
		/// specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="odata.type")]
		public string Odata_type { get; set; }
	}
	
	/// <summary>
	/// The resource from which the rule collects its data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuleDataSource
	{
		
		/// <summary>
		/// specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="odata.type")]
		public string Odata_type { get; set; }
		
		/// <summary>
		/// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
	}
	
	/// <summary>
	/// The alert rule resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertRuleResource
	{
		
		/// <summary>
		/// An alert rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AlertRule Properties { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of alert rule resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertRuleResourceCollection
	{
		
		/// <summary>
		/// the values for the alert rule resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AlertRuleResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The alert rule object for patch operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertRuleResourcePatch
	{
		
		/// <summary>
		/// An alert rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AlertRule Properties { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
	}
	
	/// <summary>
	/// Operators allowed in the rule condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConditionOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanOrEqual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanOrEqual = 3,
	}
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A rule condition based on a certain number of locations failing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocationThresholdRuleCondition
	{
		
		/// <summary>
		/// the number of locations that must fail to activate the alert.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failedLocationCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int FailedLocationCount { get; set; }
		
		/// <summary>
		/// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowSize")]
		public string WindowSize { get; set; }
	}
	
	/// <summary>
	/// How the data that is collected should be combined over time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementEventAggregationCondition
	{
		
		/// <summary>
		/// Operators allowed in the rule condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public ConditionOperator Operator { get; set; }
		
		/// <summary>
		/// The threshold value that activates the alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Double> Threshold { get; set; }
		
		/// <summary>
		/// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowSize")]
		public string WindowSize { get; set; }
	}
	
	/// <summary>
	/// A management event rule condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementEventRuleCondition
	{
		
		/// <summary>
		/// How the data that is collected should be combined over time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregation")]
		public ManagementEventAggregationCondition Aggregation { get; set; }
	}
	
	/// <summary>
	/// An azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Specifies the action to send email when the rule condition is evaluated. The discriminator is always RuleEmailAction in this case.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuleEmailAction
	{
		
		/// <summary>
		/// the list of administrator's custom email addresses to notify of the activation of the alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customEmails")]
		public string[] CustomEmails { get; set; }
		
		/// <summary>
		/// Whether the administrators (service and co-administrators) of the service should be notified when the alert is activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendToServiceOwners")]
		public System.Nullable<System.Boolean> SendToServiceOwners { get; set; }
	}
	
	/// <summary>
	/// The claims for a rule management event data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuleManagementEventClaimsDataSource
	{
		
		/// <summary>
		/// the email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
	}
	
	/// <summary>
	/// A rule management event data source. The discriminator fields is always RuleManagementEventDataSource in this case.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuleManagementEventDataSource
	{
		
		/// <summary>
		/// The claims for a rule management event data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claims")]
		public RuleManagementEventClaimsDataSource Claims { get; set; }
		
		/// <summary>
		/// the event name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// the event source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventSource")]
		public string EventSource { get; set; }
		
		/// <summary>
		/// the level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		/// <summary>
		/// The name of the operation that should be checked for. If no name is provided, any operation will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationName")]
		public string OperationName { get; set; }
		
		/// <summary>
		/// the resource group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroupName")]
		public string ResourceGroupName { get; set; }
		
		/// <summary>
		/// the resource provider name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceProviderName")]
		public string ResourceProviderName { get; set; }
		
		/// <summary>
		/// The status of the operation that should be checked for. If no status is provided, any status will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// the substatus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subStatus")]
		public string SubStatus { get; set; }
	}
	
	/// <summary>
	/// A rule metric data source. The discriminator value is always RuleMetricDataSource in this case.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuleMetricDataSource
	{
		
		/// <summary>
		/// the name of the metric that defines what the rule monitors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
	}
	
	/// <summary>
	/// Specifies the action to post to service when the rule condition is evaluated. The discriminator is always RuleWebhookAction in this case.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuleWebhookAction
	{
		
		/// <summary>
		/// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// the service uri to Post the notification when the alert activates or resolves.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceUri")]
		public string ServiceUri { get; set; }
	}
	
	/// <summary>
	/// A rule condition based on a metric crossing a threshold.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ThresholdRuleCondition
	{
		
		/// <summary>
		/// Operators allowed in the rule condition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public ConditionOperator Operator { get; set; }
		
		/// <summary>
		/// the threshold value that activates the alert.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public double Threshold { get; set; }
		
		/// <summary>
		/// Aggregation operators allowed in a rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeAggregation")]
		public System.Nullable<ThresholdRuleConditionTimeAggregation> TimeAggregation { get; set; }
		
		/// <summary>
		/// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowSize")]
		public string WindowSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ThresholdRuleConditionTimeAggregation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last = 4,
	}
	
	/// <summary>
	/// Aggregation operators allowed in a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TimeAggregationOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List the alert rules within a subscription.
		/// AlertRules_ListBySubscription subscriptions/{subscriptionId}/providers/microsoft.insights/alertrules
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request for a list of alert rules</returns>
		public async Task<AlertRuleResourceCollection> AlertRules_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/alertrules?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRuleResourceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the alert rules within a resource group.
		/// AlertRules_ListByResourceGroup subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request for a list of alert rules</returns>
		public async Task<AlertRuleResourceCollection> AlertRules_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/alertrules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRuleResourceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an alert rule
		/// AlertRules_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request to get an alert rule</returns>
		public async Task<AlertRuleResource> AlertRules_GetAsync(string resourceGroupName, string ruleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/alertrules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRuleResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an alert rule.
		/// AlertRules_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="requestBody">The parameters of the rule to create or update.</param>
		/// <returns>Successful request to update an alert rule</returns>
		public async Task<AlertRuleResource> AlertRules_CreateOrUpdateAsync(string resourceGroupName, string ruleName, string api_version, string subscriptionId, AlertRuleResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/alertrules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRuleResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an alert rule
		/// AlertRules_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request to delete an alert rule</returns>
		public async Task AlertRules_DeleteAsync(string resourceGroupName, string ruleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/alertrules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing AlertRuleResource. To update other fields use the CreateOrUpdate method.
		/// AlertRules_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>Successful request to update an alert rule</returns>
		public async Task<AlertRuleResource> AlertRules_UpdateAsync(string subscriptionId, string resourceGroupName, string ruleName, string api_version, AlertRuleResourcePatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/alertrules/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertRuleResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
