//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// result of an image prediction request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImagePredictionResultModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Iteration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageTagPredictionModel[] Predictions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageTagPredictionModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Probability { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TagId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageUrl
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Predict an image url and saves the result
		/// PredictImageUrl {projectId}/url
		/// </summary>
		/// <param name="projectId">The project id</param>
		/// <param name="iterationId">Optional. Specifies the id of a particular iteration to evaluate against.
		///            The default iteration for the project will be used when not specified</param>
		/// <param name="application">Optional. Specifies the name of application using the endpoint</param>
		/// <param name="requestBody">An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated</param>
		/// <returns>OK</returns>
		public async Task<ImagePredictionResultModel> PredictImageUrlAsync(string projectId, string iterationId, string application, ImageUrl requestBody)
		{
			var requestUri = ""+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/url&iterationId=" + (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"&application=" + (application==null? "" : System.Uri.EscapeDataString(application));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImagePredictionResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Predict an image url without saving the result
		/// PredictImageUrlWithNoStore {projectId}/url/nostore
		/// </summary>
		/// <param name="projectId">The project id</param>
		/// <param name="iterationId">Optional. Specifies the id of a particular iteration to evaluate against.
		///            The default iteration for the project will be used when not specified</param>
		/// <param name="application">Optional. Specifies the name of application using the endpoint</param>
		/// <param name="requestBody">An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated</param>
		/// <returns>OK</returns>
		public async Task<ImagePredictionResultModel> PredictImageUrlWithNoStoreAsync(string projectId, string iterationId, string application, ImageUrl requestBody)
		{
			var requestUri = ""+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/url/nostore&iterationId=" + (iterationId==null? "" : System.Uri.EscapeDataString(iterationId))+"&application=" + (application==null? "" : System.Uri.EscapeDataString(application));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImagePredictionResultModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
