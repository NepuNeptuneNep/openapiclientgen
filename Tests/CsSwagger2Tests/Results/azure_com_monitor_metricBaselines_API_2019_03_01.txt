//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a baseline metadata value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BaselineMetadata
	{
		
		/// <summary>
		/// Name of the baseline metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Value of the baseline metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The response to a metric baselines query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricBaselinesProperties
	{
		
		/// <summary>
		/// The baseline for each time series that was queried.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="baselines")]
		public TimeSeriesBaseline[] Baselines { get; set; }
		
		/// <summary>
		/// The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public string Interval { get; set; }
		
		/// <summary>
		/// The namespace of the metrics been queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timespan")]
		public string Timespan { get; set; }
	}
	
	/// <summary>
	/// The baseline values for a single time series.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TimeSeriesBaseline
	{
		
		/// <summary>
		/// The aggregation type of the metric.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregation")]
		public string Aggregation { get; set; }
		
		/// <summary>
		/// The baseline values for each sensitivity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SingleBaseline[] Data { get; set; }
		
		/// <summary>
		/// The dimensions of this time series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public MetricSingleDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// The baseline metadata values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public BaselineMetadata[] Metadata { get; set; }
		
		/// <summary>
		/// The list of timestamps of the baselines.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamps")]
		public string[] Timestamps { get; set; }
	}
	
	/// <summary>
	/// The baseline values for a single sensitivity value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SingleBaseline
	{
		
		/// <summary>
		/// The high thresholds of the baseline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="highThresholds")]
		public double[] HighThresholds { get; set; }
		
		/// <summary>
		/// The low thresholds of the baseline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lowThresholds")]
		public double[] LowThresholds { get; set; }
		
		/// <summary>
		/// the sensitivity of the baseline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sensitivity")]
		public SingleBaselineSensitivity Sensitivity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SingleBaselineSensitivity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 2,
	}
	
	/// <summary>
	/// The metric dimension name and value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricSingleDimension
	{
		
		/// <summary>
		/// Name of the dimension.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Value of the dimension.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A list of metric baselines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricBaselinesResponse
	{
		
		/// <summary>
		/// The list of metric baselines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SingleMetricBaseline[] Value { get; set; }
	}
	
	/// <summary>
	/// The baseline results of a single metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SingleMetricBaseline
	{
		
		/// <summary>
		/// The metric baseline Id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the metric for which the baselines were retrieved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The response to a metric baselines query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MetricBaselinesProperties Properties { get; set; }
		
		/// <summary>
		/// The resource type of the metric baseline resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// **Lists the metric baseline values for a resource**.
		/// Baselines_List {resourceUri}/providers/microsoft.insights/metricBaselines
		/// </summary>
		/// <param name="resourceUri">The identifier of the resource.</param>
		/// <param name="metricnames">The names of the metrics (comma separated) to retrieve.</param>
		/// <param name="metricnamespace">Metric namespace to query metric definitions for.</param>
		/// <param name="timespan">The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.</param>
		/// <param name="interval">The interval (i.e. timegrain) of the query.</param>
		/// <param name="aggregation">The list of aggregation types (comma separated) to retrieve.</param>
		/// <param name="sensitivities">The list of sensitivities (comma separated) to retrieve.</param>
		/// <param name="filter">The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.</param>
		/// <param name="resultType">Allows retrieving only metadata of the baseline. On data request all information is retrieved.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request to get the list of metric baseline values.</returns>
		public async Task<MetricBaselinesResponse> Baselines_ListAsync(string resourceUri, string metricnames, string metricnamespace, string timespan, string interval, string aggregation, string sensitivities, string filter, Baselines_ListResultType resultType, string api_version)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/microsoft.insights/metricBaselines&metricnames=" + (metricnames==null? "" : System.Uri.EscapeDataString(metricnames))+"&metricnamespace=" + (metricnamespace==null? "" : System.Uri.EscapeDataString(metricnamespace))+"&timespan=" + (timespan==null? "" : System.Uri.EscapeDataString(timespan))+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&aggregation=" + (aggregation==null? "" : System.Uri.EscapeDataString(aggregation))+"&sensitivities=" + (sensitivities==null? "" : System.Uri.EscapeDataString(sensitivities))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&resultType=" + resultType+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetricBaselinesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Baselines_ListResultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Data = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Metadata = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
