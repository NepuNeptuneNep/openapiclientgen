//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The Azure event log entries are of type EventData
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventData
	{
		
		/// <summary>
		/// the authorization used by the user who has performed the operation that led to this event. This captures the RBAC properties of the event. These usually include the 'action', 'role' and the 'scope'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public SenderAuthorization Authorization { get; set; }
		
		/// <summary>
		/// the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caller")]
		public string Caller { get; set; }
		
		/// <summary>
		/// The localizable string class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public LocalizableString Category { get; set; }
		
		/// <summary>
		/// key value pairs to identify ARM permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claims")]
		public System.Collections.Generic.Dictionary<string, string> Claims { get; set; }
		
		/// <summary>
		/// the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// the description of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// the event data Id. This is a unique identifier for an event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventDataId")]
		public string EventDataId { get; set; }
		
		/// <summary>
		/// The localizable string class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public LocalizableString EventName { get; set; }
		
		/// <summary>
		/// the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTimestamp")]
		public System.Nullable<System.DateTimeOffset> EventTimestamp { get; set; }
		
		/// <summary>
		/// The Http request info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpRequest")]
		public HttpRequestInfo HttpRequest { get; set; }
		
		/// <summary>
		/// the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// the event level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<EventDataLevel> Level { get; set; }
		
		/// <summary>
		/// It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The localizable string class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationName")]
		public LocalizableString OperationName { get; set; }
		
		/// <summary>
		/// the set of <Key, Value> pairs (usually a Dictionary<String, String>) that includes details about the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// the resource group name of the impacted resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroupName")]
		public string ResourceGroupName { get; set; }
		
		/// <summary>
		/// the resource uri that uniquely identifies the resource that caused this event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The localizable string class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceProviderName")]
		public LocalizableString ResourceProviderName { get; set; }
		
		/// <summary>
		/// The localizable string class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public LocalizableString ResourceType { get; set; }
		
		/// <summary>
		/// The localizable string class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LocalizableString Status { get; set; }
		
		/// <summary>
		/// The localizable string class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subStatus")]
		public LocalizableString SubStatus { get; set; }
		
		/// <summary>
		/// the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submissionTimestamp")]
		public System.Nullable<System.DateTimeOffset> SubmissionTimestamp { get; set; }
		
		/// <summary>
		/// the Azure subscription Id usually a GUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// the Azure tenant Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventDataLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Critical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Informational = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verbose = 4,
	}
	
	/// <summary>
	/// Represents collection of events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventDataCollection
	{
		
		/// <summary>
		/// Provides the link to retrieve the next set of events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// this list that includes the Azure audit logs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EventData[] Value { get; set; }
	}
	
	/// <summary>
	/// The Http request info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HttpRequestInfo
	{
		
		/// <summary>
		/// the client Ip Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientIpAddress")]
		public string ClientIpAddress { get; set; }
		
		/// <summary>
		/// the client request id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientRequestId")]
		public string ClientRequestId { get; set; }
		
		/// <summary>
		/// the Http request method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// the Uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The localizable string class.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocalizableString
	{
		
		/// <summary>
		/// the locale specific value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// the invariant value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// the authorization used by the user who has performed the operation that led to this event. This captures the RBAC properties of the event. These usually include the 'action', 'role' and the 'scope'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SenderAuthorization
	{
		
		/// <summary>
		/// the permissible actions. For instance: microsoft.support/supporttickets/write
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// the role of the user. For instance: Subscription Admin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// the scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the Activity Logs for the Tenant.<br>Everything that is applicable to the API to get the Activity Logs for the subscription is applicable to this API (the parameters, $filter, etc.).<br>One thing to point out here is that this API does *not* retrieve the logs at the individual subscription of the tenant but only surfaces the logs that were generated at the tenant level.
		/// TenantActivityLogs_List providers/microsoft.insights/eventtypes/management/values
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">Reduces the set of data collected. <br>The **$filter** is very restricted and allows only the following patterns.<br>- List events for a resource group: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation' and resourceGroupName eq '<ResourceGroupName>'.<br>- List events for resource: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation' and resourceUri eq '<ResourceURI>'.<br>- List events for a subscription: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation'.<br>- List events for a resource provider: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation' and resourceProvider eq '<ResourceProviderName>'.<br>- List events for a correlation Id: api-version=2014-04-01&$filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le '2014-07-20T04:36:37.6407898Z' and eventChannels eq 'Admin, Operation' and correlationId eq '<CorrelationID>'.<br>**NOTE**: No other syntax is allowed.</param>
		/// <param name="select">Used to fetch events with only the given properties.<br>The **$select** argument is a comma separated list of property names to be returned. Possible values are: *authorization*, *claims*, *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*, *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*</param>
		/// <returns>Successful request to get a page of events in the tenant activity logs</returns>
		public async Task<EventDataCollection> TenantActivityLogs_ListAsync(string api_version, string filter, string select)
		{
			var requestUri = "providers/microsoft.insights/eventtypes/management/values?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EventDataCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
