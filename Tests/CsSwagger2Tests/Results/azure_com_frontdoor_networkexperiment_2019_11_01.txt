//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines the endpoint properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Endpoint
	{
		
		/// <summary>
		/// The endpoint URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint1 { get; set; }
		
		/// <summary>
		/// The name of the endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Error response indicates Front Door service is not able to process the incoming request. The reason is provided in the error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class Experiment
	{
	}
	
	/// <summary>
	/// Defines a list of Experiments. It contains a list of Experiment objects and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExperimentList
	{
		
		/// <summary>
		/// URL to get the next set of Experiment objects if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Experiments within a resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Experiment[] Value { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of an experiment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExperimentProperties
	{
		
		/// <summary>
		/// The description of the details or intents of the Experiment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The state of the Experiment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledState")]
		public System.Nullable<ExperimentPropertiesEnabledState> EnabledState { get; set; }
		
		/// <summary>
		/// Defines the endpoint properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointA")]
		public Endpoint EndpointA { get; set; }
		
		/// <summary>
		/// Defines the endpoint properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointB")]
		public Endpoint EndpointB { get; set; }
		
		/// <summary>
		/// Defines the server side resource status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceState")]
		public System.Nullable<ExperimentPropertiesResourceState> ResourceState { get; set; }
		
		/// <summary>
		/// The uri to the Script used in the Experiment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptFileUri")]
		public string ScriptFileUri { get; set; }
		
		/// <summary>
		/// The description of Experiment status from the server side
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExperimentPropertiesEnabledState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExperimentPropertiesResourceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabling = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 5,
	}
	
	/// <summary>
	/// Defines modifiable attributes of an Experiment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExperimentUpdateModel
	{
		
		/// <summary>
		/// Defines the properties of an experiment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ExperimentUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of an experiment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExperimentUpdateProperties
	{
		
		/// <summary>
		/// The description of the intent or details of the Experiment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The state of the Experiment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledState")]
		public ExperimentPropertiesEnabledState EnabledState { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of a latency metric used in the latency scorecard
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LatencyMetric
	{
		
		/// <summary>
		/// The lower end of the 95% confidence interval for endpoint A
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aCLower95CI")]
		public System.Nullable<System.Double> ACLower95CI { get; set; }
		
		/// <summary>
		/// The upper end of the 95% confidence interval for endpoint A
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aHUpper95CI")]
		public System.Nullable<System.Double> AHUpper95CI { get; set; }
		
		/// <summary>
		/// The metric value of the A endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aValue")]
		public System.Nullable<System.Double> AValue { get; set; }
		
		/// <summary>
		/// The lower end of the 95% confidence interval for endpoint B
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bCLower95CI")]
		public System.Nullable<System.Double> BCLower95CI { get; set; }
		
		/// <summary>
		/// The upper end of the 95% confidence interval for endpoint B
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bUpper95CI")]
		public System.Nullable<System.Double> BUpper95CI { get; set; }
		
		/// <summary>
		/// The metric value of the B endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bValue")]
		public System.Nullable<System.Double> BValue { get; set; }
		
		/// <summary>
		/// The difference in value between endpoint A and B
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delta")]
		public System.Nullable<System.Double> Delta { get; set; }
		
		/// <summary>
		/// The percent difference between endpoint A and B
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deltaPercent")]
		public System.Nullable<System.Double> DeltaPercent { get; set; }
		
		/// <summary>
		/// The end time of the Latency Scorecard in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTimeUTC")]
		public string EndDateTimeUTC { get; set; }
		
		/// <summary>
		/// The name of the Latency Metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class LatencyScorecard
	{
	}
	
	/// <summary>
	/// Defines a the properties of a Latency Scorecard
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LatencyScorecardProperties
	{
		
		/// <summary>
		/// The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The description of the Latency Scorecard
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The end time of the Latency Scorecard in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTimeUTC")]
		public System.Nullable<System.DateTimeOffset> EndDateTimeUTC { get; set; }
		
		/// <summary>
		/// The A endpoint in the scorecard
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointA")]
		public string EndpointA { get; set; }
		
		/// <summary>
		/// The B endpoint in the scorecard
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointB")]
		public string EndpointB { get; set; }
		
		/// <summary>
		/// The unique identifier of the Latency Scorecard
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The latency metrics of the Latency Scorecard
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latencyMetrics")]
		public LatencyMetric[] LatencyMetrics { get; set; }
		
		/// <summary>
		/// The name of the Latency Scorecard
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The start time of the Latency Scorecard in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTimeUTC")]
		public System.Nullable<System.DateTimeOffset> StartDateTimeUTC { get; set; }
	}
	
	/// <summary>
	/// Defines the server side resource status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkExperimentResourceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabling = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 5,
	}
	
	public class PreconfiguredEndpoint
	{
	}
	
	/// <summary>
	/// Defines a list of preconfigured endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PreconfiguredEndpointList
	{
		
		/// <summary>
		/// URL to get the next set of PreconfiguredEndpoints if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of PreconfiguredEndpoints supported by NetworkExperiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PreconfiguredEndpoint[] Value { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of a preconfigured endpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PreconfiguredEndpointProperties
	{
		
		/// <summary>
		/// The preconfigured endpoint backend
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backend")]
		public string Backend { get; set; }
		
		/// <summary>
		/// The description of the endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The endpoint that is preconfigured
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The type of endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointType")]
		public System.Nullable<PreconfiguredEndpointPropertiesEndpointType> EndpointType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PreconfiguredEndpointPropertiesEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureRegion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CDN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATM = 3,
	}
	
	public class Profile
	{
	}
	
	/// <summary>
	/// Defines a list of Profiles. It contains a list of Profile objects and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileList
	{
		
		/// <summary>
		/// URL to get the next set of Profile objects if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Profiles within a resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Profile[] Value { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of an experiment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileProperties
	{
		
		/// <summary>
		/// The state of the Experiment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledState")]
		public ExperimentPropertiesEnabledState EnabledState { get; set; }
		
		/// <summary>
		/// Defines the server side resource status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceState")]
		public ExperimentPropertiesResourceState ResourceState { get; set; }
	}
	
	/// <summary>
	/// Defines modifiable attributes of a Profile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileUpdateModel
	{
		
		/// <summary>
		/// Defines the properties of an experiment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProfileUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of an experiment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileUpdateProperties
	{
		
		/// <summary>
		/// The enabled state of the Profile
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledState")]
		public ExperimentPropertiesEnabledState EnabledState { get; set; }
	}
	
	public class Timeseries
	{
	}
	
	/// <summary>
	/// Defines a timeseries datapoint used in a timeseries
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TimeseriesDataPoint
	{
		
		/// <summary>
		/// The DateTime of the Timeseries data point in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimeUTC")]
		public string DateTimeUTC { get; set; }
		
		/// <summary>
		/// The Value of the Timeseries data point
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of a timeseries
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TimeseriesProperties
	{
		
		/// <summary>
		/// The aggregation interval of the Timeseries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationInterval")]
		public System.Nullable<TimeseriesPropertiesAggregationInterval> AggregationInterval { get; set; }
		
		/// <summary>
		/// The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The end DateTime of the Timeseries in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTimeUTC")]
		public string EndDateTimeUTC { get; set; }
		
		/// <summary>
		/// The endpoint associated with the Timeseries data point
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The start DateTime of the Timeseries in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTimeUTC")]
		public string StartDateTimeUTC { get; set; }
		
		/// <summary>
		/// The set of data points for the timeseries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeseriesData")]
		public TimeseriesDataPoint[] TimeseriesData { get; set; }
		
		/// <summary>
		/// The type of Timeseries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeseriesType")]
		public System.Nullable<TimeseriesPropertiesTimeseriesType> TimeseriesType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TimeseriesPropertiesAggregationInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hourly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TimeseriesPropertiesTimeseriesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeasurementCounts = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LatencyP50 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LatencyP75 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LatencyP95 = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of Network Experiment Profiles under a subscription
		/// NetworkExperimentProfiles_List subscriptions/{subscriptionId}/providers/Microsoft.Network/NetworkExperimentProfiles
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<ProfileList> NetworkExperimentProfiles_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/NetworkExperimentProfiles&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProfileList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of Network Experiment Profiles within a resource group under a subscription
		/// NetworkExperimentProfiles_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <returns>successful operation</returns>
		public async Task<ProfileList> NetworkExperimentProfiles_ListByResourceGroupAsync(string subscriptionId, string api_version, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProfileList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets an NetworkExperiment Profile by ProfileName
		/// NetworkExperimentProfiles_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <returns>successful operation</returns>
		public async Task<Profile> NetworkExperimentProfiles_GetAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Profile>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an NetworkExperiment Profile
		/// NetworkExperimentProfiles_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}
		/// </summary>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="requestBody">An Network Experiment Profile</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Profile> NetworkExperimentProfiles_CreateOrUpdateAsync(string profileName, string subscriptionId, string api_version, string resourceGroupName, Profile requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Profile>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an NetworkExperiment Profile by ProfileName
		/// NetworkExperimentProfiles_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <returns>Delete successful.</returns>
		public async Task NetworkExperimentProfiles_DeleteAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an NetworkExperimentProfiles by NetworkExperimentProfile name
		/// Updates an NetworkExperimentProfiles
		/// NetworkExperimentProfiles_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <param name="requestBody">The Profile Update Model</param>
		/// <returns>OK. successful operation</returns>
		public async Task<Profile> NetworkExperimentProfiles_UpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName, ProfileUpdateModel requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Profile>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of Experiments
		/// Experiments_ListByProfile subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <returns>successful operation</returns>
		public async Task<ExperimentList> Experiments_ListByProfileAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/Experiments&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExperimentList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets an Experiment by ExperimentName
		/// Experiments_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <param name="experimentName">The Experiment identifier associated with the Experiment</param>
		/// <returns>successful operation</returns>
		public async Task<Experiment> Experiments_GetAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName, string experimentName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/Experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Experiment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates an Experiment
		/// Experiments_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <param name="experimentName">The Experiment identifier associated with the Experiment</param>
		/// <param name="requestBody">The Experiment resource</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Experiment> Experiments_CreateOrUpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName, string experimentName, Experiment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/Experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Experiment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an Experiment
		/// Experiments_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <param name="experimentName">The Experiment identifier associated with the Experiment</param>
		/// <returns>Delete successful.</returns>
		public async Task Experiments_DeleteAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName, string experimentName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/Experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an Experiment by Experiment id
		/// Updates an Experiment
		/// Experiments_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <param name="experimentName">The Experiment identifier associated with the Experiment</param>
		/// <param name="requestBody">The Experiment Update Model</param>
		/// <returns>OK. successful operation</returns>
		public async Task<Experiment> Experiments_UpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName, string experimentName, ExperimentUpdateModel requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/Experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Experiment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a Latency Scorecard for a given Experiment
		/// Reports_GetLatencyScorecards subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/LatencyScorecard
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <param name="experimentName">The Experiment identifier associated with the Experiment</param>
		/// <param name="endDateTimeUTC">The end DateTime of the Latency Scorecard in UTC</param>
		/// <param name="country">The country associated with the Latency Scorecard. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html</param>
		/// <param name="aggregationInterval">The aggregation interval of the Latency Scorecard</param>
		/// <returns>successful operation</returns>
		public async Task<LatencyScorecard> Reports_GetLatencyScorecardsAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName, string experimentName, string endDateTimeUTC, string country, Reports_GetLatencyScorecardsAggregationInterval aggregationInterval)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/Experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/LatencyScorecard&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&endDateTimeUTC=" + (endDateTimeUTC==null? "" : System.Uri.EscapeDataString(endDateTimeUTC))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&aggregationInterval=" + aggregationInterval;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LatencyScorecard>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a Timeseries for a given Experiment
		/// Reports_GetTimeseries subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/Timeseries
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <param name="experimentName">The Experiment identifier associated with the Experiment</param>
		/// <param name="startDateTimeUTC">The start DateTime of the Timeseries in UTC</param>
		/// <param name="endDateTimeUTC">The end DateTime of the Timeseries in UTC</param>
		/// <param name="aggregationInterval">The aggregation interval of the Timeseries</param>
		/// <param name="timeseriesType">The type of Timeseries</param>
		/// <param name="endpoint">The specific endpoint</param>
		/// <param name="country">The country associated with the Timeseries. Values are country ISO codes as specified here- https://www.iso.org/iso-3166-country-codes.html</param>
		/// <returns>successful operation</returns>
		public async Task<Timeseries> Reports_GetTimeseriesAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName, string experimentName, System.DateTimeOffset startDateTimeUTC, System.DateTimeOffset endDateTimeUTC, TimeseriesPropertiesAggregationInterval aggregationInterval, TimeseriesPropertiesTimeseriesType timeseriesType, string endpoint, string country)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/Experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/Timeseries&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&startDateTimeUTC=" + startDateTimeUTC.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTimeUTC=" + endDateTimeUTC.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&aggregationInterval=" + aggregationInterval+"&timeseriesType=" + timeseriesType+"&endpoint=" + (endpoint==null? "" : System.Uri.EscapeDataString(endpoint))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Timeseries>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of Preconfigured Endpoints
		/// PreconfiguredEndpoints_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/PreconfiguredEndpoints
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 80
		// </param>
		/// <param name="profileName">The Profile identifier associated with the Tenant and Partner</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<PreconfiguredEndpointList> PreconfiguredEndpoints_ListAsync(string subscriptionId, string api_version, string resourceGroupName, string profileName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/NetworkExperimentProfiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/PreconfiguredEndpoints&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PreconfiguredEndpointList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Reports_GetLatencyScorecardsAggregationInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
