//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An alert created in alert management service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Alert : ProxyResource
	{
		
		/// <summary>
		/// Alert property bag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AlertProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Alert property bag
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertProperties
	{
		
		/// <summary>
		/// Information specific to the monitor service that gives more contextual details about the alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public AlertContext Context { get; set; }
		
		/// <summary>
		/// Config which would be used for displaying the data in portal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="egressConfig")]
		public EgressConfig EgressConfig { get; set; }
		
		/// <summary>
		/// This object contains consistent fields across different monitor services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="essentials")]
		public Essentials Essentials { get; set; }
	}
	
	/// <summary>
	/// Information specific to the monitor service that gives more contextual details about the alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertContext
	{
	}
	
	/// <summary>
	/// Config which would be used for displaying the data in portal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EgressConfig
	{
	}
	
	/// <summary>
	/// This object contains consistent fields across different monitor services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Essentials
	{
		
		/// <summary>
		/// Rule(monitor) which fired alert instance. Depending on the monitor service,  this would be ARM id or name of the rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertRule")]
		public string AlertRule { get; set; }
		
		/// <summary>
		/// Alert object state, which can be modified by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertState")]
		public System.Nullable<EssentialsAlertState> AlertState { get; set; }
		
		/// <summary>
		/// Last modification time(ISO-8601 format) of alert instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedDateTime { get; set; }
		
		/// <summary>
		/// User who last modified the alert, in case of monitor service updates user would be 'system', otherwise name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedUserName")]
		public string LastModifiedUserName { get; set; }
		
		/// <summary>
		/// Can be 'Fired' or 'Resolved', which represents whether the underlying conditions have crossed the defined alert rule thresholds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorCondition")]
		public System.Nullable<EssentialsMonitorCondition> MonitorCondition { get; set; }
		
		/// <summary>
		/// Resolved time(ISO-8601 format) of alert instance. This will be updated when monitor service resolves the alert instance because the rule condition is no longer met.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorConditionResolvedDateTime")]
		public System.Nullable<System.DateTimeOffset> MonitorConditionResolvedDateTime { get; set; }
		
		/// <summary>
		/// Monitor service on which the rule(monitor) is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorService")]
		public System.Nullable<EssentialsMonitorService> MonitorService { get; set; }
		
		/// <summary>
		/// Severity of alert Sev0 being highest and Sev4 being lowest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<EssentialsSeverity> Severity { get; set; }
		
		/// <summary>
		/// The type of signal the alert is based on, which could be metrics, logs or activity logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalType")]
		public System.Nullable<EssentialsSignalType> SignalType { get; set; }
		
		/// <summary>
		/// Unique Id of the smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartGroupId")]
		public string SmartGroupId { get; set; }
		
		/// <summary>
		/// Verbose reason describing the reason why this alert instance is added to a smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartGroupingReason")]
		public string SmartGroupingReason { get; set; }
		
		/// <summary>
		/// Unique Id created by monitor service for each alert instance. This could be used to track the issue at the monitor service, in case of Nagios, Zabbix, SCOM etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceCreatedId")]
		public string SourceCreatedId { get; set; }
		
		/// <summary>
		/// Creation time(ISO-8601 format) of alert instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		/// <summary>
		/// Target ARM resource, on which alert got created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public string TargetResource { get; set; }
		
		/// <summary>
		/// Resource group of target ARM resource, on which alert got created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceGroup")]
		public string TargetResourceGroup { get; set; }
		
		/// <summary>
		/// Name of the target ARM resource name, on which alert got created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceName")]
		public string TargetResourceName { get; set; }
		
		/// <summary>
		/// Resource type of target ARM resource, on which alert got created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceType")]
		public string TargetResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EssentialsAlertState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Acknowledged = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EssentialsMonitorCondition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fired = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resolved = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EssentialsMonitorService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Application Insights")]
		Application_Insights = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Administrative")]
		ActivityLog_Administrative = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Security")]
		ActivityLog_Security = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Recommendation")]
		ActivityLog_Recommendation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Policy")]
		ActivityLog_Policy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Autoscale")]
		ActivityLog_Autoscale = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Log Analytics")]
		Log_Analytics = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nagios = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Platform = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceHealth = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SmartDetector = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VM Insights")]
		VM_Insights = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zabbix = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Resource Health")]
		Resource_Health = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EssentialsSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EssentialsSignalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Metric = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Log = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	/// <summary>
	/// Alert Modification details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertModification : ProxyResource
	{
		
		/// <summary>
		/// Properties of the alert modification item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AlertModificationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of the alert modification item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertModificationProperties
	{
		
		/// <summary>
		/// Unique Id of the alert for which the history is being retrieved
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertId")]
		public string AlertId { get; set; }
		
		/// <summary>
		/// Modification details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifications")]
		public AlertModificationItem[] Modifications { get; set; }
	}
	
	/// <summary>
	/// Alert modification item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertModificationItem
	{
		
		/// <summary>
		/// Modification comments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Description of the modification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Reason for the modification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modificationEvent")]
		public System.Nullable<AlertModificationItemModificationEvent> ModificationEvent { get; set; }
		
		/// <summary>
		/// Modified date and time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedAt")]
		public string ModifiedAt { get; set; }
		
		/// <summary>
		/// Modified user details (Principal client name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedBy")]
		public string ModifiedBy { get; set; }
		
		/// <summary>
		/// New value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newValue")]
		public string NewValue { get; set; }
		
		/// <summary>
		/// Old value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldValue")]
		public string OldValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AlertModificationItemModificationEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlertCreated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StateChange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MonitorConditionChange = 2,
	}
	
	/// <summary>
	/// List the alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertsList
	{
		
		/// <summary>
		/// URL to fetch the next set of alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of alerts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Alert[] Value { get; set; }
	}
	
	/// <summary>
	/// Summary of alerts based on the input filters and 'groupby' parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertsSummary : ProxyResource
	{
		
		/// <summary>
		/// Group the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AlertsSummaryGroup Properties { get; set; }
	}
	
	/// <summary>
	/// Group the result set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertsSummaryGroup
	{
		
		/// <summary>
		/// Name of the field aggregated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupedby")]
		public string Groupedby { get; set; }
		
		/// <summary>
		/// Total count of the smart groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartGroupsCount")]
		public System.Nullable<System.Int32> SmartGroupsCount { get; set; }
		
		/// <summary>
		/// Total count of the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		/// <summary>
		/// List of the items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public AlertsSummaryGroupItem[] Values { get; set; }
	}
	
	/// <summary>
	/// Alerts summary group item
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertsSummaryGroupItem
	{
		
		/// <summary>
		/// Count of the aggregated field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Name of the field aggregated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupedby")]
		public string Groupedby { get; set; }
		
		/// <summary>
		/// Value of the aggregated field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of the items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public AlertsSummaryGroupItem[] Values { get; set; }
	}
	
	/// <summary>
	/// An error response from the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Details of error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorResponseBody Error { get; set; }
	}
	
	/// <summary>
	/// Details of error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponseBody
	{
		
		/// <summary>
		/// Error code, intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorResponseBody[] Details { get; set; }
		
		/// <summary>
		/// Description of the error, intended for display in user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Target of the particular error, for example name of the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Operation provided by provider
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Properties of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class OperationDisplay
	{
		
		/// <summary>
		/// Description of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Operation name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Provider name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Lists the operations available in the AlertsManagement RP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsList
	{
		
		/// <summary>
		/// URL to fetch the next set of alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of operations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Set of related alerts grouped together smartly by AMS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmartGroup : ProxyResource
	{
		
		/// <summary>
		/// Properties of smart group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SmartGroupProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of smart group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmartGroupProperties
	{
		
		/// <summary>
		/// Summary of alertSeverities in the smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertSeverities")]
		public SmartGroupAggregatedProperty[] AlertSeverities { get; set; }
		
		/// <summary>
		/// Summary of alertStates in the smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertStates")]
		public SmartGroupAggregatedProperty[] AlertStates { get; set; }
		
		/// <summary>
		/// Total number of alerts in smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertsCount")]
		public System.Nullable<System.Int32> AlertsCount { get; set; }
		
		/// <summary>
		/// Last updated time of smart group. Date-Time in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedDateTime { get; set; }
		
		/// <summary>
		/// Last modified by user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedUserName")]
		public string LastModifiedUserName { get; set; }
		
		/// <summary>
		/// Summary of monitorConditions in the smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorConditions")]
		public SmartGroupAggregatedProperty[] MonitorConditions { get; set; }
		
		/// <summary>
		/// Summary of monitorServices in the smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorServices")]
		public SmartGroupAggregatedProperty[] MonitorServices { get; set; }
		
		/// <summary>
		/// The URI to fetch the next page of alerts. Call ListNext() with this URI to fetch the next page alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Summary of target resource groups in the smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroups")]
		public SmartGroupAggregatedProperty[] ResourceGroups { get; set; }
		
		/// <summary>
		/// Summary of target resource types in the smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTypes")]
		public SmartGroupAggregatedProperty[] ResourceTypes { get; set; }
		
		/// <summary>
		/// Summary of target resources in the smart group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public SmartGroupAggregatedProperty[] Resources { get; set; }
		
		/// <summary>
		/// Severity of smart group is the highest(Sev0 >... > Sev4) severity of all the alerts in the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public EssentialsSeverity Severity { get; set; }
		
		/// <summary>
		/// Smart group state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartGroupState")]
		public EssentialsAlertState SmartGroupState { get; set; }
		
		/// <summary>
		/// Creation time of smart group. Date-Time in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
	}
	
	/// <summary>
	/// Aggregated property of each type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmartGroupAggregatedProperty
	{
		
		/// <summary>
		/// Total number of items of type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Name of the type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Alert Modification details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmartGroupModification : ProxyResource
	{
		
		/// <summary>
		/// Properties of the smartGroup modification item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SmartGroupModificationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// smartGroup modification item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmartGroupModificationItem
	{
		
		/// <summary>
		/// Modification comments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Description of the modification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Reason for the modification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modificationEvent")]
		public System.Nullable<SmartGroupModificationItemModificationEvent> ModificationEvent { get; set; }
		
		/// <summary>
		/// Modified date and time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedAt")]
		public string ModifiedAt { get; set; }
		
		/// <summary>
		/// Modified user details (Principal client name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedBy")]
		public string ModifiedBy { get; set; }
		
		/// <summary>
		/// New value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newValue")]
		public string NewValue { get; set; }
		
		/// <summary>
		/// Old value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldValue")]
		public string OldValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SmartGroupModificationItemModificationEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SmartGroupCreated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StateChange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlertAdded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlertRemoved = 3,
	}
	
	/// <summary>
	/// Properties of the smartGroup modification item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmartGroupModificationProperties
	{
		
		/// <summary>
		/// Modification details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifications")]
		public SmartGroupModificationItem[] Modifications { get; set; }
		
		/// <summary>
		/// URL to fetch the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Unique Id of the smartGroup for which the history is being retrieved
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartGroupId")]
		public string SmartGroupId { get; set; }
	}
	
	/// <summary>
	/// List the alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SmartGroupsList
	{
		
		/// <summary>
		/// URL to fetch the next set of alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of alerts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SmartGroup[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all operations available through Azure Alerts Management Resource Provider.
		/// Operations_List providers/Microsoft.AlertsManagement/operations
		/// </summary>
		/// <param name="api_version">API version.</param>
		/// <returns>OK. Successfully retrieved operations list.</returns>
		public async Task<OperationsList> Operations_ListAsync(Operations_ListApi_version api_version)
		{
			var requestUri = "providers/Microsoft.AlertsManagement/operations?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Smart Groups within a specified subscription
		/// List all the Smart Groups within a specified subscription.
		/// SmartGroups_GetAll subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="targetResource">Filter by target resource( which is full ARM ID) Default value is select all.</param>
		/// <param name="targetResourceGroup">Filter by target resource group name. Default value is select all.</param>
		/// <param name="targetResourceType">Filter by target resource type. Default value is select all.</param>
		/// <param name="monitorService">Filter by monitor service which generates the alert instance. Default value is select all.</param>
		/// <param name="monitorCondition">Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.</param>
		/// <param name="severity">Filter by severity.  Default value is select all.</param>
		/// <param name="smartGroupState">Filter by state of the smart group. Default value is to select all.</param>
		/// <param name="timeRange">Filter by time range by below listed values. Default value is 1 day.</param>
		/// <param name="pageCount">Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum value allowed is 25. Default value is 25.</param>
		/// <param name="sortBy">Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.</param>
		/// <param name="sortOrder">Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.</param>
		/// <param name="api_version">API version.</param>
		/// <returns>OK. Returns list of all smartGroups.</returns>
		public async Task<SmartGroupsList> SmartGroups_GetAllAsync(string subscriptionId, string targetResource, string targetResourceGroup, string targetResourceType, SmartGroups_GetAllMonitorService monitorService, EssentialsMonitorCondition monitorCondition, EssentialsSeverity severity, EssentialsAlertState smartGroupState, SmartGroups_GetAllTimeRange timeRange, int pageCount, SmartGroups_GetAllSortBy sortBy, SmartGroups_GetAllSortOrder sortOrder, SmartGroups_GetAllApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AlertsManagement/smartGroups&targetResource=" + (targetResource==null? "" : System.Uri.EscapeDataString(targetResource))+"&targetResourceGroup=" + (targetResourceGroup==null? "" : System.Uri.EscapeDataString(targetResourceGroup))+"&targetResourceType=" + (targetResourceType==null? "" : System.Uri.EscapeDataString(targetResourceType))+"&monitorService=" + monitorService+"&monitorCondition=" + monitorCondition+"&severity=" + severity+"&smartGroupState=" + smartGroupState+"&timeRange=" + timeRange+"&pageCount="+pageCount+"&sortBy=" + sortBy+"&sortOrder=" + sortOrder+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SmartGroupsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information related to a specific Smart Group.
		/// Get information related to a specific Smart Group.
		/// SmartGroups_GetById subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="smartGroupId">Smart group unique id. </param>
		/// <param name="api_version">API version.</param>
		/// <returns>OK. Returns the group with the specified smart group Id.</returns>
		public async Task<SmartGroup> SmartGroups_GetByIdAsync(string subscriptionId, string smartGroupId, SmartGroups_GetByIdApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AlertsManagement/smartGroups/"+ (smartGroupId==null? "" : System.Uri.EscapeDataString(smartGroupId))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SmartGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change the state of a Smart Group.
		/// SmartGroups_ChangeState subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="smartGroupId">Smart group unique id. </param>
		/// <param name="api_version">API version.</param>
		/// <param name="newState">New state of the alert.</param>
		/// <returns>OK. Smart Group state updated.</returns>
		public async Task<SmartGroup> SmartGroups_ChangeStateAsync(string subscriptionId, string smartGroupId, SmartGroups_ChangeStateApi_version api_version, EssentialsAlertState newState)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AlertsManagement/smartGroups/"+ (smartGroupId==null? "" : System.Uri.EscapeDataString(smartGroupId))+"/changeState&api-version=" + api_version+"&newState=" + newState;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SmartGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
		/// SmartGroups_GetHistory subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="smartGroupId">Smart group unique id. </param>
		/// <param name="api_version">API version.</param>
		/// <returns>OK. Returns the list of changes of smart group.</returns>
		public async Task<SmartGroupModification> SmartGroups_GetHistoryAsync(string subscriptionId, string smartGroupId, SmartGroups_GetHistoryApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AlertsManagement/smartGroups/"+ (smartGroupId==null? "" : System.Uri.EscapeDataString(smartGroupId))+"/history&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SmartGroupModification>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime.
		/// Alerts_GetAll {scope}/providers/Microsoft.AlertsManagement/alerts
		/// </summary>
		/// <param name="scope">scope here is resourceId for which alert is created.</param>
		/// <param name="targetResource">Filter by target resource( which is full ARM ID) Default value is select all.</param>
		/// <param name="targetResourceType">Filter by target resource type. Default value is select all.</param>
		/// <param name="targetResourceGroup">Filter by target resource group name. Default value is select all.</param>
		/// <param name="monitorService">Filter by monitor service which generates the alert instance. Default value is select all.</param>
		/// <param name="monitorCondition">Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.</param>
		/// <param name="severity">Filter by severity.  Default value is select all.</param>
		/// <param name="alertState">Filter by state of the alert instance. Default value is to select all.</param>
		/// <param name="alertRule">Filter by specific alert rule.  Default value is to select all.</param>
		/// <param name="smartGroupId">Filter the alerts list by the Smart Group Id. Default value is none.</param>
		/// <param name="includeContext">Include context which has contextual data specific to the monitor service. Default value is false'</param>
		/// <param name="includeEgressConfig">Include egress config which would be used for displaying the content in portal.  Default value is 'false'.</param>
		/// <param name="pageCount">Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum value allowed is 25. Default value is 25.</param>
		/// <param name="sortBy">Sort the query results by input field,  Default value is 'lastModifiedDateTime'.</param>
		/// <param name="sortOrder">Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.</param>
		/// <param name="select">This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.</param>
		/// <param name="timeRange">Filter by time range by below listed values. Default value is 1 day.</param>
		/// <param name="customTimeRange">Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.</param>
		/// <param name="api_version">API version.</param>
		/// <returns>OK. Successfully listed alert objects.</returns>
		public async Task<AlertsList> Alerts_GetAllAsync(
					string scope, 
					string targetResource, 
					string targetResourceType, 
					string targetResourceGroup, 
					Alerts_GetAllMonitorService monitorService, 
					EssentialsMonitorCondition monitorCondition, 
					EssentialsSeverity severity, 
					EssentialsAlertState alertState, 
					string alertRule, 
					string smartGroupId, 
					bool includeContext, 
					bool includeEgressConfig, 
					int pageCount, 
					Alerts_GetAllSortBy sortBy, 
					SmartGroups_GetAllSortOrder sortOrder, 
					string select, 
					Alerts_GetAllTimeRange timeRange, 
					string customTimeRange, 
					Alerts_GetAllApi_version api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.AlertsManagement/alerts&targetResource=" + (targetResource==null? "" : System.Uri.EscapeDataString(targetResource))+"&targetResourceType=" + (targetResourceType==null? "" : System.Uri.EscapeDataString(targetResourceType))+"&targetResourceGroup=" + (targetResourceGroup==null? "" : System.Uri.EscapeDataString(targetResourceGroup))+"&monitorService=" + monitorService+"&monitorCondition=" + monitorCondition+"&severity=" + severity+"&alertState=" + alertState+"&alertRule=" + (alertRule==null? "" : System.Uri.EscapeDataString(alertRule))+"&smartGroupId=" + (smartGroupId==null? "" : System.Uri.EscapeDataString(smartGroupId))+"&includeContext="+includeContext+"&includeEgressConfig="+includeEgressConfig+"&pageCount="+pageCount+"&sortBy=" + sortBy+"&sortOrder=" + sortOrder+"&select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&timeRange=" + timeRange+"&customTimeRange=" + (customTimeRange==null? "" : System.Uri.EscapeDataString(customTimeRange))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlertsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific alert.
		/// Get information related to a specific alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}' and 'vm1' is deleted then if you want to get alert by id then use parent resource of scope. So in this example get alert by id call will look like this: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}'.
		/// Alerts_GetById {scope}/providers/Microsoft.AlertsManagement/alerts/{alertId}
		/// </summary>
		/// <param name="scope">scope here is resourceId for which alert is created.</param>
		/// <param name="alertId">Unique ID of an alert instance.</param>
		/// <param name="api_version">API version.</param>
		/// <returns>OK. Returns the alert with the specified ID.</returns>
		public async Task<Alert> Alerts_GetByIdAsync(string scope, string alertId, Alerts_GetByIdApi_version api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.AlertsManagement/alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Alert>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change the state of an alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}' and 'vm1' is deleted then if you want to change state of this particular alert then use parent resource of scope. So in this example change state call will look like this: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}'.
		/// Alerts_ChangeState {scope}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate
		/// </summary>
		/// <param name="scope">scope here is resourceId for which alert is created.</param>
		/// <param name="alertId">Unique ID of an alert instance.</param>
		/// <param name="api_version">API version.</param>
		/// <param name="newState">New state of the alert.</param>
		/// <returns>OK. Alert state updated.</returns>
		public async Task<Alert> Alerts_ChangeStateAsync(string scope, string alertId, Alerts_ChangeStateApi_version api_version, EssentialsAlertState newState)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.AlertsManagement/alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/changestate&api-version=" + api_version+"&newState=" + newState;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Alert>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the history of an alert, which captures any monitor condition changes (Fired/Resolved), alert state changes (New/Acknowledged/Closed) and applied action rules for that particular alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}' and 'vm1' is deleted then if you want to get history of this particular alert then use parent resource of scope. So in this example get history call will look like this: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history'.
		/// Alerts_GetHistory {scope}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history
		/// </summary>
		/// <param name="scope">scope here is resourceId for which alert is created.</param>
		/// <param name="alertId">Unique ID of an alert instance.</param>
		/// <param name="api_version">API version.</param>
		/// <returns>OK. Returns the history of the specified alert.</returns>
		public async Task<AlertModification> Alerts_GetHistoryAsync(string scope, string alertId, Alerts_GetHistoryApi_version api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.AlertsManagement/alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/history&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlertModification>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).
		/// Alerts_GetSummary {scope}/providers/Microsoft.AlertsManagement/alertsSummary
		/// </summary>
		/// <param name="scope">scope here is resourceId for which alert is created.</param>
		/// <param name="groupby">This parameter allows the result set to be grouped by input fields. For example, groupby=severity,alertstate.</param>
		/// <param name="includeSmartGroupsCount">Include count of the SmartGroups as part of the summary. Default value is 'false'.</param>
		/// <param name="targetResource">Filter by target resource( which is full ARM ID) Default value is select all.</param>
		/// <param name="targetResourceType">Filter by target resource type. Default value is select all.</param>
		/// <param name="targetResourceGroup">Filter by target resource group name. Default value is select all.</param>
		/// <param name="monitorService">Filter by monitor service which generates the alert instance. Default value is select all.</param>
		/// <param name="monitorCondition">Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.</param>
		/// <param name="severity">Filter by severity.  Default value is select all.</param>
		/// <param name="alertState">Filter by state of the alert instance. Default value is to select all.</param>
		/// <param name="alertRule">Filter by specific alert rule.  Default value is to select all.</param>
		/// <param name="timeRange">Filter by time range by below listed values. Default value is 1 day.</param>
		/// <param name="customTimeRange">Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.</param>
		/// <param name="api_version">API version.</param>
		/// <returns>OK. Alert summary returned.</returns>
		public async Task<AlertsSummary> Alerts_GetSummaryAsync(string scope, Alerts_GetSummaryGroupby groupby, bool includeSmartGroupsCount, string targetResource, string targetResourceType, string targetResourceGroup, Alerts_GetSummaryMonitorService monitorService, EssentialsMonitorCondition monitorCondition, EssentialsSeverity severity, EssentialsAlertState alertState, string alertRule, Alerts_GetSummaryTimeRange timeRange, string customTimeRange, Alerts_GetSummaryApi_version api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.AlertsManagement/alertsSummary&groupby=" + groupby+"&includeSmartGroupsCount="+includeSmartGroupsCount+"&targetResource=" + (targetResource==null? "" : System.Uri.EscapeDataString(targetResource))+"&targetResourceType=" + (targetResourceType==null? "" : System.Uri.EscapeDataString(targetResourceType))+"&targetResourceGroup=" + (targetResourceGroup==null? "" : System.Uri.EscapeDataString(targetResourceGroup))+"&monitorService=" + monitorService+"&monitorCondition=" + monitorCondition+"&severity=" + severity+"&alertState=" + alertState+"&alertRule=" + (alertRule==null? "" : System.Uri.EscapeDataString(alertRule))+"&timeRange=" + timeRange+"&customTimeRange=" + (customTimeRange==null? "" : System.Uri.EscapeDataString(customTimeRange))+"&api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlertsSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Operations_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
	
	public enum SmartGroups_GetAllMonitorService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Application Insights")]
		Application_Insights = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Administrative")]
		ActivityLog_Administrative = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Security")]
		ActivityLog_Security = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Recommendation")]
		ActivityLog_Recommendation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Policy")]
		ActivityLog_Policy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Autoscale")]
		ActivityLog_Autoscale = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Log Analytics")]
		Log_Analytics = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nagios = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Platform = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceHealth = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SmartDetector = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VM Insights")]
		VM_Insights = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zabbix = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Resource Health")]
		Resource_Health = 14,
	}
	
	public enum SmartGroups_GetAllTimeRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1h")]
		_1h = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1d")]
		_1d = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7d")]
		_7d = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30d")]
		_30d = 3,
	}
	
	public enum SmartGroups_GetAllSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alertsCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		state = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		startDateTime = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastModifiedDateTime = 4,
	}
	
	public enum SmartGroups_GetAllSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum SmartGroups_GetAllApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
	
	public enum SmartGroups_GetByIdApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
	
	public enum SmartGroups_ChangeStateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
	
	public enum SmartGroups_GetHistoryApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
	
	public enum Alerts_GetAllMonitorService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Application Insights")]
		Application_Insights = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Administrative")]
		ActivityLog_Administrative = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Security")]
		ActivityLog_Security = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Recommendation")]
		ActivityLog_Recommendation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Policy")]
		ActivityLog_Policy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Autoscale")]
		ActivityLog_Autoscale = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Log Analytics")]
		Log_Analytics = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nagios = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Platform = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceHealth = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SmartDetector = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VM Insights")]
		VM_Insights = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zabbix = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Resource Health")]
		Resource_Health = 14,
	}
	
	public enum Alerts_GetAllSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severity = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alertState = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monitorCondition = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		targetResource = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		targetResourceName = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		targetResourceGroup = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		targetResourceType = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		startDateTime = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastModifiedDateTime = 9,
	}
	
	public enum Alerts_GetAllTimeRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1h")]
		_1h = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1d")]
		_1d = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7d")]
		_7d = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30d")]
		_30d = 3,
	}
	
	public enum Alerts_GetAllApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
	
	public enum Alerts_GetByIdApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
	
	public enum Alerts_ChangeStateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
	
	public enum Alerts_GetHistoryApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
	
	public enum Alerts_GetSummaryGroupby
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alertState = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monitorCondition = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monitorService = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		signalType = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alertRule = 5,
	}
	
	public enum Alerts_GetSummaryMonitorService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Application Insights")]
		Application_Insights = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Administrative")]
		ActivityLog_Administrative = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Security")]
		ActivityLog_Security = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Recommendation")]
		ActivityLog_Recommendation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Policy")]
		ActivityLog_Policy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityLog Autoscale")]
		ActivityLog_Autoscale = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Log Analytics")]
		Log_Analytics = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nagios = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Platform = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceHealth = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SmartDetector = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VM Insights")]
		VM_Insights = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zabbix = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Resource Health")]
		Resource_Health = 14,
	}
	
	public enum Alerts_GetSummaryTimeRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1h")]
		_1h = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1d")]
		_1d = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7d")]
		_7d = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30d")]
		_30d = 3,
	}
	
	public enum Alerts_GetSummaryApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-05-05")]
		_2018Minus05Minus05 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
