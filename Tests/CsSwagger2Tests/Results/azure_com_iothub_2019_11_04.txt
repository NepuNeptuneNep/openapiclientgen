//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The JSON-serialized X509 Certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateBodyDescription
	{
		
		/// <summary>
		/// base-64 representation of the X509 leaf certificate .cer file or just .pem file content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
	}
	
	/// <summary>
	/// The X509 Certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateDescription
	{
		
		/// <summary>
		/// The entity tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of an X509 CA Certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CertificateProperties Properties { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The description of an X509 CA Certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateProperties
	{
		
		/// <summary>
		/// The certificate content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// The certificate's create date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// The certificate's expiration date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public string Expiry { get; set; }
		
		/// <summary>
		/// Determines whether certificate has been verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVerified")]
		public System.Nullable<System.Boolean> IsVerified { get; set; }
		
		/// <summary>
		/// The certificate's subject name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// The certificate's thumbprint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		/// <summary>
		/// The certificate's last update date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
	}
	
	/// <summary>
	/// The JSON-serialized array of Certificate objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateListDescription
	{
		
		/// <summary>
		/// The array of Certificate objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CertificateDescription[] Value { get; set; }
	}
	
	/// <summary>
	/// The description of an X509 CA Certificate including the challenge nonce issued for the Proof-Of-Possession flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificatePropertiesWithNonce
	{
		
		/// <summary>
		/// The certificate content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// The certificate's create date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// The certificate's expiration date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public string Expiry { get; set; }
		
		/// <summary>
		/// Determines whether certificate has been verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVerified")]
		public System.Nullable<System.Boolean> IsVerified { get; set; }
		
		/// <summary>
		/// The certificate's subject name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// The certificate's thumbprint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		/// <summary>
		/// The certificate's last update date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
		
		/// <summary>
		/// The certificate's verification code that will be used for proof of possession.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCode")]
		public string VerificationCode { get; set; }
	}
	
	/// <summary>
	/// The JSON-serialized leaf certificate
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateVerificationDescription
	{
		
		/// <summary>
		/// base-64 representation of X509 certificate .cer file or just .pem file content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
	}
	
	/// <summary>
	/// The X509 Certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateWithNonceDescription
	{
		
		/// <summary>
		/// The entity tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of an X509 CA Certificate including the challenge nonce issued for the Proof-Of-Possession flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CertificatePropertiesWithNonce Properties { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The IoT hub cloud-to-device messaging properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudToDeviceProperties
	{
		
		/// <summary>
		/// The default time to live for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTtlAsIso8601")]
		public string DefaultTtlAsIso8601 { get; set; }
		
		/// <summary>
		/// The properties of the feedback queue for cloud-to-device messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public FeedbackProperties Feedback { get; set; }
		
		/// <summary>
		/// The max delivery count for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDeliveryCount")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxDeliveryCount { get; set; }
	}
	
	/// <summary>
	/// The properties of the feedback queue for cloud-to-device messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FeedbackProperties
	{
		
		/// <summary>
		/// The lock duration for the feedback queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockDurationAsIso8601")]
		public string LockDurationAsIso8601 { get; set; }
		
		/// <summary>
		/// The number of times the IoT hub attempts to deliver a message on the feedback queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDeliveryCount")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxDeliveryCount { get; set; }
		
		/// <summary>
		/// The period of time for which a message is available to consume before it is expired by the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttlAsIso8601")]
		public string TtlAsIso8601 { get; set; }
	}
	
	/// <summary>
	/// The health data for an endpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EndpointHealthData
	{
		
		/// <summary>
		/// Id of the endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Health statuses have following meanings. The 'healthy' status shows that the endpoint is accepting messages as expected. The 'unhealthy' status shows that the endpoint is not accepting messages as expected and IoT Hub is retrying to send data to this endpoint. The status of an unhealthy endpoint will be updated to healthy when IoT Hub has established an eventually consistent state of health. The 'dead' status shows that the endpoint is not accepting messages, after IoT Hub retried sending messages for the retrial period. See IoT Hub metrics to identify errors and monitor issues with endpoints. The 'unknown' status shows that the IoT Hub has not established a connection with the endpoint. No messages have been delivered to or rejected from this endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthStatus")]
		public System.Nullable<EndpointHealthDataHealthStatus> HealthStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EndpointHealthDataHealthStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		healthy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unhealthy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dead = 3,
	}
	
	/// <summary>
	/// The JSON-serialized array of EndpointHealthData objects with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EndpointHealthDataListResult
	{
		
		/// <summary>
		/// Link to more results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// JSON-serialized array of Endpoint health data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EndpointHealthData[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of an enrichment that your IoT hub applies to messages delivered to endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnrichmentProperties
	{
		
		/// <summary>
		/// The list of endpoints for which the enrichment is applied to the message.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] EndpointNames { get; set; }
		
		/// <summary>
		/// The key or name for the enrichment property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The value for the enrichment property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The HTTP status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public string HttpStatusCode { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The properties of the EventHubConsumerGroupInfo object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubConsumerGroupInfo
	{
		
		/// <summary>
		/// The etag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The Event Hub-compatible consumer group identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Event Hub-compatible consumer group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// the resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The JSON-serialized array of Event Hub-compatible consumer group names with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubConsumerGroupsListResult
	{
		
		/// <summary>
		/// The next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of consumer groups objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EventHubConsumerGroupInfo[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the provisioned Event Hub-compatible endpoint used by the IoT hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubProperties
	{
		
		/// <summary>
		/// The Event Hub-compatible endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The number of partitions for receiving device-to-cloud messages in the Event Hub-compatible endpoint. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionCount")]
		public System.Nullable<System.Int32> PartitionCount { get; set; }
		
		/// <summary>
		/// The partition ids in the Event Hub-compatible endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionIds")]
		public string[] PartitionIds { get; set; }
		
		/// <summary>
		/// The Event Hub-compatible name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The retention time for device-to-cloud messages in days. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#device-to-cloud-messages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionTimeInDays")]
		public System.Nullable<System.Int64> RetentionTimeInDays { get; set; }
	}
	
	/// <summary>
	/// Use to provide parameters when requesting an export of all devices in the IoT hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportDevicesRequest
	{
		
		/// <summary>
		/// The value indicating whether keys should be excluded during export.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="excludeKeys")]
		public bool ExcludeKeys { get; set; }
		
		/// <summary>
		/// The export blob container URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportBlobContainerUri")]
		public string ExportBlobContainerUri { get; set; }
	}
	
	/// <summary>
	/// Use to provide failover region when requesting manual Failover for a hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FailoverInput
	{
		
		/// <summary>
		/// Region the hub will be failed over to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failoverRegion")]
		public string FailoverRegion { get; set; }
	}
	
	/// <summary>
	/// The properties of the fallback route. IoT Hub uses these properties when it routes messages to the fallback endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FallbackRouteProperties
	{
		
		/// <summary>
		/// The condition which is evaluated in order to apply the fallback route. If the condition is not provided it will evaluate to true by default. For grammar, See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// The list of endpoints to which the messages that satisfy the condition are routed to. Currently only 1 endpoint is allowed.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] EndpointNames { get; set; }
		
		/// <summary>
		/// Used to specify whether the fallback route is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The source to which the routing rule is to be applied to. For example, DeviceMessages
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public FallbackRoutePropertiesSource Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum FallbackRoutePropertiesSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeviceMessages = 0,
	}
	
	/// <summary>
	/// Use to provide parameters when requesting an import of all devices in the hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImportDevicesRequest
	{
		
		/// <summary>
		/// The input blob container URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputBlobContainerUri")]
		public string InputBlobContainerUri { get; set; }
		
		/// <summary>
		/// The output blob container URI.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outputBlobContainerUri")]
		public string OutputBlobContainerUri { get; set; }
	}
	
	/// <summary>
	/// IoT Hub capacity information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubCapacity
	{
		
		/// <summary>
		/// The default number of units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int64> Default { get; set; }
		
		/// <summary>
		/// The maximum number of units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int64> Maximum { get; set; }
		
		/// <summary>
		/// The minimum number of units.
		/// Minimum: 1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		[System.ComponentModel.DataAnnotations.Range(1, 1)]
		public System.Nullable<System.Int64> Minimum { get; set; }
		
		/// <summary>
		/// The type of the scaling enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public System.Nullable<IotHubCapacityScaleType> ScaleType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IotHubCapacityScaleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automatic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Manual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// The description of the IoT hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubDescription
	{
		
		/// <summary>
		/// The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The properties of an IoT hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IotHubProperties Properties { get; set; }
		
		/// <summary>
		/// Information about the SKU of the IoT hub.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public IotHubSkuInfo Sku { get; set; }
	}
	
	/// <summary>
	/// The properties of an IoT hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubProperties
	{
		
		/// <summary>
		/// The shared access policies you can use to secure a connection to the IoT hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationPolicies")]
		public SharedAccessSignatureAuthorizationRule[] AuthorizationPolicies { get; set; }
		
		/// <summary>
		/// The IoT hub cloud-to-device messaging properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudToDevice")]
		public CloudToDeviceProperties CloudToDevice { get; set; }
		
		/// <summary>
		/// IoT hub comments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// If True, file upload notifications are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableFileUploadNotifications")]
		public System.Nullable<System.Boolean> EnableFileUploadNotifications { get; set; }
		
		/// <summary>
		/// The Event Hub-compatible endpoint properties. The only possible keys to this dictionary is events. This key has to be present in the dictionary while making create or update calls for the IoT hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventHubEndpoints")]
		public System.Collections.Generic.Dictionary<string, EventHubProperties> EventHubEndpoints { get; set; }
		
		/// <summary>
		/// The capabilities and features enabled for the IoT hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public System.Nullable<IotHubPropertiesFeatures> Features { get; set; }
		
		/// <summary>
		/// The name of the host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostName")]
		public string HostName { get; set; }
		
		/// <summary>
		/// The IP filter rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipFilterRules")]
		public IpFilterRule[] IpFilterRules { get; set; }
		
		/// <summary>
		/// Primary and secondary location for iot hub
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public IotHubLocationDescription[] Locations { get; set; }
		
		/// <summary>
		/// The messaging endpoint properties for the file upload notification queue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messagingEndpoints")]
		public System.Collections.Generic.Dictionary<string, MessagingEndpointProperties> MessagingEndpoints { get; set; }
		
		/// <summary>
		/// The provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The routing related properties of the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routing")]
		public RoutingProperties Routing { get; set; }
		
		/// <summary>
		/// The hub state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageEndpoints")]
		public System.Collections.Generic.Dictionary<string, StorageEndpointProperties> StorageEndpoints { get; set; }
	}
	
	/// <summary>
	/// The properties of an IoT hub shared access policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SharedAccessSignatureAuthorizationRule
	{
		
		/// <summary>
		/// The name of the shared access policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// The primary key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// The permissions assigned to the shared access policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rights")]
		public SharedAccessSignatureAuthorizationRuleRights Rights { get; set; }
		
		/// <summary>
		/// The secondary key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryKey")]
		public string SecondaryKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SharedAccessSignatureAuthorizationRuleRights
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegistryRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegistryWrite = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceConnect = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeviceConnect = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryRead, RegistryWrite")]
		RegistryRead_RegistryWrite = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryRead, ServiceConnect")]
		RegistryRead_ServiceConnect = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryRead, DeviceConnect")]
		RegistryRead_DeviceConnect = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryWrite, ServiceConnect")]
		RegistryWrite_ServiceConnect = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryWrite, DeviceConnect")]
		RegistryWrite_DeviceConnect = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ServiceConnect, DeviceConnect")]
		ServiceConnect_DeviceConnect = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryRead, RegistryWrite, ServiceConnect")]
		RegistryRead_RegistryWrite_ServiceConnect = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryRead, RegistryWrite, DeviceConnect")]
		RegistryRead_RegistryWrite_DeviceConnect = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryRead, ServiceConnect, DeviceConnect")]
		RegistryRead_ServiceConnect_DeviceConnect = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryWrite, ServiceConnect, DeviceConnect")]
		RegistryWrite_ServiceConnect_DeviceConnect = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect")]
		RegistryRead_RegistryWrite_ServiceConnect_DeviceConnect = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IotHubPropertiesFeatures
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeviceManagement = 1,
	}
	
	/// <summary>
	/// The IP filter rules for the IoT hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IpFilterRule
	{
		
		/// <summary>
		/// The desired action for requests captured by this rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public IpFilterRuleAction Action { get; set; }
		
		/// <summary>
		/// The name of the IP filter rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filterName")]
		public string FilterName { get; set; }
		
		/// <summary>
		/// A string that contains the IP address range in CIDR notation for the rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipMask")]
		public string IpMask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IpFilterRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accept = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reject = 1,
	}
	
	/// <summary>
	/// Public representation of one of the locations where a resource is provisioned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubLocationDescription
	{
		
		/// <summary>
		/// The name of the Azure region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The role of the region, can be either primary or secondary. The primary region is where the IoT hub is currently provisioned. The secondary region is the Azure disaster recovery (DR) paired region and also the region where the IoT hub can failover to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<IotHubLocationDescriptionRole> Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IotHubLocationDescriptionRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secondary = 1,
	}
	
	/// <summary>
	/// The properties of the messaging endpoints used by this IoT hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MessagingEndpointProperties
	{
		
		/// <summary>
		/// The lock duration. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockDurationAsIso8601")]
		public string LockDurationAsIso8601 { get; set; }
		
		/// <summary>
		/// The number of times the IoT hub attempts to deliver a message. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDeliveryCount")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxDeliveryCount { get; set; }
		
		/// <summary>
		/// The period of time for which a message is available to consume before it is expired by the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttlAsIso8601")]
		public string TtlAsIso8601 { get; set; }
	}
	
	/// <summary>
	/// The routing related properties of the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoutingProperties
	{
		
		/// <summary>
		/// The properties related to the custom endpoints to which your IoT hub routes messages based on the routing rules. A maximum of 10 custom endpoints are allowed across all endpoint types for paid hubs and only 1 custom endpoint is allowed across all endpoint types for free hubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public RoutingEndpoints Endpoints { get; set; }
		
		/// <summary>
		/// The list of user-provided enrichments that the IoT hub applies to messages to be delivered to built-in and custom endpoints. See: https://aka.ms/telemetryoneventgrid
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrichments")]
		public EnrichmentProperties[] Enrichments { get; set; }
		
		/// <summary>
		/// The properties of the fallback route. IoT Hub uses these properties when it routes messages to the fallback endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackRoute")]
		public FallbackRouteProperties FallbackRoute { get; set; }
		
		/// <summary>
		/// The list of user-provided routing rules that the IoT hub uses to route messages to built-in and custom endpoints. A maximum of 100 routing rules are allowed for paid hubs and a maximum of 5 routing rules are allowed for free hubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public RouteProperties[] Routes { get; set; }
	}
	
	/// <summary>
	/// The properties related to the custom endpoints to which your IoT hub routes messages based on the routing rules. A maximum of 10 custom endpoints are allowed across all endpoint types for paid hubs and only 1 custom endpoint is allowed across all endpoint types for free hubs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoutingEndpoints
	{
		
		/// <summary>
		/// The list of Event Hubs endpoints that IoT hub routes messages to, based on the routing rules. This list does not include the built-in Event Hubs endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventHubs")]
		public RoutingEventHubProperties[] EventHubs { get; set; }
		
		/// <summary>
		/// The list of Service Bus queue endpoints that IoT hub routes the messages to, based on the routing rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceBusQueues")]
		public RoutingServiceBusQueueEndpointProperties[] ServiceBusQueues { get; set; }
		
		/// <summary>
		/// The list of Service Bus topic endpoints that the IoT hub routes the messages to, based on the routing rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceBusTopics")]
		public RoutingServiceBusTopicEndpointProperties[] ServiceBusTopics { get; set; }
		
		/// <summary>
		/// The list of storage container endpoints that IoT hub routes messages to, based on the routing rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageContainers")]
		public RoutingStorageContainerProperties[] StorageContainers { get; set; }
	}
	
	/// <summary>
	/// The properties related to an event hub endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoutingEventHubProperties
	{
		
		/// <summary>
		/// The connection string of the event hub endpoint. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
		/// Required
		/// Pattern: ^[A-Za-z0-9-._]{1,64}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-._]{1,64}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the resource group of the event hub endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The subscription identifier of the event hub endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// The properties related to service bus queue endpoint types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoutingServiceBusQueueEndpointProperties
	{
		
		/// <summary>
		/// The connection string of the service bus queue endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types. The name need not be the same as the actual queue name.
		/// Required
		/// Pattern: ^[A-Za-z0-9-._]{1,64}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-._]{1,64}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the resource group of the service bus queue endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The subscription identifier of the service bus queue endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// The properties related to service bus topic endpoint types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoutingServiceBusTopicEndpointProperties
	{
		
		/// <summary>
		/// The connection string of the service bus topic endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.  The name need not be the same as the actual topic name.
		/// Required
		/// Pattern: ^[A-Za-z0-9-._]{1,64}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-._]{1,64}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the resource group of the service bus topic endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The subscription identifier of the service bus topic endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// The properties related to a storage container endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoutingStorageContainerProperties
	{
		
		/// <summary>
		/// Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.
		/// Minimum: 60
		/// Maximum: 720
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchFrequencyInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(60, 720)]
		public System.Nullable<System.Int32> BatchFrequencyInSeconds { get; set; }
		
		/// <summary>
		/// The connection string of the storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// The name of storage container in the storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// Encoding that is used to serialize messages to blobs. Supported values are 'avro', 'avrodeflate', and 'JSON'. Default value is 'avro'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public System.Nullable<RoutingStorageContainerPropertiesEncoding> Encoding { get; set; }
		
		/// <summary>
		/// File name format for the blob. Default format is {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are mandatory but can be reordered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileNameFormat")]
		public string FileNameFormat { get; set; }
		
		/// <summary>
		/// Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
		/// Minimum: 10485760
		/// Maximum: 524288000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChunkSizeInBytes")]
		[System.ComponentModel.DataAnnotations.Range(10485760, 524288000)]
		public System.Nullable<System.Int32> MaxChunkSizeInBytes { get; set; }
		
		/// <summary>
		/// The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
		/// Required
		/// Pattern: ^[A-Za-z0-9-._]{1,64}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-._]{1,64}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the resource group of the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The subscription identifier of the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RoutingStorageContainerPropertiesEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Avro = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AvroDeflate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 2,
	}
	
	/// <summary>
	/// The properties of a routing rule that your IoT hub uses to route messages to endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RouteProperties
	{
		
		/// <summary>
		/// The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to true by default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// The list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is allowed.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] EndpointNames { get; set; }
		
		/// <summary>
		/// Used to specify whether a route is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.
		/// Required
		/// Pattern: ^[A-Za-z0-9-._]{1,64}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-._]{1,64}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The source that the routing rule is to be applied to, such as DeviceMessages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public RoutePropertiesSource Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RoutePropertiesSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeviceMessages = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwinChangeEvents = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeviceLifecycleEvents = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeviceJobLifecycleEvents = 4,
	}
	
	/// <summary>
	/// The properties of the Azure Storage endpoint for file upload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageEndpointProperties
	{
		
		/// <summary>
		/// The connection string for the Azure Storage account to which files are uploaded.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// The name of the root container where you upload files. The container need not exist but should be creatable using the connectionString specified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// The period of time for which the SAS URI generated by IoT Hub for file upload is valid. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasTtlAsIso8601")]
		public string SasTtlAsIso8601 { get; set; }
	}
	
	/// <summary>
	/// Information about the SKU of the IoT hub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubSkuInfo
	{
		
		/// <summary>
		/// The number of provisioned IoT Hub units. See: https://docs.microsoft.com/azure/azure-subscription-service-limits#iot-hub-limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int64> Capacity { get; set; }
		
		/// <summary>
		/// The name of the SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public IotHubSkuInfoName Name { get; set; }
		
		/// <summary>
		/// The billing tier for the IoT hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<IotHubSkuInfoTier> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IotHubSkuInfoName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B3 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IotHubSkuInfoTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 2,
	}
	
	/// <summary>
	/// The JSON-serialized array of IotHubDescription objects with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubDescriptionListResult
	{
		
		/// <summary>
		/// The next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The array of IotHubDescription objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IotHubDescription[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties indicating whether a given IoT hub name is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubNameAvailabilityInfo
	{
		
		/// <summary>
		/// The detailed reason message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The value which indicates whether the provided name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason for unavailability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<IotHubNameAvailabilityInfoReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IotHubNameAvailabilityInfoReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// Quota metrics properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubQuotaMetricInfo
	{
		
		/// <summary>
		/// The current value for the quota metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int64> CurrentValue { get; set; }
		
		/// <summary>
		/// The maximum value of the quota metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public System.Nullable<System.Int64> MaxValue { get; set; }
		
		/// <summary>
		/// The name of the quota metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The JSON-serialized array of IotHubQuotaMetricInfo objects with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubQuotaMetricInfoListResult
	{
		
		/// <summary>
		/// The next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The array of quota metrics objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IotHubQuotaMetricInfo[] Value { get; set; }
	}
	
	/// <summary>
	/// SKU properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubSkuDescription
	{
		
		/// <summary>
		/// IoT Hub capacity information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public IotHubCapacity Capacity { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Information about the SKU of the IoT hub.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public IotHubSkuInfo Sku { get; set; }
	}
	
	/// <summary>
	/// The JSON-serialized array of IotHubSkuDescription objects with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotHubSkuDescriptionListResult
	{
		
		/// <summary>
		/// The next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The array of IotHubSkuDescription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IotHubSkuDescription[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the Job Response object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobResponse
	{
		
		/// <summary>
		/// The time the job stopped processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeUtc")]
		public string EndTimeUtc { get; set; }
		
		/// <summary>
		/// If status == failed, this string containing the reason for the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// The job identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// The job identifier of the parent job, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentJobId")]
		public string ParentJobId { get; set; }
		
		/// <summary>
		/// The start time of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeUtc")]
		public string StartTimeUtc { get; set; }
		
		/// <summary>
		/// The status of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<JobResponseStatus> Status { get; set; }
		
		/// <summary>
		/// The status message for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// The type of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<JobResponseType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enqueued = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		export = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		import = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		backup = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		readDeviceProperties = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		writeDeviceProperties = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		updateDeviceConfiguration = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rebootDevice = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		factoryResetDevice = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		firmwareUpdate = 9,
	}
	
	/// <summary>
	/// The JSON-serialized array of JobResponse objects with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobResponseListResult
	{
		
		/// <summary>
		/// The next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The array of JobResponse objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobResponse[] Value { get; set; }
	}
	
	/// <summary>
	/// Routes that matched
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MatchedRoute
	{
		
		/// <summary>
		/// The properties of a routing rule that your IoT hub uses to route messages to endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RouteProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Name of Iot Hub type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Name
	{
		
		/// <summary>
		/// Localized value of name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// IotHub type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// IoT Hub REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{read | write | action | delete}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Input values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationInputs
	{
		
		/// <summary>
		/// The name of the IoT hub to check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list IoT Hub operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of IoT Hub operations supported by the Microsoft.Devices resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Identity registry statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryStatistics
	{
		
		/// <summary>
		/// The count of disabled devices in the identity registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabledDeviceCount")]
		public System.Nullable<System.Int64> DisabledDeviceCount { get; set; }
		
		/// <summary>
		/// The count of enabled devices in the identity registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledDeviceCount")]
		public System.Nullable<System.Int64> EnabledDeviceCount { get; set; }
		
		/// <summary>
		/// The total count of devices in the identity registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDeviceCount")]
		public System.Nullable<System.Int64> TotalDeviceCount { get; set; }
	}
	
	/// <summary>
	/// The common properties of an Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The resource name.
		/// Pattern: ^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Compilation error when evaluating route
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RouteCompilationError
	{
		
		/// <summary>
		/// Range of route errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public RouteErrorRange Location { get; set; }
		
		/// <summary>
		/// Route error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Severity of the route error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<RouteCompilationErrorSeverity> Severity { get; set; }
	}
	
	/// <summary>
	/// Range of route errors
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RouteErrorRange
	{
		
		/// <summary>
		/// Position where the route error happened
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public RouteErrorPosition End { get; set; }
		
		/// <summary>
		/// Position where the route error happened
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public RouteErrorPosition Start { get; set; }
	}
	
	/// <summary>
	/// Position where the route error happened
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RouteErrorPosition
	{
		
		/// <summary>
		/// Column where the route error happened
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public System.Nullable<System.Int32> Column { get; set; }
		
		/// <summary>
		/// Line where the route error happened
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public System.Nullable<System.Int32> Line { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RouteCompilationErrorSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warning = 1,
	}
	
	/// <summary>
	/// Routing message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoutingMessage
	{
		
		/// <summary>
		/// App properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appProperties")]
		public System.Collections.Generic.Dictionary<string, string> AppProperties { get; set; }
		
		/// <summary>
		/// Body of routing message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// System properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemProperties")]
		public System.Collections.Generic.Dictionary<string, string> SystemProperties { get; set; }
	}
	
	/// <summary>
	/// Twin reference input parameter. This is an optional parameter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoutingTwin
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Twin Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	/// <summary>
	/// The list of shared access policies with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SharedAccessSignatureAuthorizationRuleListResult
	{
		
		/// <summary>
		/// The next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of shared access policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SharedAccessSignatureAuthorizationRule[] Value { get; set; }
	}
	
	/// <summary>
	/// A container holding only the Tags for a resource, allowing the user to update the tags on an IoT Hub instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagsResource
	{
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
	}
	
	/// <summary>
	/// Input for testing all routes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TestAllRoutesInput
	{
		
		/// <summary>
		/// Routing message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public RoutingMessage Message { get; set; }
		
		/// <summary>
		/// Routing source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingSource")]
		public RoutePropertiesSource RoutingSource { get; set; }
		
		/// <summary>
		/// Twin reference input parameter. This is an optional parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twin")]
		public RoutingTwin Twin { get; set; }
	}
	
	/// <summary>
	/// Result of testing all routes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TestAllRoutesResult
	{
		
		/// <summary>
		/// JSON-serialized array of matched routes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public MatchedRoute[] Routes { get; set; }
	}
	
	/// <summary>
	/// Input for testing route
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TestRouteInput
	{
		
		/// <summary>
		/// Routing message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public RoutingMessage Message { get; set; }
		
		/// <summary>
		/// The properties of a routing rule that your IoT hub uses to route messages to endpoints.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="route")]
		public RouteProperties Route { get; set; }
		
		/// <summary>
		/// Twin reference input parameter. This is an optional parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twin")]
		public RoutingTwin Twin { get; set; }
	}
	
	/// <summary>
	/// Result of testing one route
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TestRouteResult
	{
		
		/// <summary>
		/// Detailed result of testing a route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public TestRouteResultDetails Details { get; set; }
		
		/// <summary>
		/// Result of testing route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<TestRouteResultResult> Result { get; set; }
	}
	
	/// <summary>
	/// Detailed result of testing a route
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TestRouteResultDetails
	{
		
		/// <summary>
		/// JSON-serialized list of route compilation errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compilationErrors")]
		public RouteCompilationError[] CompilationErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TestRouteResultResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		undefined = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 2,
	}
	
	/// <summary>
	/// User subscription quota response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserSubscriptionQuota
	{
		
		/// <summary>
		/// Current number of IotHub type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int32> CurrentValue { get; set; }
		
		/// <summary>
		/// IotHub type id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Numerical limit on IotHub type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Name of Iot Hub type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		/// <summary>
		/// Response type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Unit of IotHub type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Json-serialized array of User subscription quota response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserSubscriptionQuotaListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public UserSubscriptionQuota[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available IoT Hub REST API operations.
		/// Operations_List providers/Microsoft.Devices/operations
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Devices/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the IoT hubs in a subscription
		/// Get all the IoT hubs in a subscription.
		/// IotHubResource_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the IoT hubs in the subscription.</returns>
		public async Task<IotHubDescriptionListResult> IotHubResource_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Devices/IotHubs?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IotHubDescriptionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if an IoT hub name is available
		/// Check if an IoT hub name is available.
		/// IotHubResource_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="requestBody">Set the name parameter in the OperationInputs structure to the name of the IoT hub to check.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the IoT hub name is available. If the name is not available, the body contains the reason.</returns>
		public async Task<IotHubNameAvailabilityInfo> IotHubResource_CheckNameAvailabilityAsync(string api_version, string subscriptionId, OperationInputs requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Devices/checkNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IotHubNameAvailabilityInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the number of iot hubs in the subscription
		/// Get the number of free and paid iot hubs in the subscription
		/// ResourceProviderCommon_GetSubscriptionQuota subscriptions/{subscriptionId}/providers/Microsoft.Devices/usages
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="api_version">The version of the API.</param>
		/// <returns>OK</returns>
		public async Task<UserSubscriptionQuotaListResult> ResourceProviderCommon_GetSubscriptionQuotaAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Devices/usages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserSubscriptionQuotaListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the IoT hubs in a resource group
		/// Get all the IoT hubs in a resource group.
		/// IotHubResource_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the IoT hubs in the resource group.</returns>
		public async Task<IotHubDescriptionListResult> IotHubResource_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IotHubDescriptionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Manually initiate a failover for the IoT Hub to its secondary region
		/// Manually initiate a failover for the IoT Hub to its secondary region. To learn more, see https://aka.ms/manualfailover
		/// IotHub_ManualFailover subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/failover
		/// </summary>
		/// <param name="iotHubName">Name of the IoT hub to failover</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">Name of the resource group containing the IoT hub resource</param>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="requestBody">Region to failover to. Must be the Azure paired region. Get the value from the secondary location in the locations property. To learn more, see https://aka.ms/manualfailover/region</param>
		/// <returns>Long running manual failover operation for the IoT hub completed</returns>
		public async Task IotHub_ManualFailoverAsync(string iotHubName, string subscriptionId, string resourceGroupName, string api_version, FailoverInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (iotHubName==null? "" : System.Uri.EscapeDataString(iotHubName))+"/failover&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test all routes
		/// Test all routes configured in this Iot Hub
		/// IotHubResource_TestAllRoutes subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall
		/// </summary>
		/// <param name="iotHubName">IotHub to be tested</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">resource group which Iot Hub belongs to</param>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="requestBody">Input for testing all routes</param>
		/// <returns>OK</returns>
		public async Task<TestAllRoutesResult> IotHubResource_TestAllRoutesAsync(string iotHubName, string subscriptionId, string resourceGroupName, string api_version, TestAllRoutesInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (iotHubName==null? "" : System.Uri.EscapeDataString(iotHubName))+"/routing/routes/$testall&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAllRoutesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Test the new route
		/// Test the new route for this Iot Hub
		/// IotHubResource_TestRoute subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew
		/// </summary>
		/// <param name="iotHubName">IotHub to be tested</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">resource group which Iot Hub belongs to</param>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="requestBody">Route that needs to be tested</param>
		/// <returns>OK</returns>
		public async Task<TestRouteResult> IotHubResource_TestRouteAsync(string iotHubName, string subscriptionId, string resourceGroupName, string api_version, TestRouteInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (iotHubName==null? "" : System.Uri.EscapeDataString(iotHubName))+"/routing/routes/$testnew&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRouteResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the health for routing endpoints
		/// Get the health for routing endpoints.
		/// IotHubResource_GetEndpointHealth subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routingEndpointsHealth
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="api_version">The version of the API.</param>
		/// <returns>OK</returns>
		public async Task<EndpointHealthDataListResult> IotHubResource_GetEndpointHealthAsync(string subscriptionId, string resourceGroupName, string iotHubName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (iotHubName==null? "" : System.Uri.EscapeDataString(iotHubName))+"/routingEndpointsHealth&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EndpointHealthDataListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the non-security related metadata of an IoT hub
		/// Get the non-security related metadata of an IoT hub.
		/// IotHubResource_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <returns>The body contains all the non-security properties of the IoT hub. Security-related properties are set to null.</returns>
		public async Task<IotHubDescription> IotHubResource_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IotHubDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update the metadata of an IoT hub.
		/// Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
		/// IotHubResource_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="requestBody">The IoT hub metadata and security metadata.</param>
		/// <returns>This is returned as a response to the status polling request for the create or update operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task<IotHubDescription> IotHubResource_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, IotHubDescription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IotHubDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an IoT hub
		/// Delete an IoT hub.
		/// IotHubResource_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <returns>This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task<IotHubDescription> IotHubResource_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IotHubDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing IoT Hubs tags.
		/// Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
		/// IotHubResource_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}
		/// </summary>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">Resource group identifier.</param>
		/// <param name="resourceName">Name of iot hub to update.</param>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="requestBody">Updated tag information to set into the iot hub instance.</param>
		/// <returns>Iot Hub was successfully updated</returns>
		public async Task<IotHubDescription> IotHubResource_UpdateAsync(string subscriptionId, string resourceGroupName, string resourceName, string api_version, TagsResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IotHubDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
		/// Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
		/// IotHubResource_GetKeysForKeyName subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="keyName">The name of the shared access policy.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more IoT hub endpoints.</returns>
		public async Task<SharedAccessSignatureAuthorizationRule> IotHubResource_GetKeysForKeyNameAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string keyName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/IotHubKeys/"+ (keyName==null? "" : System.Uri.EscapeDataString(keyName))+"/listkeys?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SharedAccessSignatureAuthorizationRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the statistics from an IoT hub
		/// Get the statistics from an IoT hub.
		/// IotHubResource_GetStats subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <returns>This is a synchronous operation. The body contains JSON-serialized statistics from the identity registry in the IoT hub.</returns>
		public async Task<RegistryStatistics> IotHubResource_GetStatsAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/IotHubStats?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegistryStatistics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the certificate list.
		/// Returns the list of certificates.
		/// Certificates_ListByIotHub subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <returns>The body contains all the certificate list.</returns>
		public async Task<CertificateListDescription> Certificates_ListByIotHubAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/certificates?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CertificateListDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the certificate.
		/// Returns the certificate.
		/// Certificates_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="certificateName">The name of the certificate</param>
		/// <returns>The body contains the certificate.</returns>
		public async Task<CertificateDescription> Certificates_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string certificateName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CertificateDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload the certificate to the IoT hub.
		/// Adds new or replaces existing certificate.
		/// Certificates_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="certificateName">The name of the certificate</param>
		/// <param name="requestBody">The certificate body.</param>
		/// <returns>If certificate already exist and update was successful, the operation returns HTTP status code of 201 (OK).</returns>
		public async Task<CertificateDescription> Certificates_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string certificateName, CertificateBodyDescription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CertificateDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an X509 certificate.
		/// Deletes an existing X509 certificate or does nothing if it does not exist.
		/// Certificates_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="certificateName">The name of the certificate</param>
		/// <returns>Certificate has been deleted.</returns>
		public async Task Certificates_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string certificateName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate verification code for proof of possession flow.
		/// Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
		/// Certificates_GenerateVerificationCode subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="certificateName">The name of the certificate</param>
		/// <returns>The body contains the certificate.</returns>
		public async Task<CertificateWithNonceDescription> Certificates_GenerateVerificationCodeAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string certificateName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"/generateVerificationCode?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CertificateWithNonceDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify certificate's private key possession.
		/// Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
		/// Certificates_Verify subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="certificateName">The name of the certificate</param>
		/// <param name="requestBody">The name of the certificate</param>
		/// <returns>The body contains the certificate.</returns>
		public async Task<CertificateDescription> Certificates_VerifyAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string certificateName, CertificateVerificationDescription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"/verify?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CertificateDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub
		/// Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
		/// IotHubResource_ListEventHubConsumerGroups subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="eventHubEndpointName">The name of the Event Hub-compatible endpoint.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized list of the consumer groups in the Event Hub-compatible endpoint in this IoT hub</returns>
		public async Task<EventHubConsumerGroupsListResult> IotHubResource_ListEventHubConsumerGroupsAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string eventHubEndpointName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/eventHubEndpoints/"+ (eventHubEndpointName==null? "" : System.Uri.EscapeDataString(eventHubEndpointName))+"/ConsumerGroups?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventHubConsumerGroupsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub
		/// Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
		/// IotHubResource_GetEventHubConsumerGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="eventHubEndpointName">The name of the Event Hub-compatible endpoint in the IoT hub.</param>
		/// <param name="name">The name of the consumer group to retrieve.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized consumer group.</returns>
		public async Task<EventHubConsumerGroupInfo> IotHubResource_GetEventHubConsumerGroupAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/eventHubEndpoints/"+ (eventHubEndpointName==null? "" : System.Uri.EscapeDataString(eventHubEndpointName))+"/ConsumerGroups/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventHubConsumerGroupInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub
		/// Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
		/// IotHubResource_CreateEventHubConsumerGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="eventHubEndpointName">The name of the Event Hub-compatible endpoint in the IoT hub.</param>
		/// <param name="name">The name of the consumer group to add.</param>
		/// <returns>This is a synchronous operation.</returns>
		public async Task<EventHubConsumerGroupInfo> IotHubResource_CreateEventHubConsumerGroupAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/eventHubEndpoints/"+ (eventHubEndpointName==null? "" : System.Uri.EscapeDataString(eventHubEndpointName))+"/ConsumerGroups/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventHubConsumerGroupInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub
		/// Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
		/// IotHubResource_DeleteEventHubConsumerGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="eventHubEndpointName">The name of the Event Hub-compatible endpoint in the IoT hub.</param>
		/// <param name="name">The name of the consumer group to delete.</param>
		/// <returns>This is a synchronous operation.</returns>
		public async Task IotHubResource_DeleteEventHubConsumerGroupAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string eventHubEndpointName, string name)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/eventHubEndpoints/"+ (eventHubEndpointName==null? "" : System.Uri.EscapeDataString(eventHubEndpointName))+"/ConsumerGroups/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
		/// Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
		/// IotHubResource_ExportDevices subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="requestBody">The parameters that specify the export devices operation.</param>
		/// <returns>OK</returns>
		public async Task<JobResponse> IotHubResource_ExportDevicesAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, ExportDevicesRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/exportDevices?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
		/// Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
		/// IotHubResource_ImportDevices subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="requestBody">The parameters that specify the import devices operation.</param>
		/// <returns>OK</returns>
		public async Task<JobResponse> IotHubResource_ImportDevicesAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, ImportDevicesRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/importDevices?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry
		/// Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
		/// IotHubResource_ListJobs subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <returns>This is a synchronous operation. The response contains a JSON-serialized array of all the jobs in the IoT hub.</returns>
		public async Task<JobResponseListResult> IotHubResource_ListJobsAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/jobs?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobResponseListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry
		/// Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
		/// IotHubResource_GetJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <param name="jobId">The job identifier.</param>
		/// <returns>This is a synchronous operation. The response contains a JSON-serialized description of the job in the IoT hub.</returns>
		public async Task<JobResponse> IotHubResource_GetJobAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, string jobId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
		/// Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
		/// IotHubResource_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the IoT hub endpoints.</returns>
		public async Task<SharedAccessSignatureAuthorizationRuleListResult> IotHubResource_ListKeysAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/listkeys?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SharedAccessSignatureAuthorizationRuleListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the quota metrics for an IoT hub
		/// Get the quota metrics for an IoT hub.
		/// IotHubResource_GetQuotaMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <returns>This is a synchronous operation. The response contains a JSON-serialized array of the quota metrics for the IoT hub.</returns>
		public async Task<IotHubQuotaMetricInfoListResult> IotHubResource_GetQuotaMetricsAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/quotaMetrics?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IotHubQuotaMetricInfoListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of valid SKUs for an IoT hub
		/// Get the list of valid SKUs for an IoT hub.
		/// IotHubResource_GetValidSkus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus
		/// </summary>
		/// <param name="api_version">The version of the API.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the IoT hub.</param>
		/// <param name="resourceName">The name of the IoT hub.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of the valid SKUs for this IoT hub.</returns>
		public async Task<IotHubSkuDescriptionListResult> IotHubResource_GetValidSkusAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Devices/IotHubs/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/skus?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IotHubSkuDescriptionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
