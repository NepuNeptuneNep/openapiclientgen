//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicableSchedule
	{
		
		/// <summary>
		/// Properties of a schedules applicable to a virtual machine.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApplicableScheduleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a schedules applicable to a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicableScheduleProperties
	{
		
		/// <summary>
		/// A schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVmsShutdown")]
		public Schedule LabVmsShutdown { get; set; }
		
		/// <summary>
		/// A schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVmsStartup")]
		public Schedule LabVmsStartup { get; set; }
	}
	
	/// <summary>
	/// A schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Schedule
	{
		
		/// <summary>
		/// Properties of a schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScheduleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduleProperties
	{
		
		/// <summary>
		/// The creation date of the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Properties of a daily schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyRecurrence")]
		public DayDetails DailyRecurrence { get; set; }
		
		/// <summary>
		/// Properties of an hourly schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourlyRecurrence")]
		public HourDetails HourlyRecurrence { get; set; }
		
		/// <summary>
		/// Notification settings for a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSettings")]
		public NotificationSettings NotificationSettings { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The status of the schedule (i.e. Enabled, Disabled)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// The resource ID to which the schedule belongs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceId")]
		public string TargetResourceId { get; set; }
		
		/// <summary>
		/// The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskType")]
		public string TaskType { get; set; }
		
		/// <summary>
		/// The time zone ID (e.g. Pacific Standard time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneId")]
		public string TimeZoneId { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
		
		/// <summary>
		/// Properties of a weekly schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyRecurrence")]
		public WeekDetails WeeklyRecurrence { get; set; }
	}
	
	/// <summary>
	/// Properties of a daily schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DayDetails
	{
		
		/// <summary>
		/// The time of day the schedule will occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// Properties of an hourly schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HourDetails
	{
		
		/// <summary>
		/// Minutes of the hour the schedule will run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public System.Nullable<System.Int32> Minute { get; set; }
	}
	
	/// <summary>
	/// Notification settings for a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationSettings
	{
		
		/// <summary>
		/// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailRecipient")]
		public string EmailRecipient { get; set; }
		
		/// <summary>
		/// The locale to use when sending a notification (fallback for unsupported languages is EN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationLocale")]
		public string NotificationLocale { get; set; }
		
		/// <summary>
		/// If notifications are enabled for this schedule (i.e. Enabled, Disabled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<NotificationSettingsStatus> Status { get; set; }
		
		/// <summary>
		/// Time in minutes before event at which notification will be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInMinutes")]
		public System.Nullable<System.Int32> TimeInMinutes { get; set; }
		
		/// <summary>
		/// The webhook URL to which the notification will be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		public string WebhookUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NotificationSettingsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Properties of a weekly schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WeekDetails
	{
		
		/// <summary>
		/// The time of the day the schedule will occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		/// <summary>
		/// The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekdays")]
		public string[] Weekdays { get; set; }
	}
	
	/// <summary>
	/// Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicableScheduleFragment
	{
		
		/// <summary>
		/// Properties of a schedules applicable to a virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApplicableSchedulePropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a schedules applicable to a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicableSchedulePropertiesFragment
	{
		
		/// <summary>
		/// A schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVmsShutdown")]
		public ScheduleFragment LabVmsShutdown { get; set; }
		
		/// <summary>
		/// A schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVmsStartup")]
		public ScheduleFragment LabVmsStartup { get; set; }
	}
	
	/// <summary>
	/// A schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduleFragment
	{
		
		/// <summary>
		/// Properties of a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SchedulePropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SchedulePropertiesFragment
	{
		
		/// <summary>
		/// Properties of a daily schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyRecurrence")]
		public DayDetailsFragment DailyRecurrence { get; set; }
		
		/// <summary>
		/// Properties of an hourly schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourlyRecurrence")]
		public HourDetailsFragment HourlyRecurrence { get; set; }
		
		/// <summary>
		/// Notification settings for a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSettings")]
		public NotificationSettingsFragment NotificationSettings { get; set; }
		
		/// <summary>
		/// The status of the schedule (i.e. Enabled, Disabled)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// The resource ID to which the schedule belongs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceId")]
		public string TargetResourceId { get; set; }
		
		/// <summary>
		/// The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskType")]
		public string TaskType { get; set; }
		
		/// <summary>
		/// The time zone ID (e.g. Pacific Standard time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneId")]
		public string TimeZoneId { get; set; }
		
		/// <summary>
		/// Properties of a weekly schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyRecurrence")]
		public WeekDetailsFragment WeeklyRecurrence { get; set; }
	}
	
	/// <summary>
	/// Properties of a daily schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DayDetailsFragment
	{
		
		/// <summary>
		/// The time of day the schedule will occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// Properties of an hourly schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HourDetailsFragment
	{
		
		/// <summary>
		/// Minutes of the hour the schedule will run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public System.Nullable<System.Int32> Minute { get; set; }
	}
	
	/// <summary>
	/// Notification settings for a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationSettingsFragment
	{
		
		/// <summary>
		/// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailRecipient")]
		public string EmailRecipient { get; set; }
		
		/// <summary>
		/// The locale to use when sending a notification (fallback for unsupported languages is EN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationLocale")]
		public string NotificationLocale { get; set; }
		
		/// <summary>
		/// If notifications are enabled for this schedule (i.e. Enabled, Disabled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// Time in minutes before event at which notification will be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeInMinutes")]
		public System.Nullable<System.Int32> TimeInMinutes { get; set; }
		
		/// <summary>
		/// The webhook URL to which the notification will be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// Properties of a weekly schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WeekDetailsFragment
	{
		
		/// <summary>
		/// The time of the day the schedule will occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		/// <summary>
		/// The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekdays")]
		public string[] Weekdays { get; set; }
	}
	
	/// <summary>
	/// Request body for applying artifacts to a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplyArtifactsRequest
	{
		
		/// <summary>
		/// The list of artifacts to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ArtifactInstallProperties[] Artifacts { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactInstallProperties
	{
		
		/// <summary>
		/// The artifact's identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// The artifact's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactTitle")]
		public string ArtifactTitle { get; set; }
		
		/// <summary>
		/// The status message from the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentStatusMessage")]
		public string DeploymentStatusMessage { get; set; }
		
		/// <summary>
		/// The time that the artifact starts to install on the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installTime")]
		public System.Nullable<System.DateTimeOffset> InstallTime { get; set; }
		
		/// <summary>
		/// The parameters of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ArtifactParameterProperties[] Parameters { get; set; }
		
		/// <summary>
		/// The status of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The status message from the virtual machine extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmExtensionStatusMessage")]
		public string VmExtensionStatusMessage { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactParameterProperties
	{
		
		/// <summary>
		/// The name of the artifact parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the artifact parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An Azure Resource Manager template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmTemplate
	{
		
		/// <summary>
		/// Properties of an Azure Resource Manager template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ArmTemplateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an Azure Resource Manager template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmTemplateProperties
	{
		
		/// <summary>
		/// The contents of the ARM template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
		
		/// <summary>
		/// The creation date of the armTemplate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The description of the ARM template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name of the ARM template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Whether or not ARM template is enabled for use by lab user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The URI to the icon of the ARM template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// File name and parameter values information from all azuredeploy.*.parameters.json for the ARM template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parametersValueFilesInfo")]
		public ParametersValueFileInfo[] ParametersValueFilesInfo { get; set; }
		
		/// <summary>
		/// The publisher of the ARM template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
	}
	
	/// <summary>
	/// A file containing a set of parameter values for an ARM template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParametersValueFileInfo
	{
		
		/// <summary>
		/// File name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// Contents of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parametersValueInfo")]
		public string ParametersValueInfo { get; set; }
	}
	
	/// <summary>
	/// Information about a generated ARM template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmTemplateInfo
	{
		
		/// <summary>
		/// The parameters of the ARM template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// The template's contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmTemplateList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ArmTemplate[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of an Azure Resource Manager template parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmTemplateParameterProperties
	{
		
		/// <summary>
		/// The name of the template parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the template parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Properties of an Azure Resource Manager template parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArmTemplateParameterPropertiesFragment
	{
		
		/// <summary>
		/// The name of the template parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the template parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Artifact
	{
		
		/// <summary>
		/// Properties of an artifact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ArtifactProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactProperties
	{
		
		/// <summary>
		/// The artifact's creation date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The artifact's description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The file path to the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// The URI to the artifact icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// The artifact's parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// The artifact's publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The artifact's target OS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetOsType")]
		public string TargetOsType { get; set; }
		
		/// <summary>
		/// The artifact's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactDeploymentStatusProperties
	{
		
		/// <summary>
		/// The total count of the artifacts that were successfully applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactsApplied")]
		public System.Nullable<System.Int32> ArtifactsApplied { get; set; }
		
		/// <summary>
		/// The deployment status of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentStatus")]
		public string DeploymentStatus { get; set; }
		
		/// <summary>
		/// The total count of the artifacts that were tentatively applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalArtifacts")]
		public System.Nullable<System.Int32> TotalArtifacts { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactDeploymentStatusPropertiesFragment
	{
		
		/// <summary>
		/// The total count of the artifacts that were successfully applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactsApplied")]
		public System.Nullable<System.Int32> ArtifactsApplied { get; set; }
		
		/// <summary>
		/// The deployment status of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentStatus")]
		public string DeploymentStatus { get; set; }
		
		/// <summary>
		/// The total count of the artifacts that were tentatively applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalArtifacts")]
		public System.Nullable<System.Int32> TotalArtifacts { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactInstallPropertiesFragment
	{
		
		/// <summary>
		/// The artifact's identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// The artifact's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactTitle")]
		public string ArtifactTitle { get; set; }
		
		/// <summary>
		/// The status message from the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentStatusMessage")]
		public string DeploymentStatusMessage { get; set; }
		
		/// <summary>
		/// The time that the artifact starts to install on the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installTime")]
		public System.Nullable<System.DateTimeOffset> InstallTime { get; set; }
		
		/// <summary>
		/// The parameters of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ArtifactParameterPropertiesFragment[] Parameters { get; set; }
		
		/// <summary>
		/// The status of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The status message from the virtual machine extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmExtensionStatusMessage")]
		public string VmExtensionStatusMessage { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactParameterPropertiesFragment
	{
		
		/// <summary>
		/// The name of the artifact parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the artifact parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Artifact[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactSource
	{
		
		/// <summary>
		/// Properties of an artifact source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ArtifactSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactSourceProperties
	{
		
		/// <summary>
		/// The folder containing Azure Resource Manager templates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="armTemplateFolderPath")]
		public string ArmTemplateFolderPath { get; set; }
		
		/// <summary>
		/// The artifact source's branch reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchRef")]
		public string BranchRef { get; set; }
		
		/// <summary>
		/// The artifact source's creation date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The artifact source's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The folder containing artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The security token to authenticate to the artifact source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityToken")]
		public string SecurityToken { get; set; }
		
		/// <summary>
		/// The artifact source's type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public System.Nullable<ArtifactSourcePropertiesSourceType> SourceType { get; set; }
		
		/// <summary>
		/// Indicates if the artifact source is enabled (values: Enabled, Disabled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
		
		/// <summary>
		/// The artifact source's URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ArtifactSourcePropertiesSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VsoGit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 1,
	}
	
	/// <summary>
	/// Properties of an artifact source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactSourceFragment
	{
		
		/// <summary>
		/// Properties of an artifact source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ArtifactSourcePropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an artifact source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactSourcePropertiesFragment
	{
		
		/// <summary>
		/// The folder containing Azure Resource Manager templates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="armTemplateFolderPath")]
		public string ArmTemplateFolderPath { get; set; }
		
		/// <summary>
		/// The artifact source's branch reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchRef")]
		public string BranchRef { get; set; }
		
		/// <summary>
		/// The artifact source's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The folder containing artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// The security token to authenticate to the artifact source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityToken")]
		public string SecurityToken { get; set; }
		
		/// <summary>
		/// The artifact source's type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public ArtifactSourcePropertiesSourceType SourceType { get; set; }
		
		/// <summary>
		/// Indicates if the artifact source is enabled (values: Enabled, Disabled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// The artifact source's URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactSourceList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ArtifactSource[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the disk to attach.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AttachDiskProperties
	{
		
		/// <summary>
		/// The resource ID of the Lab virtual machine to which the disk is attached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leasedByLabVmId")]
		public string LeasedByLabVmId { get; set; }
	}
	
	/// <summary>
	/// Properties to attach new disk to the Virtual Machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AttachNewDataDiskOptions
	{
		
		/// <summary>
		/// The name of the disk to be attached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Size of the disk to be attached in GibiBytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGiB")]
		public System.Nullable<System.Int32> DiskSizeGiB { get; set; }
		
		/// <summary>
		/// The storage type for the disk (i.e. Standard, Premium).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public System.Nullable<AttachNewDataDiskOptionsDiskType> DiskType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AttachNewDataDiskOptionsDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD = 2,
	}
	
	/// <summary>
	/// Properties to attach new disk to the Virtual Machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AttachNewDataDiskOptionsFragment
	{
		
		/// <summary>
		/// The name of the disk to be attached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Size of the disk to be attached in GibiBytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGiB")]
		public System.Nullable<System.Int32> DiskSizeGiB { get; set; }
		
		/// <summary>
		/// The storage type for the disk (i.e. Standard, Premium).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public AttachNewDataDiskOptionsDiskType DiskType { get; set; }
	}
	
	/// <summary>
	/// Parameters for creating multiple virtual machines as a single action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BulkCreationParameters
	{
		
		/// <summary>
		/// The number of virtual machine instances to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceCount")]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
	}
	
	/// <summary>
	/// Parameters for creating multiple virtual machines as a single action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BulkCreationParametersFragment
	{
		
		/// <summary>
		/// The number of virtual machine instances to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceCount")]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
	}
	
	/// <summary>
	/// Error from a REST request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// Body of an error from a REST request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// Body of an error from a REST request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Inner errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The error target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// A data disks attached to a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeDataDisk
	{
		
		/// <summary>
		/// Gets data disk size in GiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGiB")]
		public System.Nullable<System.Int32> DiskSizeGiB { get; set; }
		
		/// <summary>
		/// When backed by a blob, the URI of underlying blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskUri")]
		public string DiskUri { get; set; }
		
		/// <summary>
		/// When backed by managed disk, this is the ID of the compute disk resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedDiskId")]
		public string ManagedDiskId { get; set; }
		
		/// <summary>
		/// Gets data disk name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A data disks attached to a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeDataDiskFragment
	{
		
		/// <summary>
		/// Gets data disk size in GiB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGiB")]
		public System.Nullable<System.Int32> DiskSizeGiB { get; set; }
		
		/// <summary>
		/// When backed by a blob, the URI of underlying blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskUri")]
		public string DiskUri { get; set; }
		
		/// <summary>
		/// When backed by managed disk, this is the ID of the compute disk resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedDiskId")]
		public string ManagedDiskId { get; set; }
		
		/// <summary>
		/// Gets data disk name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Status information about a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeVmInstanceViewStatus
	{
		
		/// <summary>
		/// Gets the status Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Gets the short localizable label for the status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayStatus")]
		public string DisplayStatus { get; set; }
		
		/// <summary>
		/// Gets the message associated with the status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Status information about a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeVmInstanceViewStatusFragment
	{
		
		/// <summary>
		/// Gets the status Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Gets the short localizable label for the status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayStatus")]
		public string DisplayStatus { get; set; }
		
		/// <summary>
		/// Gets the message associated with the status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Properties of a virtual machine returned by the Microsoft.Compute API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeVmProperties
	{
		
		/// <summary>
		/// Gets data disks blob uri for the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskIds")]
		public string[] DataDiskIds { get; set; }
		
		/// <summary>
		/// Gets all data disks attached to the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisks")]
		public ComputeDataDisk[] DataDisks { get; set; }
		
		/// <summary>
		/// Gets the network interface ID of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInterfaceId")]
		public string NetworkInterfaceId { get; set; }
		
		/// <summary>
		/// Gets OS disk blob uri for the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osDiskId")]
		public string OsDiskId { get; set; }
		
		/// <summary>
		/// Gets the OS type of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// Gets the statuses of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statuses")]
		public ComputeVmInstanceViewStatus[] Statuses { get; set; }
		
		/// <summary>
		/// Gets the size of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	/// <summary>
	/// Properties of a virtual machine returned by the Microsoft.Compute API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeVmPropertiesFragment
	{
		
		/// <summary>
		/// Gets data disks blob uri for the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskIds")]
		public string[] DataDiskIds { get; set; }
		
		/// <summary>
		/// Gets all data disks attached to the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisks")]
		public ComputeDataDiskFragment[] DataDisks { get; set; }
		
		/// <summary>
		/// Gets the network interface ID of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInterfaceId")]
		public string NetworkInterfaceId { get; set; }
		
		/// <summary>
		/// Gets OS disk blob uri for the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osDiskId")]
		public string OsDiskId { get; set; }
		
		/// <summary>
		/// Gets the OS type of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// Gets the statuses of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statuses")]
		public ComputeVmInstanceViewStatusFragment[] Statuses { get; set; }
		
		/// <summary>
		/// Gets the size of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	/// <summary>
	/// Properties of a cost threshold item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CostThresholdProperties
	{
		
		/// <summary>
		/// Indicates whether this threshold will be displayed on cost charts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayOnChart")]
		public NotificationSettingsStatus DisplayOnChart { get; set; }
		
		/// <summary>
		/// Indicates the datetime when notifications were last sent for this threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSent")]
		public string NotificationSent { get; set; }
		
		/// <summary>
		/// Properties of a percentage cost threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentageThreshold")]
		public PercentageCostThresholdProperties PercentageThreshold { get; set; }
		
		/// <summary>
		/// Indicates whether notifications will be sent when this threshold is exceeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendNotificationWhenExceeded")]
		public NotificationSettingsStatus SendNotificationWhenExceeded { get; set; }
		
		/// <summary>
		/// The ID of the cost threshold item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thresholdId")]
		public string ThresholdId { get; set; }
	}
	
	/// <summary>
	/// Properties of a percentage cost threshold.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PercentageCostThresholdProperties
	{
		
		/// <summary>
		/// The cost threshold value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thresholdValue")]
		public System.Nullable<System.Double> ThresholdValue { get; set; }
	}
	
	/// <summary>
	/// A custom image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImage
	{
		
		/// <summary>
		/// Properties of a custom image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CustomImageProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a custom image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImageProperties
	{
		
		/// <summary>
		/// The author of the custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// The creation date of the custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Properties for plan on a custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customImagePlan")]
		public CustomImagePropertiesFromPlan CustomImagePlan { get; set; }
		
		/// <summary>
		/// Storage information about the data disks present in the custom image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskStorageInfo")]
		public DataDiskStorageTypeInfo[] DataDiskStorageInfo { get; set; }
		
		/// <summary>
		/// The description of the custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPlanAuthorized")]
		public System.Nullable<System.Boolean> IsPlanAuthorized { get; set; }
		
		/// <summary>
		/// The Managed Image Id backing the custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedImageId")]
		public string ManagedImageId { get; set; }
		
		/// <summary>
		/// The Managed Snapshot Id backing the custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedSnapshotId")]
		public string ManagedSnapshotId { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
		
		/// <summary>
		/// Properties for creating a custom image from a VHD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vhd")]
		public CustomImagePropertiesCustom Vhd { get; set; }
		
		/// <summary>
		/// Properties for creating a custom image from a virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public CustomImagePropertiesFromVm Vm { get; set; }
	}
	
	/// <summary>
	/// Properties for plan on a custom image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImagePropertiesFromPlan
	{
		
		/// <summary>
		/// The id of the plan, equivalent to name of the plan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The offer for the plan from the marketplace image the custom image is derived from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// The publisher for the plan from the marketplace image the custom image is derived from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
	}
	
	/// <summary>
	/// Storage information about the data disks present in the custom image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataDiskStorageTypeInfo
	{
		
		/// <summary>
		/// Disk Lun
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lun")]
		public string Lun { get; set; }
		
		/// <summary>
		/// Disk Storage Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public AttachNewDataDiskOptionsDiskType StorageType { get; set; }
	}
	
	/// <summary>
	/// Properties for creating a custom image from a VHD.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImagePropertiesCustom
	{
		
		/// <summary>
		/// The image name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageName")]
		public string ImageName { get; set; }
		
		/// <summary>
		/// The OS type of the custom image (i.e. Windows, Linux)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public CustomImagePropertiesCustomOsType OsType { get; set; }
		
		/// <summary>
		/// Indicates whether sysprep has been run on the VHD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sysPrep")]
		public System.Nullable<System.Boolean> SysPrep { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomImagePropertiesCustomOsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// Properties for creating a custom image from a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImagePropertiesFromVm
	{
		
		/// <summary>
		/// Information about a Linux OS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linuxOsInfo")]
		public LinuxOsInfo LinuxOsInfo { get; set; }
		
		/// <summary>
		/// The source vm identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceVmId")]
		public string SourceVmId { get; set; }
		
		/// <summary>
		/// Information about a Windows OS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsOsInfo")]
		public WindowsOsInfo WindowsOsInfo { get; set; }
	}
	
	/// <summary>
	/// Information about a Linux OS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinuxOsInfo
	{
		
		/// <summary>
		/// The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linuxOsState")]
		public System.Nullable<LinuxOsInfoLinuxOsState> LinuxOsState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LinuxOsInfoLinuxOsState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonDeprovisioned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeprovisionRequested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeprovisionApplied = 2,
	}
	
	/// <summary>
	/// Information about a Windows OS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WindowsOsInfo
	{
		
		/// <summary>
		/// The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsOsState")]
		public System.Nullable<WindowsOsInfoWindowsOsState> WindowsOsState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WindowsOsInfoWindowsOsState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonSysprepped = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SysprepRequested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SysprepApplied = 2,
	}
	
	/// <summary>
	/// A custom image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImageFragment
	{
		
		/// <summary>
		/// Properties of a custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CustomImagePropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a custom image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImagePropertiesFragment
	{
		
		/// <summary>
		/// The author of the custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// Properties for plan on a custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customImagePlan")]
		public CustomImagePropertiesFromPlanFragment CustomImagePlan { get; set; }
		
		/// <summary>
		/// Storage information about the data disks present in the custom image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskStorageInfo")]
		public DataDiskStorageTypeInfoFragment[] DataDiskStorageInfo { get; set; }
		
		/// <summary>
		/// The description of the custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPlanAuthorized")]
		public System.Nullable<System.Boolean> IsPlanAuthorized { get; set; }
		
		/// <summary>
		/// The Managed Image Id backing the custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedImageId")]
		public string ManagedImageId { get; set; }
		
		/// <summary>
		/// The Managed Snapshot Id backing the custom image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedSnapshotId")]
		public string ManagedSnapshotId { get; set; }
		
		/// <summary>
		/// Properties for creating a custom image from a VHD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vhd")]
		public CustomImagePropertiesCustomFragment Vhd { get; set; }
		
		/// <summary>
		/// Properties for creating a custom image from a virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public CustomImagePropertiesFromVmFragment Vm { get; set; }
	}
	
	/// <summary>
	/// Properties for plan on a custom image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImagePropertiesFromPlanFragment
	{
		
		/// <summary>
		/// The id of the plan, equivalent to name of the plan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The offer for the plan from the marketplace image the custom image is derived from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// The publisher for the plan from the marketplace image the custom image is derived from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
	}
	
	/// <summary>
	/// Storage information about the data disks present in the custom image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataDiskStorageTypeInfoFragment
	{
		
		/// <summary>
		/// Disk Lun
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lun")]
		public string Lun { get; set; }
		
		/// <summary>
		/// Disk Storage Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public AttachNewDataDiskOptionsDiskType StorageType { get; set; }
	}
	
	/// <summary>
	/// Properties for creating a custom image from a VHD.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImagePropertiesCustomFragment
	{
		
		/// <summary>
		/// The image name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageName")]
		public string ImageName { get; set; }
		
		/// <summary>
		/// The OS type of the custom image (i.e. Windows, Linux)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public CustomImagePropertiesCustomOsType OsType { get; set; }
		
		/// <summary>
		/// Indicates whether sysprep has been run on the VHD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sysPrep")]
		public System.Nullable<System.Boolean> SysPrep { get; set; }
	}
	
	/// <summary>
	/// Properties for creating a custom image from a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImagePropertiesFromVmFragment
	{
		
		/// <summary>
		/// Information about a Linux OS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linuxOsInfo")]
		public LinuxOsInfoFragment LinuxOsInfo { get; set; }
		
		/// <summary>
		/// The source vm identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceVmId")]
		public string SourceVmId { get; set; }
		
		/// <summary>
		/// Information about a Windows OS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsOsInfo")]
		public WindowsOsInfoFragment WindowsOsInfo { get; set; }
	}
	
	/// <summary>
	/// Information about a Linux OS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinuxOsInfoFragment
	{
		
		/// <summary>
		/// The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linuxOsState")]
		public LinuxOsInfoLinuxOsState LinuxOsState { get; set; }
	}
	
	/// <summary>
	/// Information about a Windows OS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WindowsOsInfoFragment
	{
		
		/// <summary>
		/// The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsOsState")]
		public WindowsOsInfoWindowsOsState WindowsOsState { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomImageList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CustomImage[] Value { get; set; }
	}
	
	/// <summary>
	/// Request body for adding a new or existing data disk to a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataDiskProperties
	{
		
		/// <summary>
		/// Properties to attach new disk to the Virtual Machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachNewDataDiskOptions")]
		public AttachNewDataDiskOptions AttachNewDataDiskOptions { get; set; }
		
		/// <summary>
		/// Specifies the existing lab disk id to attach to virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="existingLabDiskId")]
		public string ExistingLabDiskId { get; set; }
		
		/// <summary>
		/// Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostCaching")]
		public System.Nullable<DataDiskPropertiesHostCaching> HostCaching { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataDiskPropertiesHostCaching
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadWrite = 2,
	}
	
	/// <summary>
	/// Request body for adding a new or existing data disk to a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataDiskPropertiesFragment
	{
		
		/// <summary>
		/// Properties to attach new disk to the Virtual Machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachNewDataDiskOptions")]
		public AttachNewDataDiskOptionsFragment AttachNewDataDiskOptions { get; set; }
		
		/// <summary>
		/// Specifies the existing lab disk id to attach to virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="existingLabDiskId")]
		public string ExistingLabDiskId { get; set; }
		
		/// <summary>
		/// Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostCaching")]
		public DataDiskPropertiesHostCaching HostCaching { get; set; }
	}
	
	/// <summary>
	/// Request body for detaching data disk from a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetachDataDiskProperties
	{
		
		/// <summary>
		/// Specifies the disk resource ID to detach from virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="existingLabDiskId")]
		public string ExistingLabDiskId { get; set; }
	}
	
	/// <summary>
	/// Properties of the disk to detach.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DetachDiskProperties
	{
		
		/// <summary>
		/// The resource ID of the Lab VM to which the disk is attached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leasedByLabVmId")]
		public string LeasedByLabVmId { get; set; }
	}
	
	/// <summary>
	/// A Disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Disk
	{
		
		/// <summary>
		/// Properties of a disk.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DiskProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskProperties
	{
		
		/// <summary>
		/// The creation date of the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// When backed by a blob, the name of the VHD blob without extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskBlobName")]
		public string DiskBlobName { get; set; }
		
		/// <summary>
		/// The size of the disk in GibiBytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGiB")]
		public System.Nullable<System.Int32> DiskSizeGiB { get; set; }
		
		/// <summary>
		/// The storage type for the disk (i.e. Standard, Premium).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public AttachNewDataDiskOptionsDiskType DiskType { get; set; }
		
		/// <summary>
		/// When backed by a blob, the URI of underlying blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskUri")]
		public string DiskUri { get; set; }
		
		/// <summary>
		/// The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostCaching")]
		public string HostCaching { get; set; }
		
		/// <summary>
		/// The resource ID of the VM to which this disk is leased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leasedByLabVmId")]
		public string LeasedByLabVmId { get; set; }
		
		/// <summary>
		/// When backed by managed disk, this is the ID of the compute disk resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedDiskId")]
		public string ManagedDiskId { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
	}
	
	/// <summary>
	/// A Disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskFragment
	{
		
		/// <summary>
		/// Properties of a disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DiskPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskPropertiesFragment
	{
		
		/// <summary>
		/// When backed by a blob, the name of the VHD blob without extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskBlobName")]
		public string DiskBlobName { get; set; }
		
		/// <summary>
		/// The size of the disk in GibiBytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGiB")]
		public System.Nullable<System.Int32> DiskSizeGiB { get; set; }
		
		/// <summary>
		/// The storage type for the disk (i.e. Standard, Premium).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public AttachNewDataDiskOptionsDiskType DiskType { get; set; }
		
		/// <summary>
		/// When backed by a blob, the URI of underlying blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskUri")]
		public string DiskUri { get; set; }
		
		/// <summary>
		/// The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostCaching")]
		public string HostCaching { get; set; }
		
		/// <summary>
		/// The resource ID of the VM to which this disk is leased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leasedByLabVmId")]
		public string LeasedByLabVmId { get; set; }
		
		/// <summary>
		/// When backed by managed disk, this is the ID of the compute disk resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedDiskId")]
		public string ManagedDiskId { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Disk[] Value { get; set; }
	}
	
	/// <summary>
	/// An environment, which is essentially an ARM template deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DtlEnvironment
	{
		
		/// <summary>
		/// Properties of an environment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EnvironmentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentProperties
	{
		
		/// <summary>
		/// The display name of the Azure Resource Manager template that produced the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="armTemplateDisplayName")]
		public string ArmTemplateDisplayName { get; set; }
		
		/// <summary>
		/// The creator of the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdByUser")]
		public string CreatedByUser { get; set; }
		
		/// <summary>
		/// Properties of an environment deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentProperties")]
		public EnvironmentDeploymentProperties DeploymentProperties { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The identifier of the resource group containing the environment's resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
	}
	
	/// <summary>
	/// Properties of an environment deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentDeploymentProperties
	{
		
		/// <summary>
		/// The Azure Resource Manager template's identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="armTemplateId")]
		public string ArmTemplateId { get; set; }
		
		/// <summary>
		/// The parameters of the Azure Resource Manager template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ArmTemplateParameterProperties[] Parameters { get; set; }
	}
	
	/// <summary>
	/// An environment, which is essentially an ARM template deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DtlEnvironmentFragment
	{
		
		/// <summary>
		/// Properties of an environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EnvironmentPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentPropertiesFragment
	{
		
		/// <summary>
		/// The display name of the Azure Resource Manager template that produced the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="armTemplateDisplayName")]
		public string ArmTemplateDisplayName { get; set; }
		
		/// <summary>
		/// Properties of an environment deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentProperties")]
		public EnvironmentDeploymentPropertiesFragment DeploymentProperties { get; set; }
	}
	
	/// <summary>
	/// Properties of an environment deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentDeploymentPropertiesFragment
	{
		
		/// <summary>
		/// The Azure Resource Manager template's identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="armTemplateId")]
		public string ArmTemplateId { get; set; }
		
		/// <summary>
		/// The parameters of the Azure Resource Manager template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ArmTemplateParameterPropertiesFragment[] Parameters { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DtlEnvironmentList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DtlEnvironment[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties for evaluating a policy set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EvaluatePoliciesProperties
	{
		
		/// <summary>
		/// The fact data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factData")]
		public string FactData { get; set; }
		
		/// <summary>
		/// The fact name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factName")]
		public string FactName { get; set; }
		
		/// <summary>
		/// The user for which policies will be evaluated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userObjectId")]
		public string UserObjectId { get; set; }
		
		/// <summary>
		/// The value offset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueOffset")]
		public string ValueOffset { get; set; }
	}
	
	/// <summary>
	/// Request body for evaluating a policy set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EvaluatePoliciesRequest
	{
		
		/// <summary>
		/// Policies to evaluate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public EvaluatePoliciesProperties[] Policies { get; set; }
	}
	
	/// <summary>
	/// Response body for evaluating a policy set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EvaluatePoliciesResponse
	{
		
		/// <summary>
		/// Results of evaluating a policy set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PolicySetResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Result of a policy set evaluation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicySetResult
	{
		
		/// <summary>
		/// A value indicating whether this policy set evaluation has discovered violations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasError")]
		public System.Nullable<System.Boolean> HasError { get; set; }
		
		/// <summary>
		/// The list of policy violations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyViolations")]
		public PolicyViolation[] PolicyViolations { get; set; }
	}
	
	/// <summary>
	/// Policy violation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyViolation
	{
		
		/// <summary>
		/// The code of the policy violation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The message of the policy violation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// An event to be notified for.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Event
	{
		
		/// <summary>
		/// The event type for which this notification is enabled (i.e. AutoShutdown, Cost)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public System.Nullable<EventEventName> EventName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EventEventName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoShutdown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cost = 1,
	}
	
	/// <summary>
	/// An event to be notified for.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventFragment
	{
		
		/// <summary>
		/// The event type for which this notification is enabled (i.e. AutoShutdown, Cost)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public EventEventName EventName { get; set; }
	}
	
	/// <summary>
	/// The parameters of the export operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportResourceUsageParameters
	{
		
		/// <summary>
		/// The blob storage absolute sas uri with write permission to the container which the usage data needs to be uploaded to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobStorageAbsoluteSasUri")]
		public string BlobStorageAbsoluteSasUri { get; set; }
		
		/// <summary>
		/// The start time of the usage. If not provided, usage will be reported since the beginning of data collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageStartDate")]
		public System.Nullable<System.DateTimeOffset> UsageStartDate { get; set; }
	}
	
	/// <summary>
	/// Subnet information as returned by the Microsoft.Network API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExternalSubnet
	{
		
		/// <summary>
		/// Gets or sets the identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Gets or sets the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Subnet information as returned by the Microsoft.Network API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExternalSubnetFragment
	{
		
		/// <summary>
		/// Gets or sets the identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Gets or sets the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A formula for creating a VM, specifying an image base and other parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Formula
	{
		
		/// <summary>
		/// Properties of a formula.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FormulaProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a formula.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FormulaProperties
	{
		
		/// <summary>
		/// The author of the formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// The creation date of the formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The description of the formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Properties for creating a virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formulaContent")]
		public LabVirtualMachineCreationParameter FormulaContent { get; set; }
		
		/// <summary>
		/// The OS type of the formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
		
		/// <summary>
		/// Information about a VM from which a formula is to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public FormulaPropertiesFromVm Vm { get; set; }
	}
	
	/// <summary>
	/// Properties for creating a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVirtualMachineCreationParameter
	{
		
		/// <summary>
		/// The location of the new virtual machine or environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the virtual machine or environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties for virtual machine creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LabVirtualMachineCreationParameterProperties Properties { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Properties for virtual machine creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVirtualMachineCreationParameterProperties
	{
		
		/// <summary>
		/// Indicates whether another user can take ownership of the virtual machine
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowClaim")]
		public System.Nullable<System.Boolean> AllowClaim { get; set; }
		
		/// <summary>
		/// Properties of an artifact deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactDeploymentStatus")]
		public ArtifactDeploymentStatusProperties ArtifactDeploymentStatus { get; set; }
		
		/// <summary>
		/// The artifacts to be installed on the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ArtifactInstallProperties[] Artifacts { get; set; }
		
		/// <summary>
		/// Parameters for creating multiple virtual machines as a single action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulkCreationParameters")]
		public BulkCreationParameters BulkCreationParameters { get; set; }
		
		/// <summary>
		/// The resource identifier (Microsoft.Compute) of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeId")]
		public string ComputeId { get; set; }
		
		/// <summary>
		/// The email address of creator of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdByUser")]
		public string CreatedByUser { get; set; }
		
		/// <summary>
		/// The object identifier of the creator of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdByUserId")]
		public string CreatedByUserId { get; set; }
		
		/// <summary>
		/// The creation date of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The custom image identifier of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customImageId")]
		public string CustomImageId { get; set; }
		
		/// <summary>
		/// New or existing data disks to attach to the virtual machine after creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskParameters")]
		public DataDiskProperties[] DataDiskParameters { get; set; }
		
		/// <summary>
		/// Indicates whether the virtual machine is to be created without a public IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disallowPublicIpAddress")]
		public System.Nullable<System.Boolean> DisallowPublicIpAddress { get; set; }
		
		/// <summary>
		/// The resource ID of the environment that contains this virtual machine, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// The expiration date for VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// The fully-qualified domain name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		/// <summary>
		/// The reference information for an Azure Marketplace image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="galleryImageReference")]
		public GalleryImageReference GalleryImageReference { get; set; }
		
		/// <summary>
		/// Indicates whether this virtual machine uses an SSH key for authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAuthenticationWithSshKey")]
		public System.Nullable<System.Boolean> IsAuthenticationWithSshKey { get; set; }
		
		/// <summary>
		/// The lab subnet name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labSubnetName")]
		public string LabSubnetName { get; set; }
		
		/// <summary>
		/// The lab virtual network identifier of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVirtualNetworkId")]
		public string LabVirtualNetworkId { get; set; }
		
		/// <summary>
		/// Last known compute power state captured in DTL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastKnownPowerState")]
		public string LastKnownPowerState { get; set; }
		
		/// <summary>
		/// Properties of a network interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInterface")]
		public NetworkInterfaceProperties NetworkInterface { get; set; }
		
		/// <summary>
		/// The notes of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The OS type of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// The object identifier of the owner of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerObjectId")]
		public string OwnerObjectId { get; set; }
		
		/// <summary>
		/// The user principal name of the virtual machine owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerUserPrincipalName")]
		public string OwnerUserPrincipalName { get; set; }
		
		/// <summary>
		/// The password of the virtual machine administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The id of the plan associated with the virtual machine image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
		
		/// <summary>
		/// Virtual Machine schedules to be created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleParameters")]
		public ScheduleCreationParameter[] ScheduleParameters { get; set; }
		
		/// <summary>
		/// The size of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The SSH key of the virtual machine administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshKey")]
		public string SshKey { get; set; }
		
		/// <summary>
		/// Storage type to use for virtual machine (i.e. Standard, Premium).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public string StorageType { get; set; }
		
		/// <summary>
		/// The user name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// Tells source of creation of lab virtual machine. Output property only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCreationSource")]
		public System.Nullable<LabVirtualMachineCreationParameterPropertiesVirtualMachineCreationSource> VirtualMachineCreationSource { get; set; }
	}
	
	/// <summary>
	/// The reference information for an Azure Marketplace image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageReference
	{
		
		/// <summary>
		/// The offer of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// The OS type of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// The publisher of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The SKU of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// The version of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Properties of a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkInterfaceProperties
	{
		
		/// <summary>
		/// The DNS name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsName")]
		public string DnsName { get; set; }
		
		/// <summary>
		/// The private IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateIpAddress")]
		public string PrivateIpAddress { get; set; }
		
		/// <summary>
		/// The public IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIpAddress")]
		public string PublicIpAddress { get; set; }
		
		/// <summary>
		/// The resource ID of the public IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIpAddressId")]
		public string PublicIpAddressId { get; set; }
		
		/// <summary>
		/// The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rdpAuthority")]
		public string RdpAuthority { get; set; }
		
		/// <summary>
		/// Properties of a virtual machine that determine how it is connected to a load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedPublicIpAddressConfiguration")]
		public SharedPublicIpAddressConfiguration SharedPublicIpAddressConfiguration { get; set; }
		
		/// <summary>
		/// The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshAuthority")]
		public string SshAuthority { get; set; }
		
		/// <summary>
		/// The resource ID of the sub net.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// The resource ID of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkId")]
		public string VirtualNetworkId { get; set; }
	}
	
	/// <summary>
	/// Properties of a virtual machine that determine how it is connected to a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SharedPublicIpAddressConfiguration
	{
		
		/// <summary>
		/// The incoming NAT rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundNatRules")]
		public InboundNatRule[] InboundNatRules { get; set; }
	}
	
	/// <summary>
	/// A rule for NAT - exposing a VM's port (backendPort) on the public IP address using a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InboundNatRule
	{
		
		/// <summary>
		/// The port to which the external traffic will be redirected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendPort")]
		public System.Nullable<System.Int32> BackendPort { get; set; }
		
		/// <summary>
		/// The external endpoint port of the inbound connection. Possible values range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frontendPort")]
		public System.Nullable<System.Int32> FrontendPort { get; set; }
		
		/// <summary>
		/// The transport protocol for the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportProtocol")]
		public System.Nullable<InboundNatRuleTransportProtocol> TransportProtocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InboundNatRuleTransportProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tcp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Udp = 1,
	}
	
	/// <summary>
	/// Properties for creating a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduleCreationParameter
	{
		
		/// <summary>
		/// The location of the new virtual machine or environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the virtual machine or environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties for schedule creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScheduleCreationParameterProperties Properties { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Properties for schedule creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduleCreationParameterProperties
	{
		
		/// <summary>
		/// Properties of a daily schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyRecurrence")]
		public DayDetails DailyRecurrence { get; set; }
		
		/// <summary>
		/// Properties of an hourly schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourlyRecurrence")]
		public HourDetails HourlyRecurrence { get; set; }
		
		/// <summary>
		/// Notification settings for a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSettings")]
		public NotificationSettings NotificationSettings { get; set; }
		
		/// <summary>
		/// The status of the schedule (i.e. Enabled, Disabled)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// The resource ID to which the schedule belongs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceId")]
		public string TargetResourceId { get; set; }
		
		/// <summary>
		/// The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskType")]
		public string TaskType { get; set; }
		
		/// <summary>
		/// The time zone ID (e.g. Pacific Standard time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneId")]
		public string TimeZoneId { get; set; }
		
		/// <summary>
		/// Properties of a weekly schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyRecurrence")]
		public WeekDetails WeeklyRecurrence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LabVirtualMachineCreationParameterPropertiesVirtualMachineCreationSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FromCustomImage = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FromGalleryImage = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FromSharedGalleryImage = 2,
	}
	
	/// <summary>
	/// Information about a VM from which a formula is to be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FormulaPropertiesFromVm
	{
		
		/// <summary>
		/// The identifier of the VM from which a formula is to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVmId")]
		public string LabVmId { get; set; }
	}
	
	/// <summary>
	/// A formula for creating a VM, specifying an image base and other parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FormulaFragment
	{
		
		/// <summary>
		/// Properties of a formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FormulaPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a formula.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FormulaPropertiesFragment
	{
		
		/// <summary>
		/// The author of the formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// The description of the formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Properties for creating a virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formulaContent")]
		public LabVirtualMachineCreationParameterFragment FormulaContent { get; set; }
		
		/// <summary>
		/// The OS type of the formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// Information about a VM from which a formula is to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public FormulaPropertiesFromVmFragment Vm { get; set; }
	}
	
	/// <summary>
	/// Properties for creating a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVirtualMachineCreationParameterFragment
	{
		
		/// <summary>
		/// The location of the new virtual machine or environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the virtual machine or environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties for virtual machine creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LabVirtualMachineCreationParameterPropertiesFragment Properties { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Properties for virtual machine creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVirtualMachineCreationParameterPropertiesFragment
	{
		
		/// <summary>
		/// Indicates whether another user can take ownership of the virtual machine
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowClaim")]
		public System.Nullable<System.Boolean> AllowClaim { get; set; }
		
		/// <summary>
		/// Properties of an artifact deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactDeploymentStatus")]
		public ArtifactDeploymentStatusPropertiesFragment ArtifactDeploymentStatus { get; set; }
		
		/// <summary>
		/// The artifacts to be installed on the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ArtifactInstallPropertiesFragment[] Artifacts { get; set; }
		
		/// <summary>
		/// Parameters for creating multiple virtual machines as a single action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulkCreationParameters")]
		public BulkCreationParametersFragment BulkCreationParameters { get; set; }
		
		/// <summary>
		/// The resource identifier (Microsoft.Compute) of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeId")]
		public string ComputeId { get; set; }
		
		/// <summary>
		/// The email address of creator of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdByUser")]
		public string CreatedByUser { get; set; }
		
		/// <summary>
		/// The object identifier of the creator of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdByUserId")]
		public string CreatedByUserId { get; set; }
		
		/// <summary>
		/// The creation date of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The custom image identifier of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customImageId")]
		public string CustomImageId { get; set; }
		
		/// <summary>
		/// New or existing data disks to attach to the virtual machine after creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskParameters")]
		public DataDiskPropertiesFragment[] DataDiskParameters { get; set; }
		
		/// <summary>
		/// Indicates whether the virtual machine is to be created without a public IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disallowPublicIpAddress")]
		public System.Nullable<System.Boolean> DisallowPublicIpAddress { get; set; }
		
		/// <summary>
		/// The resource ID of the environment that contains this virtual machine, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// The expiration date for VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// The fully-qualified domain name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		/// <summary>
		/// The reference information for an Azure Marketplace image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="galleryImageReference")]
		public GalleryImageReferenceFragment GalleryImageReference { get; set; }
		
		/// <summary>
		/// Indicates whether this virtual machine uses an SSH key for authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAuthenticationWithSshKey")]
		public System.Nullable<System.Boolean> IsAuthenticationWithSshKey { get; set; }
		
		/// <summary>
		/// The lab subnet name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labSubnetName")]
		public string LabSubnetName { get; set; }
		
		/// <summary>
		/// The lab virtual network identifier of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVirtualNetworkId")]
		public string LabVirtualNetworkId { get; set; }
		
		/// <summary>
		/// Last known compute power state captured in DTL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastKnownPowerState")]
		public string LastKnownPowerState { get; set; }
		
		/// <summary>
		/// Properties of a network interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInterface")]
		public NetworkInterfacePropertiesFragment NetworkInterface { get; set; }
		
		/// <summary>
		/// The notes of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The OS type of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// The object identifier of the owner of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerObjectId")]
		public string OwnerObjectId { get; set; }
		
		/// <summary>
		/// The user principal name of the virtual machine owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerUserPrincipalName")]
		public string OwnerUserPrincipalName { get; set; }
		
		/// <summary>
		/// The password of the virtual machine administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The id of the plan associated with the virtual machine image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
		
		/// <summary>
		/// Virtual Machine schedules to be created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleParameters")]
		public ScheduleCreationParameterFragment[] ScheduleParameters { get; set; }
		
		/// <summary>
		/// The size of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The SSH key of the virtual machine administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshKey")]
		public string SshKey { get; set; }
		
		/// <summary>
		/// Storage type to use for virtual machine (i.e. Standard, Premium).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public string StorageType { get; set; }
		
		/// <summary>
		/// The user name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// Tells source of creation of lab virtual machine. Output property only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCreationSource")]
		public LabVirtualMachineCreationParameterPropertiesVirtualMachineCreationSource VirtualMachineCreationSource { get; set; }
	}
	
	/// <summary>
	/// The reference information for an Azure Marketplace image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageReferenceFragment
	{
		
		/// <summary>
		/// The offer of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// The OS type of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// The publisher of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The SKU of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// The version of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Properties of a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkInterfacePropertiesFragment
	{
		
		/// <summary>
		/// The DNS name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsName")]
		public string DnsName { get; set; }
		
		/// <summary>
		/// The private IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateIpAddress")]
		public string PrivateIpAddress { get; set; }
		
		/// <summary>
		/// The public IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIpAddress")]
		public string PublicIpAddress { get; set; }
		
		/// <summary>
		/// The resource ID of the public IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIpAddressId")]
		public string PublicIpAddressId { get; set; }
		
		/// <summary>
		/// The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rdpAuthority")]
		public string RdpAuthority { get; set; }
		
		/// <summary>
		/// Properties of a virtual machine that determine how it is connected to a load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedPublicIpAddressConfiguration")]
		public SharedPublicIpAddressConfigurationFragment SharedPublicIpAddressConfiguration { get; set; }
		
		/// <summary>
		/// The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshAuthority")]
		public string SshAuthority { get; set; }
		
		/// <summary>
		/// The resource ID of the sub net.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// The resource ID of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkId")]
		public string VirtualNetworkId { get; set; }
	}
	
	/// <summary>
	/// Properties of a virtual machine that determine how it is connected to a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SharedPublicIpAddressConfigurationFragment
	{
		
		/// <summary>
		/// The incoming NAT rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundNatRules")]
		public InboundNatRuleFragment[] InboundNatRules { get; set; }
	}
	
	/// <summary>
	/// A rule for NAT - exposing a VM's port (backendPort) on the public IP address using a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InboundNatRuleFragment
	{
		
		/// <summary>
		/// The port to which the external traffic will be redirected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendPort")]
		public System.Nullable<System.Int32> BackendPort { get; set; }
		
		/// <summary>
		/// The external endpoint port of the inbound connection. Possible values range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frontendPort")]
		public System.Nullable<System.Int32> FrontendPort { get; set; }
		
		/// <summary>
		/// The transport protocol for the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportProtocol")]
		public InboundNatRuleTransportProtocol TransportProtocol { get; set; }
	}
	
	/// <summary>
	/// Properties for creating a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduleCreationParameterFragment
	{
		
		/// <summary>
		/// The location of the new virtual machine or environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the virtual machine or environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties for schedule creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScheduleCreationParameterPropertiesFragment Properties { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Properties for schedule creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduleCreationParameterPropertiesFragment
	{
		
		/// <summary>
		/// Properties of a daily schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyRecurrence")]
		public DayDetailsFragment DailyRecurrence { get; set; }
		
		/// <summary>
		/// Properties of an hourly schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourlyRecurrence")]
		public HourDetailsFragment HourlyRecurrence { get; set; }
		
		/// <summary>
		/// Notification settings for a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSettings")]
		public NotificationSettingsFragment NotificationSettings { get; set; }
		
		/// <summary>
		/// The status of the schedule (i.e. Enabled, Disabled)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// The resource ID to which the schedule belongs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceId")]
		public string TargetResourceId { get; set; }
		
		/// <summary>
		/// The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskType")]
		public string TaskType { get; set; }
		
		/// <summary>
		/// The time zone ID (e.g. Pacific Standard time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneId")]
		public string TimeZoneId { get; set; }
		
		/// <summary>
		/// Properties of a weekly schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyRecurrence")]
		public WeekDetailsFragment WeeklyRecurrence { get; set; }
	}
	
	/// <summary>
	/// Information about a VM from which a formula is to be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FormulaPropertiesFromVmFragment
	{
		
		/// <summary>
		/// The identifier of the VM from which a formula is to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVmId")]
		public string LabVmId { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FormulaList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Formula[] Value { get; set; }
	}
	
	/// <summary>
	/// A gallery image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImage
	{
		
		/// <summary>
		/// Properties of a gallery image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GalleryImageProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a gallery image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageProperties
	{
		
		/// <summary>
		/// The author of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// The creation date of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The description of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates whether this gallery image is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The icon of the gallery image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// The reference information for an Azure Marketplace image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageReference")]
		public GalleryImageReference ImageReference { get; set; }
		
		/// <summary>
		/// Indicates if the plan has been authorized for programmatic deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPlanAuthorized")]
		public System.Nullable<System.Boolean> IsPlanAuthorized { get; set; }
		
		/// <summary>
		/// The third party plan that applies to this image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GalleryImageList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GalleryImage[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters for generating an ARM template for deploying artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GenerateArmTemplateRequest
	{
		
		/// <summary>
		/// Options for uploading the files for the artifact. UploadFilesAndGenerateSasTokens is the default value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUploadOptions")]
		public System.Nullable<GenerateArmTemplateRequestFileUploadOptions> FileUploadOptions { get; set; }
		
		/// <summary>
		/// The location of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The parameters of the ARM template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterInfo[] Parameters { get; set; }
		
		/// <summary>
		/// The resource name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineName")]
		public string VirtualMachineName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GenerateArmTemplateRequestFileUploadOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadFilesAndGenerateSasTokens = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
	}
	
	/// <summary>
	/// Information about an artifact's parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterInfo
	{
		
		/// <summary>
		/// The name of the artifact parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the artifact parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Properties for generating an upload URI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GenerateUploadUriParameter
	{
		
		/// <summary>
		/// The blob name of the upload URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobName")]
		public string BlobName { get; set; }
	}
	
	/// <summary>
	/// Response body for generating an upload URI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GenerateUploadUriResponse
	{
		
		/// <summary>
		/// The upload URI for the VHD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadUri")]
		public string UploadUri { get; set; }
	}
	
	/// <summary>
	/// Properties of a managed identity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IdentityProperties
	{
		
		/// <summary>
		/// The client secret URL of the identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecretUrl")]
		public string ClientSecretUrl { get; set; }
		
		/// <summary>
		/// The principal id of resource identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant identifier of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Managed identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// This represents the payload required to import a virtual machine from a different lab into the current one
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImportLabVirtualMachineRequest
	{
		
		/// <summary>
		/// The name of the virtual machine in the destination lab
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationVirtualMachineName")]
		public string DestinationVirtualMachineName { get; set; }
		
		/// <summary>
		/// The full resource ID of the virtual machine to be imported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceVirtualMachineResourceId")]
		public string SourceVirtualMachineResourceId { get; set; }
	}
	
	/// <summary>
	/// A lab.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Lab
	{
		
		/// <summary>
		/// Properties of a lab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LabProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a lab.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabProperties
	{
		
		/// <summary>
		/// Properties of a lab's announcement banner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="announcement")]
		public LabAnnouncementProperties Announcement { get; set; }
		
		/// <summary>
		/// The lab's artifact storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactsStorageAccount")]
		public string ArtifactsStorageAccount { get; set; }
		
		/// <summary>
		/// The creation date of the lab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The lab's default premium storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPremiumStorageAccount")]
		public string DefaultPremiumStorageAccount { get; set; }
		
		/// <summary>
		/// The lab's default storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultStorageAccount")]
		public string DefaultStorageAccount { get; set; }
		
		/// <summary>
		/// The access rights to be granted to the user when provisioning an environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentPermission")]
		public System.Nullable<LabPropertiesEnvironmentPermission> EnvironmentPermission { get; set; }
		
		/// <summary>
		/// Extended properties of the lab used for experimental features
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedProperties")]
		public System.Collections.Generic.Dictionary<string, string> ExtendedProperties { get; set; }
		
		/// <summary>
		/// Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labStorageType")]
		public AttachNewDataDiskOptionsDiskType LabStorageType { get; set; }
		
		/// <summary>
		/// The load balancer used to for lab VMs that use shared IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancerId")]
		public string LoadBalancerId { get; set; }
		
		/// <summary>
		/// The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandatoryArtifactsResourceIdsLinux")]
		public string[] MandatoryArtifactsResourceIdsLinux { get; set; }
		
		/// <summary>
		/// The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandatoryArtifactsResourceIdsWindows")]
		public string[] MandatoryArtifactsResourceIdsWindows { get; set; }
		
		/// <summary>
		/// The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkSecurityGroupId")]
		public string NetworkSecurityGroupId { get; set; }
		
		/// <summary>
		/// The lab's premium data disk storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premiumDataDiskStorageAccount")]
		public string PremiumDataDiskStorageAccount { get; set; }
		
		/// <summary>
		/// The setting to enable usage of premium data disks.
		///When its value is 'Enabled', creation of standard or premium data disks is allowed.
		///When its value is 'Disabled', only creation of standard data disks is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premiumDataDisks")]
		public System.Nullable<LabPropertiesPremiumDataDisks> PremiumDataDisks { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The public IP address for the lab's load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIpId")]
		public string PublicIpId { get; set; }
		
		/// <summary>
		/// Properties of a lab's support banner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="support")]
		public LabSupportProperties Support { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
		
		/// <summary>
		/// The lab's Key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vaultName")]
		public string VaultName { get; set; }
		
		/// <summary>
		/// The resource group in which all new lab virtual machines will be created. To let DevTest Labs manage resource group creation, set this value to null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmCreationResourceGroup")]
		public string VmCreationResourceGroup { get; set; }
	}
	
	/// <summary>
	/// Properties of a lab's announcement banner
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabAnnouncementProperties
	{
		
		/// <summary>
		/// Is the lab announcement active/enabled at this time?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public NotificationSettingsStatus Enabled { get; set; }
		
		/// <summary>
		/// The time at which the announcement expires (null for never)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// Has this announcement expired?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expired")]
		public System.Nullable<System.Boolean> Expired { get; set; }
		
		/// <summary>
		/// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markdown")]
		public string Markdown { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The plain text title for the lab announcement
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LabPropertiesEnvironmentPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reader = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contributor = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LabPropertiesPremiumDataDisks
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Properties of a lab's support banner
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabSupportProperties
	{
		
		/// <summary>
		/// Is the lab support banner active/enabled at this time?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public NotificationSettingsStatus Enabled { get; set; }
		
		/// <summary>
		/// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markdown")]
		public string Markdown { get; set; }
	}
	
	/// <summary>
	/// Properties of a lab's announcement banner
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabAnnouncementPropertiesFragment
	{
		
		/// <summary>
		/// Is the lab announcement active/enabled at this time?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public NotificationSettingsStatus Enabled { get; set; }
		
		/// <summary>
		/// The time at which the announcement expires (null for never)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// Has this announcement expired?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expired")]
		public System.Nullable<System.Boolean> Expired { get; set; }
		
		/// <summary>
		/// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markdown")]
		public string Markdown { get; set; }
		
		/// <summary>
		/// The plain text title for the lab announcement
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A cost item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabCost
	{
		
		/// <summary>
		/// Properties of a cost item.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LabCostProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a cost item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabCostProperties
	{
		
		/// <summary>
		/// The creation date of the cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The currency code of the cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The end time of the cost data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// The lab cost details component of the cost data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labCostDetails")]
		public LabCostDetailsProperties[] LabCostDetails { get; set; }
		
		/// <summary>
		/// The properties of the cost summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labCostSummary")]
		public LabCostSummaryProperties LabCostSummary { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The resource cost component of the cost data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceCosts")]
		public LabResourceCostProperties[] ResourceCosts { get; set; }
		
		/// <summary>
		/// The start time of the cost data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		/// <summary>
		/// Properties of a cost target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCost")]
		public TargetCostProperties TargetCost { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
	}
	
	/// <summary>
	/// The properties of a lab cost item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabCostDetailsProperties
	{
		
		/// <summary>
		/// The cost component of the cost item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public System.Nullable<System.Double> Cost { get; set; }
		
		/// <summary>
		/// The type of the cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costType")]
		public System.Nullable<LabCostDetailsPropertiesCostType> CostType { get; set; }
		
		/// <summary>
		/// The date of the cost item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LabCostDetailsPropertiesCostType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unavailable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reported = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Projected = 2,
	}
	
	/// <summary>
	/// The properties of the cost summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabCostSummaryProperties
	{
		
		/// <summary>
		/// The cost component of the cost item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedLabCost")]
		public System.Nullable<System.Double> EstimatedLabCost { get; set; }
	}
	
	/// <summary>
	/// The properties of a resource cost item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabResourceCostProperties
	{
		
		/// <summary>
		/// The ID of the external resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalResourceId")]
		public string ExternalResourceId { get; set; }
		
		/// <summary>
		/// The cost component of the resource cost item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceCost")]
		public System.Nullable<System.Double> ResourceCost { get; set; }
		
		/// <summary>
		/// The ID of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The owner of the resource (ex. janedoe@microsoft.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOwner")]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// The category of the resource (ex. Premium_LRS, Standard_DS1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePricingTier")]
		public string ResourcePricingTier { get; set; }
		
		/// <summary>
		/// The status of the resource (ex. Active)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceStatus")]
		public string ResourceStatus { get; set; }
		
		/// <summary>
		/// The logical resource type (ex. virtualmachine, storageaccount)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUId")]
		public string ResourceUId { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcename")]
		public string Resourcename { get; set; }
	}
	
	/// <summary>
	/// Properties of a cost target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TargetCostProperties
	{
		
		/// <summary>
		/// Cost thresholds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costThresholds")]
		public CostThresholdProperties[] CostThresholds { get; set; }
		
		/// <summary>
		/// Reporting cycle end date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycleEndDateTime")]
		public System.Nullable<System.DateTimeOffset> CycleEndDateTime { get; set; }
		
		/// <summary>
		/// Reporting cycle start date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycleStartDateTime")]
		public System.Nullable<System.DateTimeOffset> CycleStartDateTime { get; set; }
		
		/// <summary>
		/// Reporting cycle type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycleType")]
		public System.Nullable<TargetCostPropertiesCycleType> CycleType { get; set; }
		
		/// <summary>
		/// Target cost status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// Lab target cost
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public System.Nullable<System.Int32> Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TargetCostPropertiesCycleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CalendarMonth = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 1,
	}
	
	/// <summary>
	/// A lab.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabFragment
	{
		
		/// <summary>
		/// Properties of a lab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LabPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a lab.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabPropertiesFragment
	{
		
		/// <summary>
		/// Properties of a lab's announcement banner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="announcement")]
		public LabAnnouncementPropertiesFragment Announcement { get; set; }
		
		/// <summary>
		/// The access rights to be granted to the user when provisioning an environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentPermission")]
		public LabPropertiesEnvironmentPermission EnvironmentPermission { get; set; }
		
		/// <summary>
		/// Extended properties of the lab used for experimental features
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedProperties")]
		public System.Collections.Generic.Dictionary<string, string> ExtendedProperties { get; set; }
		
		/// <summary>
		/// Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labStorageType")]
		public AttachNewDataDiskOptionsDiskType LabStorageType { get; set; }
		
		/// <summary>
		/// The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandatoryArtifactsResourceIdsLinux")]
		public string[] MandatoryArtifactsResourceIdsLinux { get; set; }
		
		/// <summary>
		/// The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandatoryArtifactsResourceIdsWindows")]
		public string[] MandatoryArtifactsResourceIdsWindows { get; set; }
		
		/// <summary>
		/// The setting to enable usage of premium data disks.
		///When its value is 'Enabled', creation of standard or premium data disks is allowed.
		///When its value is 'Disabled', only creation of standard data disks is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premiumDataDisks")]
		public LabPropertiesPremiumDataDisks PremiumDataDisks { get; set; }
		
		/// <summary>
		/// Properties of a lab's support banner
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="support")]
		public LabSupportPropertiesFragment Support { get; set; }
	}
	
	/// <summary>
	/// Properties of a lab's support banner
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabSupportPropertiesFragment
	{
		
		/// <summary>
		/// Is the lab support banner active/enabled at this time?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public NotificationSettingsStatus Enabled { get; set; }
		
		/// <summary>
		/// The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markdown")]
		public string Markdown { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Lab[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of a VHD in the lab.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVhd
	{
		
		/// <summary>
		/// The URI to the VHD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVhdList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public LabVhd[] Value { get; set; }
	}
	
	/// <summary>
	/// A virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVirtualMachine
	{
		
		/// <summary>
		/// Properties of a virtual machine.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LabVirtualMachineProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVirtualMachineProperties
	{
		
		/// <summary>
		/// Indicates whether another user can take ownership of the virtual machine
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowClaim")]
		public System.Nullable<System.Boolean> AllowClaim { get; set; }
		
		/// <summary>
		/// Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableSchedule")]
		public ApplicableSchedule ApplicableSchedule { get; set; }
		
		/// <summary>
		/// Properties of an artifact deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactDeploymentStatus")]
		public ArtifactDeploymentStatusProperties ArtifactDeploymentStatus { get; set; }
		
		/// <summary>
		/// The artifacts to be installed on the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ArtifactInstallProperties[] Artifacts { get; set; }
		
		/// <summary>
		/// The resource identifier (Microsoft.Compute) of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeId")]
		public string ComputeId { get; set; }
		
		/// <summary>
		/// Properties of a virtual machine returned by the Microsoft.Compute API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeVm")]
		public ComputeVmProperties ComputeVm { get; set; }
		
		/// <summary>
		/// The email address of creator of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdByUser")]
		public string CreatedByUser { get; set; }
		
		/// <summary>
		/// The object identifier of the creator of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdByUserId")]
		public string CreatedByUserId { get; set; }
		
		/// <summary>
		/// The creation date of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The custom image identifier of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customImageId")]
		public string CustomImageId { get; set; }
		
		/// <summary>
		/// New or existing data disks to attach to the virtual machine after creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskParameters")]
		public DataDiskProperties[] DataDiskParameters { get; set; }
		
		/// <summary>
		/// Indicates whether the virtual machine is to be created without a public IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disallowPublicIpAddress")]
		public System.Nullable<System.Boolean> DisallowPublicIpAddress { get; set; }
		
		/// <summary>
		/// The resource ID of the environment that contains this virtual machine, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// The expiration date for VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// The fully-qualified domain name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		/// <summary>
		/// The reference information for an Azure Marketplace image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="galleryImageReference")]
		public GalleryImageReference GalleryImageReference { get; set; }
		
		/// <summary>
		/// Indicates whether this virtual machine uses an SSH key for authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAuthenticationWithSshKey")]
		public System.Nullable<System.Boolean> IsAuthenticationWithSshKey { get; set; }
		
		/// <summary>
		/// The lab subnet name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labSubnetName")]
		public string LabSubnetName { get; set; }
		
		/// <summary>
		/// The lab virtual network identifier of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVirtualNetworkId")]
		public string LabVirtualNetworkId { get; set; }
		
		/// <summary>
		/// Last known compute power state captured in DTL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastKnownPowerState")]
		public string LastKnownPowerState { get; set; }
		
		/// <summary>
		/// Properties of a network interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInterface")]
		public NetworkInterfaceProperties NetworkInterface { get; set; }
		
		/// <summary>
		/// The notes of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The OS type of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// The object identifier of the owner of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerObjectId")]
		public string OwnerObjectId { get; set; }
		
		/// <summary>
		/// The user principal name of the virtual machine owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerUserPrincipalName")]
		public string OwnerUserPrincipalName { get; set; }
		
		/// <summary>
		/// The password of the virtual machine administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The id of the plan associated with the virtual machine image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Virtual Machine schedules to be created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleParameters")]
		public ScheduleCreationParameter[] ScheduleParameters { get; set; }
		
		/// <summary>
		/// The size of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The SSH key of the virtual machine administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshKey")]
		public string SshKey { get; set; }
		
		/// <summary>
		/// Storage type to use for virtual machine (i.e. Standard, Premium).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public string StorageType { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
		
		/// <summary>
		/// The user name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// Tells source of creation of lab virtual machine. Output property only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCreationSource")]
		public LabVirtualMachineCreationParameterPropertiesVirtualMachineCreationSource VirtualMachineCreationSource { get; set; }
	}
	
	/// <summary>
	/// A virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVirtualMachineFragment
	{
		
		/// <summary>
		/// Properties of a virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LabVirtualMachinePropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVirtualMachinePropertiesFragment
	{
		
		/// <summary>
		/// Indicates whether another user can take ownership of the virtual machine
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowClaim")]
		public System.Nullable<System.Boolean> AllowClaim { get; set; }
		
		/// <summary>
		/// Properties of an artifact deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactDeploymentStatus")]
		public ArtifactDeploymentStatusPropertiesFragment ArtifactDeploymentStatus { get; set; }
		
		/// <summary>
		/// The artifacts to be installed on the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ArtifactInstallPropertiesFragment[] Artifacts { get; set; }
		
		/// <summary>
		/// The resource identifier (Microsoft.Compute) of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeId")]
		public string ComputeId { get; set; }
		
		/// <summary>
		/// The email address of creator of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdByUser")]
		public string CreatedByUser { get; set; }
		
		/// <summary>
		/// The object identifier of the creator of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdByUserId")]
		public string CreatedByUserId { get; set; }
		
		/// <summary>
		/// The creation date of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The custom image identifier of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customImageId")]
		public string CustomImageId { get; set; }
		
		/// <summary>
		/// New or existing data disks to attach to the virtual machine after creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskParameters")]
		public DataDiskPropertiesFragment[] DataDiskParameters { get; set; }
		
		/// <summary>
		/// Indicates whether the virtual machine is to be created without a public IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disallowPublicIpAddress")]
		public System.Nullable<System.Boolean> DisallowPublicIpAddress { get; set; }
		
		/// <summary>
		/// The resource ID of the environment that contains this virtual machine, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// The expiration date for VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// The fully-qualified domain name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		/// <summary>
		/// The reference information for an Azure Marketplace image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="galleryImageReference")]
		public GalleryImageReferenceFragment GalleryImageReference { get; set; }
		
		/// <summary>
		/// Indicates whether this virtual machine uses an SSH key for authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAuthenticationWithSshKey")]
		public System.Nullable<System.Boolean> IsAuthenticationWithSshKey { get; set; }
		
		/// <summary>
		/// The lab subnet name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labSubnetName")]
		public string LabSubnetName { get; set; }
		
		/// <summary>
		/// The lab virtual network identifier of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labVirtualNetworkId")]
		public string LabVirtualNetworkId { get; set; }
		
		/// <summary>
		/// Last known compute power state captured in DTL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastKnownPowerState")]
		public string LastKnownPowerState { get; set; }
		
		/// <summary>
		/// Properties of a network interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInterface")]
		public NetworkInterfacePropertiesFragment NetworkInterface { get; set; }
		
		/// <summary>
		/// The notes of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The OS type of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// The object identifier of the owner of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerObjectId")]
		public string OwnerObjectId { get; set; }
		
		/// <summary>
		/// The user principal name of the virtual machine owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerUserPrincipalName")]
		public string OwnerUserPrincipalName { get; set; }
		
		/// <summary>
		/// The password of the virtual machine administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The id of the plan associated with the virtual machine image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
		
		/// <summary>
		/// Virtual Machine schedules to be created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleParameters")]
		public ScheduleCreationParameterFragment[] ScheduleParameters { get; set; }
		
		/// <summary>
		/// The size of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The SSH key of the virtual machine administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshKey")]
		public string SshKey { get; set; }
		
		/// <summary>
		/// Storage type to use for virtual machine (i.e. Standard, Premium).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public string StorageType { get; set; }
		
		/// <summary>
		/// The user name of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// Tells source of creation of lab virtual machine. Output property only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCreationSource")]
		public LabVirtualMachineCreationParameterPropertiesVirtualMachineCreationSource VirtualMachineCreationSource { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LabVirtualMachineList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public LabVirtualMachine[] Value { get; set; }
	}
	
	/// <summary>
	/// A notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationChannel
	{
		
		/// <summary>
		/// Properties of a schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public NotificationChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationChannelProperties
	{
		
		/// <summary>
		/// The creation date of the notification channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Description of notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailRecipient")]
		public string EmailRecipient { get; set; }
		
		/// <summary>
		/// The list of event for which this notification is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// The locale to use when sending a notification (fallback for unsupported languages is EN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationLocale")]
		public string NotificationLocale { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
		
		/// <summary>
		/// The webhook URL to send notifications to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webHookUrl")]
		public string WebHookUrl { get; set; }
	}
	
	/// <summary>
	/// A notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationChannelFragment
	{
		
		/// <summary>
		/// Properties of a schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public NotificationChannelPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationChannelPropertiesFragment
	{
		
		/// <summary>
		/// Description of notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailRecipient")]
		public string EmailRecipient { get; set; }
		
		/// <summary>
		/// The list of event for which this notification is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public EventFragment[] Events { get; set; }
		
		/// <summary>
		/// The locale to use when sending a notification (fallback for unsupported languages is EN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationLocale")]
		public string NotificationLocale { get; set; }
		
		/// <summary>
		/// The webhook URL to send notifications to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webHookUrl")]
		public string WebHookUrl { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationChannelList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NotificationChannel[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties for generating a Notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotifyParameters
	{
		
		/// <summary>
		/// The type of event (i.e. AutoShutdown, Cost)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public EventEventName EventName { get; set; }
		
		/// <summary>
		/// Properties for the notification in json format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonPayload")]
		public string JsonPayload { get; set; }
	}
	
	/// <summary>
	/// Error details for the operation in case of a failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationError
	{
		
		/// <summary>
		/// The error code of the operation error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message of the operation error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The REST API operation supported by DevTestLab ResourceProvider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// The object that describes the operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationMetadataDisplay Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The object that describes the operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetadataDisplay
	{
		
		/// <summary>
		/// Friendly name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Operation type: read, write, delete, listKeys/action, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Friendly name of the resource provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource type on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// An Operation Result
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResult
	{
		
		/// <summary>
		/// Error details for the operation in case of a failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public OperationError Error { get; set; }
		
		/// <summary>
		/// The operation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The status code for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<OperationResultStatusCode> StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationResultStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Continue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SwitchingProtocols = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonAuthoritativeInformation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoContent = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResetContent = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartialContent = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MultipleChoices = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MovedPermanently = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Redirect = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SeeOther = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotModified = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UseProxy = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unused = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TemporaryRedirect = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unauthorized = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PaymentRequired = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forbidden = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MethodNotAllowed = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAcceptable = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProxyAuthenticationRequired = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestTimeout = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gone = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LengthRequired = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreconditionFailed = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestEntityTooLarge = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestUriTooLong = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnsupportedMediaType = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestedRangeNotSatisfiable = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExpectationFailed = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpgradeRequired = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalServerError = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotImplemented = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadGateway = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceUnavailable = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GatewayTimeout = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HttpVersionNotSupported = 41,
	}
	
	/// <summary>
	/// A Policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Policy
	{
		
		/// <summary>
		/// Properties of a Policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a Policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyProperties
	{
		
		/// <summary>
		/// The creation date of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The description of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluatorType")]
		public System.Nullable<PolicyPropertiesEvaluatorType> EvaluatorType { get; set; }
		
		/// <summary>
		/// The fact data of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factData")]
		public string FactData { get; set; }
		
		/// <summary>
		/// The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factName")]
		public System.Nullable<PolicyPropertiesFactName> FactName { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The status of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public string Threshold { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PolicyPropertiesEvaluatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllowedValuesPolicy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaxValuePolicy = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PolicyPropertiesFactName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserOwnedLabVmCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserOwnedLabPremiumVmCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LabVmCount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LabPremiumVmCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LabVmSize = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GalleryImage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserOwnedLabVmCountInSubnet = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LabTargetCost = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnvironmentTemplate = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleEditPermission = 9,
	}
	
	/// <summary>
	/// A Policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyFragment
	{
		
		/// <summary>
		/// Properties of a Policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PolicyPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a Policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyPropertiesFragment
	{
		
		/// <summary>
		/// The description of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluatorType")]
		public PolicyPropertiesEvaluatorType EvaluatorType { get; set; }
		
		/// <summary>
		/// The fact data of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factData")]
		public string FactData { get; set; }
		
		/// <summary>
		/// The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factName")]
		public PolicyPropertiesFactName FactName { get; set; }
		
		/// <summary>
		/// The status of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public NotificationSettingsStatus Status { get; set; }
		
		/// <summary>
		/// The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public string Threshold { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Policy[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of a network port.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Port
	{
		
		/// <summary>
		/// Backend port of the target virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendPort")]
		public System.Nullable<System.Int32> BackendPort { get; set; }
		
		/// <summary>
		/// Protocol type of the port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportProtocol")]
		public InboundNatRuleTransportProtocol TransportProtocol { get; set; }
	}
	
	/// <summary>
	/// Properties of a network port.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PortFragment
	{
		
		/// <summary>
		/// Backend port of the target virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendPort")]
		public System.Nullable<System.Int32> BackendPort { get; set; }
		
		/// <summary>
		/// Protocol type of the port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportProtocol")]
		public InboundNatRuleTransportProtocol TransportProtocol { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list REST API operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProviderOperationResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of operations supported by the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationMetadata[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a .rdp file
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RdpConnection
	{
		
		/// <summary>
		/// The contents of the .rdp file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string Contents { get; set; }
	}
	
	/// <summary>
	/// Request body for resizing a virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResizeLabVirtualMachineProperties
	{
		
		/// <summary>
		/// Specifies the size of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
	}
	
	/// <summary>
	/// An Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The identifier of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties for retargeting a virtual machine schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetargetScheduleProperties
	{
		
		/// <summary>
		/// The resource Id of the virtual machine on which the schedule operates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentResourceId")]
		public string CurrentResourceId { get; set; }
		
		/// <summary>
		/// The resource Id of the virtual machine that the schedule should be retargeted to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceId")]
		public string TargetResourceId { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduleList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Schedule[] Value { get; set; }
	}
	
	/// <summary>
	/// A secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Secret
	{
		
		/// <summary>
		/// Properties of a secret.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SecretProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretProperties
	{
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
		
		/// <summary>
		/// The value of the secret for secret creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretFragment
	{
		
		/// <summary>
		/// Properties of a secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SecretPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a secret.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretPropertiesFragment
	{
		
		/// <summary>
		/// The value of the secret for secret creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Secret[] Value { get; set; }
	}
	
	/// <summary>
	/// A Service Fabric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceFabric
	{
		
		/// <summary>
		/// Properties of a service fabric.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServiceFabricProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a service fabric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceFabricProperties
	{
		
		/// <summary>
		/// Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableSchedule")]
		public ApplicableSchedule ApplicableSchedule { get; set; }
		
		/// <summary>
		/// The resource id of the environment under which the service fabric resource is present
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// The backing service fabric resource's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalServiceFabricId")]
		public string ExternalServiceFabricId { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
	}
	
	/// <summary>
	/// A Service Fabric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceFabricFragment
	{
		
		/// <summary>
		/// Properties of a service fabric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServiceFabricPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a service fabric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceFabricPropertiesFragment
	{
		
		/// <summary>
		/// The resource id of the environment under which the service fabric resource is present
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// The backing service fabric resource's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalServiceFabricId")]
		public string ExternalServiceFabricId { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceFabricList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ServiceFabric[] Value { get; set; }
	}
	
	/// <summary>
	/// A container for a managed identity to execute DevTest lab services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceRunner
	{
		
		/// <summary>
		/// Properties of a managed identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityProperties Identity { get; set; }
	}
	
	/// <summary>
	/// The contents of a shutdown notification. Webhooks can use this type to deserialize the request body when they get notified of an imminent shutdown.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShutdownNotificationContent
	{
		
		/// <summary>
		/// The URL to delay shutdown by 2 hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayUrl120")]
		public string DelayUrl120 { get; set; }
		
		/// <summary>
		/// The URL to delay shutdown by 60 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayUrl60")]
		public string DelayUrl60 { get; set; }
		
		/// <summary>
		/// The event for which a notification will be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// The GUID for the virtual machine to be shut down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// The lab for the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labName")]
		public string LabName { get; set; }
		
		/// <summary>
		/// Minutes remaining until shutdown
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutesUntilShutdown")]
		public string MinutesUntilShutdown { get; set; }
		
		/// <summary>
		/// The owner of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// The resource group name for the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroupName")]
		public string ResourceGroupName { get; set; }
		
		/// <summary>
		/// The URL to skip auto-shutdown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipUrl")]
		public string SkipUrl { get; set; }
		
		/// <summary>
		/// The subscription ID for the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// The text for the notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The virtual machine to be shut down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmName")]
		public string VmName { get; set; }
		
		/// <summary>
		/// The URL of the virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmUrl")]
		public string VmUrl { get; set; }
	}
	
	/// <summary>
	/// Subnet information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Subnet
	{
		
		/// <summary>
		/// The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowPublicIp")]
		public System.Nullable<SubnetAllowPublicIp> AllowPublicIp { get; set; }
		
		/// <summary>
		/// The name of the subnet as seen in the lab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labSubnetName")]
		public string LabSubnetName { get; set; }
		
		/// <summary>
		/// The resource ID of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SubnetAllowPublicIp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 2,
	}
	
	/// <summary>
	/// Subnet information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubnetFragment
	{
		
		/// <summary>
		/// The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowPublicIp")]
		public SubnetAllowPublicIp AllowPublicIp { get; set; }
		
		/// <summary>
		/// The name of the subnet as seen in the lab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labSubnetName")]
		public string LabSubnetName { get; set; }
		
		/// <summary>
		/// The resource ID of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// Property overrides on a subnet of a virtual network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubnetOverride
	{
		
		/// <summary>
		/// The name given to the subnet within the lab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labSubnetName")]
		public string LabSubnetName { get; set; }
		
		/// <summary>
		/// The resource ID of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Configuration for public IP address sharing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedPublicIpAddressConfiguration")]
		public SubnetSharedPublicIpAddressConfiguration SharedPublicIpAddressConfiguration { get; set; }
		
		/// <summary>
		/// Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useInVmCreationPermission")]
		public SubnetAllowPublicIp UseInVmCreationPermission { get; set; }
		
		/// <summary>
		/// Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePublicIpAddressPermission")]
		public SubnetAllowPublicIp UsePublicIpAddressPermission { get; set; }
		
		/// <summary>
		/// The virtual network pool associated with this subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkPoolName")]
		public string VirtualNetworkPoolName { get; set; }
	}
	
	/// <summary>
	/// Configuration for public IP address sharing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubnetSharedPublicIpAddressConfiguration
	{
		
		/// <summary>
		/// Backend ports that virtual machines on this subnet are allowed to expose
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedPorts")]
		public Port[] AllowedPorts { get; set; }
	}
	
	/// <summary>
	/// Property overrides on a subnet of a virtual network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubnetOverrideFragment
	{
		
		/// <summary>
		/// The name given to the subnet within the lab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labSubnetName")]
		public string LabSubnetName { get; set; }
		
		/// <summary>
		/// The resource ID of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Configuration for public IP address sharing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedPublicIpAddressConfiguration")]
		public SubnetSharedPublicIpAddressConfigurationFragment SharedPublicIpAddressConfiguration { get; set; }
		
		/// <summary>
		/// Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useInVmCreationPermission")]
		public SubnetAllowPublicIp UseInVmCreationPermission { get; set; }
		
		/// <summary>
		/// Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePublicIpAddressPermission")]
		public SubnetAllowPublicIp UsePublicIpAddressPermission { get; set; }
		
		/// <summary>
		/// The virtual network pool associated with this subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkPoolName")]
		public string VirtualNetworkPoolName { get; set; }
	}
	
	/// <summary>
	/// Configuration for public IP address sharing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubnetSharedPublicIpAddressConfigurationFragment
	{
		
		/// <summary>
		/// Backend ports that virtual machines on this subnet are allowed to expose
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedPorts")]
		public PortFragment[] AllowedPorts { get; set; }
	}
	
	/// <summary>
	/// Represents an update resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateResource
	{
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Profile of a lab user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class User
	{
		
		/// <summary>
		/// Properties of a lab user profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UserProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a lab user profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserProperties
	{
		
		/// <summary>
		/// The creation date of the user profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Identity attributes of a lab user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public UserIdentity Identity { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Properties of a user's secret store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretStore")]
		public UserSecretStore SecretStore { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
	}
	
	/// <summary>
	/// Identity attributes of a lab user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserIdentity
	{
		
		/// <summary>
		/// Set to the app Id of the client JWT making the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Set to the object Id of the client JWT making the request. Not all users have object Id. For CSP (reseller) scenarios for example, object Id is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Set to the principal Id of the client JWT making the request. Service principal will not have the principal Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Set to the principal name / UPN of the client JWT making the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalName")]
		public string PrincipalName { get; set; }
		
		/// <summary>
		/// Set to the tenant ID of the client JWT making the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// Properties of a user's secret store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserSecretStore
	{
		
		/// <summary>
		/// The ID of the user's Key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultId")]
		public string KeyVaultId { get; set; }
		
		/// <summary>
		/// The URI of the user's Key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultUri")]
		public string KeyVaultUri { get; set; }
	}
	
	/// <summary>
	/// Profile of a lab user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserFragment
	{
		
		/// <summary>
		/// Properties of a lab user profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UserPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a lab user profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserPropertiesFragment
	{
		
		/// <summary>
		/// Identity attributes of a lab user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public UserIdentityFragment Identity { get; set; }
		
		/// <summary>
		/// Properties of a user's secret store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretStore")]
		public UserSecretStoreFragment SecretStore { get; set; }
	}
	
	/// <summary>
	/// Identity attributes of a lab user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserIdentityFragment
	{
		
		/// <summary>
		/// Set to the app Id of the client JWT making the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Set to the object Id of the client JWT making the request. Not all users have object Id. For CSP (reseller) scenarios for example, object Id is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Set to the principal Id of the client JWT making the request. Service principal will not have the principal Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Set to the principal name / UPN of the client JWT making the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalName")]
		public string PrincipalName { get; set; }
		
		/// <summary>
		/// Set to the tenant ID of the client JWT making the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// Properties of a user's secret store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserSecretStoreFragment
	{
		
		/// <summary>
		/// The ID of the user's Key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultId")]
		public string KeyVaultId { get; set; }
		
		/// <summary>
		/// The URI of the user's Key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultUri")]
		public string KeyVaultUri { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public User[] Value { get; set; }
	}
	
	/// <summary>
	/// A virtual network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetwork
	{
		
		/// <summary>
		/// Properties of a virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VirtualNetworkProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a virtual network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkProperties
	{
		
		/// <summary>
		/// The allowed subnets of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedSubnets")]
		public Subnet[] AllowedSubnets { get; set; }
		
		/// <summary>
		/// The creation date of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The description of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Microsoft.Network resource identifier of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalProviderResourceId")]
		public string ExternalProviderResourceId { get; set; }
		
		/// <summary>
		/// The external subnet properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSubnets")]
		public ExternalSubnet[] ExternalSubnets { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The subnet overrides of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetOverrides")]
		public SubnetOverride[] SubnetOverrides { get; set; }
		
		/// <summary>
		/// The unique immutable identifier of a resource (Guid).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifier")]
		public string UniqueIdentifier { get; set; }
	}
	
	/// <summary>
	/// A virtual network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkFragment
	{
		
		/// <summary>
		/// Properties of a virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VirtualNetworkPropertiesFragment Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a virtual network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkPropertiesFragment
	{
		
		/// <summary>
		/// The allowed subnets of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedSubnets")]
		public SubnetFragment[] AllowedSubnets { get; set; }
		
		/// <summary>
		/// The description of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Microsoft.Network resource identifier of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalProviderResourceId")]
		public string ExternalProviderResourceId { get; set; }
		
		/// <summary>
		/// The subnet overrides of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetOverrides")]
		public SubnetOverrideFragment[] SubnetOverrides { get; set; }
	}
	
	/// <summary>
	/// The response of a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkList
	{
		
		/// <summary>
		/// Link for next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the list operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VirtualNetwork[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Result of the request to list REST API operations
		/// ProviderOperations_List providers/Microsoft.DevTestLab/operations
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <returns>Success</returns>
		public async Task<ProviderOperationResult> ProviderOperations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DevTestLab/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProviderOperationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List labs in a subscription.
		/// Labs_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<LabList> Labs_ListBySubscriptionAsync(string subscriptionId, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DevTestLab/labs&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LabList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get operation.
		/// Operations_Get subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/locations/{locationName}/operations/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="locationName">The name of the location.</param>
		/// <param name="name">The name of the operation.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<OperationResult> Operations_GetAsync(string subscriptionId, string locationName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DevTestLab/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/operations/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List schedules in a subscription.
		/// GlobalSchedules_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/schedules
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=status)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ScheduleList> GlobalSchedules_ListBySubscriptionAsync(string subscriptionId, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DevTestLab/schedules&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ScheduleList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List labs in a resource group.
		/// Labs_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<LabList> Labs_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LabList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List artifact sources in a given lab.
		/// ArtifactSources_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=displayName)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ArtifactSourceList> ArtifactSources_ListAsync(string subscriptionId, string resourceGroupName, string labName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactSourceList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List azure resource manager templates in a given artifact source.
		/// ArmTemplates_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/armtemplates
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="artifactSourceName">The name of the artifact source.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=displayName)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ArmTemplateList> ArmTemplates_ListAsync(string subscriptionId, string resourceGroupName, string labName, string artifactSourceName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources/"+ (artifactSourceName==null? "" : System.Uri.EscapeDataString(artifactSourceName))+"/armtemplates&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArmTemplateList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get azure resource manager template.
		/// ArmTemplates_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/armtemplates/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="artifactSourceName">The name of the artifact source.</param>
		/// <param name="name">The name of the azure resource manager template.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=displayName)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ArmTemplate> ArmTemplates_GetAsync(string subscriptionId, string resourceGroupName, string labName, string artifactSourceName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources/"+ (artifactSourceName==null? "" : System.Uri.EscapeDataString(artifactSourceName))+"/armtemplates/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArmTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List artifacts in a given artifact source.
		/// Artifacts_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="artifactSourceName">The name of the artifact source.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=title)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ArtifactList> Artifacts_ListAsync(string subscriptionId, string resourceGroupName, string labName, string artifactSourceName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources/"+ (artifactSourceName==null? "" : System.Uri.EscapeDataString(artifactSourceName))+"/artifacts&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get artifact.
		/// Artifacts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="artifactSourceName">The name of the artifact source.</param>
		/// <param name="name">The name of the artifact.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=title)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Artifact> Artifacts_GetAsync(string subscriptionId, string resourceGroupName, string labName, string artifactSourceName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources/"+ (artifactSourceName==null? "" : System.Uri.EscapeDataString(artifactSourceName))+"/artifacts/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artifact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates an ARM template for the given artifact, uploads the required files to a storage account, and validates the generated artifact.
		/// Artifacts_GenerateArmTemplate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}/generateArmTemplate
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="artifactSourceName">The name of the artifact source.</param>
		/// <param name="name">The name of the artifact.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Parameters for generating an ARM template for deploying artifacts.</param>
		/// <returns>OK</returns>
		public async Task<ArmTemplateInfo> Artifacts_GenerateArmTemplateAsync(string subscriptionId, string resourceGroupName, string labName, string artifactSourceName, string name, string api_version, GenerateArmTemplateRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources/"+ (artifactSourceName==null? "" : System.Uri.EscapeDataString(artifactSourceName))+"/artifacts/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/generateArmTemplate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArmTemplateInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get artifact source.
		/// ArtifactSources_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the artifact source.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=displayName)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ArtifactSource> ArtifactSources_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing artifact source.
		/// ArtifactSources_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the artifact source.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Properties of an artifact source.</param>
		/// <returns>OK</returns>
		public async Task<ArtifactSource> ArtifactSources_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, ArtifactSource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete artifact source.
		/// ArtifactSources_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the artifact source.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task ArtifactSources_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of artifact sources. All other properties will be ignored.
		/// ArtifactSources_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the artifact source.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Properties of an artifact source.</param>
		/// <returns>OK</returns>
		public async Task<ArtifactSource> ArtifactSources_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, ArtifactSourceFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/artifactsources/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get cost.
		/// Costs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/costs/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the cost.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($expand=labCostDetails)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<LabCost> Costs_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/costs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LabCost>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing cost.
		/// Costs_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/costs/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the cost.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A cost item.</param>
		/// <returns>OK</returns>
		public async Task<LabCost> Costs_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, LabCost requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/costs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LabCost>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List custom images in a given lab.
		/// CustomImages_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=vm)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<CustomImageList> CustomImages_ListAsync(string subscriptionId, string resourceGroupName, string labName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/customimages&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomImageList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get custom image.
		/// CustomImages_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the custom image.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=vm)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<CustomImage> CustomImages_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/customimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomImage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing custom image. This operation can take a while to complete.
		/// CustomImages_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the custom image.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A custom image.</param>
		/// <returns>OK</returns>
		public async Task<CustomImage> CustomImages_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, CustomImage requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/customimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomImage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete custom image. This operation can take a while to complete.
		/// CustomImages_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the custom image.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task CustomImages_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/customimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of custom images. All other properties will be ignored.
		/// CustomImages_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the custom image.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A custom image.</param>
		/// <returns>OK</returns>
		public async Task<CustomImage> CustomImages_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, CustomImageFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/customimages/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomImage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List formulas in a given lab.
		/// Formulas_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=description)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<FormulaList> Formulas_ListAsync(string subscriptionId, string resourceGroupName, string labName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/formulas&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FormulaList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get formula.
		/// Formulas_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the formula.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=description)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Formula> Formulas_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/formulas/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Formula>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing formula. This operation can take a while to complete.
		/// Formulas_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the formula.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A formula for creating a VM, specifying an image base and other parameters</param>
		/// <returns>OK</returns>
		public async Task<Formula> Formulas_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, Formula requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/formulas/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Formula>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete formula.
		/// Formulas_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the formula.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Formulas_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/formulas/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of formulas. All other properties will be ignored.
		/// Formulas_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the formula.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A formula for creating a VM, specifying an image base and other parameters</param>
		/// <returns>OK</returns>
		public async Task<Formula> Formulas_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, FormulaFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/formulas/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Formula>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List gallery images in a given lab.
		/// GalleryImages_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/galleryimages
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=author)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<GalleryImageList> GalleryImages_ListAsync(string subscriptionId, string resourceGroupName, string labName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/galleryimages&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GalleryImageList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List notification channels in a given lab.
		/// NotificationChannels_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=webHookUrl)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<NotificationChannelList> NotificationChannels_ListAsync(string subscriptionId, string resourceGroupName, string labName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/notificationchannels&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationChannelList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get notification channel.
		/// NotificationChannels_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the notification channel.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=webHookUrl)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<NotificationChannel> NotificationChannels_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/notificationchannels/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing notification channel.
		/// NotificationChannels_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the notification channel.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A notification.</param>
		/// <returns>OK</returns>
		public async Task<NotificationChannel> NotificationChannels_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, NotificationChannel requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/notificationchannels/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete notification channel.
		/// NotificationChannels_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the notification channel.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task NotificationChannels_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/notificationchannels/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of notification channels. All other properties will be ignored.
		/// NotificationChannels_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the notification channel.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A notification.</param>
		/// <returns>OK</returns>
		public async Task<NotificationChannel> NotificationChannels_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, NotificationChannelFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/notificationchannels/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send notification to provided channel.
		/// NotificationChannels_Notify subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}/notify
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the notification channel.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Properties for generating a Notification.</param>
		/// <returns>OK</returns>
		public async Task NotificationChannels_NotifyAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, NotifyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/notificationchannels/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/notify&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Evaluates lab policy.
		/// PolicySets_EvaluatePolicies subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{name}/evaluatePolicies
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the policy set.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Request body for evaluating a policy set.</param>
		/// <returns>OK</returns>
		public async Task<EvaluatePoliciesResponse> PolicySets_EvaluatePoliciesAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, EvaluatePoliciesRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/policysets/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/evaluatePolicies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EvaluatePoliciesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List policies in a given policy set.
		/// Policies_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="policySetName">The name of the policy set.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=description)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<PolicyList> Policies_ListAsync(string subscriptionId, string resourceGroupName, string labName, string policySetName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/policysets/"+ (policySetName==null? "" : System.Uri.EscapeDataString(policySetName))+"/policies&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PolicyList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get policy.
		/// Policies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="policySetName">The name of the policy set.</param>
		/// <param name="name">The name of the policy.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=description)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Policy> Policies_GetAsync(string subscriptionId, string resourceGroupName, string labName, string policySetName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/policysets/"+ (policySetName==null? "" : System.Uri.EscapeDataString(policySetName))+"/policies/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing policy.
		/// Policies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="policySetName">The name of the policy set.</param>
		/// <param name="name">The name of the policy.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A Policy.</param>
		/// <returns>OK</returns>
		public async Task<Policy> Policies_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string policySetName, string name, string api_version, Policy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/policysets/"+ (policySetName==null? "" : System.Uri.EscapeDataString(policySetName))+"/policies/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete policy.
		/// Policies_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="policySetName">The name of the policy set.</param>
		/// <param name="name">The name of the policy.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Policies_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string policySetName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/policysets/"+ (policySetName==null? "" : System.Uri.EscapeDataString(policySetName))+"/policies/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of policies. All other properties will be ignored.
		/// Policies_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="policySetName">The name of the policy set.</param>
		/// <param name="name">The name of the policy.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A Policy.</param>
		/// <returns>OK</returns>
		public async Task<Policy> Policies_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string policySetName, string name, string api_version, PolicyFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/policysets/"+ (policySetName==null? "" : System.Uri.EscapeDataString(policySetName))+"/policies/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List schedules in a given lab.
		/// Schedules_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=status)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ScheduleList> Schedules_ListAsync(string subscriptionId, string resourceGroupName, string labName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/schedules&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ScheduleList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get schedule.
		/// Schedules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=status)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> Schedules_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing schedule.
		/// Schedules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A schedule.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> Schedules_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, Schedule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete schedule.
		/// Schedules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Schedules_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of schedules. All other properties will be ignored.
		/// Schedules_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A schedule.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> Schedules_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, ScheduleFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute a schedule. This operation can take a while to complete.
		/// Schedules_Execute subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}/execute
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Schedules_ExecuteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/execute&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all applicable schedules
		/// Schedules_ListApplicable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}/listApplicable
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ScheduleList> Schedules_ListApplicableAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/listApplicable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ScheduleList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get service runner.
		/// ServiceRunners_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/servicerunners/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the service runner.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ServiceRunner> ServiceRunners_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/servicerunners/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceRunner>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing service runner.
		/// ServiceRunners_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/servicerunners/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the service runner.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A container for a managed identity to execute DevTest lab services.</param>
		/// <returns>OK</returns>
		public async Task<ServiceRunner> ServiceRunners_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, ServiceRunner requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/servicerunners/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceRunner>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete service runner.
		/// ServiceRunners_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/servicerunners/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the service runner.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task ServiceRunners_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/servicerunners/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List user profiles in a given lab.
		/// Users_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=identity)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<UserList> Users_ListAsync(string subscriptionId, string resourceGroupName, string labName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user profile.
		/// Users_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the user profile.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=identity)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<User> Users_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing user profile. This operation can take a while to complete.
		/// Users_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the user profile.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Profile of a lab user.</param>
		/// <returns>OK</returns>
		public async Task<User> Users_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, User requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete user profile. This operation can take a while to complete.
		/// Users_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the user profile.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Users_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of user profiles. All other properties will be ignored.
		/// Users_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the user profile.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Profile of a lab user.</param>
		/// <returns>OK</returns>
		public async Task<User> Users_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, UserFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List disks in a given user profile.
		/// Disks_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=diskType)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<DiskList> Disks_ListAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/disks&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DiskList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get disk.
		/// Disks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the disk.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=diskType)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Disk> Disks_GetAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/disks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Disk>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing disk. This operation can take a while to complete.
		/// Disks_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the disk.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A Disk.</param>
		/// <returns>OK</returns>
		public async Task<Disk> Disks_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, Disk requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/disks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Disk>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete disk. This operation can take a while to complete.
		/// Disks_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the disk.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Disks_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/disks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of disks. All other properties will be ignored.
		/// Disks_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the disk.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A Disk.</param>
		/// <returns>OK</returns>
		public async Task<Disk> Disks_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, DiskFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/disks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Disk>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach and create the lease of the disk to the virtual machine. This operation can take a while to complete.
		/// Disks_Attach subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}/attach
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the disk.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Properties of the disk to attach.</param>
		/// <returns>OK</returns>
		public async Task Disks_AttachAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, AttachDiskProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/disks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/attach&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach and break the lease of the disk attached to the virtual machine. This operation can take a while to complete.
		/// Disks_Detach subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}/detach
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the disk.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Properties of the disk to detach.</param>
		/// <returns>OK</returns>
		public async Task Disks_DetachAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, DetachDiskProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/disks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/detach&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List environments in a given user profile.
		/// Environments_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/environments
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=deploymentProperties)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<DtlEnvironmentList> Environments_ListAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/environments&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DtlEnvironmentList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get environment.
		/// Environments_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/environments/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the environment.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=deploymentProperties)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<DtlEnvironment> Environments_GetAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/environments/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DtlEnvironment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing environment. This operation can take a while to complete.
		/// Environments_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/environments/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the environment.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">An environment, which is essentially an ARM template deployment.</param>
		/// <returns>OK</returns>
		public async Task<DtlEnvironment> Environments_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, DtlEnvironment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/environments/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DtlEnvironment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete environment. This operation can take a while to complete.
		/// Environments_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/environments/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the environment.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Environments_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/environments/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of environments. All other properties will be ignored.
		/// Environments_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/environments/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the environment.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">An environment, which is essentially an ARM template deployment.</param>
		/// <returns>OK</returns>
		public async Task<DtlEnvironment> Environments_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, DtlEnvironmentFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/environments/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DtlEnvironment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List secrets in a given user profile.
		/// Secrets_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/secrets
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=value)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<SecretList> Secrets_ListAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/secrets&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SecretList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get secret.
		/// Secrets_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/secrets/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the secret.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=value)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Secret> Secrets_GetAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/secrets/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Secret>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing secret. This operation can take a while to complete.
		/// Secrets_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/secrets/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the secret.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A secret.</param>
		/// <returns>OK</returns>
		public async Task<Secret> Secrets_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, Secret requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/secrets/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Secret>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete secret.
		/// Secrets_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/secrets/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the secret.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Secrets_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/secrets/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of secrets. All other properties will be ignored.
		/// Secrets_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/secrets/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the secret.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A secret.</param>
		/// <returns>OK</returns>
		public async Task<Secret> Secrets_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, SecretFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/secrets/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Secret>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List service fabrics in a given user profile.
		/// ServiceFabrics_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($expand=applicableSchedule)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ServiceFabricList> ServiceFabrics_ListAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceFabricList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get service fabric.
		/// ServiceFabrics_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the service fabric.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($expand=applicableSchedule)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ServiceFabric> ServiceFabrics_GetAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceFabric>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing service fabric. This operation can take a while to complete.
		/// ServiceFabrics_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the service fabric.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A Service Fabric.</param>
		/// <returns>OK</returns>
		public async Task<ServiceFabric> ServiceFabrics_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, ServiceFabric requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceFabric>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete service fabric. This operation can take a while to complete.
		/// ServiceFabrics_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the service fabric.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task ServiceFabrics_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of service fabrics. All other properties will be ignored.
		/// ServiceFabrics_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the service fabric.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A Service Fabric.</param>
		/// <returns>OK</returns>
		public async Task<ServiceFabric> ServiceFabrics_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version, ServiceFabricFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceFabric>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the applicable start/stop schedules, if any.
		/// ServiceFabrics_ListApplicableSchedules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}/listApplicableSchedules
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the service fabric.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ApplicableSchedule> ServiceFabrics_ListApplicableSchedulesAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/listApplicableSchedules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicableSchedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start a service fabric. This operation can take a while to complete.
		/// ServiceFabrics_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}/start
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the service fabric.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task ServiceFabrics_StartAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop a service fabric This operation can take a while to complete.
		/// ServiceFabrics_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{name}/stop
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="name">The name of the service fabric.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task ServiceFabrics_StopAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List schedules in a given service fabric.
		/// ServiceFabricSchedules_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="serviceFabricName">The name of the service fabric.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=status)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ScheduleList> ServiceFabricSchedules_ListAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string serviceFabricName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (serviceFabricName==null? "" : System.Uri.EscapeDataString(serviceFabricName))+"/schedules&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ScheduleList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get schedule.
		/// ServiceFabricSchedules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="serviceFabricName">The name of the service fabric.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=status)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> ServiceFabricSchedules_GetAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string serviceFabricName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (serviceFabricName==null? "" : System.Uri.EscapeDataString(serviceFabricName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing schedule.
		/// ServiceFabricSchedules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="serviceFabricName">The name of the service fabric.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A schedule.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> ServiceFabricSchedules_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string serviceFabricName, string name, string api_version, Schedule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (serviceFabricName==null? "" : System.Uri.EscapeDataString(serviceFabricName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete schedule.
		/// ServiceFabricSchedules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="serviceFabricName">The name of the service fabric.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task ServiceFabricSchedules_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string serviceFabricName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (serviceFabricName==null? "" : System.Uri.EscapeDataString(serviceFabricName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of schedules. All other properties will be ignored.
		/// ServiceFabricSchedules_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="serviceFabricName">The name of the service fabric.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A schedule.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> ServiceFabricSchedules_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string serviceFabricName, string name, string api_version, ScheduleFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (serviceFabricName==null? "" : System.Uri.EscapeDataString(serviceFabricName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute a schedule. This operation can take a while to complete.
		/// ServiceFabricSchedules_Execute subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/servicefabrics/{serviceFabricName}/schedules/{name}/execute
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="userName">The name of the user profile.</param>
		/// <param name="serviceFabricName">The name of the service fabric.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task ServiceFabricSchedules_ExecuteAsync(string subscriptionId, string resourceGroupName, string labName, string userName, string serviceFabricName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/servicefabrics/"+ (serviceFabricName==null? "" : System.Uri.EscapeDataString(serviceFabricName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/execute&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List virtual machines in a given lab.
		/// VirtualMachines_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<LabVirtualMachineList> VirtualMachines_ListAsync(string subscriptionId, string resourceGroupName, string labName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LabVirtualMachineList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get virtual machine.
		/// VirtualMachines_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<LabVirtualMachine> VirtualMachines_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LabVirtualMachine>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing virtual machine. This operation can take a while to complete.
		/// VirtualMachines_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A virtual machine.</param>
		/// <returns>OK</returns>
		public async Task<LabVirtualMachine> VirtualMachines_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, LabVirtualMachine requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LabVirtualMachine>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete virtual machine. This operation can take a while to complete.
		/// VirtualMachines_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of virtual machines. All other properties will be ignored.
		/// VirtualMachines_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A virtual machine.</param>
		/// <returns>OK</returns>
		public async Task<LabVirtualMachine> VirtualMachines_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, LabVirtualMachineFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LabVirtualMachine>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a new or existing data disk to virtual machine. This operation can take a while to complete.
		/// VirtualMachines_AddDataDisk subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/addDataDisk
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Request body for adding a new or existing data disk to a virtual machine.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_AddDataDiskAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, DataDiskProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/addDataDisk&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Apply artifacts to virtual machine. This operation can take a while to complete.
		/// VirtualMachines_ApplyArtifacts subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/applyArtifacts
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Request body for applying artifacts to a virtual machine.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_ApplyArtifactsAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, ApplyArtifactsRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/applyArtifacts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Take ownership of an existing virtual machine This operation can take a while to complete.
		/// VirtualMachines_Claim subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/claim
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_ClaimAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/claim&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach the specified disk from the virtual machine. This operation can take a while to complete.
		/// VirtualMachines_DetachDataDisk subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/detachDataDisk
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Request body for detaching data disk from a virtual machine.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_DetachDataDiskAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, DetachDataDiskProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/detachDataDisk&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a string that represents the contents of the RDP file for the virtual machine
		/// VirtualMachines_GetRdpFileContents subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/getRdpFileContents
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<RdpConnection> VirtualMachines_GetRdpFileContentsAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/getRdpFileContents&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RdpConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the applicable start/stop schedules, if any.
		/// VirtualMachines_ListApplicableSchedules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/listApplicableSchedules
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ApplicableSchedule> VirtualMachines_ListApplicableSchedulesAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/listApplicableSchedules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicableSchedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Redeploy a virtual machine This operation can take a while to complete.
		/// VirtualMachines_Redeploy subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/redeploy
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_RedeployAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/redeploy&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resize Virtual Machine. This operation can take a while to complete.
		/// VirtualMachines_Resize subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/resize
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Request body for resizing a virtual machine.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_ResizeAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, ResizeLabVirtualMachineProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/resize&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restart a virtual machine. This operation can take a while to complete.
		/// VirtualMachines_Restart subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/restart
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_RestartAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/restart&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start a virtual machine. This operation can take a while to complete.
		/// VirtualMachines_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/start
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_StartAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop a virtual machine This operation can take a while to complete.
		/// VirtualMachines_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/stop
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_StopAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transfers all data disks attached to the virtual machine to be owned by the current user. This operation can take a while to complete.
		/// VirtualMachines_TransferDisks subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/transferDisks
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_TransferDisksAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/transferDisks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Release ownership of an existing virtual machine This operation can take a while to complete.
		/// VirtualMachines_UnClaim subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/unClaim
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual machine.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_UnClaimAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/unClaim&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List schedules in a given virtual machine.
		/// VirtualMachineSchedules_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="virtualMachineName">The name of the virtual machine.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=status)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ScheduleList> VirtualMachineSchedules_ListAsync(string subscriptionId, string resourceGroupName, string labName, string virtualMachineName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"/schedules&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ScheduleList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get schedule.
		/// VirtualMachineSchedules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="virtualMachineName">The name of the virtual machine.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=status)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> VirtualMachineSchedules_GetAsync(string subscriptionId, string resourceGroupName, string labName, string virtualMachineName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing schedule.
		/// VirtualMachineSchedules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="virtualMachineName">The name of the virtual machine.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A schedule.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> VirtualMachineSchedules_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string virtualMachineName, string name, string api_version, Schedule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete schedule.
		/// VirtualMachineSchedules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="virtualMachineName">The name of the virtual machine.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachineSchedules_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string virtualMachineName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of schedules. All other properties will be ignored.
		/// VirtualMachineSchedules_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="virtualMachineName">The name of the virtual machine.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A schedule.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> VirtualMachineSchedules_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string virtualMachineName, string name, string api_version, ScheduleFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute a schedule. This operation can take a while to complete.
		/// VirtualMachineSchedules_Execute subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}/execute
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="virtualMachineName">The name of the virtual machine.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachineSchedules_ExecuteAsync(string subscriptionId, string resourceGroupName, string labName, string virtualMachineName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualmachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/execute&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List virtual networks in a given lab.
		/// VirtualNetworks_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($expand=externalSubnets)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<VirtualNetworkList> VirtualNetworks_ListAsync(string subscriptionId, string resourceGroupName, string labName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualnetworks&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VirtualNetworkList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get virtual network.
		/// VirtualNetworks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual network.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($expand=externalSubnets)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<VirtualNetwork> VirtualNetworks_GetAsync(string subscriptionId, string resourceGroupName, string labName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualnetworks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VirtualNetwork>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing virtual network. This operation can take a while to complete.
		/// VirtualNetworks_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual network.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A virtual network.</param>
		/// <returns>OK</returns>
		public async Task<VirtualNetwork> VirtualNetworks_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, VirtualNetwork requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualnetworks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VirtualNetwork>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete virtual network. This operation can take a while to complete.
		/// VirtualNetworks_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual network.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualNetworks_DeleteAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualnetworks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of virtual networks. All other properties will be ignored.
		/// VirtualNetworks_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="labName">The name of the lab.</param>
		/// <param name="name">The name of the virtual network.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A virtual network.</param>
		/// <returns>OK</returns>
		public async Task<VirtualNetwork> VirtualNetworks_UpdateAsync(string subscriptionId, string resourceGroupName, string labName, string name, string api_version, VirtualNetworkFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (labName==null? "" : System.Uri.EscapeDataString(labName))+"/virtualnetworks/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VirtualNetwork>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get lab.
		/// Labs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=defaultStorageAccount)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Lab> Labs_GetAsync(string subscriptionId, string resourceGroupName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Lab>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing lab. This operation can take a while to complete.
		/// Labs_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A lab.</param>
		/// <returns>OK</returns>
		public async Task<Lab> Labs_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string name, string api_version, Lab requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Lab>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete lab. This operation can take a while to complete.
		/// Labs_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Labs_DeleteAsync(string subscriptionId, string resourceGroupName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of labs. All other properties will be ignored.
		/// Labs_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A lab.</param>
		/// <returns>OK</returns>
		public async Task<Lab> Labs_UpdateAsync(string subscriptionId, string resourceGroupName, string name, string api_version, LabFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Lab>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
		/// Labs_ClaimAnyVm subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/claimAnyVm
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task Labs_ClaimAnyVmAsync(string subscriptionId, string resourceGroupName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/claimAnyVm&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create virtual machines in a lab. This operation can take a while to complete.
		/// Labs_CreateEnvironment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/createEnvironment
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Properties for creating a virtual machine.</param>
		/// <returns>OK</returns>
		public async Task Labs_CreateEnvironmentAsync(string subscriptionId, string resourceGroupName, string name, string api_version, LabVirtualMachineCreationParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/createEnvironment&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the lab resource usage into a storage account This operation can take a while to complete.
		/// Labs_ExportResourceUsage subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/exportResourceUsage
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">The parameters of the export operation.</param>
		/// <returns>OK</returns>
		public async Task Labs_ExportResourceUsageAsync(string subscriptionId, string resourceGroupName, string name, string api_version, ExportResourceUsageParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/exportResourceUsage&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a URI for uploading custom disk images to a Lab.
		/// Labs_GenerateUploadUri subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/generateUploadUri
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Properties for generating an upload URI.</param>
		/// <returns>OK</returns>
		public async Task<GenerateUploadUriResponse> Labs_GenerateUploadUriAsync(string subscriptionId, string resourceGroupName, string name, string api_version, GenerateUploadUriParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/generateUploadUri&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GenerateUploadUriResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Import a virtual machine into a different lab. This operation can take a while to complete.
		/// Labs_ImportVirtualMachine subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/importVirtualMachine
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">This represents the payload required to import a virtual machine from a different lab into the current one</param>
		/// <returns>OK</returns>
		public async Task Labs_ImportVirtualMachineAsync(string subscriptionId, string resourceGroupName, string name, string api_version, ImportLabVirtualMachineRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/importVirtualMachine&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List disk images available for custom image creation.
		/// Labs_ListVhds subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/listVhds
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the lab.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<LabVhdList> Labs_ListVhdsAsync(string subscriptionId, string resourceGroupName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/labs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/listVhds&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LabVhdList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List schedules in a resource group.
		/// GlobalSchedules_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=status)'</param>
		/// <param name="filter">The filter to apply to the operation. Example: '$filter=contains(name,'myName')</param>
		/// <param name="top">The maximum number of resources to return from the operation. Example: '$top=10'</param>
		/// <param name="orderby">The ordering expression for the results, using OData notation. Example: '$orderby=name desc'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<ScheduleList> GlobalSchedules_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string expand, string filter, int top, string orderby, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/schedules&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ScheduleList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get schedule.
		/// GlobalSchedules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="expand">Specify the $expand query. Example: 'properties($select=status)'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> GlobalSchedules_GetAsync(string subscriptionId, string resourceGroupName, string name, string expand, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or replace an existing schedule.
		/// GlobalSchedules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A schedule.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> GlobalSchedules_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string name, string api_version, Schedule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete schedule.
		/// GlobalSchedules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task GlobalSchedules_DeleteAsync(string subscriptionId, string resourceGroupName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows modifying tags of schedules. All other properties will be ignored.
		/// GlobalSchedules_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">A schedule.</param>
		/// <returns>OK</returns>
		public async Task<Schedule> GlobalSchedules_UpdateAsync(string subscriptionId, string resourceGroupName, string name, string api_version, ScheduleFragment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Schedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute a schedule. This operation can take a while to complete.
		/// GlobalSchedules_Execute subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}/execute
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task GlobalSchedules_ExecuteAsync(string subscriptionId, string resourceGroupName, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/execute&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a schedule's target resource Id. This operation can take a while to complete.
		/// GlobalSchedules_Retarget subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}/retarget
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the schedule.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Properties for retargeting a virtual machine schedule.</param>
		/// <returns>OK</returns>
		public async Task GlobalSchedules_RetargetAsync(string subscriptionId, string resourceGroupName, string name, string api_version, RetargetScheduleProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevTestLab/schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/retarget&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
