//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes an Azure Data Lake Store output data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureDataLakeStoreOutputDataSource : OutputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with an Azure Data Lake Store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AzureDataLakeStoreOutputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with an Azure Data Lake Store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureDataLakeStoreOutputDataSourceProperties : OAuthBasedDataSourceProperties
	{
		
		/// <summary>
		/// The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateFormat")]
		public string DateFormat { get; set; }
		
		/// <summary>
		/// The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePathPrefix")]
		public string FilePathPrefix { get; set; }
		
		/// <summary>
		/// The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public string TimeFormat { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with an Azure SQL database data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureSqlDatabaseDataSourceProperties
	{
		
		/// <summary>
		/// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		/// <summary>
		/// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		/// <summary>
		/// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
		
		/// <summary>
		/// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// Describes an Azure SQL database output data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureSqlDatabaseOutputDataSource : OutputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with an Azure SQL database output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AzureSqlDatabaseOutputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with an Azure SQL database output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureSqlDatabaseOutputDataSourceProperties
	{
	}
	
	/// <summary>
	/// Describes an Azure Table output data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureTableOutputDataSource : OutputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with an Azure Table output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AzureTableOutputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with an Azure Table output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureTableOutputDataSourceProperties
	{
		
		/// <summary>
		/// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountKey")]
		public string AccountKey { get; set; }
		
		/// <summary>
		/// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The number of rows to write to the Azure Table at a time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchSize")]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// If specified, each item in the array is the name of a column to remove (if present) from output event entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnsToRemove")]
		public string[] ColumnsToRemove { get; set; }
		
		/// <summary>
		/// This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKey")]
		public string PartitionKey { get; set; }
		
		/// <summary>
		/// This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowKey")]
		public string RowKey { get; set; }
		
		/// <summary>
		/// The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
	}
	
	/// <summary>
	/// Describes a blob output data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobOutputDataSource : OutputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with a blob output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlobOutputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with a blob output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobOutputDataSourceProperties
	{
	}
	
	/// <summary>
	/// Describes a DocumentDB output data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentDbOutputDataSource : OutputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with a DocumentDB output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DocumentDbOutputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with a DocumentDB output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentDbOutputDataSourceProperties
	{
		
		/// <summary>
		/// The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountKey")]
		public string AccountKey { get; set; }
		
		/// <summary>
		/// The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionNamePattern")]
		public string CollectionNamePattern { get; set; }
		
		/// <summary>
		/// The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		/// <summary>
		/// The name of the field in output events used to specify the primary key which insert or update operations are based on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public string DocumentId { get; set; }
		
		/// <summary>
		/// The name of the field in output events used to specify the key for partitioning output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required to be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKey")]
		public string PartitionKey { get; set; }
	}
	
	/// <summary>
	/// Describes an Event Hub output data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventHubOutputDataSource : OutputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with an Event Hub output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EventHubOutputDataSourceProperties Properties { get; set; }
	}
	
	public class EventHubOutputDataSourceProperties
	{
	}
	
	/// <summary>
	/// The properties that are associated with data sources that use OAuth as their authentication model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OAuthBasedDataSourceProperties
	{
		
		/// <summary>
		/// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		/// <summary>
		/// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenUserDisplayName")]
		public string TokenUserDisplayName { get; set; }
		
		/// <summary>
		/// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenUserPrincipalName")]
		public string TokenUserPrincipalName { get; set; }
	}
	
	/// <summary>
	/// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Output : SubResource
	{
		
		/// <summary>
		/// The properties that are associated with an output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OutputProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes the data source that output will be written to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OutputDataSource
	{
		
		/// <summary>
		/// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Object containing a list of outputs under a streaming job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OutputListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of outputs under a streaming job. Populated by a 'List' operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Output[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with an output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OutputProperties
	{
		
		/// <summary>
		/// Describes the data source that output will be written to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasource")]
		public OutputDataSource Datasource { get; set; }
		
		/// <summary>
		/// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnostics")]
		public object Diagnostics { get; set; }
		
		/// <summary>
		/// The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Describes how data from an input is serialized or how data is serialized when written to an output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialization")]
		public object Serialization { get; set; }
	}
	
	/// <summary>
	/// Describes a Power BI output data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerBIOutputDataSource : OutputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with a Power BI output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PowerBIOutputDataSourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that are associated with a Power BI output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PowerBIOutputDataSourceProperties : OAuthBasedDataSourceProperties
	{
		
		/// <summary>
		/// The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public string Dataset { get; set; }
		
		/// <summary>
		/// The ID of the Power BI group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// The name of the Power BI group. Use this property to help remember which specific Power BI group id was used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		/// <summary>
		/// The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
	}
	
	/// <summary>
	/// Describes a Service Bus Queue output data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusQueueOutputDataSource : OutputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with a Service Bus Queue output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServiceBusQueueOutputDataSourceProperties Properties { get; set; }
	}
	
	public class ServiceBusQueueOutputDataSourceProperties
	{
	}
	
	/// <summary>
	/// Describes a Service Bus Topic output data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusTopicOutputDataSource : OutputDataSource
	{
		
		/// <summary>
		/// The properties that are associated with a Service Bus Topic output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServiceBusTopicOutputDataSourceProperties Properties { get; set; }
	}
	
	public class ServiceBusTopicOutputDataSourceProperties
	{
	}
	
	/// <summary>
	/// The base sub-resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the outputs under the specified streaming job.
		/// Outputs_ListByStreamingJob subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs
		/// </summary>
		/// <param name="select">The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or "*" to include all properties. By default, all properties are returned except diagnostics. Currently only accepts '*' as a valid value.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <returns>Successfully listed the outputs under the specified streaming job.</returns>
		public async Task<OutputListResult> Outputs_ListByStreamingJobAsync(string select, string api_version, string subscriptionId, string resourceGroupName, string jobName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/outputs?$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OutputListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about the specified output.
		/// Outputs_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="outputName">The name of the output.</param>
		/// <returns>Successfully retrieved the specified output.</returns>
		public async Task<Output> Outputs_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string outputName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/outputs/"+ (outputName==null? "" : System.Uri.EscapeDataString(outputName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Output>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an output or replaces an already existing output under an existing streaming job.
		/// Outputs_CreateOrReplace subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="outputName">The name of the output.</param>
		/// <param name="requestBody">The definition of the output that will be used to create a new output or replace the existing one under the streaming job.</param>
		/// <returns>The output was successfully created or replaced.</returns>
		public async Task<Output> Outputs_CreateOrReplaceAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string outputName, Output requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/outputs/"+ (outputName==null? "" : System.Uri.EscapeDataString(outputName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Output>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an output from the streaming job.
		/// Outputs_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="outputName">The name of the output.</param>
		/// <returns>The output was successfully deleted.</returns>
		public async Task Outputs_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string outputName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/outputs/"+ (outputName==null? "" : System.Uri.EscapeDataString(outputName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing output under an existing streaming job. This can be used to partially update (ie. update one or two properties) an output without affecting the rest the job or output definition.
		/// Outputs_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="outputName">The name of the output.</param>
		/// <param name="requestBody">An Output object. The properties specified here will overwrite the corresponding properties in the existing output (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing output will remain the same and not change as a result of this PATCH operation.</param>
		/// <returns>The output was successfully updated.</returns>
		public async Task<Output> Outputs_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string outputName, Output requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/outputs/"+ (outputName==null? "" : System.Uri.EscapeDataString(outputName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Output>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tests whether an output’s datasource is reachable and usable by the Azure Stream Analytics service.
		/// Outputs_Test subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}/test
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="jobName">The name of the streaming job.</param>
		/// <param name="outputName">The name of the output.</param>
		/// <param name="requestBody">If the output specified does not already exist, this parameter must contain the full output definition intended to be tested. If the output specified already exists, this parameter can be left null to test the existing output as is or if specified, the properties specified will overwrite the corresponding properties in the existing output (exactly like a PATCH operation) and the resulting output will be tested.</param>
		/// <returns>The test operation completed successfully.</returns>
		public async Task<object> Outputs_TestAsync(string api_version, string subscriptionId, string resourceGroupName, string jobName, string outputName, Output requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StreamAnalytics/streamingjobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/outputs/"+ (outputName==null? "" : System.Uri.EscapeDataString(outputName))+"/test?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
