//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ACIServiceCreateRequest
	{
	}
	
	/// <summary>
	/// The response for an ACI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ACIServiceResponse
	{
	}
	
	/// <summary>
	/// The response for an AKS Endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AKSEndpointResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AKSReplicaStatus
	{
		
		/// <summary>
		/// The number of available replicas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableReplicas")]
		public System.Nullable<System.Int32> AvailableReplicas { get; set; }
		
		/// <summary>
		/// The desired number of replicas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredReplicas")]
		public System.Nullable<System.Int32> DesiredReplicas { get; set; }
		
		/// <summary>
		/// The Model Management Service Error object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ModelErrorResponse Error { get; set; }
		
		/// <summary>
		/// The number of updated replicas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedReplicas")]
		public System.Nullable<System.Int32> UpdatedReplicas { get; set; }
	}
	
	/// <summary>
	/// The Model Management Service Error object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelErrorResponse
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// An array of error detail objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDetails[] Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The HTTP status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	/// <summary>
	/// The error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error (e.g., the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The request to create an AKS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AKSServiceCreateRequest
	{
	}
	
	/// <summary>
	/// The response for an AKS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AKSServiceResponse
	{
	}
	
	/// <summary>
	/// The response for an AKS variant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AKSVariantResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// The Asset definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Asset
	{
		
		/// <summary>
		/// A list of child artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ArtifactDetails[] Artifacts { get; set; }
		
		/// <summary>
		/// The time the Asset was created in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The Asset description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Asset Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Asset tag dictionary. Tags are mutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvTags")]
		public System.Collections.Generic.Dictionary<string, string> KvTags { get; set; }
		
		/// <summary>
		/// A dictionary containing metadata about the Asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public System.Collections.Generic.Dictionary<string, string> Meta { get; set; }
		
		/// <summary>
		/// The name of the Asset.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Asset property dictionary. Properties are immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The RunId associated with this Asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runid")]
		public string Runid { get; set; }
	}
	
	/// <summary>
	/// The async operation details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AsyncOperationDetails
	{
		
		/// <summary>
		/// The suboperation state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subOperationState")]
		public string SubOperationState { get; set; }
		
		/// <summary>
		/// The suboperation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subOperationType")]
		public string SubOperationType { get; set; }
	}
	
	/// <summary>
	/// The async operation status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AsyncOperationStatus
	{
		
		/// <summary>
		/// The async operation creation time (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The async operation end time (UTC)l
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The Model Management Service Error object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ModelErrorResponse Error { get; set; }
		
		/// <summary>
		/// The async operation id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The async operation details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationDetails")]
		public AsyncOperationDetails OperationDetails { get; set; }
		
		/// <summary>
		/// The async operation log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationLog")]
		public string OperationLog { get; set; }
		
		/// <summary>
		/// The async operation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public string OperationType { get; set; }
		
		/// <summary>
		/// The request id that created this operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentRequestId")]
		public string ParentRequestId { get; set; }
		
		/// <summary>
		/// The resource created/updated by the async operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLocation")]
		public string ResourceLocation { get; set; }
		
		/// <summary>
		/// The async operation state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AsyncOperationStatusState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AsyncOperationStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthKeys
	{
		
		/// <summary>
		/// The primary key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// The secondary key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryKey")]
		public string SecondaryKey { get; set; }
	}
	
	/// <summary>
	/// Service Token
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthToken
	{
		
		/// <summary>
		/// Access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Access token expiry time (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryOn")]
		public System.Nullable<System.Int64> ExpiryOn { get; set; }
		
		/// <summary>
		/// Refresh access token after time (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshAfter")]
		public System.Nullable<System.Int64> RefreshAfter { get; set; }
		
		/// <summary>
		/// Access token type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenType")]
		public string TokenType { get; set; }
	}
	
	/// <summary>
	/// The Auto Scaler properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoScaler
	{
		
		/// <summary>
		/// Option to enable/disable auto scaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscaleEnabled")]
		public System.Nullable<System.Boolean> AutoscaleEnabled { get; set; }
		
		/// <summary>
		/// The maximum number of replicas in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxReplicas")]
		public System.Nullable<System.Int32> MaxReplicas { get; set; }
		
		/// <summary>
		/// The minimum number of replicas to scale down to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minReplicas")]
		public System.Nullable<System.Int32> MinReplicas { get; set; }
		
		/// <summary>
		/// The amount of seconds to wait between auto scale updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshPeriodInSeconds")]
		public System.Nullable<System.Int32> RefreshPeriodInSeconds { get; set; }
		
		/// <summary>
		/// The target utilization percentage to use for determining whether to scale the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetUtilization")]
		public System.Nullable<System.Int32> TargetUtilization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchServiceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerRegistry
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// The resource requirements for the container (cpu and memory).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerResourceRequirements
	{
		
		/// <summary>
		/// The number of CPU cores on the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public System.Nullable<System.Double> Cpu { get; set; }
		
		/// <summary>
		/// The number of FPGA PCIE devices exposed to the container. Must be multiple of 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fpga")]
		public System.Nullable<System.Int32> Fpga { get; set; }
		
		/// <summary>
		/// The number of GPU cores in the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpu")]
		public System.Nullable<System.Int32> Gpu { get; set; }
		
		/// <summary>
		/// The amount of memory on the container in GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryInGB")]
		public System.Nullable<System.Double> MemoryInGB { get; set; }
	}
	
	/// <summary>
	/// The request to create an Endpoint in the AKS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateEndpointRequest
	{
	}
	
	/// <summary>
	/// The Variant properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateEndpointVariantRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateIotServiceRequest
	{
	}
	
	/// <summary>
	/// The base class for creating a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateServiceRequest
	{
		
		/// <summary>
		/// The compute environment type for the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="computeType")]
		public CreateServiceRequestComputeType ComputeType { get; set; }
		
		/// <summary>
		/// The deployment type for the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentType")]
		public System.Nullable<CreateServiceRequestDeploymentType> DeploymentType { get; set; }
		
		/// <summary>
		/// The description of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Request to create a Docker image based on Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentImageRequest")]
		public EnvironmentImageRequest EnvironmentImageRequest { get; set; }
		
		/// <summary>
		/// The Image Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public AuthKeys Keys { get; set; }
		
		/// <summary>
		/// The service tag dictionary. Tags are mutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvTags")]
		public System.Collections.Generic.Dictionary<string, string> KvTags { get; set; }
		
		/// <summary>
		/// The location of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The service name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The service properties dictionary. Properties are immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreateServiceRequestComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMLCOMPUTE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKSENDPOINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreateServiceRequestDeploymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRPCRealtimeEndpoint = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HttpRealtimeEndpoint = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Batch = 2,
	}
	
	/// <summary>
	/// Request to create a Docker image based on Environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentImageRequest
	{
		
		/// <summary>
		/// The list of assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public EnvironmentImageAsset[] Assets { get; set; }
		
		/// <summary>
		/// The name of the driver file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driverProgram")]
		public string DriverProgram { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public ModelEnvironmentDefinition Environment { get; set; }
		
		/// <summary>
		/// The list of model Ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelIds")]
		public string[] ModelIds { get; set; }
	}
	
	/// <summary>
	/// An Image asset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentImageAsset
	{
		
		/// <summary>
		/// The Asset Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The mime type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Whether the Asset is unpacked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unpack")]
		public System.Nullable<System.Boolean> Unpack { get; set; }
		
		/// <summary>
		/// The Url of the Asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelEnvironmentDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="docker")]
		public ModelDockerSection Docker { get; set; }
		
		/// <summary>
		/// Definition of environment variables to be defined in the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get; set; }
		
		/// <summary>
		/// The Inferencing stack version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inferencingStackVersion")]
		public string InferencingStackVersion { get; set; }
		
		/// <summary>
		/// The name of the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="python")]
		public ModelPythonSection Python { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spark")]
		public ModelSparkSection Spark { get; set; }
		
		/// <summary>
		/// The environment version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelDockerSection
	{
		
		/// <summary>
		/// Extra arguments to the Docker run command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string[] Arguments { get; set; }
		
		/// <summary>
		/// Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseDockerfile")]
		public string BaseDockerfile { get; set; }
		
		/// <summary>
		/// Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseImage")]
		public string BaseImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseImageRegistry")]
		public ContainerRegistry BaseImageRegistry { get; set; }
		
		/// <summary>
		/// Set True to perform this run inside a Docker container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Run with NVidia Docker extension to support GPUs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuSupport")]
		public System.Nullable<System.Boolean> GpuSupport { get; set; }
		
		/// <summary>
		/// Set False if necessary to work around shared volume bugs on Windows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedVolumes")]
		public System.Nullable<System.Boolean> SharedVolumes { get; set; }
		
		/// <summary>
		/// The shared memory size setting for NVidia GPUs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shmSize")]
		public string ShmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelPythonSection
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseCondaEnvironment")]
		public string BaseCondaEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condaDependencies")]
		public string CondaDependencies { get; set; }
		
		/// <summary>
		/// The python interpreter path. This is only used when user_managed_dependencies=True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interpreterPath")]
		public string InterpreterPath { get; set; }
		
		/// <summary>
		/// True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userManagedDependencies")]
		public System.Nullable<System.Boolean> UserManagedDependencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelSparkSection
	{
		
		/// <summary>
		/// The Spark packages to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packages")]
		public SparkMavenPackage[] Packages { get; set; }
		
		/// <summary>
		/// Whether to precache the packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precachePackages")]
		public System.Nullable<System.Boolean> PrecachePackages { get; set; }
		
		/// <summary>
		/// The list of spark repositories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public string[] Repositories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SparkMavenPackage
	{
		
		[System.Runtime.Serialization.DataMember(Name="artifact")]
		public string Artifact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The dataset reference object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatasetReference
	{
		
		/// <summary>
		/// The id of the dataset reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the dataset reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The deployment summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentSummary
	{
		
		/// <summary>
		/// The number of successful deployments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successfulDeployments")]
		public System.Nullable<System.Int32> SuccessfulDeployments { get; set; }
		
		/// <summary>
		/// The number of unsuccessful deployments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsuccessfulDeployments")]
		public System.Nullable<System.Int32> UnsuccessfulDeployments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DockerImageResponse
	{
	}
	
	/// <summary>
	/// The FPGA Docker Image response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FPGADockerImageResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageResponseBase
	{
		
		/// <summary>
		/// Whether the image will be automatically deleted with the last service using it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDelete")]
		public System.Nullable<System.Boolean> AutoDelete { get; set; }
		
		/// <summary>
		/// The time the image was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The state of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationState")]
		public AsyncOperationStatusState CreationState { get; set; }
		
		/// <summary>
		/// The image description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Model Management Service Error object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ModelErrorResponse Error { get; set; }
		
		/// <summary>
		/// The image Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Uri to the image build logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageBuildLogUri")]
		public string ImageBuildLogUri { get; set; }
		
		/// <summary>
		/// The flavor of the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageFlavor")]
		public ImageResponseBaseImageFlavor ImageFlavor { get; set; }
		
		/// <summary>
		/// The Image location string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageLocation")]
		public string ImageLocation { get; set; }
		
		/// <summary>
		/// The type of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public System.Nullable<ImageResponseBaseImageType> ImageType { get; set; }
		
		/// <summary>
		/// The image tag dictionary. Tags are mutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvTags")]
		public System.Collections.Generic.Dictionary<string, string> KvTags { get; set; }
		
		/// <summary>
		/// The list of models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelDetails")]
		public Model[] ModelDetails { get; set; }
		
		/// <summary>
		/// The list of model Ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelIds")]
		public string[] ModelIds { get; set; }
		
		/// <summary>
		/// The time the image was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedTime")]
		public System.Nullable<System.DateTimeOffset> ModifiedTime { get; set; }
		
		/// <summary>
		/// The image name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the asynchronous operation for this image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The image properties dictionary. Properties are immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The image version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ImageResponseBaseImageFlavor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebApiContainer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BatchContainer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTContainer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccelContainer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserProvidedContainer = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ImageResponseBaseImageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Docker = 0,
	}
	
	/// <summary>
	/// An Azure Machine Learning Model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Model
	{
		
		/// <summary>
		/// The Model creation time (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The list of datasets associated with the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasets")]
		public DatasetReference[] Datasets { get; set; }
		
		/// <summary>
		/// The Model description text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the experiment where this model was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experimentName")]
		public string ExperimentName { get; set; }
		
		/// <summary>
		/// The Model framework.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public string Framework { get; set; }
		
		/// <summary>
		/// The Model framework version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frameworkVersion")]
		public string FrameworkVersion { get; set; }
		
		/// <summary>
		/// The Model Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Model tag dictionary. Items are mutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvTags")]
		public System.Collections.Generic.Dictionary<string, string> KvTags { get; set; }
		
		/// <summary>
		/// The MIME type of Model content. For more details about MIME type, please open https://www.iana.org/assignments/media-types/media-types.xhtml
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The Model last modified time (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedTime")]
		public System.Nullable<System.DateTimeOffset> ModifiedTime { get; set; }
		
		/// <summary>
		/// The Model name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Parent Model Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentModelId")]
		public string ParentModelId { get; set; }
		
		/// <summary>
		/// The Model property dictionary. Properties are immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The RunId that created this model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// Indicates whether we need to unpack the Model during docker Image creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unpack")]
		public System.Nullable<System.Boolean> Unpack { get; set; }
		
		/// <summary>
		/// The URL of the Model. Usually a SAS URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The Model version assigned by Model Management Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotBaseModuleSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="createOptions")]
		public string CreateOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moduleName")]
		public string ModuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertiesDesired")]
		public System.Collections.Generic.Dictionary<string, string> PropertiesDesired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotModuleSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="createOptions")]
		public string CreateOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageLocation")]
		public string ImageLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moduleName")]
		public string ModuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertiesDesired")]
		public System.Collections.Generic.Dictionary<string, string> PropertiesDesired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IotServiceResponse
	{
	}
	
	/// <summary>
	/// The Json Patch definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JsonPatchOperation
	{
		
		/// <summary>
		/// The source location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public string Op { get; set; }
		
		/// <summary>
		/// The target location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The liveness probe requirements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LivenessProbeRequirements
	{
		
		/// <summary>
		/// The number of failures to allow before returning an unhealthy status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureThreshold")]
		public System.Nullable<System.Int32> FailureThreshold { get; set; }
		
		/// <summary>
		/// The delay before the first probe in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialDelaySeconds")]
		public System.Nullable<System.Int32> InitialDelaySeconds { get; set; }
		
		/// <summary>
		/// The length of time between probes in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodSeconds")]
		public System.Nullable<System.Int32> PeriodSeconds { get; set; }
		
		/// <summary>
		/// The number of successful probes before returning a healthy status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successThreshold")]
		public System.Nullable<System.Int32> SuccessThreshold { get; set; }
		
		/// <summary>
		/// The probe timeout in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	/// <summary>
	/// The Model data collection properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelDataCollection
	{
		
		/// <summary>
		/// Option for enabling/disabling Event Hub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventHubEnabled")]
		public System.Nullable<System.Boolean> EventHubEnabled { get; set; }
		
		/// <summary>
		/// Option for enabling/disabling storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageEnabled")]
		public System.Nullable<System.Boolean> StorageEnabled { get; set; }
	}
	
	/// <summary>
	/// The operational state of the Model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModelOperationalState
	{
		
		/// <summary>
		/// The deployment summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentSummary")]
		public DeploymentSummary DeploymentSummary { get; set; }
		
		/// <summary>
		/// The deployment end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The deployment start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// A paginated list of Assets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedAssetList
	{
		
		/// <summary>
		/// A continuation link (absolute URI) to the next page of results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type Asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Asset[] Value { get; set; }
	}
	
	/// <summary>
	/// A paginated list of Models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedModelList
	{
		
		/// <summary>
		/// A continuation link (absolute URI) to the next page of results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type Model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Model[] Value { get; set; }
	}
	
	/// <summary>
	/// A paginated list of ProfileResponses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedProfileResponseList
	{
		
		/// <summary>
		/// A continuation link (absolute URI) to the next page of results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type ProfileResponse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProfileResponse[] Value { get; set; }
	}
	
	/// <summary>
	/// The profile response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileResponse
	{
		
		/// <summary>
		/// The profile creation time (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The profile description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Model Management Service Error object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ModelErrorResponse Error { get; set; }
		
		/// <summary>
		/// The Image Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageId")]
		public string ImageId { get; set; }
		
		/// <summary>
		/// The input data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputData")]
		public string InputData { get; set; }
		
		/// <summary>
		/// The profile tags dictionary. Tags are mutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvTags")]
		public System.Collections.Generic.Dictionary<string, string> KvTags { get; set; }
		
		/// <summary>
		/// The profile name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The profile run result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileRunResult")]
		public string ProfileRunResult { get; set; }
		
		/// <summary>
		/// The profiling error logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilingErrorLogs")]
		public string ProfilingErrorLogs { get; set; }
		
		/// <summary>
		/// The profile properties dictionary. Properties are immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Latency associated with the recommended memory/cpu config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendationLatencyInMs")]
		public System.Nullable<System.Double> RecommendationLatencyInMs { get; set; }
		
		/// <summary>
		/// The recommended CPU allocation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedCpu")]
		public System.Nullable<System.Double> RecommendedCpu { get; set; }
		
		/// <summary>
		/// The recommended amount of memory to allocate in GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedMemoryInGB")]
		public System.Nullable<System.Double> RecommendedMemoryInGB { get; set; }
		
		/// <summary>
		/// The state of the profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// A paginated list of Services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedServiceList
	{
		
		/// <summary>
		/// A continuation link (absolute URI) to the next page of results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ServiceResponseBase[] Value { get; set; }
	}
	
	/// <summary>
	/// The base service response. The correct inherited response based on computeType will be returned (ex. ACIServiceResponse)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceResponseBase
	{
		
		/// <summary>
		/// The compute environment type for the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="computeType")]
		public CreateServiceRequestComputeType ComputeType { get; set; }
		
		/// <summary>
		/// The time the service was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The deployment type for the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentType")]
		public CreateServiceRequestDeploymentType DeploymentType { get; set; }
		
		/// <summary>
		/// The service description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Model Management Service Error object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ModelErrorResponse Error { get; set; }
		
		/// <summary>
		/// The service Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The service tag dictionary. Tags are mutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvTags")]
		public System.Collections.Generic.Dictionary<string, string> KvTags { get; set; }
		
		/// <summary>
		/// The service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the latest asynchronous operation for this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The service property dictionary. Properties are immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The current state of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ServiceResponseBaseState> State { get; set; }
		
		/// <summary>
		/// The time the service was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedTime")]
		public System.Nullable<System.DateTimeOffset> UpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServiceResponseBaseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Transitioning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Healthy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unhealthy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// The request for creating a profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileRequestBase
	{
		
		/// <summary>
		/// The profile description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The profile input data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputData")]
		public string InputData { get; set; }
		
		/// <summary>
		/// The tags dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvTags")]
		public System.Collections.Generic.Dictionary<string, string> KvTags { get; set; }
		
		/// <summary>
		/// The profile name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateServiceKeysRequest
	{
		
		/// <summary>
		/// Specification for which type of key to generate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public System.Nullable<RegenerateServiceKeysRequestKeyType> KeyType { get; set; }
		
		/// <summary>
		/// The value the key is set to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyValue")]
		public string KeyValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegenerateServiceKeysRequestKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Secondary = 1,
	}
	
	/// <summary>
	/// Contains registry information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryInfo
	{
		
		/// <summary>
		/// The location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The password.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// The target runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TargetRuntime
	{
		
		/// <summary>
		/// The target operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public System.Nullable<TargetRuntimeOsType> OsType { get; set; }
		
		/// <summary>
		/// The properties dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The target runtime type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeType")]
		public System.Nullable<TargetRuntimeRuntimeType> RuntimeType { get; set; }
		
		/// <summary>
		/// The target architecture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetArchitecture")]
		public System.Nullable<TargetRuntimeTargetArchitecture> TargetArchitecture { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TargetRuntimeOsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TargetRuntimeRuntimeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SparkPython = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tlc37 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tlc38 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tlc310 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Python = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PythonSlim = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PythonCustom = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TargetRuntimeTargetArchitecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Amd64 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arm32v7 = 1,
	}
	
	/// <summary>
	/// The response for an unsupported Service
	///Defines the basic service properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UnknownServiceResponse
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Query the list of Assets in a workspace.
		/// If no filter is passed, the query lists all the Assets in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.
		/// Assets_ListQuery modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="runId">The run Id associated with the Assets.</param>
		/// <param name="name">The object name.</param>
		/// <param name="count">The number of items to retrieve in a page.</param>
		/// <param name="skipToken">The continuation token to retrieve the next page.</param>
		/// <param name="tags">A set of tags with which to filter the returned models.
		///            It is a comma separated string of tags key or tags key=value
		///            Example: tagKey1,tagKey2,tagKey3=value3</param>
		/// <param name="properties">A set of properties with which to filter the returned models.
		///            It is a comma separated string of properties key and/or properties key=value
		///            Example: propKey1,propKey2,propKey3=value3</param>
		/// <param name="orderby">An option for specifying how to order the list.</param>
		/// <returns>Success</returns>
		public async Task<PaginatedAssetList> Assets_ListQueryAsync(string subscriptionId, string resourceGroup, string workspace, string runId, string name, int count, string skipToken, string tags, string properties, Assets_ListQueryOrderby orderby)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/assets&runId=" + (runId==null? "" : System.Uri.EscapeDataString(runId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&count="+count+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&properties=" + (properties==null? "" : System.Uri.EscapeDataString(properties))+"&orderby=" + orderby;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaginatedAssetList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Asset.
		/// Create an Asset from the provided payload.
		/// Assets_Create modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="requestBody">The Asset to be created.</param>
		/// <returns>Success</returns>
		public async Task<Asset> Assets_CreateAsync(string subscriptionId, string resourceGroup, string workspace, Asset requestBody)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/assets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Asset>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an Asset.
		/// Get an Asset by Id.
		/// Assets_QueryById modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The Asset Id.</param>
		/// <returns>Success</returns>
		public async Task<Asset> Assets_QueryByIdAsync(string subscriptionId, string resourceGroup, string workspace, string id)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/assets/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Asset>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Asset.
		/// Delete the specified Asset.
		/// Assets_Delete modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/assets/{id}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The Id of the Asset to delete.</param>
		/// <returns>The resource exists and was deleted successfully.</returns>
		public async Task Assets_DeleteAsync(string subscriptionId, string resourceGroup, string workspace, string id)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/assets/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Image Profiles.
		/// If no filter is passed, the query lists all Profiles for the Image. The returned list is paginated and the count of items in each page is an optional parameter.
		/// Profiles_ListQuery modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="imageId">The Image Id.</param>
		/// <param name="name">The Profile name.</param>
		/// <param name="description">The Profile description.</param>
		/// <param name="tags">A set of tags with which to filter the returned models.
		///            It is a comma separated string of tags key or tags key=value
		///            Example: tagKey1,tagKey2,tagKey3=value3</param>
		/// <param name="properties">A set of properties with which to filter the returned models.
		///            It is a comma separated string of properties key and/or properties key=value
		///            Example: propKey1,propKey2,propKey3=value3</param>
		/// <param name="count">The number of items to retrieve in a page.</param>
		/// <param name="skipToken">The continuation token to retrieve the next page.</param>
		/// <param name="orderBy">The option to order the response.</param>
		/// <returns>Success</returns>
		public async Task<PaginatedProfileResponseList> Profiles_ListQueryAsync(string subscriptionId, string resourceGroup, string workspace, string imageId, string name, string description, string tags, string properties, int count, string skipToken, Assets_ListQueryOrderby orderBy)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/images/"+ (imageId==null? "" : System.Uri.EscapeDataString(imageId))+"/profiles&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&properties=" + (properties==null? "" : System.Uri.EscapeDataString(properties))+"&count="+count+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken))+"&orderBy=" + orderBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaginatedProfileResponseList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Profile.
		/// Create a Profile for an Image.
		/// Profiles_Create modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="imageId">The Image Id.</param>
		/// <param name="requestBody">The payload that is used to create the Profile.</param>
		public async Task Profiles_CreateAsync(string subscriptionId, string resourceGroup, string workspace, string imageId, ProfileRequestBase requestBody)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/images/"+ (imageId==null? "" : System.Uri.EscapeDataString(imageId))+"/profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Profile.
		/// Get the Profile for an Image.
		/// Profiles_QueryById modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/images/{imageId}/profiles/{id}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="imageId">The Image Id.</param>
		/// <param name="id">The Profile Id.</param>
		/// <returns>Success</returns>
		public async Task<ProfileResponse> Profiles_QueryByIdAsync(string subscriptionId, string resourceGroup, string workspace, string imageId, string id)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/images/"+ (imageId==null? "" : System.Uri.EscapeDataString(imageId))+"/profiles/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query the list of Models in a workspace.
		/// The result list can be filtered using tag and name. If no filter is passed, the query lists all the Models in the given workspace. The returned list is paginated and the count of items in each page is an optional parameter.
		/// MLModels_ListQuery modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="name">The object name.</param>
		/// <param name="framework">The framework.</param>
		/// <param name="description">The object description.</param>
		/// <param name="count">The number of items to retrieve in a page.</param>
		/// <param name="skipToken">The continuation token to retrieve the next page.</param>
		/// <param name="tags">A set of tags with which to filter the returned models.
		///            It is a comma separated string of tags key or tags key=value
		///            Example: tagKey1,tagKey2,tagKey3=value3</param>
		/// <param name="properties">A set of properties with which to filter the returned models.
		///            It is a comma separated string of properties key and/or properties key=value
		///            Example: propKey1,propKey2,propKey3=value3</param>
		/// <param name="runId">The runId which created the model.</param>
		/// <param name="orderBy">An option to specify how the models are ordered in the response.</param>
		/// <returns>Success</returns>
		public async Task<PaginatedModelList> MLModels_ListQueryAsync(string subscriptionId, string resourceGroup, string workspace, string name, string framework, string description, int count, string skipToken, string tags, string properties, string runId, Assets_ListQueryOrderby orderBy)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/models&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&framework=" + (framework==null? "" : System.Uri.EscapeDataString(framework))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&count="+count+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&properties=" + (properties==null? "" : System.Uri.EscapeDataString(properties))+"&runId=" + (runId==null? "" : System.Uri.EscapeDataString(runId))+"&orderBy=" + orderBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaginatedModelList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register a model.
		/// Register the model provided.
		/// MLModels_Register modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="requestBody">The payload that is used to register the model.</param>
		/// <returns>The model registration was successful.</returns>
		public async Task<Model> MLModels_RegisterAsync(string subscriptionId, string resourceGroup, string workspace, Model requestBody)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Model>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a model.
		/// Gets a model by model id.
		/// MLModels_QueryById modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models/{id}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The model id.</param>
		/// <returns>Success</returns>
		public async Task<Model> MLModels_QueryByIdAsync(string subscriptionId, string resourceGroup, string workspace, string id)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/models/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Model>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the specified Model.
		/// Deletes a model if it exists.
		/// MLModels_Delete modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models/{id}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The model id.</param>
		/// <returns>The resource exists and was deleted successfully.</returns>
		public async Task MLModels_DeleteAsync(string subscriptionId, string resourceGroup, string workspace, string id)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/models/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the metrics for a Model.
		/// The operational events collected for the Model are returned.
		/// MLModels_GetMetrics modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/models/{id}/metrics
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The Model Id.</param>
		/// <param name="startDate">The start date from which to retrieve metrics, ISO 8601 literal format.</param>
		/// <param name="endDate">The end date from which to retrieve metrics, ISO 8601 literal format.</param>
		/// <returns>Success</returns>
		public async Task<ModelOperationalState> MLModels_GetMetricsAsync(string subscriptionId, string resourceGroup, string workspace, string id, string startDate, string endDate)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/models/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/metrics&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModelOperationalState>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the status of an async operation.
		/// Get the status of an async operation by operation id.
		/// Operations_Get modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/operations/{id}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The operation id.</param>
		/// <returns>Success</returns>
		public async Task<AsyncOperationStatus> Operations_GetAsync(string subscriptionId, string resourceGroup, string workspace, string id)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/operations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AsyncOperationStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query the list of Services in a Workspace.
		/// If no filter is passed, the query lists all Services in the Workspace. The returned list is paginated and the count of item in each page is an optional parameter.
		/// Services_ListQuery modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="imageId">The Image Id.</param>
		/// <param name="imageName">The Image name.</param>
		/// <param name="modelId">The Model Id.</param>
		/// <param name="modelName">The Model name.</param>
		/// <param name="name">The object name.</param>
		/// <param name="count">The number of items to retrieve in a page.</param>
		/// <param name="computeType">The compute environment type.</param>
		/// <param name="skipToken">The continuation token to retrieve the next page.</param>
		/// <param name="tags">A set of tags with which to filter the returned models.
		///            It is a comma separated string of tags key or tags key=value
		///            Example: tagKey1,tagKey2,tagKey3=value3</param>
		/// <param name="properties">A set of properties with which to filter the returned models.
		///            It is a comma separated string of properties key and/or properties key=value
		///            Example: propKey1,propKey2,propKey3=value3</param>
		/// <param name="expand">Set to True to include Model details.</param>
		/// <param name="orderby">The option to order the response.</param>
		/// <returns>Success</returns>
		public async Task<PaginatedServiceList> Services_ListQueryAsync(string subscriptionId, string resourceGroup, string workspace, string imageId, string imageName, string modelId, string modelName, string name, int count, string computeType, string skipToken, string tags, string properties, bool expand, Assets_ListQueryOrderby orderby)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/services&imageId=" + (imageId==null? "" : System.Uri.EscapeDataString(imageId))+"&imageName=" + (imageName==null? "" : System.Uri.EscapeDataString(imageName))+"&modelId=" + (modelId==null? "" : System.Uri.EscapeDataString(modelId))+"&modelName=" + (modelName==null? "" : System.Uri.EscapeDataString(modelName))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&count="+count+"&computeType=" + (computeType==null? "" : System.Uri.EscapeDataString(computeType))+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&properties=" + (properties==null? "" : System.Uri.EscapeDataString(properties))+"&expand="+expand+"&orderby=" + orderby;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaginatedServiceList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Service.
		/// Create a Service with the specified payload.
		/// Services_Create modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="requestBody">The payload that is used to create the Service.</param>
		public async Task Services_CreateAsync(string subscriptionId, string resourceGroup, string workspace, CreateServiceRequest requestBody)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Service.
		/// Get a Service by Id.
		/// Services_QueryById modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The Service Id.</param>
		/// <param name="expand">Set to True to include Model details.</param>
		/// <returns>Success</returns>
		public async Task<ServiceResponseBase> Services_QueryByIdAsync(string subscriptionId, string resourceGroup, string workspace, string id, bool expand)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&expand="+expand;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceResponseBase>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Service.
		/// Delete a specific Service.
		/// Services_Delete modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The Service Id.</param>
		/// <returns>The resource exists and was deleted successfully.</returns>
		public async Task Services_DeleteAsync(string subscriptionId, string resourceGroup, string workspace, string id)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/services/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Service keys.
		/// Gets a list of Service keys.
		/// Services_ListServiceKeys modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/listkeys
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The Service Id.</param>
		/// <returns>Success</returns>
		public async Task<AuthKeys> Services_ListServiceKeysAsync(string subscriptionId, string resourceGroup, string workspace, string id)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/listkeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerate Service Keys.
		/// Regenerate and return the Service keys.
		/// Services_RegenerateServiceKeys modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/regenerateKeys
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The Service Id.</param>
		/// <param name="requestBody">The payload that is used to regenerate keys.</param>
		/// <returns>Success</returns>
		public async Task<AuthKeys> Services_RegenerateServiceKeysAsync(string subscriptionId, string resourceGroup, string workspace, string id, RegenerateServiceKeysRequest requestBody)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/regenerateKeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate Service Access Token.
		/// Gets access token that can be used for calling service.
		/// Services_GetServiceToken modelmanagement/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.MachineLearningServices/workspaces/{workspace}/services/{id}/token
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroup">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspace">The name of the workspace.</param>
		/// <param name="id">The Service Id.</param>
		public async Task Services_GetServiceTokenAsync(string subscriptionId, string resourceGroup, string workspace, string id)
		{
			var requestUri = "modelmanagement/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Assets_ListQueryOrderby
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatedAtDesc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatedAtAsc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdatedAtDesc = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdatedAtAsc = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
