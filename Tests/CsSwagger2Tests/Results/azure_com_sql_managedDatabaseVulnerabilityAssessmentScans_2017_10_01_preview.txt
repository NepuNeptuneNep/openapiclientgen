//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Properties of the export operation's result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseVulnerabilityAssessmentScanExportProperties
	{
		
		/// <summary>
		/// Location of the exported report (e.g. https://myStorage.blob.core.windows.net/VaScans/scans/serverName/databaseName/scan_scanId.xlsx).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportedReportLocation")]
		public string ExportedReportLocation { get; set; }
	}
	
	/// <summary>
	/// A database Vulnerability Assessment scan export resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseVulnerabilityAssessmentScansExport
	{
		
		/// <summary>
		/// Properties of the export operation's result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatabaseVulnerabilityAssessmentScanExportProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a vulnerability assessment scan error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VulnerabilityAssessmentScanError
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A vulnerability assessment scan record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VulnerabilityAssessmentScanRecord
	{
		
		/// <summary>
		/// Properties of a vulnerability assessment scan record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VulnerabilityAssessmentScanRecordProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a vulnerability assessment scan record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VulnerabilityAssessmentScanRecordProperties
	{
		
		/// <summary>
		/// The scan end time (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The scan errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public VulnerabilityAssessmentScanError[] Errors { get; set; }
		
		/// <summary>
		/// The number of failed security checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfFailedSecurityChecks")]
		public System.Nullable<System.Int32> NumberOfFailedSecurityChecks { get; set; }
		
		/// <summary>
		/// The scan ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scanId")]
		public string ScanId { get; set; }
		
		/// <summary>
		/// The scan start time (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The scan status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<VulnerabilityAssessmentScanRecordPropertiesState> State { get; set; }
		
		/// <summary>
		/// The scan results storage container path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageContainerPath")]
		public string StorageContainerPath { get; set; }
		
		/// <summary>
		/// The scan trigger type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public System.Nullable<VulnerabilityAssessmentScanRecordPropertiesTriggerType> TriggerType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum VulnerabilityAssessmentScanRecordPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Passed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedToRun = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum VulnerabilityAssessmentScanRecordPropertiesTriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnDemand = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recurring = 1,
	}
	
	/// <summary>
	/// A list of vulnerability assessment scan records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VulnerabilityAssessmentScanRecordListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VulnerabilityAssessmentScanRecord[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the vulnerability assessment scans of a database.
		/// ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="managedInstanceName">The name of the managed instance.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="vulnerabilityAssessmentName">The name of the vulnerability assessment.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the database vulnerability assessment scan records.</returns>
		public async Task<VulnerabilityAssessmentScanRecordListResult> ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseAsync(string resourceGroupName, string managedInstanceName, string databaseName, ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName vulnerabilityAssessmentName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/managedInstances/"+ (managedInstanceName==null? "" : System.Uri.EscapeDataString(managedInstanceName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/vulnerabilityAssessments/"+vulnerabilityAssessmentName+"/scans&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VulnerabilityAssessmentScanRecordListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a vulnerability assessment scan record of a database.
		/// ManagedDatabaseVulnerabilityAssessmentScans_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="managedInstanceName">The name of the managed instance.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="vulnerabilityAssessmentName">The name of the vulnerability assessment.</param>
		/// <param name="scanId">The vulnerability assessment scan Id of the scan to retrieve.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the database vulnerability assessment scan record.</returns>
		public async Task<VulnerabilityAssessmentScanRecord> ManagedDatabaseVulnerabilityAssessmentScans_GetAsync(string resourceGroupName, string managedInstanceName, string databaseName, ManagedDatabaseVulnerabilityAssessmentScans_GetVulnerabilityAssessmentName vulnerabilityAssessmentName, string scanId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/managedInstances/"+ (managedInstanceName==null? "" : System.Uri.EscapeDataString(managedInstanceName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/vulnerabilityAssessments/"+vulnerabilityAssessmentName+"/scans/"+ (scanId==null? "" : System.Uri.EscapeDataString(scanId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VulnerabilityAssessmentScanRecord>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Convert an existing scan result to a human readable format. If already exists nothing happens
		/// ManagedDatabaseVulnerabilityAssessmentScans_Export subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="managedInstanceName">The name of the managed instance.</param>
		/// <param name="databaseName">The name of the scanned database.</param>
		/// <param name="vulnerabilityAssessmentName">The name of the vulnerability assessment.</param>
		/// <param name="scanId">The vulnerability assessment scan Id.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Scan result was converted successfully.</returns>
		public async Task<DatabaseVulnerabilityAssessmentScansExport> ManagedDatabaseVulnerabilityAssessmentScans_ExportAsync(string resourceGroupName, string managedInstanceName, string databaseName, ManagedDatabaseVulnerabilityAssessmentScans_ExportVulnerabilityAssessmentName vulnerabilityAssessmentName, string scanId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/managedInstances/"+ (managedInstanceName==null? "" : System.Uri.EscapeDataString(managedInstanceName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/vulnerabilityAssessments/"+vulnerabilityAssessmentName+"/scans/"+ (scanId==null? "" : System.Uri.EscapeDataString(scanId))+"/export&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseVulnerabilityAssessmentScansExport>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Executes a Vulnerability Assessment database scan.
		/// ManagedDatabaseVulnerabilityAssessmentScans_InitiateScan subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="managedInstanceName">The name of the managed instance.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="vulnerabilityAssessmentName">The name of the vulnerability assessment.</param>
		/// <param name="scanId">The vulnerability assessment scan Id of the scan to retrieve.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully executed a Vulnerability Assessment database scan.</returns>
		public async Task ManagedDatabaseVulnerabilityAssessmentScans_InitiateScanAsync(string resourceGroupName, string managedInstanceName, string databaseName, ManagedDatabaseVulnerabilityAssessmentScans_InitiateScanVulnerabilityAssessmentName vulnerabilityAssessmentName, string scanId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/managedInstances/"+ (managedInstanceName==null? "" : System.Uri.EscapeDataString(managedInstanceName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/vulnerabilityAssessments/"+vulnerabilityAssessmentName+"/scans/"+ (scanId==null? "" : System.Uri.EscapeDataString(scanId))+"/initiateScan&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabaseVulnerabilityAssessmentName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ManagedDatabaseVulnerabilityAssessmentScans_GetVulnerabilityAssessmentName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ManagedDatabaseVulnerabilityAssessmentScans_ExportVulnerabilityAssessmentName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ManagedDatabaseVulnerabilityAssessmentScans_InitiateScanVulnerabilityAssessmentName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
