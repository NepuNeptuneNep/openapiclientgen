//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The information type keyword.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationProtectionKeyword
	{
		
		/// <summary>
		/// Indicates whether the keyword can be applied on numeric types or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canBeNumeric")]
		public System.Nullable<System.Boolean> CanBeNumeric { get; set; }
		
		/// <summary>
		/// Indicates whether the keyword is custom or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public System.Nullable<System.Boolean> Custom { get; set; }
		
		/// <summary>
		/// Indicates whether the keyword is excluded or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excluded")]
		public System.Nullable<System.Boolean> Excluded { get; set; }
		
		/// <summary>
		/// The keyword pattern.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
	}
	
	/// <summary>
	/// Information protection policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationProtectionPolicy
	{
		
		/// <summary>
		/// describes properties of an information protection policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public InformationProtectionPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// describes properties of an information protection policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationProtectionPolicyProperties
	{
		
		/// <summary>
		/// The sensitivity information types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="informationTypes")]
		public System.Collections.Generic.Dictionary<string, InformationType> InformationTypes { get; set; }
		
		/// <summary>
		/// Dictionary of sensitivity labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, SensitivityLabel> Labels { get; set; }
		
		/// <summary>
		/// Describes the last UTC time the policy was modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedUtc")]
		public System.Nullable<System.DateTimeOffset> LastModifiedUtc { get; set; }
	}
	
	/// <summary>
	/// The information type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationType
	{
		
		/// <summary>
		/// Indicates whether the information type is custom or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public System.Nullable<System.Boolean> Custom { get; set; }
		
		/// <summary>
		/// The name of the information type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates whether the information type is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The information type keywords.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public InformationProtectionKeyword[] Keywords { get; set; }
		
		/// <summary>
		/// The order of the information type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Double> Order { get; set; }
		
		/// <summary>
		/// The recommended label id to be associated with this information type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedLabelId")]
		public string RecommendedLabelId { get; set; }
	}
	
	/// <summary>
	/// The sensitivity label.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SensitivityLabel
	{
		
		/// <summary>
		/// The name of the sensitivity label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates whether the label is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The order of the sensitivity label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Double> Order { get; set; }
	}
	
	/// <summary>
	/// Information protection policies response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationProtectionPolicyList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of information protection policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public InformationProtectionPolicy[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Information protection policies of a specific management group.
		/// InformationProtectionPolicies_List {scope}/providers/Microsoft.Security/informationProtectionPolicies
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="scope">Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).</param>
		/// <returns>OK</returns>
		public async Task<InformationProtectionPolicyList> InformationProtectionPolicies_ListAsync(string api_version, string scope)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Security/informationProtectionPolicies?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InformationProtectionPolicyList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of the information protection policy.
		/// InformationProtectionPolicies_Get {scope}/providers/Microsoft.Security/informationProtectionPolicies/{informationProtectionPolicyName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="scope">Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).</param>
		/// <param name="informationProtectionPolicyName">Name of the information protection policy.</param>
		/// <returns>OK</returns>
		public async Task<InformationProtectionPolicy> InformationProtectionPolicies_GetAsync(string api_version, string scope, InformationProtectionPolicies_GetInformationProtectionPolicyName informationProtectionPolicyName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Security/informationProtectionPolicies/"+informationProtectionPolicyName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InformationProtectionPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of the information protection policy.
		/// InformationProtectionPolicies_CreateOrUpdate {scope}/providers/Microsoft.Security/informationProtectionPolicies/{informationProtectionPolicyName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="scope">Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).</param>
		/// <param name="informationProtectionPolicyName">Name of the information protection policy.</param>
		/// <returns>OK</returns>
		public async Task<InformationProtectionPolicy> InformationProtectionPolicies_CreateOrUpdateAsync(string api_version, string scope, InformationProtectionPolicies_GetInformationProtectionPolicyName informationProtectionPolicyName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Security/informationProtectionPolicies/"+informationProtectionPolicyName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InformationProtectionPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum InformationProtectionPolicies_GetInformationProtectionPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		effective = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
