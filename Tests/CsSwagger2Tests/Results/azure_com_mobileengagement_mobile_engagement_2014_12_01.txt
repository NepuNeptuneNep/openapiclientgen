//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Used to target devices who received an announcement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnnouncementFeedbackCriterion : Criterion
	{
		
		/// <summary>
		/// Action that was performed on the announcement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<AnnouncementFeedbackCriterionAction> Action { get; set; }
		
		/// <summary>
		/// The unique identifier of the announcement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-id")]
		public System.Nullable<System.Int32> Content_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnnouncementFeedbackCriterionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pushed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		replied = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		actioned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		exited = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiError
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ApiErrorError Error { get; set; }
	}
	
	public class ApiErrorError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The Mobile Engagement App resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class App : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AppProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The AppCollection resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppCollection : Resource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AppCollectionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The list AppCollections operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppCollectionListResult
	{
		
		/// <summary>
		/// When the results are paged, the nextLink is the URI for the next page of results. This property is empty when there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of AppCollections and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AppCollection[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppCollectionNameAvailability
	{
		
		/// <summary>
		/// Available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// UnavailabilityReason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unavailabilityReason")]
		public string UnavailabilityReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppCollectionProperties
	{
		
		/// <summary>
		/// Mobile Engagement AppCollection Properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<AppCollectionPropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AppCollectionPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
	}
	
	/// <summary>
	/// Send only to users who have some app info set. This is a special filter that is automatically added if your campaign contains appInfo parameters. It is not intended to be public and should not be used as it could be removed or replaced by the API.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppInfoFilter : Filter
	{
		
		/// <summary>
		/// An array containing all the required appInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInfo")]
		public string[] AppInfo { get; set; }
	}
	
	/// <summary>
	/// The list Apps operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppListResult
	{
		
		/// <summary>
		/// When the results are paged, the nextLink is the URI for the next page of results. This property is empty when there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of Apps and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public App[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppProperties
	{
		
		/// <summary>
		/// The state of the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appState")]
		public string AppState { get; set; }
		
		/// <summary>
		/// The application unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendId")]
		public string BackendId { get; set; }
		
		/// <summary>
		/// The platform of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on the version of the application they are using.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationVersionCriterion : Criterion
	{
		
		/// <summary>
		/// The application version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Target devices based on a boolean tag value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BooleanTagCriterion : Criterion
	{
		
		/// <summary>
		/// The name of the custom tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A custom boolean value to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Boolean> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Campaign : CampaignLocalization
	{
		
		/// <summary>
		/// Specify which users will be targeted by this campaign. By default, all users will be targeted. If you set `pushMode` property to `manual`, the only thing you can specify in the audience is the push quota filter. An audience is a boolean expression made of criteria (variables) operators (`not`, `and` or `or`) and parenthesis. Additionally, a set of filters can be added to an audience. 65535 bytes max as per JSON encoding.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audience")]
		public CampaignAudience Audience { get; set; }
		
		/// <summary>
		/// Category of the campaign. Categories can be used on the application side to customize campaigns.
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Category { get; set; }
		
		/// <summary>
		/// Announcements/polls only. Array containing the list of activities in which the campaign can be delivered. deliveryTime must be set to session. If the platform is iOS, this option can also be set if deliveryTime is set to any. In that case, if the campaign is received when the application is launched, it will be delivered only in the specified list of activities.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryActivities")]
		public string[] DeliveryActivities { get; set; }
		
		/// <summary>
		/// Announcements/polls only. Defines when the campaign should be delivered. Valid values are: * `any`: Campaign will be delivered as soon as possible. * `background`: iOS only. Campaign will be only delivered when the application is in background (out of app). * `session`: Campaign will be delivered when the application is running.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryTime")]
		public System.Nullable<CampaignDeliveryTime> DeliveryTime { get; set; }
		
		/// <summary>
		/// The date at which the campaign should be finished. The date shall conform to the following format: `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Push campaigns can be localized using an optional JSON object. The JSON key is a two-character language code as specified by the ISO 639-1 standard. The corresponding value is an object containing the localizable properties.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localization")]
		public System.Collections.Generic.Dictionary<string, CampaignLocalization> Localization { get; set; }
		
		/// <summary>
		/// Unique name of the campaign.
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// A flag indicating whether or not you want the native Apple Push notification to update the badge icon to the number of unread messages. The `deliveryTime` property must be set to `any` or `background`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationBadge")]
		public System.Nullable<System.Boolean> NotificationBadge { get; set; }
		
		/// <summary>
		/// A flag indicating whether or not you want the notification to be closeable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationCloseable")]
		public System.Nullable<System.Boolean> NotificationCloseable { get; set; }
		
		/// <summary>
		/// A flag indicating whether or not you want to display the resource icon in notification content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationIcon")]
		public System.Nullable<System.Boolean> NotificationIcon { get; set; }
		
		/// <summary>
		/// * `Android`: A flag indicating whether or not you want the system notification to make a sound. The `notificationType` property must be set to `system`. * `iOS`: A flag indicating whether or not you want the native Apple Push notification to make a sound. The `deliveryTime` property must be set to `any` or `background`. This will play the 'default' sound. If you want to play a custom sound, see the `notificationOptions` property. * `Windows`: A flag indicating whether or not you want the native Windows Notification Service to make a sound. The `deliveryTime` property must be set to `any`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSound")]
		public System.Nullable<System.Boolean> NotificationSound { get; set; }
		
		/// <summary>
		/// Android only. Defines how the notification should be displayed. Valid values are: * `system`: Display the notification using a standard system notification. * `popup`: Display the notification using a in-app banner notification.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public System.Nullable<CampaignNotificationType> NotificationType { get; set; }
		
		/// <summary>
		/// Android only. A flag indicating whether or not you want the system notification to make a vibration. The notificationType property must be set to system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationVibrate")]
		public System.Nullable<System.Boolean> NotificationVibrate { get; set; }
		
		/// <summary>
		/// Announcements/polls only. Defines how the campaign is pushed. Valid values are: * `real-time`: Never ending campaign, the campaign will be delivered  to your existing users and also to your new users. * `one-shot`: In this mode, the campaign will be delivered only to your existing users (campaign will stop after that). * `manual`: In this mode, the campaign will not be pushed automatically to devices. You will have to use the Push campaign command to push the campaign to your end-users. Campaigns can be pushed multiple times to the same device.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushMode")]
		public System.Nullable<CampaignPushMode> PushMode { get; set; }
		
		/// <summary>
		/// Poll questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public PollQuestion[] Questions { get; set; }
		
		/// <summary>
		/// The date at which the campaign should be started. The date shall conform to the following format: `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this attribute will be ignored. * If you set pushMode property to one-shot, then the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The id of the time zone to use for the startTime and endTime dates. If not provided, the two date attributes will be expressed using the device timezone. Example: America/Los_Angeles
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// Applicable only to announcements and data pushes. Type of announcement. Valid values are: * `text/plain`: Text-only announcement: `body` property should only contain plain text. * `text/html`: HTML announcement: `body` attribute can contain HTML code. * `only_notif`: Notification-only announcement. With this kind of announcements, the `body`, `title`, `actionButtonText` and `exitButtonText` are ignored. Type of data push. Valid values are: * `text/plain`: Text only data push: `body` property must be plain text. * `text/base64`: Base 64 data push: `body` property must be encoded in base 64.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CampaignType> Type { get; set; }
	}
	
	public class CampaignAudience
	{
		
		/// <summary>
		/// Criteria by name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public System.Collections.Generic.Dictionary<string, Criterion> Criteria { get; set; }
		
		/// <summary>
		/// Boolean expression made of criteria (variables) operators (`not`, `and` or `or`) and parenthesis. Criterion names in the audience expression must start with a capital letter and can only contain alphanumeric (A-Z,a-z,0-9) and underscore (_) characters.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Global filters applied to all devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Criterion
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Filter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CampaignDeliveryTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		background = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		session = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CampaignNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		popup = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CampaignPushMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="real-time")]
		realMinustime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="one-shot")]
		oneMinusshot = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		manual = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PollQuestion : PollQuestionLocalization
	{
		
		/// <summary>
		/// List of possible choices for this question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="choices")]
		public PollQuestionChoice[] Choices { get; set; }
		
		/// <summary>
		/// Unique identifier of the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Poll questions can be localized using an optional JSON object. The JSON key is a two-character language code as specified by the ISO 639-1 standard. The corresponding value is an object containing the localizable property title.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localization")]
		public System.Collections.Generic.Dictionary<string, PollQuestionLocalization> Localization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PollQuestionChoice : PollQuestionChoiceLocalization
	{
		
		/// <summary>
		/// Unique identifier of the choice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// A flag indicating if this choice is the default choice for the associated question. Only one choice in the array can have this value set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Poll choices can be localized using an optional JSON object. The JSON key is a two-character language code as specified by the ISO 639-1 standard. The corresponding value is an object containing the localizable property title.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localization")]
		public System.Collections.Generic.Dictionary<string, PollQuestionChoiceLocalization> Localization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CampaignType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text/plain")]
		text_plain = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text/html")]
		text_html = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		only_notif = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text/base64")]
		text_base64 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignListResult : CampaignStateResult
	{
		
		/// <summary>
		/// The date at which the campaign was activated (Not present if not yet activated). The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activatedDate")]
		public System.Nullable<System.DateTimeOffset> ActivatedDate { get; set; }
		
		/// <summary>
		/// The date at which the campaign should be finished if specified. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. Applicable only to announcements and polls.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The date at which the campaign was finished (Not present if not yet finished). The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishedDate")]
		public System.Nullable<System.DateTimeOffset> FinishedDate { get; set; }
		
		/// <summary>
		/// Name of the campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The date at which the campaign should be started if specified. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. Applicable only to announcements and polls.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The id of the time zone to use for the `startTime` and `endTime` dates. If not provided, the two date attributes are referencing to the device timezone. Applicable only to announcements and polls.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignLocalization
	{
		
		/// <summary>
		/// Text of the action button for text/web announcements and polls (answer button).
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionButtonText")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ActionButtonText { get; set; }
		
		/// <summary>
		/// URL to launch when the announcement is actioned.
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string ActionUrl { get; set; }
		
		/// <summary>
		/// Body of the text/web announcement, poll or data push. This field supports appInfo markers.
		/// Max length: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string Body { get; set; }
		
		/// <summary>
		/// Text of the exit button for text/web announcements and polls.
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitButtonText")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ExitButtonText { get; set; }
		
		/// <summary>
		/// Optional image encoded in base 64. Usually included in the right part of in app notifications (or as a banner if there is neither text nor content icon). For Android system notifications, the image is used as the large icon (displayed only on Android 3+).
		///
		/// Max length: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationImage")]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string NotificationImage { get; set; }
		
		/// <summary>
		/// Message of the notification. This field supports appInfo markers.
		/// Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationMessage")]
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string NotificationMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationOptions")]
		public NotificationOptions NotificationOptions { get; set; }
		
		/// <summary>
		/// Title of the notification. This field supports appInfo markers.
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationTitle")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string NotificationTitle { get; set; }
		
		/// <summary>
		/// Native push payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// Title of the announcement or poll. This field supports appInfo markers.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignPushParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Campaign Data { get; set; }
		
		/// <summary>
		/// Device identifiers to push as a JSON array of strings. Note that if you want to push the same campaign several times to the same device, you need to make several API calls.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceIds")]
		public string[] DeviceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignPushResult
	{
		
		/// <summary>
		/// A JSON array containing all identifiers that have been rejected. A device can be rejected for the following reasons: * The device hasn’t reported any session yet. * The device is over quota (if a push quota filter is applied on your campaign). Please note that if the request parameters are valid but all the specified devices are rejected, the status code is still `200` with a response including all the devices as being rejected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidDeviceIds")]
		public string[] InvalidDeviceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignResult : Campaign
	{
		
		/// <summary>
		/// The date at which the campaign was activated (Not present if not yet activated). The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activatedDate")]
		public System.Nullable<System.DateTimeOffset> ActivatedDate { get; set; }
		
		/// <summary>
		/// The date at which the campaign was finished (Not present if not yet finished). The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishedDate")]
		public System.Nullable<System.DateTimeOffset> FinishedDate { get; set; }
		
		/// <summary>
		/// Campaign identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// State of the campaign, or 'queued' when testing a campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CampaignResultState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CampaignResultState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finished = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		queued = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignState
	{
		
		/// <summary>
		/// State of the campaign, or 'queued' when testing a campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CampaignStateState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CampaignStateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finished = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		queued = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignStateResult : CampaignState
	{
		
		/// <summary>
		/// Campaign identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignStatisticsResult
	{
		
		/// <summary>
		/// Poll specific statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answers")]
		public System.Collections.Generic.Dictionary<string, object> Answers { get; set; }
		
		/// <summary>
		/// Number of times the campaign’s content view was actioned (Not present in case of a notification-only announcement or a native-push).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-actioned")]
		public System.Nullable<System.Int32> Content_actioned { get; set; }
		
		/// <summary>
		/// Number of times the campaign’s content view was displayed (Not present in case of a notification-only announcement, a data-push or a native-push).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-displayed")]
		public System.Nullable<System.Int32> Content_displayed { get; set; }
		
		/// <summary>
		/// Number of times the campaign’s content view was exited (Not present in case of a notification-only announcement or a native-push).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-exited")]
		public System.Nullable<System.Int32> Content_exited { get; set; }
		
		/// <summary>
		/// Number of times the campaign was received by the application (Not present in case of a native-push).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delivered")]
		public System.Nullable<System.Int32> Delivered { get; set; }
		
		/// <summary>
		/// Number of times the campaign was dropped by the application. It can happen if the SDK failed to parse the campaign payload or if an error occurred while trying to notify the end-user (Not present in case of a native-push).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dropped")]
		public System.Nullable<System.Int32> Dropped { get; set; }
		
		/// <summary>
		/// Number of times the in-app notification was actioned (Not present in case of a data-push or a native-push).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in-app-notification-actioned")]
		public System.Nullable<System.Int32> In_app_notification_actioned { get; set; }
		
		/// <summary>
		/// Number of times the in-app notification was displayed (Not present in case of a data-push or a native-push).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in-app-notification-displayed")]
		public System.Nullable<System.Int32> In_app_notification_displayed { get; set; }
		
		/// <summary>
		/// Number of times the in-app notification was exited (Not present in case of a data-push or a native-push).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in-app-notification-exited")]
		public System.Nullable<System.Int32> In_app_notification_exited { get; set; }
		
		/// <summary>
		/// Number of pushes performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushed")]
		public System.Nullable<System.Int32> Pushed { get; set; }
		
		/// <summary>
		/// Total number of native pushes. Information only available on Android, iOS, Windows Phone and Windows applications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushed-native")]
		public System.Nullable<System.Int32> Pushed_native { get; set; }
		
		/// <summary>
		/// Number of ADM pushes (available only on Android applications).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushed-native-adm")]
		public System.Nullable<System.Int32> Pushed_native_adm { get; set; }
		
		/// <summary>
		/// Number of C2DM/GCM pushes (available only on Android applications).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushed-native-google")]
		public System.Nullable<System.Int32> Pushed_native_google { get; set; }
		
		/// <summary>
		/// Number of times the campaign was registered to be pushed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queued")]
		public System.Nullable<System.Int32> Queued { get; set; }
		
		/// <summary>
		/// Number of times the system notification (On Android it corresponds to a status bar notification. On iOS, it is the Apple Push notification) was actioned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="system-notification-actioned")]
		public System.Nullable<System.Int32> System_notification_actioned { get; set; }
		
		/// <summary>
		/// Number of times the system notification was displayed (Not present in case of a data-push or a native-push). On Android it corresponds to a status bar notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="system-notification-displayed")]
		public System.Nullable<System.Int32> System_notification_displayed { get; set; }
		
		/// <summary>
		/// Number of times the system notification was exited (Not present in case of a data-push or a native-push).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="system-notification-exited")]
		public System.Nullable<System.Int32> System_notification_exited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignTestNewParameters : CampaignTestSavedParameters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Campaign Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignTestSavedParameters
	{
		
		/// <summary>
		/// Device identifier (as returned by the SDK).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The language to test expressed using ISO 639-1 code. The default language of the campaign will be used if the parameter is not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
	}
	
	/// <summary>
	/// The campaigns list result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CampaignsListResult
	{
		
		/// <summary>
		/// When using `top` parameter and if partial results are returned, this property describes a URI path to get the next results. This property is not set when reaching the last page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CampaignListResult[] Value { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on their carrier country.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CarrierCountryCriterion : Criterion
	{
		
		/// <summary>
		/// Two-characters country code (ISO 3166-1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on their carrier name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CarrierNameCriterion : Criterion
	{
		
		/// <summary>
		/// Carrier name value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Used to target devices who received a data push.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatapushFeedbackCriterion : Criterion
	{
		
		/// <summary>
		/// Action that was performed on the data push (action depends on the return value in the callbacks you declared in the client code).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public AnnouncementFeedbackCriterionAction Action { get; set; }
		
		/// <summary>
		/// The unique identifier of the data push.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-id")]
		public System.Nullable<System.Int32> Content_id { get; set; }
	}
	
	/// <summary>
	/// Target devices based on a date tag value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DateTagCriterion : Criterion
	{
		
		/// <summary>
		/// The name of the custom tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// comparison operator: `EQ` (equal to), `LT` (less than), `GT` (greater than), `LE` (less than or equal to) or `GE` (greater than or equal to).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public System.Nullable<DateTagCriterionOp> Op { get; set; }
		
		/// <summary>
		/// It can be either: * an absolute date using yyyy-MM-dd format (e.g. 1969-12-07 stands for 7 Dec 1969). * an offset in days relative to the current day (`TODAY` + `value`).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.DateOnly> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DateTagCriterionOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Device
	{
		
		/// <summary>
		/// Also known as tags, a key-value set as a JSON object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInfo")]
		public System.Collections.Generic.Dictionary<string, string> AppInfo { get; set; }
		
		/// <summary>
		/// The device result.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public DeviceInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public DeviceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public DeviceMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceInfo
	{
		
		/// <summary>
		/// Android API level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidAPILevel")]
		public System.Nullable<System.Int32> AndroidAPILevel { get; set; }
		
		/// <summary>
		/// Application version code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationVersionCode")]
		public System.Nullable<System.Int32> ApplicationVersionCode { get; set; }
		
		/// <summary>
		/// Application version name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationVersionName")]
		public string ApplicationVersionName { get; set; }
		
		/// <summary>
		/// Carrier country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierCountry")]
		public string CarrierCountry { get; set; }
		
		/// <summary>
		/// Carrier name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// Firmware name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firmwareName")]
		public string FirmwareName { get; set; }
		
		/// <summary>
		/// Firmware version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firmwareVersion")]
		public string FirmwareVersion { get; set; }
		
		/// <summary>
		/// Locale code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Network sub-type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkSubtype")]
		public string NetworkSubtype { get; set; }
		
		/// <summary>
		/// Network type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkType")]
		public string NetworkType { get; set; }
		
		/// <summary>
		/// Phone manufacturer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneManufacturer")]
		public string PhoneManufacturer { get; set; }
		
		/// <summary>
		/// Phone model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneModel")]
		public string PhoneModel { get; set; }
		
		/// <summary>
		/// SDK version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceVersion")]
		public string ServiceVersion { get; set; }
		
		/// <summary>
		/// The offset in minutes from UTC for the device time zone, including daylight savings time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneOffset")]
		public System.Nullable<System.Int32> TimeZoneOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceLocation
	{
		
		/// <summary>
		/// The ISO 3166 two-letter country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countrycode")]
		public string Countrycode { get; set; }
		
		/// <summary>
		/// A locality within the administrative region, such as a town or city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// An administrative region of the nation, such as a state or province.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on the device manufacturer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceManufacturerCriterion : Criterion
	{
		
		/// <summary>
		/// The device manufacturer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceMeta
	{
		
		/// <summary>
		/// First time the device used the application in milliseconds since January 1st, 1970 UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstSeen")]
		public System.Nullable<System.Int64> FirstSeen { get; set; }
		
		/// <summary>
		/// Timestamp corresponding to the info object in milliseconds since January 1st, 1970 UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastInfo")]
		public System.Nullable<System.Int64> LastInfo { get; set; }
		
		/// <summary>
		/// Timestamp corresponding to the location object in milliseconds since January 1st, 1970 UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLocation")]
		public System.Nullable<System.Int64> LastLocation { get; set; }
		
		/// <summary>
		/// Last time the device used the application in milliseconds since January 1st, 1970 UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSeen")]
		public System.Nullable<System.Int64> LastSeen { get; set; }
		
		/// <summary>
		/// Boolean indicating if native push notifications (like Android’s GCM or Apple’s APNS) are enabled for the application. This boolean is set to true when the application registers successfully to the native push service, and set to false when the native push service reports to Mobile Engagement that the application can no longer be pushed (which means that it has been uninstalled). This report is performed a few hours after Mobile Engagement has tried to perform a native push to a device on which the application has been uninstalled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativePushEnabled")]
		public System.Nullable<System.Boolean> NativePushEnabled { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on the device model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceModelCriterion : Criterion
	{
		
		/// <summary>
		/// The device model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceQueryResult
	{
		
		/// <summary>
		/// Also known as tags, a key-value set as a JSON object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInfo")]
		public System.Collections.Generic.Dictionary<string, string> AppInfo { get; set; }
		
		/// <summary>
		/// The device result.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public DeviceMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceTagsParameters
	{
		
		/// <summary>
		/// If this parameter is `true`, tags with a null value will be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteOnNull")]
		public System.Nullable<System.Boolean> DeleteOnNull { get; set; }
		
		/// <summary>
		/// A JSON object describing the set of tags to record for a set of users. Each key is a device/user identifier, each value is itself a key/value set: the tags to set for the specified device/user identifier.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceTagsResult
	{
		
		/// <summary>
		/// A JSON array containing all identifiers that have been rejected. Please note that if the request parameters are valid but all the specified devices are rejected, the status code is still `200` with a response including all the devices as being rejected.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invalidIds")]
		public string[] InvalidIds { get; set; }
	}
	
	/// <summary>
	/// The campaigns list result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DevicesQueryResult
	{
		
		/// <summary>
		/// If partial results are returned, this property describes a URI path to get the next result page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DeviceQueryResult[] Value { get; set; }
	}
	
	/// <summary>
	/// Send only to users who have used the app in the last {threshold} days.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EngageActiveUsersFilter : Filter
	{
		
		/// <summary>
		/// An integer value representing the threshold to apply on this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Int32> Threshold { get; set; }
	}
	
	/// <summary>
	/// Send only to users who haven't used the app in the last {threshold} days.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EngageIdleUsersFilter : Filter
	{
		
		/// <summary>
		/// An integer value representing the threshold to apply on this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Int32> Threshold { get; set; }
	}
	
	/// <summary>
	/// Send only to users whose first app use is less than {threshold} days old.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EngageNewUsersFilter : Filter
	{
		
		/// <summary>
		/// An integer value representing the threshold to apply on this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Int32> Threshold { get; set; }
	}
	
	/// <summary>
	/// Send only to users whose first app use is more than {threshold} days old.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EngageOldUsersFilter : Filter
	{
		
		/// <summary>
		/// An integer value representing the threshold to apply on this filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Int32> Threshold { get; set; }
	}
	
	/// <summary>
	/// Send only to a maximum of max users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EngageSubsetFilter : Filter
	{
		
		/// <summary>
		/// An integer value representing the maximum users that should be pushed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Int32> Max { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on their firmware version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirmwareVersionCriterion : Criterion
	{
		
		/// <summary>
		/// Firmware version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on a specific region. A center point (defined by a latitude and longitude) and a radius form the boundary for the region. This criterion will be met when the user crosses the boundaries of the region.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GeoFencingCriterion : Criterion
	{
		
		/// <summary>
		/// Number of minutes before device location is considered to be expired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public System.Nullable<System.Int32> Expiration { get; set; }
		
		/// <summary>
		/// The latitude of the central point of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// The longitude of the central point of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		/// <summary>
		/// The radius of the central point of the region, in meters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radius")]
		public System.Nullable<System.Int32> Radius { get; set; }
	}
	
	/// <summary>
	/// Target devices based on an integer tag value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegerTagCriterion : Criterion
	{
		
		/// <summary>
		/// The name of the custom tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// comparison operator: `EQ` (equal to), `LT` (less than), `GT` (greater than), `LE` (less than or equal to) or `GE` (greater than or equal to).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public DateTagCriterionOp Op { get; set; }
		
		/// <summary>
		/// A custom integer value to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on the language of their device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LanguageCriterion : Criterion
	{
		
		/// <summary>
		/// Two character language code (ISO 639-1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on their last know area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocationCriterion : Criterion
	{
		
		/// <summary>
		/// Two character country code where the user is located (ISO 3166-1).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// A locality within the administrative region, such as a town or city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// An administrative region of the country, such as a state or province.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Engage only users with native push enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NativePushEnabledFilter
	{
	}
	
	/// <summary>
	/// Used to target devices based their network type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkTypeCriterion : Criterion
	{
		
		/// <summary>
		/// The network type (Wifi, Mobile...).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NotificationOptions
	{
		
		/// <summary>
		/// The action text is the title of the right button of the alert or the value of the unlock slider, where the value replaces 'unlock' in 'slide to unlock'. 'View' (localized to the preferred language) is used as the default value. The `deliveryTime` property must be set to `any` or `background`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionText")]
		public string ActionText { get; set; }
		
		/// <summary>
		/// URL of a remote image displayed in expanded notifications on
		///Android 4.1+ devices with the following constraints:
		///* The URL length is limited to 2000 characters.
		///* The image size must be less than 4 MiB.
		///* The following MIME types are supported:
		///** image/png
		///** image/jpeg
		///** image/gif
		///** image/webp
		///** image/bmp
		///** image/x-bmp
		///** image/x-ms-bmp
		///* URL scheme must be HTTP or HTTPS (with valid SSL certificate).
		///* Incompatible with `bigText`, only one of the fields can be set.
		///* The `notificationType` property must be set to `system`.
		///
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigPicture")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string BigPicture { get; set; }
		
		/// <summary>
		/// Android 4.1+ only. Multi line message shown in expanded notifications on Android 4.1+ devices. The `notificationType` property must be set to `system`.
		///
		/// Max length: 4000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigText")]
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		public string BigText { get; set; }
		
		/// <summary>
		/// iOS only. The name of a sound file in the application bundle. The sound in this file is played as an alert. If the sound file doesn’t exist or default is specified as the value, the default alert sound is played. The audio must be in one of the audio data formats that are compatible with system sounds. The `deliveryTime` property must be set to `any` or `background`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sound")]
		public string Sound { get; set; }
	}
	
	/// <summary>
	/// Used to target devices who answered X to a given question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PollAnswerFeedbackCriterion : Criterion
	{
		
		/// <summary>
		/// The unique identifier of the choice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="choice-id")]
		public System.Nullable<System.Int32> Choice_id { get; set; }
		
		/// <summary>
		/// The unique identifier of the poll.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-id")]
		public System.Nullable<System.Int32> Content_id { get; set; }
	}
	
	/// <summary>
	/// Used to target devices who received a poll.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PollFeedbackCriterion : Criterion
	{
		
		/// <summary>
		/// Action that was performed on the poll.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public AnnouncementFeedbackCriterionAction Action { get; set; }
		
		/// <summary>
		/// The unique identifier of the poll.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-id")]
		public System.Nullable<System.Int32> Content_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PollQuestionChoiceLocalization
	{
		
		/// <summary>
		/// Title of the choice.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PollQuestionLocalization
	{
		
		/// <summary>
		/// Title of the question.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Engage only users for whom the push quota is not reached.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PushQuotaFilter
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Used to target devices based on the screen resolution of their device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScreenSizeCriterion : Criterion
	{
		
		/// <summary>
		/// Screen size using the following format WIDTH**x**HEIGHT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Target devices based on an existing segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SegmentCriterion : Criterion
	{
		
		/// <summary>
		/// If value is true, the criterion will target users that are NOT part of the segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclude")]
		public System.Nullable<System.Boolean> Exclude { get; set; }
		
		/// <summary>
		/// Segment identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	/// <summary>
	/// Target devices based on a string tag value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StringTagCriterion : Criterion
	{
		
		/// <summary>
		/// The name of the custom tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A custom string to match for tag value (? and * characters can be used to perform wildcard matching).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SupportedPlatformsListResult
	{
		
		/// <summary>
		/// List of supported platforms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platforms")]
		public string[] Platforms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DateRangeExportTaskParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerUrl")]
		public string ContainerUrl { get; set; }
		
		/// <summary>
		/// A description of the export task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A date as defined by full-date in RFC3339.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.DateOnly EndDate { get; set; }
		
		/// <summary>
		/// The format of exported data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportFormat")]
		public DateRangeExportTaskParameterExportFormat ExportFormat { get; set; }
		
		/// <summary>
		/// A date as defined by full-date in RFC3339.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.DateOnly StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DateRangeExportTaskParameterExportFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JsonBlob = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CsvBlob = 1,
	}
	
	/// <summary>
	/// The format of exported data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExportFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JsonBlob = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CsvBlob = 1,
	}
	
	/// <summary>
	/// Options to control export generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportUserId")]
		public System.Nullable<System.Boolean> ExportUserId { get; set; }
	}
	
	/// <summary>
	/// The state of an export task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExportState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// Gets a paged list of ExportTasks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportTaskListResult
	{
		
		/// <summary>
		/// When the results are paged, the nextLink is the URI for the next page of results. This property is empty when there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of export tasks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExportTaskResult[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportTaskResult
	{
		
		/// <summary>
		/// The RFC3339 date-time the export task was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCompleted")]
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		/// <summary>
		/// The RFC3339 date-time the export task was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.DateTimeOffset DateCreated { get; set; }
		
		/// <summary>
		/// A description of the export task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Details of errors encountered during the export, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public string ErrorDetails { get; set; }
		
		/// <summary>
		/// The type of export.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportType")]
		public ExportTaskResultExportType ExportType { get; set; }
		
		/// <summary>
		/// Unique identifier of the export task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The state of an export task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ExportState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExportTaskResultExportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Activity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tag = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Crash = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Job = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Token = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Push = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportTaskParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerUrl")]
		public string ContainerUrl { get; set; }
		
		/// <summary>
		/// A description of the export task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The format of exported data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportFormat")]
		public DateRangeExportTaskParameterExportFormat ExportFormat { get; set; }
	}
	
	/// <summary>
	/// The type of export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Activity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tag = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Crash = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Job = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Token = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Push = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FeedbackByCampaignParameter
	{
		
		/// <summary>
		/// A list of campaign identifiers.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="campaignIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public int[] CampaignIds { get; set; }
		
		/// <summary>
		/// Campaign type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="campaignType")]
		public FeedbackByCampaignParameterCampaignType CampaignType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerUrl")]
		public string ContainerUrl { get; set; }
		
		/// <summary>
		/// A description of the export task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The format of exported data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportFormat")]
		public DateRangeExportTaskParameterExportFormat ExportFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum FeedbackByCampaignParameterCampaignType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Announcement = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DataPush = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NativePush = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Poll = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FeedbackByDateRangeParameter
	{
		
		/// <summary>
		/// Campaign type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="campaignType")]
		public FeedbackByCampaignParameterCampaignType CampaignType { get; set; }
		
		/// <summary>
		/// A date time as defined by date-time in RFC3339.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="campaignWindowEnd")]
		public System.DateTimeOffset CampaignWindowEnd { get; set; }
		
		/// <summary>
		/// A date time as defined by date-time in RFC3339.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="campaignWindowStart")]
		public System.DateTimeOffset CampaignWindowStart { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerUrl")]
		public string ContainerUrl { get; set; }
		
		/// <summary>
		/// A description of the export task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The format of exported data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportFormat")]
		public DateRangeExportTaskParameterExportFormat ExportFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImportTask
	{
		
		/// <summary>
		/// A shared Access Signature (SAS) Storage URI where the job results will be retrieved from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageUrl")]
		public string StorageUrl { get; set; }
	}
	
	/// <summary>
	/// Gets a paged list of import tasks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImportTaskListResult
	{
		
		/// <summary>
		/// When the results are paged, the nextLink is the URI for the next page of results. This property is empty when there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of import task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ImportTaskResult[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImportTaskResult : ImportTask
	{
		
		/// <summary>
		/// The date at which the import job completed (Not present if not yet completed).
		///The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCompleted")]
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		/// <summary>
		/// The date at which the import job was created.
		///The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		/// <summary>
		/// Details of any errors encountered during the import, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public string ErrorDetails { get; set; }
		
		/// <summary>
		/// Unique identifier of the import task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The current state of the import task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ExportState State { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists app collections in a subscription.
		/// AppCollections_List subscriptions/{subscriptionId}/providers/Microsoft.MobileEngagement/appCollections
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task<AppCollectionListResult> AppCollections_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MobileEngagement/appCollections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AppCollectionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Checks availability of an app collection name in the Engagement domain.
		/// AppCollections_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.MobileEngagement/checkAppCollectionNameAvailability
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task<AppCollectionNameAvailability> AppCollections_CheckNameAvailabilityAsync(string subscriptionId, string api_version, AppCollectionNameAvailability requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MobileEngagement/checkAppCollectionNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AppCollectionNameAvailability>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists supported platforms for Engagement applications.
		/// SupportedPlatforms_List subscriptions/{subscriptionId}/providers/Microsoft.MobileEngagement/supportedPlatforms
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task<SupportedPlatformsListResult> SupportedPlatforms_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MobileEngagement/supportedPlatforms&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SupportedPlatformsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists apps in an appCollection.
		/// Apps_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		public async Task<AppListResult> Apps_ListAsync(string subscriptionId, string api_version, string resourceGroupName, string appCollection)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AppListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the list of campaigns.
		/// Campaigns_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="skip">Control paging of campaigns, start results at the given offset, defaults to 0 (1st page of data).</param>
		/// <param name="top">Control paging of campaigns, number of campaigns to return with each call. It returns all campaigns by default. When specifying $top parameter, the response contains a `nextLink` property describing the path to get the next page if there are more results.</param>
		/// <param name="filter">Filter can be used to restrict the results to campaigns matching a specific state. The syntax is `$filter=state eq 'draft'`. Valid state values are: draft, scheduled, in-progress, and finished. Only the eq operator and the state property are supported.</param>
		/// <param name="orderby">Sort results by an expression which looks like `$orderby=id asc` (this example is actually the default behavior). The syntax is orderby={property} {direction} or just orderby={property}. The available sorting properties are id, name, state, activatedDate, and finishedDate. The available directions are asc (for ascending order) and desc (for descending order). When not specified the asc direction is used. Only one property at a time can be used for sorting.</param>
		/// <param name="search">Restrict results to campaigns matching the optional `search` expression. This currently performs the search based on the name on the campaign only, case insensitive. If the campaign contains the value of the `search` parameter anywhere in the name, it matches.</param>
		/// <returns>Success, campaigns are returned as JSON.</returns>
		public async Task<CampaignsListResult> Campaigns_ListAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, Campaigns_ListKind kind, int skip, int top, string filter, string orderby, string search)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/campaigns/"+kind+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skip="+skip+"&$top="+top+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby))+"&$search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a push campaign (announcement, poll, data push or native push).
		/// Campaigns_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the Update Campaign operation.</param>
		public async Task Campaigns_CreateAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, Campaigns_ListKind kind, string api_version, Campaign requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/campaigns/"+kind+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Test a new campaign on a set of devices.
		/// Campaigns_TestNew subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/test
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="requestBody">Parameters supplied to the Test Campaign operation.</param>
		/// <returns>Test campaign queued successfully.</returns>
		public async Task<CampaignState> Campaigns_TestNewAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, Campaigns_ListKind kind, CampaignTestNewParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/campaigns/"+kind+"/test&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignState>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// The Get campaign operation retrieves information about a previously created campaign.
		/// Campaigns_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}
		/// </summary>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="id">Campaign identifier.</param>
		/// <returns>Success, campaign is returned.</returns>
		public async Task<CampaignResult> Campaigns_GetAsync(Campaigns_ListKind kind, int id)
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/"+kind+"/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an existing push campaign (announcement, poll, data push or native push).
		/// Campaigns_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}
		/// </summary>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="id">Campaign identifier.</param>
		/// <param name="requestBody">Parameters supplied to the Update Campaign operation.</param>
		/// <returns>Updated successfully.</returns>
		public async Task<CampaignStateResult> Campaigns_UpdateAsync(Campaigns_ListKind kind, int id, Campaign requestBody)
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/"+kind+"/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignStateResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a campaign previously created by a call to Create campaign.
		/// Campaigns_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}
		/// </summary>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="id">Campaign identifier.</param>
		/// <returns>Deleted successfully.</returns>
		public async Task Campaigns_DeleteAsync(Campaigns_ListKind kind, int id)
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/"+kind+"/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Activate a campaign previously created by a call to Create campaign.
		/// Campaigns_Activate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/activate
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="id">Campaign identifier.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Activated successfully.</returns>
		public async Task<CampaignStateResult> Campaigns_ActivateAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, Campaigns_ListKind kind, int id, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/campaigns/"+kind+"/"+id+"/activate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignStateResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Finish a push campaign previously activated by a call to Activate campaign.
		/// Campaigns_Finish subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/finish
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="id">Campaign identifier.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Finished successfully.</returns>
		public async Task<CampaignStateResult> Campaigns_FinishAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, Campaigns_ListKind kind, int id, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/campaigns/"+kind+"/"+id+"/finish&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignStateResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Push a previously saved campaign (created with Create campaign) to a set of devices.
		/// Campaigns_Push subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/push
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="id">Campaign identifier.</param>
		/// <param name="requestBody">Parameters supplied to the Push Campaign operation.</param>
		/// <returns>OK, response body includes rejected devices.</returns>
		public async Task<CampaignPushResult> Campaigns_PushAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, Campaigns_ListKind kind, int id, CampaignPushParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/campaigns/"+kind+"/"+id+"/push&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignPushResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all the campaign statistics.
		/// Campaigns_GetStatistics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/statistics
		/// </summary>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="id">Campaign identifier.</param>
		/// <returns>Success, statistics are returned as JSON.</returns>
		public async Task<CampaignStatisticsResult> Campaigns_GetStatisticsAsync(Campaigns_ListKind kind, int id)
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/"+kind+"/"+id+"/statistics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignStatisticsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Suspend a push campaign previously activated by a call to Activate campaign.
		/// Campaigns_Suspend subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/suspend
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="id">Campaign identifier.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Suspended successfully.</returns>
		public async Task<CampaignStateResult> Campaigns_SuspendAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, Campaigns_ListKind kind, int id, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/campaigns/"+kind+"/"+id+"/suspend&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignStateResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Test an existing campaign (created with Create campaign) on a set of devices.
		/// Campaigns_TestSaved subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/test
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="id">Campaign identifier.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the Test Campaign operation.</param>
		/// <returns>Test campaign queued successfully.</returns>
		public async Task<CampaignStateResult> Campaigns_TestSavedAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, Campaigns_ListKind kind, int id, string api_version, CampaignTestSavedParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/campaigns/"+kind+"/"+id+"/test&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignStateResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// The Get campaign operation retrieves information about a previously created campaign.
		/// Campaigns_GetByName subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaignsByName/{kind}/{name}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="kind">Campaign kind.</param>
		/// <param name="name">Campaign name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Success, campaign is returned.</returns>
		public async Task<CampaignResult> Campaigns_GetByNameAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, Campaigns_ListKind kind, string name, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/campaignsByName/"+kind+"/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CampaignResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Query the information associated to the devices running an application.
		/// Devices_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="top">Number of devices to return with each call. Defaults to 100 and cannot return more. Passing a greater value is ignored. The response contains a `nextLink` property describing the URI path to get the next page of results if not all results could be returned at once.</param>
		/// <param name="select">By default all `meta` and `appInfo` properties are returned, this property is used to restrict the output to the desired properties. It also excludes all devices from the output that have none of the selected properties. In other terms, only devices having at least one of the selected property being set is part of the results. Examples: - `$select=appInfo` : select all devices having at least 1 appInfo, return them all and don’t return any meta property. - `$select=meta` : return only meta properties in the output. - `$select=appInfo,meta/firstSeen,meta/lastSeen` : return all `appInfo`, plus meta object containing only firstSeen and lastSeen properties. The format is thus a comma separated list of properties to select. Use `appInfo` to select all appInfo properties, `meta` to select all meta properties. Use `appInfo/{key}` and `meta/{key}` to select specific appInfo and meta properties.</param>
		/// <param name="filter">Filter can be used to reduce the number of results. Filter is a boolean expression that can look like the following examples: * `$filter=deviceId gt 'abcdef0123456789abcdef0123456789'` * `$filter=lastModified le 1447284263690L` * `$filter=(deviceId ge 'abcdef0123456789abcdef0123456789') and (deviceId lt 'bacdef0123456789abcdef0123456789') and (lastModified gt 1447284263690L)` The first example is used automatically for paging when returning the `nextLink` property. The filter expression is a combination of checks on some properties that can be compared to their value. The available operators are: * `gt`  : greater than * `ge`  : greater than or equals * `lt`  : less than * `le`  : less than or equals * `and` : to add multiple checks (all checks must pass), optional parentheses can be used. The properties that can be used in the expression are the following: * `deviceId {operator} '{deviceIdValue}'` : a lexicographical comparison is made on the deviceId value, use single quotes for the value. * `lastModified {operator} {number}L` : returns only meta properties or appInfo properties whose last value modification timestamp compared to the specified value is matching (value is milliseconds since January 1st, 1970 UTC). Please note the `L` character after the number of milliseconds, its required when the number of milliseconds exceeds `2^31 - 1` (which is always the case for recent timestamps). Using `lastModified` excludes all devices from the output that have no property matching the timestamp criteria, like `$select`. Please note that the internal value of `lastModified` timestamp for a given property is never part of the results.</param>
		/// <returns>If successful, the response has a 200 status code and a JSON object describing a collection of devices in the body.</returns>
		public async Task<DevicesQueryResult> Devices_ListAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, int top, string select, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DevicesQueryResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the list of export tasks.
		/// ExportTasks_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="skip">Control paging of export tasks, start results at the given offset, defaults to 0 (1st page of data).
		/// Minimum: 0
		// </param>
		/// <param name="top">Control paging of export tasks, number of export tasks to return with each call. By default, it returns all export tasks with a default paging of 20.
		///The response contains a `nextLink` property describing the path to get the next page if there are more results.
		///The maximum paging limit for $top is 40.
		/// Minimum: 1
		/// Maximum: 40
		// </param>
		/// <param name="orderby">Sort results by an expression which looks like `$orderby=taskId asc` (default when not specified).
		///The syntax is orderby={property} {direction} or just orderby={property}.
		///Properties that can be specified for sorting: taskId, errorDetails, dateCreated, taskStatus, and dateCreated.
		///The available directions are asc (for ascending order) and desc (for descending order).
		///When not specified the asc direction is used.
		///Only one orderby property can be specified.</param>
		/// <returns>Success. Returns a list of export task statuses.</returns>
		public async Task<ExportTaskListResult> ExportTasks_ListAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, int skip, int top, string orderby)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skip="+skip+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExportTaskListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export activities.
		/// ExportTasks_CreateActivitiesTask subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/activities
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateActivitiesTaskAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, DateRangeExportTaskParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/activities&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export crashes.
		/// ExportTasks_CreateCrashesTask subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/crashes
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateCrashesTaskAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, DateRangeExportTaskParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/crashes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export errors.
		/// ExportTasks_CreateErrorsTask subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/errors
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateErrorsTaskAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, DateRangeExportTaskParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/errors&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export events.
		/// ExportTasks_CreateEventsTask subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/events
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateEventsTaskAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, DateRangeExportTaskParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/events&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export push campaign data for a set of campaigns.
		/// ExportTasks_CreateFeedbackTaskByCampaign subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/feedbackByCampaign
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateFeedbackTaskByCampaignAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, FeedbackByCampaignParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/feedbackByCampaign&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export push campaign data for a date range.
		/// ExportTasks_CreateFeedbackTaskByDateRange subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/feedbackByDate
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateFeedbackTaskByDateRangeAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, FeedbackByDateRangeParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/feedbackByDate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export jobs.
		/// ExportTasks_CreateJobsTask subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/jobs
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateJobsTaskAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, DateRangeExportTaskParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/jobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export sessions.
		/// ExportTasks_CreateSessionsTask subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/sessions
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateSessionsTaskAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, DateRangeExportTaskParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/sessions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export tags.
		/// ExportTasks_CreateTagsTask subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/tags
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateTagsTaskAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, ExportTaskParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/tags&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task to export tags.
		/// ExportTasks_CreateTokensTask subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/tokens
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ExportTasks_CreateTokensTaskAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, ExportTaskParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/tokens&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves information about a previously created export task.
		/// ExportTasks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/{id}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="id">Export task identifier.</param>
		/// <returns>Success. The status of the export task is returned.</returns>
		public async Task<ExportTaskResult> ExportTasks_GetAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, string id)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/exportTasks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExportTaskResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the list of import jobs.
		/// ImportTasks_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/importTasks
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="skip">Control paging of import jobs, start results at the given offset, defaults to 0 (1st page of data).
		/// Minimum: 0
		// </param>
		/// <param name="top">Control paging of import jobs, number of import jobs to return with each call. By default, it returns all import jobs with a default paging of 20.
		///The response contains a `nextLink` property describing the path to get the next page if there are more results.
		///The maximum paging limit for $top is 40.
		/// Minimum: 1
		/// Maximum: 40
		// </param>
		/// <param name="orderby">Sort results by an expression which looks like `$orderby=jobId asc` (default when not specified).
		///The syntax is orderby={property} {direction} or just orderby={property}.
		///Properties that can be specified for sorting: jobId, errorDetails, dateCreated, jobStatus, and dateCreated.
		///The available directions are asc (for ascending order) and desc (for descending order).
		///When not specified the asc direction is used.
		///Only one orderby property can be specified.</param>
		/// <returns>Success, import jobs are returned as JSON.</returns>
		public async Task<ImportTaskListResult> ImportTasks_ListAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, int skip, int top, string orderby)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/importTasks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$skip="+skip+"&$top="+top+"&$orderby=" + (orderby==null? "" : System.Uri.EscapeDataString(orderby));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ImportTaskListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a job to import the specified data to a storageUrl.
		/// ImportTasks_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/importTasks
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task ImportTasks_CreateAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, ImportTask requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/importTasks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// The Get import job operation retrieves information about a previously created import job.
		/// ImportTasks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/importTasks/{id}
		/// </summary>
		/// <param name="id">Import job identifier.</param>
		/// <returns>Success, import job is returned.</returns>
		public async Task<ImportTaskResult> ImportTasks_GetAsync(string id)
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/importTasks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ImportTaskResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the tags registered for a set of devices running an application. Updates are performed asynchronously, meaning that a few seconds are needed before the modifications appear in the results of the Get device command.
		/// 
		/// Devices_TagByDeviceId subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/tag
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Success, invalid device identifiers are returned.</returns>
		public async Task<DeviceTagsResult> Devices_TagByDeviceIdAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, DeviceTagsParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/tag&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeviceTagsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the information associated to a device running an application.
		/// Devices_GetByDeviceId subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/{deviceId}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="deviceId">Device identifier.</param>
		/// <returns>Success, device is returned.</returns>
		public async Task<Device> Devices_GetByDeviceIdAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, string deviceId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the tags registered for a set of users running an application. Updates are performed asynchronously, meaning that a few seconds are needed before the modifications appear in the results of the Get device command.
		/// 
		/// Devices_TagByUserId subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/users/tag
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Success, invalid user identifiers are returned.</returns>
		public async Task<DeviceTagsResult> Devices_TagByUserIdAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, DeviceTagsParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/users/tag&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeviceTagsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the information associated to a device running an application using the user identifier.
		/// Devices_GetByUserId subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/users/{userId}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="appCollection">Application collection.</param>
		/// <param name="appName">Application resource name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="userId">User identifier.</param>
		/// <returns>Success, device is returned.</returns>
		public async Task<Device> Devices_GetByUserIdAsync(string subscriptionId, string resourceGroupName, string appCollection, string appName, string api_version, string userId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MobileEngagement/appcollections/"+ (appCollection==null? "" : System.Uri.EscapeDataString(appCollection))+"/apps/"+ (appName==null? "" : System.Uri.EscapeDataString(appName))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Campaigns_ListKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		announcements = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		polls = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dataPushes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nativePushes = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
