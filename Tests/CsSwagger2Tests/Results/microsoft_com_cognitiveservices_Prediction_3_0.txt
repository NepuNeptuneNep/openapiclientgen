//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Bounding box that defines a region of an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BoundingBox
	{
		
		/// <summary>
		/// Height.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public float Height { get; set; }
		
		/// <summary>
		/// Coordinate of the left boundary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="left")]
		public float Left { get; set; }
		
		/// <summary>
		/// Coordinate of the top boundary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="top")]
		public float Top { get; set; }
		
		/// <summary>
		/// Width.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public float Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomVisionError
	{
		
		/// <summary>
		/// The error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public CustomVisionErrorCode Code { get; set; }
		
		/// <summary>
		/// A message explaining the error reported by the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomVisionErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestExceededBatchSize = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestNotSupported = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestInvalidIds = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestProjectName = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestProjectNameNotUnique = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestProjectDescription = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestProjectUnknownDomain = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestProjectUnknownClassification = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestProjectUnsupportedDomainTypeChange = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestProjectUnsupportedExportPlatform = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestIterationName = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestIterationNameNotUnique = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestIterationDescription = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestIterationIsNotTrained = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestWorkspaceCannotBeModified = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestWorkspaceNotDeletable = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestTagName = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestTagNameNotUnique = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestTagDescription = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestTagType = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestMultipleNegativeTag = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestImageTags = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestImageRegions = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestNegativeAndRegularTagOnSameImage = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestRequiredParamIsNull = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestIterationIsPublished = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestInvalidPublishName = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestInvalidPublishTarget = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestUnpublishFailed = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestSubscriptionApi = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestExceedProjectLimit = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestExceedIterationPerProjectLimit = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestExceedTagPerProjectLimit = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestExceedTagPerImageLimit = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestExceededQuota = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestCannotMigrateProjectWithName = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestNotLimitedTrial = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestImageBatch = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestImageStream = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestImageUrl = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestImageFormat = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestImageSizeBytes = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestImageExceededCount = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestTrainingNotNeeded = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestTrainingNotNeededButTrainingPipelineUpdated = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestTrainingValidationFailed = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestClassificationTrainingValidationFailed = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestMultiClassClassificationTrainingValidationFailed = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestMultiLabelClassificationTrainingValidationFailed = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestDetectionTrainingValidationFailed = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestTrainingAlreadyInProgress = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestDetectionTrainingNotAllowNegativeTag = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestInvalidEmailAddress = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestDomainNotSupportedForAdvancedTraining = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestExportPlatformNotSupportedForAdvancedTraining = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestExportValidationFailed = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestExportAlreadyInProgress = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestPredictionIdsMissing = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestPredictionIdsExceededCount = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestPredictionTagsExceededCount = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestPredictionResultsExceededCount = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestPredictionInvalidApplicationName = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestPredictionInvalidQueryParameters = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequestInvalid = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnsupportedMediaType = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forbidden = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForbiddenUser = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForbiddenUserResource = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForbiddenUserSignupDisabled = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForbiddenUserSignupAllowanceExceeded = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForbiddenUserDoesNotExist = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForbiddenUserDisabled = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForbiddenUserInsufficientCapability = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForbiddenDRModeEnabled = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForbiddenInvalid = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFoundProject = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFoundProjectDefaultIteration = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFoundIteration = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFoundIterationPerformance = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFoundTag = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFoundImage = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFoundDomain = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFoundApimSubscription = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFoundInvalid = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConflictInvalid = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorUnknown = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorProjectInvalidWorkspace = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorProjectInvalidPipelineConfiguration = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorProjectInvalidDomain = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorProjectTrainingRequestFailed = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorProjectExportRequestFailed = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorFeaturizationServiceUnavailable = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorFeaturizationQueueTimeout = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorFeaturizationInvalidFeaturizer = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorFeaturizationAugmentationUnavailable = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorFeaturizationUnrecognizedJob = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorFeaturizationAugmentationError = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorExporterInvalidPlatform = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorExporterInvalidFeaturizer = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorExporterInvalidClassifier = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorPredictionServiceUnavailable = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorPredictionModelNotFound = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorPredictionModelNotCached = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorPrediction = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorPredictionStorage = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorRegionProposal = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorInvalid = 111,
	}
	
	/// <summary>
	/// Result of an image prediction request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImagePrediction
	{
		
		/// <summary>
		/// Date this prediction was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// Prediction Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Iteration Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iteration")]
		public string Iteration { get; set; }
		
		/// <summary>
		/// List of predictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictions")]
		public Prediction[] Predictions { get; set; }
		
		/// <summary>
		/// Project Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
	}
	
	/// <summary>
	/// Prediction result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Prediction
	{
		
		/// <summary>
		/// Bounding box that defines a region of an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundingBox")]
		public BoundingBox BoundingBox { get; set; }
		
		/// <summary>
		/// Probability of the tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Single> Probability { get; set; }
		
		/// <summary>
		/// Id of the predicted tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagId")]
		public string TagId { get; set; }
		
		/// <summary>
		/// Name of the predicted tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagName")]
		public string TagName { get; set; }
	}
	
	/// <summary>
	/// Image url.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageUrl
	{
		
		/// <summary>
		/// Url of the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Classify an image url and saves the result.
		/// ClassifyImageUrl {projectId}/classify/iterations/{publishedName}/url
		/// </summary>
		/// <param name="projectId">The project id.</param>
		/// <param name="publishedName">Specifies the name of the model to evaluate against.</param>
		/// <param name="application">Optional. Specifies the name of application using the endpoint.</param>
		/// <param name="requestBody">An ImageUrl that contains the url of the image to be evaluated.</param>
		/// <returns>OK</returns>
		public async Task<ImagePrediction> ClassifyImageUrlAsync(string projectId, string publishedName, string application, ImageUrl requestBody)
		{
			var requestUri = ""+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/classify/iterations/"+ (publishedName==null? "" : System.Uri.EscapeDataString(publishedName))+"/url&application=" + (application==null? "" : System.Uri.EscapeDataString(application));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImagePrediction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Classify an image url without saving the result.
		/// ClassifyImageUrlWithNoStore {projectId}/classify/iterations/{publishedName}/url/nostore
		/// </summary>
		/// <param name="projectId">The project id.</param>
		/// <param name="publishedName">Specifies the name of the model to evaluate against.</param>
		/// <param name="application">Optional. Specifies the name of application using the endpoint.</param>
		/// <param name="requestBody">An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated.</param>
		/// <returns>OK</returns>
		public async Task<ImagePrediction> ClassifyImageUrlWithNoStoreAsync(string projectId, string publishedName, string application, ImageUrl requestBody)
		{
			var requestUri = ""+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/classify/iterations/"+ (publishedName==null? "" : System.Uri.EscapeDataString(publishedName))+"/url/nostore&application=" + (application==null? "" : System.Uri.EscapeDataString(application));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImagePrediction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Detect objects in an image url and saves the result.
		/// DetectImageUrl {projectId}/detect/iterations/{publishedName}/url
		/// </summary>
		/// <param name="projectId">The project id.</param>
		/// <param name="publishedName">Specifies the name of the model to evaluate against.</param>
		/// <param name="application">Optional. Specifies the name of application using the endpoint.</param>
		/// <param name="requestBody">An ImageUrl that contains the url of the image to be evaluated.</param>
		/// <returns>OK</returns>
		public async Task<ImagePrediction> DetectImageUrlAsync(string projectId, string publishedName, string application, ImageUrl requestBody)
		{
			var requestUri = ""+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/detect/iterations/"+ (publishedName==null? "" : System.Uri.EscapeDataString(publishedName))+"/url&application=" + (application==null? "" : System.Uri.EscapeDataString(application));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImagePrediction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Detect objects in an image url without saving the result.
		/// DetectImageUrlWithNoStore {projectId}/detect/iterations/{publishedName}/url/nostore
		/// </summary>
		/// <param name="projectId">The project id.</param>
		/// <param name="publishedName">Specifies the name of the model to evaluate against.</param>
		/// <param name="application">Optional. Specifies the name of application using the endpoint.</param>
		/// <param name="requestBody">An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated.</param>
		/// <returns>OK</returns>
		public async Task<ImagePrediction> DetectImageUrlWithNoStoreAsync(string projectId, string publishedName, string application, ImageUrl requestBody)
		{
			var requestUri = ""+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/detect/iterations/"+ (publishedName==null? "" : System.Uri.EscapeDataString(publishedName))+"/url/nostore&application=" + (application==null? "" : System.Uri.EscapeDataString(application));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImagePrediction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
