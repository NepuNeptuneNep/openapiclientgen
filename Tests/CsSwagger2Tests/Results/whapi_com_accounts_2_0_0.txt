//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AccountBalance
	{
		
		/// <summary>
		/// Current available funds in this account
		/// Pattern: ([0-9]*.[0-9]{2})
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableFunds")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([0-9]*.[0-9]{2})")]
		public System.Nullable<System.Double> AvailableFunds { get; set; }
		
		/// <summary>
		/// Current balance of account
		/// Required
		/// Pattern: ([0-9]*.[0-9]{2})
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balance")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([0-9]*.[0-9]{2})")]
		public double Balance { get; set; }
		
		/// <summary>
		/// A three-character ISO4217 currency code. This will be the currency that the user registered in
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Current withdrawable balance of this account
		/// Pattern: ([0-9]*.[0-9]{2})
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withdrawableFunds")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([0-9]*.[0-9]{2})")]
		public System.Nullable<System.Double> WithdrawableFunds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AccountErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// A unique William Hill identifier for the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// To help pinpoint the exact parameter where a request has failed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// A unique William Hill text string to enable you to identify the error (in English only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AccountFlagsSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Accounts
	{
		
		/// <summary>
		/// Account ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Account number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountNum")]
		public string AccountNum { get; set; }
		
		/// <summary>
		/// The city of the customer's address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Is it okay for the bookmaker to contact the customer with marketing information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactable")]
		public System.Nullable<System.Boolean> Contactable { get; set; }
		
		/// <summary>
		/// The country of the customer's address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// A two-character ISO 3166-1-Alpha-2 code representing the customer's country of registration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The county of the customer's address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		/// <summary>
		/// A three-character ISO4217 currency code. This will be the currency that the customer registered in
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Customer ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// The primary email address of the customer with that account. Must be unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The first name of the customer with that account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public AccountsFlags[] AccountsFlags { get; set; }
		
		/// <summary>
		/// The last name of the customer with that account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The mobile number of the customer with that account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		/// <summary>
		/// Is it okay for the bookmaker to give the user's contact details to companies with which it has partnerships
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerContactable")]
		public System.Nullable<System.Boolean> PartnerContactable { get; set; }
		
		/// <summary>
		/// The postCode of the customer's address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postcode")]
		public string Postcode { get; set; }
		
		/// <summary>
		/// Account status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Line number 1 of the customer's street address written out in full
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street1")]
		public string Street1 { get; set; }
		
		/// <summary>
		/// Line number 2 of the customer's street address written out in full
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street2")]
		public string Street2 { get; set; }
		
		/// <summary>
		/// Line number 3 of the customer's street address written out in full
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street3")]
		public string Street3 { get; set; }
		
		/// <summary>
		/// The title of the name of the customer with that account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class AccountsFlags
	{
		
		/// <summary>
		/// Name of the flag to set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flagName")]
		public string FlagName { get; set; }
		
		/// <summary>
		/// The reason that the flag has been set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flagReason")]
		public string FlagReason { get; set; }
		
		/// <summary>
		/// Value to set the flag to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flagValue")]
		public string FlagValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class FlagsElement
	{
		
		/// <summary>
		/// Name of the flag to set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flagName")]
		public string FlagName { get; set; }
		
		/// <summary>
		/// The reason that the flag has been set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flagReason")]
		public string FlagReason { get; set; }
		
		/// <summary>
		/// Value to set the flag to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flagValue")]
		public string FlagValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class GetPayments
	{
		
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public Payment[] Payments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Payment
	{
		
		/// <summary>
		/// Action of the payment (D = Deposit, W = withdrawal)
		/// Required
		/// Pattern: (D|W)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(D|W)")]
		public string Action { get; set; }
		
		/// <summary>
		/// The amount of the payment
		/// Required
		/// Pattern: ([0-9]*.[0-9]{2})
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([0-9]*.[0-9]{2})")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The channel through which the payment was made
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// The commision for the payment
		/// Pattern: ([0-9]*.[0-9]{2})
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commision")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([0-9]*.[0-9]{2})")]
		public System.Nullable<System.Double> Commision { get; set; }
		
		/// <summary>
		/// ID of the payment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The IP address from which the payment was made
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// ID of the payment method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodId")]
		public string MethodId { get; set; }
		
		/// <summary>
		/// The date and time when the payment was made
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentDateTime")]
		public string PaymentDateTime { get; set; }
		
		/// <summary>
		/// The status of the payment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Type of the payment
		/// Pattern: ([A-Za-z]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([A-Za-z]*)")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Online Account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class OnlineAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineAccountNumber")]
		public string OnlineAccountNumber { get; set; }
	}
	
	/// <summary>
	/// Phone Number
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Phone
	{
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// PIN object - if this object is not returned in plusCardDetails object then it has not been set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PinStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="attemptsRemaining")]
		public System.Nullable<System.Double> AttemptsRemaining { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blocked")]
		public System.Nullable<System.Boolean> Blocked { get; set; }
	}
	
	/// <summary>
	/// Plus Card
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PlusCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="blocked")]
		public System.Nullable<System.Boolean> Blocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardNumber")]
		public string CardNumber { get; set; }
	}
	
	/// <summary>
	/// Plus Card Details and linked accounts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PlusCardDetails
	{
		
		/// <summary>
		/// Plus Card
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public PlusCard Card { get; set; }
		
		/// <summary>
		/// Online Account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlineAccount")]
		public OnlineAccount OnlineAccount { get; set; }
		
		/// <summary>
		/// Phone Number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public Phone Phone { get; set; }
		
		/// <summary>
		/// PIN object - if this object is not returned in plusCardDetails object then it has not been set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public PinStatus Pin { get; set; }
		
		/// <summary>
		/// Retail Account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retailAccount")]
		public RetailAccount RetailAccount { get; set; }
	}
	
	/// <summary>
	/// Retail Account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RetailAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="selfExcluded")]
		public System.Nullable<System.Boolean> SelfExcluded { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves details of a customers account
		/// Retrieves a limited set of customer account details. For security purposes, only a subset is supplied, which does not include fields such as security questions and answers.
		/// AccountGetByFieldsAndIncludeAndExcludeAndLanguageAsPerTerritory account
		/// </summary>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="languageAsPerTerritory">Defines response field name language, true (default) returns in language defined by territory, false returns in English</param>
		/// <returns>Success</returns>
		public async Task<Accounts> AccountGetByFieldsAndIncludeAndExcludeAndLanguageAsPerTerritoryAsync(string[] fields, string[] include, string[] exclude, string languageAsPerTerritory, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account?"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&languageAsPerTerritory=" + (languageAsPerTerritory==null? "" : System.Uri.EscapeDataString(languageAsPerTerritory));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Accounts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a customers account balance
		/// This method can be used to retrieve the customer’s account balance in UK Sterling.
		/// AccountBalanceGetByFieldsAndIncludeAndExcludeAndLanguageAsPerTerritory account/balance
		/// </summary>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="languageAsPerTerritory">Defines response field name language, true (default) returns in language defined by territory, false returns in English</param>
		/// <returns>Success</returns>
		public async Task<AccountBalance> AccountBalanceGetByFieldsAndIncludeAndExcludeAndLanguageAsPerTerritoryAsync(string[] fields, string[] include, string[] exclude, string languageAsPerTerritory, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/balance?"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&languageAsPerTerritory=" + (languageAsPerTerritory==null? "" : System.Uri.EscapeDataString(languageAsPerTerritory));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountBalance>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets a flag based on name to value provided for the user.
		/// Sets a flag based on name to value provided for the user.
		/// AccountFlagsPostByLanguageAsPerTerritory account/flags
		/// </summary>
		/// <param name="languageAsPerTerritory">Defines response field name language, true (default) returns in language defined by territory, false returns in English</param>
		/// <param name="requestBody">Array of KVP for setting flags.</param>
		/// <returns>Success</returns>
		public async Task<AccountFlagsSet> AccountFlagsPostByLanguageAsPerTerritoryAsync(string languageAsPerTerritory, AccountFlagsPostByLanguageAsPerTerritoryPostBody[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/flags?languageAsPerTerritory=" + (languageAsPerTerritory==null? "" : System.Uri.EscapeDataString(languageAsPerTerritory));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountFlagsSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a customer's account payments
		/// Retrieves the customer’s account payments in UK Sterling.
		/// AccountPaymentsGetByPageAndPageSizeAndDateFromAndDateToAndSortAndTransactionTypeAndFieldsAndIncludeAndExcludeAndLanguageAsPerTerritory account/payments
		/// </summary>
		/// <param name="page">The page number to return (Used with pageSize)</param>
		/// <param name="pageSize">Specify the number of results to return per page.</param>
		/// <param name="dateFrom">The FROM datetime from payments to be returned. (yyyy-MM-ddTHH:mm:ss)</param>
		/// <param name="dateTo">The TO datetime for payments to be returned. (yyyy-MM-ddTHH:mm:ss)</param>
		/// <param name="sort">The order the response will be retuned by. i.e. date,desc</param>
		/// <param name="transactionType">Allows the user to select with they want to see withdrawls or deposits. If it is omitted from the query both types will be returned</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="languageAsPerTerritory">Defines response field name language, true (default) returns in language defined by territory, false returns in English</param>
		/// <returns>Success - Payments obtained</returns>
		public async Task<GetPayments> AccountPaymentsGetByPageAndPageSizeAndDateFromAndDateToAndSortAndTransactionTypeAndFieldsAndIncludeAndExcludeAndLanguageAsPerTerritoryAsync(double page, double pageSize, string dateFrom, string dateTo, string sort, string transactionType, string[] fields, string[] include, string[] exclude, string languageAsPerTerritory, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/payments?page="+page+"&pageSize="+pageSize+"&dateFrom=" + (dateFrom==null? "" : System.Uri.EscapeDataString(dateFrom))+"&dateTo=" + (dateTo==null? "" : System.Uri.EscapeDataString(dateTo))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&transactionType=" + (transactionType==null? "" : System.Uri.EscapeDataString(transactionType))+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&languageAsPerTerritory=" + (languageAsPerTerritory==null? "" : System.Uri.EscapeDataString(languageAsPerTerritory));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPayments>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a customer's plus card details if they exist.
		/// Gets a customer's plus card details if they exist.
		/// AccountPlusCardGetByFieldsAndIncludeAndExclude account/plusCard
		/// </summary>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <returns>Success - Plus Card Details</returns>
		public async Task<PlusCardDetails> AccountPlusCardGetByFieldsAndIncludeAndExcludeAsync(string[] fields, string[] include, string[] exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/plusCard?"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlusCardDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets a customer's plus card as Lost/Stolen
		/// Sets a customer's plus card as Lost/Stolen
		/// AccountPlusCardLostStolenPost account/plusCard/lostStolen
		/// </summary>
		public async Task AccountPlusCardLostStolenPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/plusCard/lostStolen";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets a customer's plus card phone number
		/// Sets a customer's plus card phone number
		/// AccountPlusCardPhone_oldPhoneNumberPost account/plusCard/phone/{oldPhoneNumber}
		/// </summary>
		/// <param name="oldPhoneNumber">Old phone number to replace</param>
		/// <param name="requestBody">Phone Number to be set.</param>
		public async Task AccountPlusCardPhone_oldPhoneNumberPostAsync(string oldPhoneNumber, Phone requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/plusCard/phone/"+ (oldPhoneNumber==null? "" : System.Uri.EscapeDataString(oldPhoneNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a customer's plus card pin
		/// Updates a customer's plus card pin
		/// AccountPlusCardPinPut account/plusCard/pin
		/// </summary>
		/// <param name="requestBody">PIN to be set.</param>
		public async Task AccountPlusCardPinPutAsync(double requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/plusCard/pin";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets a customer's plus card pin
		/// Sets a customer's plus card pin
		/// AccountPlusCardPinPost account/plusCard/pin
		/// </summary>
		/// <param name="requestBody">PIN to be set.</param>
		public async Task AccountPlusCardPinPostAsync(double requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/plusCard/pin";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AccountFlagsPostByLanguageAsPerTerritoryPostBody
	{
		
		/// <summary>
		/// Name of the flag to set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flagName")]
		public string FlagName { get; set; }
		
		/// <summary>
		/// The reason that the flag has been set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flagReason")]
		public string FlagReason { get; set; }
		
		/// <summary>
		/// Value to set the flag to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flagValue")]
		public string FlagValue { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
