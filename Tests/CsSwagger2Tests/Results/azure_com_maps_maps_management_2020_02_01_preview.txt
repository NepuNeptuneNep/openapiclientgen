//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
	}
	
	/// <summary>
	/// An Azure resource which represents access to a suite of Maps REST APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsAccount
	{
		
		/// <summary>
		/// Additional Map account properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MapsAccountProperties Properties { get; set; }
		
		/// <summary>
		/// The SKU of the Maps Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// Parameters used to create a new Maps Account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsAccountCreateParameters
	{
		
		/// <summary>
		/// The location of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The SKU of the Maps Account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). Each tag must have a key no greater than 128 characters and value no greater than 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The set of keys which can be used to access the Maps REST APIs. Two keys are provided for key rotation without interruption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsAccountKeys
	{
		
		/// <summary>
		/// The full Azure resource identifier of the Maps Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The primary key for accessing the Maps REST APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// The secondary key for accessing the Maps REST APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryKey")]
		public string SecondaryKey { get; set; }
	}
	
	/// <summary>
	/// Additional Map account properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsAccountProperties
	{
		
		/// <summary>
		/// A unique identifier for the maps account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x-ms-client-id")]
		public string X_ms_client_id { get; set; }
	}
	
	/// <summary>
	/// Parameters used to update an existing Maps Account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsAccountUpdateParameters
	{
		
		/// <summary>
		/// The SKU of the Maps Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// A list of Maps Accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsAccounts
	{
		
		/// <summary>
		/// a Maps Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MapsAccount[] Value { get; set; }
	}
	
	/// <summary>
	/// Whether the operation refers to the primary or secondary key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsKeySpecification
	{
		
		/// <summary>
		/// Whether the operation refers to the primary or secondary key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public MapsKeySpecificationKeyType KeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MapsKeySpecificationKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secondary = 1,
	}
	
	/// <summary>
	/// The set of operations available for Maps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MapsOperations
	{
		
		/// <summary>
		/// An operation available for Maps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MapsOperationsValue[] MapsOperationsValue { get; set; }
	}
	
	public class MapsOperationsValue
	{
		
		/// <summary>
		/// The human-readable description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public MapsOperationsValueDisplay Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	public class MapsOperationsValueDisplay
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The action that users can perform, based on their permission level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Microsoft Maps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure resource which represents which will provision the ability to create private location data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateAtlas
	{
		
		/// <summary>
		/// Private Atlas resource properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PrivateAtlasProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Parameters used to create a new Private Atlas resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateAtlasCreateParameters
	{
		
		/// <summary>
		/// The location of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// A list of Private Atlas resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateAtlasList
	{
		
		/// <summary>
		/// a Private Atlas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PrivateAtlas[] Value { get; set; }
	}
	
	/// <summary>
	/// Private Atlas resource properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateAtlasProperties
	{
		
		/// <summary>
		/// The state of the resource provisioning, terminal states: Succeeded, Failed, Canceled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Parameters used to update an existing Private Atlas resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateAtlasUpdateParameters
	{
		
		/// <summary>
		/// Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The SKU of the Maps Account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The name of the SKU, in standard format (such as S0).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets the sku tier. This is based on the SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List operations available for the Maps Resource Provider
		/// Maps_ListOperations providers/Microsoft.Maps/operations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <returns>The request was successful.</returns>
		public async Task<MapsOperations> Maps_ListOperationsAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Maps/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MapsOperations>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Maps Accounts in a Subscription
		/// Accounts_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Maps/accounts
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>The request was successful.</returns>
		public async Task<MapsAccounts> Accounts_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Maps/accounts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MapsAccounts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Maps Accounts in a Resource Group
		/// Accounts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <returns>The request was successful.</returns>
		public async Task<MapsAccounts> Accounts_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MapsAccounts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Maps Account.
		/// Accounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <returns>The request was successful.</returns>
		public async Task<MapsAccount> Accounts_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MapsAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
		/// Accounts_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <param name="requestBody">The new or updated parameters for the Maps Account.</param>
		/// <returns>The Account was successfully updated.</returns>
		public async Task<MapsAccount> Accounts_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName, MapsAccountCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MapsAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Maps Account.
		/// Accounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <returns>The Account was deleted successfully.</returns>
		public async Task Accounts_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Maps Account. Only a subset of the parameters may be updated after creation, such as Sku and Tags.
		/// Accounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <param name="requestBody">The updated parameters for the Maps Account.</param>
		/// <returns>The Account was successfully updated.</returns>
		public async Task<MapsAccount> Accounts_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName, MapsAccountUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MapsAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the keys to use with the Maps APIs. A key is used to authenticate and authorize access to the Maps REST APIs. Only one key is needed at a time; two are given to provide seamless key regeneration.
		/// Accounts_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/listKeys
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <returns>The request was successful.</returns>
		public async Task<MapsAccountKeys> Accounts_ListKeysAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/listKeys?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MapsAccountKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Private Atlas instances for an Azure Map Account
		/// PrivateAtlases_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <returns>The request was successful.</returns>
		public async Task<PrivateAtlasList> PrivateAtlases_ListByAccountAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateAtlases?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateAtlasList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Private Atlas resource.
		/// PrivateAtlases_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <param name="privateAtlasName">The name of the Private Atlas instance.</param>
		/// <returns>The request was successful.</returns>
		public async Task<PrivateAtlas> PrivateAtlases_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName, string privateAtlasName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateAtlases/"+ (privateAtlasName==null? "" : System.Uri.EscapeDataString(privateAtlasName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateAtlas>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a Private Atlas resource. Private Atlas resource will enable the usage of Azure resources to build a custom set of mapping data. It requires an account to exist before it can be created.
		/// PrivateAtlases_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <param name="privateAtlasName">The name of the Private Atlas instance.</param>
		/// <param name="requestBody">The new or updated parameters for the Private Atlas resource.</param>
		/// <returns>The Private Atlas was successfully updated.</returns>
		public async Task<PrivateAtlas> PrivateAtlases_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName, string privateAtlasName, PrivateAtlasCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateAtlases/"+ (privateAtlasName==null? "" : System.Uri.EscapeDataString(privateAtlasName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateAtlas>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Private Atlas resource.
		/// PrivateAtlases_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <param name="privateAtlasName">The name of the Private Atlas instance.</param>
		/// <returns>The Private Atlas was deleted successfully.</returns>
		public async Task PrivateAtlases_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName, string privateAtlasName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateAtlases/"+ (privateAtlasName==null? "" : System.Uri.EscapeDataString(privateAtlasName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Private Atlas resource. Only a subset of the parameters may be updated after creation, such as Tags.
		/// PrivateAtlases_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <param name="privateAtlasName">The name of the Private Atlas instance.</param>
		/// <param name="requestBody">The updated parameters for the Private Atlas.</param>
		/// <returns>The Private Atlas was successfully updated.</returns>
		public async Task<PrivateAtlas> PrivateAtlases_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName, string privateAtlasName, PrivateAtlasUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateAtlases/"+ (privateAtlasName==null? "" : System.Uri.EscapeDataString(privateAtlasName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateAtlas>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerate either the primary or secondary key for use with the Maps APIs. The old key will stop working immediately.
		/// Accounts_RegenerateKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/regenerateKey
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the Maps Account.</param>
		/// <param name="requestBody">Which key to regenerate:  primary or secondary.</param>
		/// <returns>The request was successful.</returns>
		public async Task<MapsAccountKeys> Accounts_RegenerateKeysAsync(string api_version, string subscriptionId, string resourceGroupName, string accountName, MapsKeySpecification requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Maps/accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/regenerateKey?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MapsAccountKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
