//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class class_
	{
		
		/// <summary>
		/// The Id of the Class
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates if the item is published
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublished")]
		public System.Nullable<System.Boolean> IsPublished { get; set; }
		
		/// <summary>
		/// The description of the Class
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates if the class is (A)ctive or (S)uspended
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClassesWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="classes")]
		public class_[] Classes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Competition
	{
		
		/// <summary>
		/// Delay in seconds between bet being sent and bet being placed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="betInRunningDelay")]
		public string BetInRunningDelay { get; set; }
		
		/// <summary>
		/// Indicates whether cashin is available on the events of this competition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashinAvailable")]
		public System.Nullable<System.Boolean> CashinAvailable { get; set; }
		
		/// <summary>
		/// A list of channels that apply to this competition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public string[] Channels { get; set; }
		
		/// <summary>
		/// The description of the competition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Whether the competition should be displayed or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayed")]
		public System.Nullable<System.Boolean> Displayed { get; set; }
		
		/// <summary>
		/// A list of flags that apply to this competition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string[] Flags { get; set; }
		
		/// <summary>
		/// The Id of the Competition
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates if the item is published or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublished")]
		public System.Nullable<System.Boolean> IsPublished { get; set; }
		
		/// <summary>
		/// The name of the competition
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The display order of the competition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
		
		/// <summary>
		/// A list of IDs of parent entities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentIds")]
		public string[] ParentIds { get; set; }
		
		/// <summary>
		/// The status of the competition (A for Active, S for Suspended)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CompetitionsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="competitions")]
		public Competition[] Competitions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Competitor
	{
		
		/// <summary>
		/// The age of the horse
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="age")]
		public System.Nullable<System.Double> Age { get; set; }
		
		/// <summary>
		/// The colour of the horse (There are 5 colours. b = Bay. bl = Black. br = Brown. ch = Chestnut. gr = Grey)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// The stall number that the horse is allocated and will start from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drawNumber")]
		public System.Nullable<System.Double> DrawNumber { get; set; }
		
		/// <summary>
		/// The form of a horse is a record of significant events, mainly its performance in previous races. For example: The value 874-1 means that the horse finished 8th, then 7th in the next race, then 4th, hyphen here means he did not finish in the race, and was 1st in the last race he was running in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formGuide")]
		public string FormGuide { get; set; }
		
		/// <summary>
		/// Unique identifier of the competitor in the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public double Id { get; set; }
		
		/// <summary>
		/// The name of the Jockey who's riding the horse
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jockeyName")]
		public string JockeyName { get; set; }
		
		/// <summary>
		/// The name of competitor that the information is being given for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional information about the horse's performance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		/// <summary>
		/// The name of the horses owner(s)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerName")]
		public string OwnerName { get; set; }
		
		/// <summary>
		/// The rating of the horse which is defined by a rating provider. It represents the horse's performance (the higher the rating, the better the horse is)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public string Rating { get; set; }
		
		/// <summary>
		/// The sex of the horse (F|M)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sex")]
		public string Sex { get; set; }
		
		/// <summary>
		/// The URL for the image that represents the 'silk' (Coathing pattern) worn by the jockey.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="silkImageUrl")]
		public string SilkImageUrl { get; set; }
		
		/// <summary>
		/// The name of the horses trainer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainerName")]
		public string TrainerName { get; set; }
		
		/// <summary>
		/// The rider weight (in pounds)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightPounds")]
		public string WeightPounds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// The William Hill API Error Code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Optional field to point to the field with an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// A String describing the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class event_
	{
		
		/// <summary>
		/// Delay in seconds between bet being sent and bet being placed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="betInRunningDelay")]
		public string BetInRunningDelay { get; set; }
		
		/// <summary>
		/// Betting status of the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bettingStatus")]
		public string BettingStatus { get; set; }
		
		/// <summary>
		/// Whether cashin is available on this event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashinAvailable")]
		public System.Nullable<System.Boolean> CashinAvailable { get; set; }
		
		/// <summary>
		/// A list of channels that apply to this event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public string[] Channels { get; set; }
		
		/// <summary>
		/// A string indicating the country code of this event if available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The description of the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// whether the event should be displayed or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayed")]
		public System.Nullable<System.Boolean> Displayed { get; set; }
		
		/// <summary>
		/// What type of event is this? (e.g. MTCH, TRNMT)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventSort")]
		public string EventSort { get; set; }
		
		/// <summary>
		/// A list of flags that apply to this event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string[] Flags { get; set; }
		
		/// <summary>
		/// Whether this event has inplay markets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasInPlayMarkets")]
		public System.Nullable<System.Boolean> HasInPlayMarkets { get; set; }
		
		/// <summary>
		/// Whether this event has Live Prices
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLivePrices")]
		public System.Nullable<System.Boolean> HasLivePrices { get; set; }
		
		/// <summary>
		/// The Id of the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this event has started and therefore is inplay
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInPlay")]
		public System.Nullable<System.Boolean> IsInPlay { get; set; }
		
		/// <summary>
		/// Indicates if the item is published
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublished")]
		public System.Nullable<System.Boolean> IsPublished { get; set; }
		
		/// <summary>
		/// Count of active markets in play
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketCountActiveInPlay")]
		public string MarketCountActiveInPlay { get; set; }
		
		/// <summary>
		/// count of active market pre-match
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketCountActivePreMatch")]
		public string MarketCountActivePreMatch { get; set; }
		
		/// <summary>
		/// Total market count
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketCountActiveTotal")]
		public string MarketCountActiveTotal { get; set; }
		
		/// <summary>
		/// Total inplay markets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketCountInPlay")]
		public string MarketCountInPlay { get; set; }
		
		/// <summary>
		/// Total prematch markets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketCountPreMatch")]
		public string MarketCountPreMatch { get; set; }
		
		/// <summary>
		/// A list of markets belonging to this event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markets")]
		public Market[] Markets { get; set; }
		
		/// <summary>
		/// The name of the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Display order of the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
		
		/// <summary>
		/// A list of IDs of parent entities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentIds")]
		public string[] ParentIds { get; set; }
		
		/// <summary>
		/// Race number for race events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raceNum")]
		public string RaceNum { get; set; }
		
		/// <summary>
		/// Whether the event has been settled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settled")]
		public System.Nullable<System.Boolean> Settled { get; set; }
		
		/// <summary>
		/// The start date and time of the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		/// <summary>
		/// Status of the event (A for Active, S for Suspended)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Market
	{
		
		/// <summary>
		/// Antepost Market
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antepostMarket")]
		public System.Nullable<System.Boolean> AntepostMarket { get; set; }
		
		/// <summary>
		/// BOG Available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bestOddsGuaranteed")]
		public System.Nullable<System.Boolean> BestOddsGuaranteed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="betInRunningDelay")]
		public string BetInRunningDelay { get; set; }
		
		/// <summary>
		/// A channel indicates where an entry can be accessed. Its made up of a string containing a number of characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public string Channels { get; set; }
		
		/// <summary>
		/// Additional market information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates if the item should be displayed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayed")]
		public System.Nullable<System.Boolean> Displayed { get; set; }
		
		/// <summary>
		/// Indicates if each way betting is available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eachWay")]
		public System.Nullable<System.Boolean> EachWay { get; set; }
		
		/// <summary>
		/// Where each way terms are stored with the bet, this holds the denominator for the each way
		///factor. For example, if the each way terms are: 5 places pay ¼, this value will be 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eachWayFactorDen")]
		public string EachWayFactorDen { get; set; }
		
		/// <summary>
		/// Where each way terms are stored with the bet, this holds the numerator for the each way
		///factor. For example, if the each way terms are: 5 places pay ¼, this value will be 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eachWayFactorNum")]
		public string EachWayFactorNum { get; set; }
		
		/// <summary>
		/// Where each way terms are stored with the bet, this holds the number of places paid. For
		///example, if the each way terms are: 5 places pay ¼, this value will be 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eachWayPlaces")]
		public string EachWayPlaces { get; set; }
		
		/// <summary>
		/// Early Pricing Active
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earlyPriceAvailable")]
		public System.Nullable<System.Boolean> EarlyPriceAvailable { get; set; }
		
		/// <summary>
		/// Is tricast betting available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fcAvailable")]
		public System.Nullable<System.Boolean> FcAvailable { get; set; }
		
		/// <summary>
		/// Is firstFour betting available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstFourAvailable")]
		public System.Nullable<System.Boolean> FirstFourAvailable { get; set; }
		
		/// <summary>
		/// Is firstPrice betting available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPriceAvailable")]
		public System.Nullable<System.Boolean> FirstPriceAvailable { get; set; }
		
		/// <summary>
		/// Flags for the market
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string Flags { get; set; }
		
		/// <summary>
		/// Handicap score
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hcapMakeup")]
		public string HcapMakeup { get; set; }
		
		/// <summary>
		/// This value indicates the current handicap set on the Event Market, assuming it has a handicap type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hcapValue")]
		public string HcapValue { get; set; }
		
		/// <summary>
		/// ID (e.g. OB_MA{id} (e.g. OB_MA1), OB_SP (Sport), OB_CL (Class), OB_TY (Competition / type), OB_EV (event) OB_MA (Market), OB_OU (Selection / outcome)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Is this an in-play market
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInPlayMarket")]
		public System.Nullable<System.Boolean> IsInPlayMarket { get; set; }
		
		/// <summary>
		/// Indicates if the item is published
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublished")]
		public System.Nullable<System.Boolean> IsPublished { get; set; }
		
		/// <summary>
		/// Live Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livePriceAvailable")]
		public System.Nullable<System.Boolean> LivePriceAvailable { get; set; }
		
		/// <summary>
		/// The collectionId of the Market Group inherited from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketGroupCollectionId")]
		public string MarketGroupCollectionId { get; set; }
		
		/// <summary>
		/// The group id the market was inherited from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketGroupId")]
		public string MarketGroupId { get; set; }
		
		/// <summary>
		/// The group name the market was inherited from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketGroupName")]
		public string MarketGroupName { get; set; }
		
		/// <summary>
		/// The sort defines the market template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketSort")]
		public string MarketSort { get; set; }
		
		/// <summary>
		/// Human-friendly name of the market
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Display order of the items (Ascending)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
		
		/// <summary>
		/// A list of IDs of parent entities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentIds")]
		public string[] ParentIds { get; set; }
		
		/// <summary>
		/// Is firstFour betting available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quinellaAvailable")]
		public System.Nullable<System.Boolean> QuinellaAvailable { get; set; }
		
		/// <summary>
		/// A list of selections belonging to the market
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selections")]
		public Selection[] Selections { get; set; }
		
		/// <summary>
		/// Whether the market is settled or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settled")]
		public System.Nullable<System.Boolean> Settled { get; set; }
		
		/// <summary>
		/// Starting Price Available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startingPriceAvailable")]
		public System.Nullable<System.Boolean> StartingPriceAvailable { get; set; }
		
		/// <summary>
		/// Indicates the status of the Market (A = Active/S = Suspended)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Is forecast betting available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tcAvailable")]
		public System.Nullable<System.Boolean> TcAvailable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Selection
	{
		
		/// <summary>
		/// The cashin price denominator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashinPriceDen")]
		public string CashinPriceDen { get; set; }
		
		/// <summary>
		/// The cashin price numerator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashinPriceNum")]
		public string CashinPriceNum { get; set; }
		
		/// <summary>
		/// A list of channels that applies to this selection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public string[] Channels { get; set; }
		
		/// <summary>
		/// The away score in a correct score event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="csAway")]
		public string CsAway { get; set; }
		
		/// <summary>
		/// The home score in a correct score event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="csHome")]
		public string CsHome { get; set; }
		
		/// <summary>
		/// Denominator of the price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentPriceDen")]
		public string CurrentPriceDen { get; set; }
		
		/// <summary>
		/// Numerator of the price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentPriceNum")]
		public string CurrentPriceNum { get; set; }
		
		/// <summary>
		/// The description of the selection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Wether this selection should be displayed or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayed")]
		public System.Nullable<System.Boolean> Displayed { get; set; }
		
		/// <summary>
		/// The Id of the selection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates if the item is published
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublished")]
		public System.Nullable<System.Boolean> IsPublished { get; set; }
		
		/// <summary>
		/// The name of the selection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The selection price, in decimal format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oddsDecimal")]
		public decimal OddsDecimal { get; set; }
		
		/// <summary>
		/// The selection price, in fractional format
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oddsFractional")]
		public string OddsFractional { get; set; }
		
		/// <summary>
		/// The display order of the selection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public string Order { get; set; }
		
		/// <summary>
		/// A list of IDs of parent entities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentIds")]
		public string[] ParentIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceFormatted")]
		public PriceFormatted PriceFormatted { get; set; }
		
		/// <summary>
		/// The result of this selection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		/// <summary>
		/// football Result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultType")]
		public string ResultType { get; set; }
		
		/// <summary>
		/// The runner number in race events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runnerNum")]
		public string RunnerNum { get; set; }
		
		/// <summary>
		/// Wether this selection has been settled or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settled")]
		public System.Nullable<System.Boolean> Settled { get; set; }
		
		/// <summary>
		/// The status of the selection (A for Active or S for Suspended)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PriceFormatted
	{
		
		/// <summary>
		/// The price in American format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="american")]
		public string American { get; set; }
		
		/// <summary>
		/// The decimal format of the price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decimal")]
		public System.Nullable<System.Double> Decimal { get; set; }
		
		/// <summary>
		/// The fractional format of the price or EVS when the price evens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractional")]
		public string Fractional { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventCompetitorsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="competitors")]
		public Competitor[] Competitors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public event_[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MarketGroupsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="marketGroups")]
		public Marketgroup[] MarketGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Marketgroup
	{
		
		/// <summary>
		/// The collectionId of the Market Group, If it has one
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionId")]
		public string CollectionId { get; set; }
		
		/// <summary>
		/// The CompetitionId of the Market Group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="competitionId")]
		public string CompetitionId { get; set; }
		
		/// <summary>
		/// The Id of the Market Group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The market sort of this group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marketSort")]
		public string MarketSort { get; set; }
		
		/// <summary>
		/// The Name of the Market Group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MarketsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="markets")]
		public Market[] Markets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SelectionsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="selections")]
		public Selection[] Selections { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sport
	{
		
		/// <summary>
		/// The Id of the Sport
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates if the item is published
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublished")]
		public System.Nullable<System.Boolean> IsPublished { get; set; }
		
		/// <summary>
		/// The description of the Sport
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SportsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="sports")]
		public Sport[] Sports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopBet
	{
		
		[System.Runtime.Serialization.DataMember(Name="competition")]
		public Competition Competition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event")]
		public event_ Event { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="market")]
		public Market Market { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selection")]
		public Selection Selection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sport")]
		public Sport Sport { get; set; }
		
		/// <summary>
		/// The weighting of the bet in the Top bets ranking
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public string Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopBetsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="bets")]
		public TopBet[] Bets { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a list of competitions for a given class id.
		/// Retrieves a list of competitions for a given class id.
		/// GetCompetitionsForClass classes/{classId}/competitions/
		/// </summary>
		/// <param name="classId">The class id to retrieve information for.</param>
		/// <param name="isPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="displayed">Specify whether to return displayed entities or not</param>
		/// <param name="channel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="status">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="sort">The field to order the response by, followed by the order. For example: name,desc</param>
		/// <param name="offset">Skip over a number of elements by specifying a start value for the query</param>
		/// <param name="limit">Specify the number of results to return</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <returns>Success</returns>
		public async Task<CompetitionsWrapper> GetCompetitionsForClassAsync(string classId, string isPublished, string[] fields, string[] include, string[] exclude, string displayed, string channel, string status, string sort, int offset, int limit, string culture)
		{
			var requestUri = "classes/"+ (classId==null? "" : System.Uri.EscapeDataString(classId))+"/competitions/&isPublished=" + (isPublished==null? "" : System.Uri.EscapeDataString(isPublished))+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&displayed=" + (displayed==null? "" : System.Uri.EscapeDataString(displayed))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompetitionsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of events for a given class id.
		/// Retrieves a list of events for a given class id. 'includeAllDescendants' parameter should be accompanied with 'date' filter or one of 'dateFrom' and 'dateTo' filters.
		/// GetEventsForClass classes/{classId}/events/
		/// </summary>
		/// <param name="classId">The class id to retrieve information for.</param>
		/// <param name="isPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="displayed">Specify whether to return displayed entities or not</param>
		/// <param name="channel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="settled">Specify wether only settled entities should be returned</param>
		/// <param name="includeEmpty">When declared as false it should exclude markets and events that have no selections / markets</param>
		/// <param name="status">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="sort">The field to order the response by, followed by the order. For example: name,desc</param>
		/// <param name="offset">Skip over a number of elements by specifying a start value for the query</param>
		/// <param name="limit">Specify the number of results to return</param>
		/// <param name="headlineSummary">Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned.</param>
		/// <param name="includeAllDescendants">Include every descendant in the below heirarchy</param>
		/// <param name="isInPlay">Show only events that are in-play</param>
		/// <param name="marketCount">Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned.
		/// Minimum: 1
		/// Maximum: 3
		// </param>
		/// <param name="date">Return only events for the specified date (yyyy-MM-dd).</param>
		/// <param name="dateFrom">The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss)</param>
		/// <param name="dateTo">The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss)</param>
		/// <param name="eventSort">Filter event by event sort</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <param name="marketPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="marketStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="marketDisplayed">Specify whether to return displayed entities or not</param>
		/// <param name="marketChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="marketSort">Filter by market sort (e.g. MR (match result) -- (Outright)).</param>
		/// <param name="marketEW">Specify whether to return markets with each way betting or those without</param>
		/// <param name="selectionStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="selectionChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="selectionPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <returns>Success</returns>
		public async Task<EventsWrapper> GetEventsForClassAsync(
					string classId, 
					string isPublished, 
					string[] fields, 
					string[] include, 
					string[] exclude, 
					string displayed, 
					string channel, 
					bool settled, 
					bool includeEmpty, 
					string status, 
					string sort, 
					int offset, 
					int limit, 
					bool headlineSummary, 
					bool includeAllDescendants, 
					bool isInPlay, 
					int marketCount, 
					string date, 
					string dateFrom, 
					string dateTo, 
					string eventSort, 
					string culture, 
					string marketPublished, 
					string marketStatus, 
					string marketDisplayed, 
					string marketChannel, 
					string marketSort, 
					string marketEW, 
					string selectionStatus, 
					string selectionChannel, 
					string selectionPublished)
		{
			var requestUri = "classes/"+ (classId==null? "" : System.Uri.EscapeDataString(classId))+"/events/&isPublished=" + (isPublished==null? "" : System.Uri.EscapeDataString(isPublished))+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&displayed=" + (displayed==null? "" : System.Uri.EscapeDataString(displayed))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&settled="+settled+"&includeEmpty="+includeEmpty+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&headlineSummary="+headlineSummary+"&includeAllDescendants="+includeAllDescendants+"&isInPlay="+isInPlay+"&marketCount="+marketCount+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&dateFrom=" + (dateFrom==null? "" : System.Uri.EscapeDataString(dateFrom))+"&dateTo=" + (dateTo==null? "" : System.Uri.EscapeDataString(dateTo))+"&eventSort=" + (eventSort==null? "" : System.Uri.EscapeDataString(eventSort))+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture))+"&marketPublished=" + (marketPublished==null? "" : System.Uri.EscapeDataString(marketPublished))+"&marketStatus=" + (marketStatus==null? "" : System.Uri.EscapeDataString(marketStatus))+"&marketDisplayed=" + (marketDisplayed==null? "" : System.Uri.EscapeDataString(marketDisplayed))+"&marketChannel=" + (marketChannel==null? "" : System.Uri.EscapeDataString(marketChannel))+"&marketSort=" + (marketSort==null? "" : System.Uri.EscapeDataString(marketSort))+"&marketEW=" + (marketEW==null? "" : System.Uri.EscapeDataString(marketEW))+"&selectionStatus=" + (selectionStatus==null? "" : System.Uri.EscapeDataString(selectionStatus))+"&selectionChannel=" + (selectionChannel==null? "" : System.Uri.EscapeDataString(selectionChannel))+"&selectionPublished=" + (selectionPublished==null? "" : System.Uri.EscapeDataString(selectionPublished));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a specific competition
		/// Retrieves a specific competition
		/// GetCompetition competitions/{competitionId}
		/// </summary>
		/// <param name="competitionId">The competition id to retrieve information for.</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <returns>Success</returns>
		public async Task<Competition> GetCompetitionAsync(string competitionId, string[] fields, string[] include, string[] exclude, string culture)
		{
			var requestUri = "competitions/"+ (competitionId==null? "" : System.Uri.EscapeDataString(competitionId))+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Competition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of events for a given competition id.
		/// Retrieves a list of events for a given competition id. 'headlineSummary' and includeAllDescendants parameters should be accompanied with 'date' filter or one of 'dateFrom' and 'dateTo' filters.
		/// GetEventsForCompetition competitions/{competitionId}/events/
		/// </summary>
		/// <param name="competitionId">The competition id to retrieve information for.</param>
		/// <param name="isPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="displayed">Specify whether to return displayed entities or not</param>
		/// <param name="channel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="settled">Specify wether only settled entities should be returned</param>
		/// <param name="includeEmpty">When declared as false it should exclude markets and events that have no selections / markets</param>
		/// <param name="status">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="sort">The field to order the response by, followed by the order. For example: name,desc</param>
		/// <param name="offset">Skip over a number of elements by specifying a start value for the query</param>
		/// <param name="limit">Specify the number of results to return</param>
		/// <param name="headlineSummary">Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned.</param>
		/// <param name="includeAllDescendants">Include every descendant in the below heirarchy</param>
		/// <param name="isInPlay">Show only events that are in-play</param>
		/// <param name="marketCount">Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned.
		/// Minimum: 1
		/// Maximum: 3
		// </param>
		/// <param name="date">Return only events for the specified date (yyyy-MM-dd).</param>
		/// <param name="dateFrom">The UTC datetime from the events to be returned. (yyyy-MM-ddTHH:mm:ss)</param>
		/// <param name="dateTo">The UTC datetime TO the events to be returned. (yyyy-MM-ddTHH:mm:ss)</param>
		/// <param name="marketGroupId">Filter by marketGroupId (e.g. OB_MG1276585).</param>
		/// <param name="eventSort">Filter event by event sort</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <param name="marketPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="marketStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="marketDisplayed">Specify whether to return displayed entities or not</param>
		/// <param name="marketChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="marketSort">Filter by market sort (e.g. MR (match result) -- (Outright)).</param>
		/// <param name="marketEW">Specify whether to return markets with each way betting or those without</param>
		/// <param name="selectionStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="selectionChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="selectionPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <returns>Success</returns>
		public async Task<EventsWrapper> GetEventsForCompetitionAsync(
					string competitionId, 
					string isPublished, 
					string[] fields, 
					string[] include, 
					string[] exclude, 
					string displayed, 
					string channel, 
					bool settled, 
					bool includeEmpty, 
					string status, 
					string sort, 
					int offset, 
					int limit, 
					bool headlineSummary, 
					bool includeAllDescendants, 
					bool isInPlay, 
					int marketCount, 
					string date, 
					string dateFrom, 
					string dateTo, 
					string marketGroupId, 
					string eventSort, 
					string culture, 
					string marketPublished, 
					string marketStatus, 
					string marketDisplayed, 
					string marketChannel, 
					string marketSort, 
					string marketEW, 
					string selectionStatus, 
					string selectionChannel, 
					string selectionPublished)
		{
			var requestUri = "competitions/"+ (competitionId==null? "" : System.Uri.EscapeDataString(competitionId))+"/events/&isPublished=" + (isPublished==null? "" : System.Uri.EscapeDataString(isPublished))+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&displayed=" + (displayed==null? "" : System.Uri.EscapeDataString(displayed))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&settled="+settled+"&includeEmpty="+includeEmpty+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&headlineSummary="+headlineSummary+"&includeAllDescendants="+includeAllDescendants+"&isInPlay="+isInPlay+"&marketCount="+marketCount+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&dateFrom=" + (dateFrom==null? "" : System.Uri.EscapeDataString(dateFrom))+"&dateTo=" + (dateTo==null? "" : System.Uri.EscapeDataString(dateTo))+"&marketGroupId=" + (marketGroupId==null? "" : System.Uri.EscapeDataString(marketGroupId))+"&eventSort=" + (eventSort==null? "" : System.Uri.EscapeDataString(eventSort))+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture))+"&marketPublished=" + (marketPublished==null? "" : System.Uri.EscapeDataString(marketPublished))+"&marketStatus=" + (marketStatus==null? "" : System.Uri.EscapeDataString(marketStatus))+"&marketDisplayed=" + (marketDisplayed==null? "" : System.Uri.EscapeDataString(marketDisplayed))+"&marketChannel=" + (marketChannel==null? "" : System.Uri.EscapeDataString(marketChannel))+"&marketSort=" + (marketSort==null? "" : System.Uri.EscapeDataString(marketSort))+"&marketEW=" + (marketEW==null? "" : System.Uri.EscapeDataString(marketEW))+"&selectionStatus=" + (selectionStatus==null? "" : System.Uri.EscapeDataString(selectionStatus))+"&selectionChannel=" + (selectionChannel==null? "" : System.Uri.EscapeDataString(selectionChannel))+"&selectionPublished=" + (selectionPublished==null? "" : System.Uri.EscapeDataString(selectionPublished));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of market groups for a given competition id
		/// Retrieves a list of market groups for a given competition id
		/// GetMarketGroupsForCompetition competitions/{competitionId}/marketgroups/
		/// </summary>
		/// <param name="competitionId">The competition id to retrieve information for.</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="sort">The field to order the response by, followed by the order. For example: name,desc</param>
		/// <param name="offset">Skip over a number of elements by specifying a start value for the query</param>
		/// <param name="limit">Specify the number of results to return</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <param name="name">Filter by market group name</param>
		/// <returns>Success</returns>
		public async Task<MarketGroupsWrapper> GetMarketGroupsForCompetitionAsync(string competitionId, string[] fields, string[] include, string[] exclude, string sort, int offset, int limit, string culture, string name)
		{
			var requestUri = "competitions/"+ (competitionId==null? "" : System.Uri.EscapeDataString(competitionId))+"/marketgroups/&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarketGroupsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
		/// Retrieves a list of events/markets/selections where markets within said event match selected sort/groupId
		/// GetMarketsByGroupId competitions/{competitionId}/marketsByGroupid
		/// </summary>
		/// <param name="competitionId">The competition id to retrieve information for.</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="marketSort">Filter by market sort (e.g. MR (match result) -- (Outright)).</param>
		/// <param name="marketGroupId">Filter by marketGroupId (e.g. OB_MG1276585).</param>
		/// <returns>Success</returns>
		public async Task<MarketGroupsWrapper> GetMarketsByGroupIdAsync(string competitionId, string[] fields, string[] include, string[] exclude, string marketSort, string marketGroupId)
		{
			var requestUri = "competitions/"+ (competitionId==null? "" : System.Uri.EscapeDataString(competitionId))+"/marketsByGroupid&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&marketSort=" + (marketSort==null? "" : System.Uri.EscapeDataString(marketSort))+"&marketGroupId=" + (marketGroupId==null? "" : System.Uri.EscapeDataString(marketGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarketGroupsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of events for the provided IDs.
		/// Retrieves a list of events for the provided IDs.
		/// GetEvents events/
		/// </summary>
		/// <param name="ids">A comma-separated list of selectionIds</param>
		/// <param name="isPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="includeAllDescendants">Include every descendant in the below heirarchy</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="channel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="settled">Specify wether only settled entities should be returned</param>
		/// <param name="includeEmpty">When declared as false it should exclude markets and events that have no selections / markets</param>
		/// <param name="headlineSummary">Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned.</param>
		/// <param name="marketCount">Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned.
		/// Minimum: 1
		/// Maximum: 3
		// </param>
		/// <param name="sort">The field to order the response by, followed by the order. For example: name,desc</param>
		/// <param name="offset">Skip over a number of elements by specifying a start value for the query</param>
		/// <param name="limit">Specify the number of results to return</param>
		/// <param name="marketIds">Comma-seaerated list of market IDs to filter by</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <param name="marketPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="marketStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="marketDisplayed">Specify whether to return displayed entities or not</param>
		/// <param name="marketChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="marketSort">Filter by market sort (e.g. MR (match result) -- (Outright)).</param>
		/// <param name="marketEW">Specify whether to return markets with each way betting or those without</param>
		/// <param name="selectionStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="selectionChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="selectionPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <returns>Success</returns>
		public async Task<EventsWrapper> GetEventsAsync(
					string[] ids, 
					string isPublished, 
					bool includeAllDescendants, 
					string[] fields, 
					string[] include, 
					string[] exclude, 
					string channel, 
					bool settled, 
					bool includeEmpty, 
					bool headlineSummary, 
					int marketCount, 
					string sort, 
					int offset, 
					int limit, 
					string[] marketIds, 
					string culture, 
					string marketPublished, 
					string marketStatus, 
					string marketDisplayed, 
					string marketChannel, 
					string marketSort, 
					string marketEW, 
					string selectionStatus, 
					string selectionChannel, 
					string selectionPublished)
		{
			var requestUri = "events/?"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&isPublished=" + (isPublished==null? "" : System.Uri.EscapeDataString(isPublished))+"&includeAllDescendants="+includeAllDescendants+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&settled="+settled+"&includeEmpty="+includeEmpty+"&headlineSummary="+headlineSummary+"&marketCount="+marketCount+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&"+string.Join("&", marketIds.Select(z => $"marketIds={System.Uri.EscapeDataString(z.ToString())}"))+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture))+"&marketPublished=" + (marketPublished==null? "" : System.Uri.EscapeDataString(marketPublished))+"&marketStatus=" + (marketStatus==null? "" : System.Uri.EscapeDataString(marketStatus))+"&marketDisplayed=" + (marketDisplayed==null? "" : System.Uri.EscapeDataString(marketDisplayed))+"&marketChannel=" + (marketChannel==null? "" : System.Uri.EscapeDataString(marketChannel))+"&marketSort=" + (marketSort==null? "" : System.Uri.EscapeDataString(marketSort))+"&marketEW=" + (marketEW==null? "" : System.Uri.EscapeDataString(marketEW))+"&selectionStatus=" + (selectionStatus==null? "" : System.Uri.EscapeDataString(selectionStatus))+"&selectionChannel=" + (selectionChannel==null? "" : System.Uri.EscapeDataString(selectionChannel))+"&selectionPublished=" + (selectionPublished==null? "" : System.Uri.EscapeDataString(selectionPublished));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a single event by ID.
		/// Retrieves a single event by ID.
		/// GetEvent events/{eventId}
		/// </summary>
		/// <param name="eventId">The event ID to retrieve information for.</param>
		/// <param name="includeAllDescendants">Include every descendant in the below heirarchy</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="headlineSummary">Return only headline markets (Markets with the lowest display order) Either 1 InPlay and 1 Pre-Match, or the amount specified in marketCount, if available. Markets and Outcomes will be returned.</param>
		/// <param name="marketCount">Specify the number of markets to return when requesting headlineSummary. This count of InPlay and Pre-Match markets will be returned.For example, when specifying 1, 1 In Play and 1 Pre Match market will be returned.
		/// Minimum: 1
		/// Maximum: 3
		// </param>
		/// <param name="marketIds">Comma-seaerated list of market IDs to filter by</param>
		/// <param name="includeEmpty">When declared as false it should exclude markets and events that have no selections / markets</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <param name="marketPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="marketStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="marketDisplayed">Specify whether to return displayed entities or not</param>
		/// <param name="marketChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="marketSort">Filter by market sort (e.g. MR (match result) -- (Outright)).</param>
		/// <param name="marketEW">Specify whether to return markets with each way betting or those without</param>
		/// <param name="selectionStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="selectionChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="selectionPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <returns>Success</returns>
		public async Task<EventsWrapper> GetEventAsync(
					string eventId, 
					bool includeAllDescendants, 
					string[] fields, 
					string[] include, 
					string[] exclude, 
					bool headlineSummary, 
					int marketCount, 
					string[] marketIds, 
					bool includeEmpty, 
					string culture, 
					string marketPublished, 
					string marketStatus, 
					string marketDisplayed, 
					string marketChannel, 
					string marketSort, 
					string marketEW, 
					string selectionStatus, 
					string selectionChannel, 
					string selectionPublished)
		{
			var requestUri = "events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"&includeAllDescendants="+includeAllDescendants+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&headlineSummary="+headlineSummary+"&marketCount="+marketCount+"&"+string.Join("&", marketIds.Select(z => $"marketIds={System.Uri.EscapeDataString(z.ToString())}"))+"&includeEmpty="+includeEmpty+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture))+"&marketPublished=" + (marketPublished==null? "" : System.Uri.EscapeDataString(marketPublished))+"&marketStatus=" + (marketStatus==null? "" : System.Uri.EscapeDataString(marketStatus))+"&marketDisplayed=" + (marketDisplayed==null? "" : System.Uri.EscapeDataString(marketDisplayed))+"&marketChannel=" + (marketChannel==null? "" : System.Uri.EscapeDataString(marketChannel))+"&marketSort=" + (marketSort==null? "" : System.Uri.EscapeDataString(marketSort))+"&marketEW=" + (marketEW==null? "" : System.Uri.EscapeDataString(marketEW))+"&selectionStatus=" + (selectionStatus==null? "" : System.Uri.EscapeDataString(selectionStatus))+"&selectionChannel=" + (selectionChannel==null? "" : System.Uri.EscapeDataString(selectionChannel))+"&selectionPublished=" + (selectionPublished==null? "" : System.Uri.EscapeDataString(selectionPublished));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves competitors for a single event by ID.
		/// Retrieves competitors for a single event by ID.
		/// GetEventCompetitors events/{eventId}/competitors
		/// </summary>
		/// <param name="eventId">The event ID to retrieve information for.</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <returns>Success</returns>
		public async Task<EventCompetitorsWrapper> GetEventCompetitorsAsync(string eventId, string[] fields, string[] include, string[] exclude)
		{
			var requestUri = "events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/competitors&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventCompetitorsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one or more specific markets
		/// Retrieves one or more specific markets. Markets with Live at the end are always In-Play markets. However, not ALL In-Play markets have Live at the end of the market name.
		/// GetMarkets events/{eventId}/markets/
		/// </summary>
		/// <param name="eventId">The event ID to retrieve information for.</param>
		/// <param name="ids">A comma-separated list of selectionIds</param>
		/// <param name="includeAllDescendants">Include every descendant in the below heirarchy</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="includeEmpty">When declared as false it should exclude markets and events that have no selections / markets</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <param name="marketPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="marketStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="marketDisplayed">Specify whether to return displayed entities or not</param>
		/// <param name="marketChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="marketSort">Filter by market sort (e.g. MR (match result) -- (Outright)).</param>
		/// <param name="marketEW">Specify whether to return markets with each way betting or those without</param>
		/// <param name="selectionStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="selectionChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="selectionPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <returns>Success</returns>
		public async Task<MarketsWrapper> GetMarketsAsync(
					string eventId, 
					string[] ids, 
					bool includeAllDescendants, 
					string[] fields, 
					string[] include, 
					string[] exclude, 
					bool includeEmpty, 
					string culture, 
					string marketPublished, 
					string marketStatus, 
					string marketDisplayed, 
					string marketChannel, 
					string marketSort, 
					string marketEW, 
					string selectionStatus, 
					string selectionChannel, 
					string selectionPublished)
		{
			var requestUri = "events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/markets/&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&includeAllDescendants="+includeAllDescendants+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&includeEmpty="+includeEmpty+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture))+"&marketPublished=" + (marketPublished==null? "" : System.Uri.EscapeDataString(marketPublished))+"&marketStatus=" + (marketStatus==null? "" : System.Uri.EscapeDataString(marketStatus))+"&marketDisplayed=" + (marketDisplayed==null? "" : System.Uri.EscapeDataString(marketDisplayed))+"&marketChannel=" + (marketChannel==null? "" : System.Uri.EscapeDataString(marketChannel))+"&marketSort=" + (marketSort==null? "" : System.Uri.EscapeDataString(marketSort))+"&marketEW=" + (marketEW==null? "" : System.Uri.EscapeDataString(marketEW))+"&selectionStatus=" + (selectionStatus==null? "" : System.Uri.EscapeDataString(selectionStatus))+"&selectionChannel=" + (selectionChannel==null? "" : System.Uri.EscapeDataString(selectionChannel))+"&selectionPublished=" + (selectionPublished==null? "" : System.Uri.EscapeDataString(selectionPublished));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarketsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one or more selections for a market
		/// Retrieves one or more selections for a market
		/// GetSelections events/{eventId}/markets/{marketId}/selections/
		/// </summary>
		/// <param name="eventId">The event ID to retrieve information for.</param>
		/// <param name="marketId">The market id to retrieve information for</param>
		/// <param name="ids">A comma-separated list of selectionIds</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <param name="selectionStatus">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="selectionChannel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="selectionPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <returns>Success</returns>
		public async Task<SelectionsWrapper> GetSelectionsAsync(string eventId, string marketId, string[] ids, string[] fields, string[] include, string[] exclude, string culture, string selectionStatus, string selectionChannel, string selectionPublished)
		{
			var requestUri = "events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/markets/"+ (marketId==null? "" : System.Uri.EscapeDataString(marketId))+"/selections/&"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture))+"&selectionStatus=" + (selectionStatus==null? "" : System.Uri.EscapeDataString(selectionStatus))+"&selectionChannel=" + (selectionChannel==null? "" : System.Uri.EscapeDataString(selectionChannel))+"&selectionPublished=" + (selectionPublished==null? "" : System.Uri.EscapeDataString(selectionPublished));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SelectionsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all sports
		/// Gets a list of all sports
		/// GetSports sports/
		/// </summary>
		/// <param name="sort">The field to order the response by, followed by the order. For example: name,desc</param>
		/// <param name="offset">Skip over a number of elements by specifying a start value for the query</param>
		/// <param name="isPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="limit">Specify the number of results to return</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <returns>Success</returns>
		public async Task<SportsWrapper> GetSportsAsync(string sort, int offset, string isPublished, int limit, string[] fields, string[] include, string[] exclude, string culture)
		{
			var requestUri = "sports/?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&isPublished=" + (isPublished==null? "" : System.Uri.EscapeDataString(isPublished))+"&limit="+limit+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SportsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of classes for a given sport id.
		/// Retrieves a list of classes for a given sport id.
		/// GetClassesForSport sports/{sportId}/classes/
		/// </summary>
		/// <param name="sportId">The sport id to retrieve information for.</param>
		/// <param name="isPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="displayed">Specify whether to return displayed entities or not</param>
		/// <param name="channel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="status">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="sort">The field to order the response by, followed by the order. For example: name,desc</param>
		/// <param name="offset">Skip over a number of elements by specifying a start value for the query</param>
		/// <param name="limit">Specify the number of results to return</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <returns>Success</returns>
		public async Task<ClassesWrapper> GetClassesForSportAsync(string sportId, string isPublished, string[] fields, string[] include, string[] exclude, string displayed, string channel, string status, string sort, int offset, int limit, string culture)
		{
			var requestUri = "sports/"+ (sportId==null? "" : System.Uri.EscapeDataString(sportId))+"/classes/&isPublished=" + (isPublished==null? "" : System.Uri.EscapeDataString(isPublished))+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&displayed=" + (displayed==null? "" : System.Uri.EscapeDataString(displayed))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassesWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of competitions for a given sport id.
		/// Retrieves a list of competitions for a given sport id.
		/// GetCompetitionsForSport sports/{sportId}/competitions/
		/// </summary>
		/// <param name="sportId">The sport id to retrieve information for.</param>
		/// <param name="isPublished">Specify whether only active entities should be returned, according to the William Hill definition of active</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="displayed">Specify whether to return displayed entities or not</param>
		/// <param name="channel">Specify a channel filter and only results from that channel will be returned</param>
		/// <param name="status">Specify a status to filter results by. This is currently A (active) or S (suspended)</param>
		/// <param name="sort">The field to order the response by, followed by the order. For example: name,desc</param>
		/// <param name="offset">Skip over a number of elements by specifying a start value for the query</param>
		/// <param name="limit">Specify the number of results to return</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <returns>Success</returns>
		public async Task<CompetitionsWrapper> GetCompetitionsForSportAsync(string sportId, string isPublished, string[] fields, string[] include, string[] exclude, string displayed, string channel, string status, string sort, int offset, int limit, string culture)
		{
			var requestUri = "sports/"+ (sportId==null? "" : System.Uri.EscapeDataString(sportId))+"/competitions/&isPublished=" + (isPublished==null? "" : System.Uri.EscapeDataString(isPublished))+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&displayed=" + (displayed==null? "" : System.Uri.EscapeDataString(displayed))+"&channel=" + (channel==null? "" : System.Uri.EscapeDataString(channel))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompetitionsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a weighted list of Selections.
		/// Retrieves a weighted list of Selections.
		/// GetTopBets topbets/
		/// </summary>
		/// <param name="sportIds">A comma-separated list of sportsIds for which to retrieve topBets for</param>
		/// <param name="competitionIds">A comma-separated list of competitionIds for which to retrieve topBets for</param>
		/// <param name="limit">Specify the number of results to return</param>
		/// <param name="fields">Specify an absolute field list to return (Comma-Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma-Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma-Separated List)</param>
		/// <param name="param_topBetEventId">The event ID to retrieve top bet information for. Multiple events up to 5 may be used</param>
		/// <param name="sortName">The market sort code used to further filter event results. Please note this can only be used with event id(s).</param>
		/// <param name="culture">Code used to return responses in language other than English, acceptable values are de-DE|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <param name="Locale">Code used to select a set of top bets settings, default is "whapi" which allows events set in far future to be included, setting the value to "en-GB" will activate english sportsbook settings, mirroring top bets on the website, which restricts events returned to those taking place in next 36 hours. Acceptable values (not all heve their own settings - if none currently available for that locale - en-GB will be used) are de-DE|whapi|en-GB|es-ES|fr-FR|nn-NO|fi-FI|ru-RU|pt-PT|hu-HU|sl-SL|ga-IE|en-CA|sr-Latn|sv-SE|el=GR|zh-CHS|it-IT|zh-CHT|cs-CZ|de-AT|ja-JP|pl-PL|da-DK|ro-RO|nl-NL|tr-TR</param>
		/// <returns>Success</returns>
		public async Task<TopBetsWrapper> GetTopBetsAsync(string[] sportIds, string[] competitionIds, int limit, string[] fields, string[] include, string[] exclude, string param_topBetEventId, string sortName, string culture, string Locale)
		{
			var requestUri = "topbets/?"+string.Join("&", sportIds.Select(z => $"sportIds={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", competitionIds.Select(z => $"competitionIds={System.Uri.EscapeDataString(z.ToString())}"))+"&limit="+limit+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&param_topBetEventId=" + (param_topBetEventId==null? "" : System.Uri.EscapeDataString(param_topBetEventId))+"&sortName=" + (sortName==null? "" : System.Uri.EscapeDataString(sortName))+"&culture=" + (culture==null? "" : System.Uri.EscapeDataString(culture))+"&Locale=" + (Locale==null? "" : System.Uri.EscapeDataString(Locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TopBetsWrapper>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
