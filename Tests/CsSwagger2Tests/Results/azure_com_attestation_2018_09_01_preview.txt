//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AttestationPolicy
	{
		
		/// <summary>
		/// String-encoded attestation policy document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	/// <summary>
	/// An error response from Attestation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from Attestation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from Attestation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for displaying in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves the OpenID Configuration data for the Azure Attestation Service
		/// Retrieves metadata about the attestation signing keys in use by the  attestation service
		/// MetadataConfiguration_Get .well-known/openid-configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> MetadataConfiguration_GetAsync()
		{
			var requestUri = ".well-known/openid-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the OpenID Configuration data for the Azure Attestation Service
		/// Retrieves attestation signing keys in use by the attestation service
		/// Certs_Get certs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> Certs_GetAsync()
		{
			var requestUri = "certs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the current policy for a given kind of TEE.
		/// Policy_Get operations/policy/current
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="tee">Specifies the trusted execution environment to be used to validate the evidence</param>
		/// <returns>Success</returns>
		public async Task<AttestationPolicy> Policy_GetAsync(Policy_GetApi_version api_version, Policy_GetTee tee)
		{
			var requestUri = "operations/policy/current?api-version=" + api_version+"&tee=" + tee;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AttestationPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Policy_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-09-01-preview")]
		_2018Minus09Minus01Minuspreview = 0,
	}
	
	public enum Policy_GetTee
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SgxEnclave = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpenEnclave = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CyResComponent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureGuest = 3,
	}
	
	public enum Policy_SetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-09-01-preview")]
		_2018Minus09Minus01Minuspreview = 0,
	}
	
	public enum Policy_ResetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-09-01-preview")]
		_2018Minus09Minus01Minuspreview = 0,
	}
	
	public enum Policy_PrepareToSetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-09-01-preview")]
		_2018Minus09Minus01Minuspreview = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
