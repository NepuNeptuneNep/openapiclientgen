//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This endpoint returns contract history from FPDS for a specific vendor
		/// <p>This endpoint returns contract history from FPDS for a specific vendor. The vendor's DUNS number is a required parameter. You can also filter contracts by their NAICS code to find contracts relevant to a particular category.</p>
		/// List_Contracts_GET api/contracts/
		/// </summary>
		/// <param name="duns">A 9-digit DUNS number that uniquely identifies a vendor (required).</param>
		/// <param name="naics">a six digit NAICS code used to filter by contracts with a certain NAICS</param>
		/// <param name="sort">a field to sort on. Choices are date, status, agency, and amount</param>
		/// <param name="direction">The sort direction of the results. Choices are asc or desc.</param>
		/// <param name="page">the page to start on. Results are paginated in increments of 100. Begins at page=1.</param>
		/// <returns>No response was specified</returns>
		public async Task List_Contracts_GETAsync(string duns, string naics, string sort, string direction, string page)
		{
			var requestUri = "api/contracts/?duns=" + (duns==null? "" : System.Uri.EscapeDataString(duns))+"&naics=" + (naics==null? "" : System.Uri.EscapeDataString(naics))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&direction=" + (direction==null? "" : System.Uri.EscapeDataString(direction))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This endpoint returns metadata for the most recent data loads of SAM and FPDS data
		/// <p>This endpoint returns metadata for the most recent data loads of SAM and FPDS data. It takes no parameters.</p>
		/// Metadata_GET api/metadata/
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task Metadata_GETAsync()
		{
			var requestUri = "api/metadata/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This endpoint lists all of the NAICS codes that are relevant to the OASIS family of vehicles
		/// <p>This endpoint lists all of the NAICS codes that are relevant to the OASIS family of vehicles. It takes no parameters.</p>
		/// List_Naics_GET api/naics/
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task List_Naics_GETAsync()
		{
			var requestUri = "api/naics/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This endpoint returns a single vendor by their 9 digit DUNS number
		/// <p>This endpoint returns a single vendor by their 9 digit DUNS number. DUNS numbers can be looked up in the <a href="https://www.sam.gov">System for Award Management</a> by vendor name.</p>
		/// Get_Vendor_GET api/vendor/{duns}
		/// </summary>
		/// <param name="duns">a nine digit DUNS number that uniquely identifies the vendor (required)</param>
		/// <returns>No response was specified</returns>
		public async Task Get_Vendor_GETAsync(string duns)
		{
			var requestUri = "api/vendor/"+ (duns==null? "" : System.Uri.EscapeDataString(duns));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This endpoint returns a list of vendors filtered by a NAICS code
		/// <p>This endpoint returns a list of vendors filtered by a NAICS code. The NAICS code maps to an OASIS pool and is used to retrieve vendors in that pool only.</p>
		/// <p>OASIS pools are groupings of NAICS codes that have the same small business size standard. Because contracts solicited to OASIS vendors can only be issued to one pool, much of the data is presented as part of a pool grouping. Using the NAICS code is a shortcut, so that you don't have to explicitly map the NAICS code to a pool in OASIS yourself.</p>
		/// <p>Vendors can also be filtered by a particular setaside. Valid values for the setasides are two-character codes which include:</p>
		/// <ul>
		/// <li>A6 (8(a))</li>
		/// <li>XX (Hubzone)</li>
		/// <li>QF (service disabled veteran owned)</li>
		/// <li>A2 (women owned)</li>
		/// <li>A5 (veteran owned)</li>
		/// <li>27 (small disadvantaged business).</li>
		/// </ul>
		/// List_Vendors_GET api/vendors/
		/// </summary>
		/// <param name="naics">a six digit NAICS code (required)</param>
		/// <param name="setasides">a comma delimited list of two character setaside codes to filter by.  Ex. setasides=A6,A5  will filter by 8a and veteran owned business.</param>
		/// <param name="vehicle">Choices are either oasis or oasissb. Will filter vendors by their presence in either the OASIS unrestricted vehicle or the OASIS Small Business vehicle.</param>
		/// <returns>No response was specified</returns>
		public async Task List_Vendors_GETAsync(string naics, string[] setasides, string vehicle)
		{
			var requestUri = "api/vendors/?naics=" + (naics==null? "" : System.Uri.EscapeDataString(naics))+"&"+string.Join("&", setasides.Select(z => $"setasides={System.Uri.EscapeDataString(z.ToString())}"))+"&vehicle=" + (vehicle==null? "" : System.Uri.EscapeDataString(vehicle));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
