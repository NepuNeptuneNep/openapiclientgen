//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Album
	{
		
		/// <summary>
		/// The type of the album: one of 'album', 'single', or 'compilation'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="album_type")]
		public string Album_type { get; set; }
		
		/// <summary>
		/// The artists of the album. Each artist object includes a link in href to more detailed information about the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public Artist[] Artists { get; set; }
		
		/// <summary>
		/// The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// The copyright statements of the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyrights")]
		public AlbumCopyrights[] AlbumCopyrights { get; set; }
		
		/// <summary>
		/// Known external IDs for this album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_ids")]
		public System.Collections.Generic.Dictionary<string, string> External_ids { get; set; }
		
		/// <summary>
		/// Known external URLs for this album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// A list of the genres used to classify the album. For example: 'Prog Rock', 'Post-Grunge'. (If not yet classified, the array is empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genres")]
		public string[] Genres { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cover art for the album in various sizes, widest first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// The name of the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album's individual tracks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="popularity")]
		public System.Nullable<System.Int32> Popularity { get; set; }
		
		/// <summary>
		/// The date the album was first released, for example '1981-12-15'. Depending on the precision, it might be shown as '1981' or '1981-12'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release_date")]
		public string Release_date { get; set; }
		
		/// <summary>
		/// The precision with which release_date value is known: 'year', 'month', or 'day'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release_date_precision")]
		public string Release_date_precision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public Track_simple_page Tracks { get; set; }
		
		/// <summary>
		/// The object type: 'album'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Artist
	{
		
		/// <summary>
		/// Known external URLs for this artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// Information about the followers of the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public Followers Followers { get; set; }
		
		/// <summary>
		/// A list of the genres the artist is associated with. For example: 'Prog Rock', 'Post-Grunge'. (If not yet classified, the array is empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genres")]
		public string[] Genres { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Images of the artist in various sizes, widest first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// The name of the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="popularity")]
		public System.Nullable<System.Int32> Popularity { get; set; }
		
		/// <summary>
		/// The object type: 'artist'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Information about the followers of the artist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Followers
	{
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the followers; null if not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The total number of followers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		/// <summary>
		/// The image height in pixels. If unknown: null or not returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The source URL of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The image width in pixels. If unknown: null or not returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class AlbumCopyrights
	{
		
		/// <summary>
		/// The copyright text for this album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The type of copyright: C = the copyright, P = the sound recording (performance) copyright.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Track_simple_page
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Track_simple[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Track_simple
	{
		
		/// <summary>
		/// The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public Artist_simple[] Artists { get; set; }
		
		/// <summary>
		/// A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// The disc number (usually 1 unless the album consists of more than one disc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disc_number")]
		public System.Nullable<System.Int32> Disc_number { get; set; }
		
		/// <summary>
		/// The track length in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_ms")]
		public System.Nullable<System.Int32> Duration_ms { get; set; }
		
		/// <summary>
		/// Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public System.Nullable<System.Boolean> Explicit { get; set; }
		
		/// <summary>
		/// Known external URLs for this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_playable")]
		public System.Nullable<System.Boolean> Is_playable { get; set; }
		
		/// <summary>
		/// Part of the response when Track Relinking is applied, and the requested track has been replaced with different track. The track in the linked_from object contains information about the originally requested track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linked_from")]
		public Track_simpleLinked_from Linked_from { get; set; }
		
		/// <summary>
		/// The name of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A URL to a 30 second preview (MP3 format) of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_url")]
		public string Preview_url { get; set; }
		
		/// <summary>
		/// The number of the track. If an album has several discs, the track number is the number on the specified disc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_number")]
		public System.Nullable<System.Int32> Track_number { get; set; }
		
		/// <summary>
		/// The object type: 'track'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Artist_simple
	{
		
		/// <summary>
		/// Known external URLs for this artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The object type: 'artist'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class Track_simpleLinked_from
	{
		
		/// <summary>
		/// Known external URLs for this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The object type: 'track'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Album_simple
	{
		
		/// <summary>
		/// The type of the album: one of 'album', 'single', or 'compilation'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="album_type")]
		public string Album_type { get; set; }
		
		/// <summary>
		/// The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// Known external URLs for this album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cover art for the album in various sizes, widest first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// The name of the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The object type: 'album'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Album_simple_page
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Album_simple[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Album_track_page
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Track_simple[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning full details of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icons")]
		public Image[] Icons { get; set; }
		
		/// <summary>
		/// The Spotify category ID of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Category_page
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Category[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Current_user_profile
	{
		
		/// <summary>
		/// The user's date-of-birth. This field is only available when the current user has granted access to the user-read-birthdate scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthdate")]
		public string Birthdate { get; set; }
		
		/// <summary>
		/// The country of the user, as set in the user's account profile. An ISO 3166-1 alpha-2 country code. This field is only available when the current user has granted access to the user-read-private scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The name displayed on the user's profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The user's email address, as entered by the user when creating their account. This email address is unverified; there is no proof that it actually belongs to the user. This field is only available when the current user has granted access to the user-read-email scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Known external URLs for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// Information about the followers of the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public Followers Followers { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The user's Spotify subscription level: 'premium', 'free', etc. (The subscription level 'open' can be considered the same as 'free'.) This field is only available when the current user has granted access to the user-read-private scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// The object type: 'user'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Featured_playlists
	{
		
		/// <summary>
		/// A sentence describing the context for the featured playlists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="playlists")]
		public Playlist_simple_page Playlists { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Playlist_simple_page
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Playlist_simple[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Playlist_simple
	{
		
		/// <summary>
		/// True if the owner allows other users to modify the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collaborative")]
		public System.Nullable<System.Boolean> Collaborative { get; set; }
		
		/// <summary>
		/// Known external URLs for this album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cover art for the album in various sizes, widest first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// The name of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public User_profile Owner { get; set; }
		
		/// <summary>
		/// The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshot_id")]
		public string Snapshot_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public Playlist_simpleTracks Tracks { get; set; }
		
		/// <summary>
		/// The object type: 'playlist'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Spotify URI of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class User_profile
	{
		
		/// <summary>
		/// The name displayed on the user's profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Known external URLs for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// Information about the followers of the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public Followers Followers { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The object type: 'user'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class Playlist_simpleTracks
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The total number of tracks available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Playlist
	{
		
		/// <summary>
		/// True if the owner allows other users to modify the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collaborative")]
		public System.Nullable<System.Boolean> Collaborative { get; set; }
		
		/// <summary>
		/// The playlist description. Only returned for modified, verified playlists, otherwise null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Known external URLs for this album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// Information about the followers of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public PlaylistFollowers Followers { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cover art for the album in various sizes, widest first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// The name of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public User_profile Owner { get; set; }
		
		/// <summary>
		/// The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshot_id")]
		public string Snapshot_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public Playlist_track_page Tracks { get; set; }
		
		/// <summary>
		/// The object type: 'playlist'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Spotify URI of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class PlaylistFollowers
	{
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the followers; null if not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The total number of followers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Playlist_track_page
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Playlist_track[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Playlist_track
	{
		
		/// <summary>
		/// The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_at")]
		public string Added_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="added_by")]
		public User_profile Added_by { get; set; }
		
		/// <summary>
		/// Whether this track is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_local")]
		public System.Nullable<System.Boolean> Is_local { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="track")]
		public Track Track { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Track
	{
		
		[System.Runtime.Serialization.DataMember(Name="album")]
		public Album_simple Album { get; set; }
		
		/// <summary>
		/// The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public Artist_simple[] Artists { get; set; }
		
		/// <summary>
		/// A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// The disc number (usually 1 unless the album consists of more than one disc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disc_number")]
		public System.Nullable<System.Int32> Disc_number { get; set; }
		
		/// <summary>
		/// The track length in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_ms")]
		public System.Nullable<System.Int32> Duration_ms { get; set; }
		
		/// <summary>
		/// Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public System.Nullable<System.Boolean> Explicit { get; set; }
		
		/// <summary>
		/// Known external IDs for the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_ids")]
		public System.Collections.Generic.Dictionary<string, string> External_ids { get; set; }
		
		/// <summary>
		/// Known external URLs for this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_playable")]
		public System.Nullable<System.Boolean> Is_playable { get; set; }
		
		/// <summary>
		/// Part of the response when Track Relinking is applied, and the requested track has been replaced with different track. The track in the linked_from object contains information about the originally requested track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linked_from")]
		public TrackLinked_from Linked_from { get; set; }
		
		/// <summary>
		/// The name of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A URL to a 30 second preview (MP3 format) of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_url")]
		public string Preview_url { get; set; }
		
		/// <summary>
		/// The number of the track. If an album has several discs, the track number is the number on the specified disc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_number")]
		public System.Nullable<System.Int32> Track_number { get; set; }
		
		/// <summary>
		/// The object type: 'track'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class TrackLinked_from
	{
		
		/// <summary>
		/// Known external URLs for this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public System.Collections.Generic.Dictionary<string, string> External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The Spotify ID for the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The object type: 'track'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Playlist_snapshot
	{
		
		/// <summary>
		/// The version identifier for the modified playlist. Can be supplied in other requests to target a specific playlist version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshot_id")]
		public string Snapshot_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Saved_track
	{
		
		/// <summary>
		/// The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_at")]
		public string Added_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="track")]
		public Track Track { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Saved_track_page
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Saved_track[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Search
	{
		
		/// <summary>
		/// Present if the type of search includes 'album'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="albums")]
		public SearchAlbums Albums { get; set; }
		
		/// <summary>
		/// Present if the type of search includes 'artist'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public SearchArtists Artists { get; set; }
		
		/// <summary>
		/// Present if the type of search includes 'track'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public SearchTracks Tracks { get; set; }
	}
	
	public class SearchAlbums
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Album_simple[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class SearchArtists
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Artist[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class SearchTracks
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Track[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class User_followed
	{
		
		/// <summary>
		/// Present if the type of followe items is 'artist'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public User_followedArtists Artists { get; set; }
	}
	
	public class User_followedArtists
	{
		
		/// <summary>
		/// The cursors used to find the next set of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public User_followedArtistsCursor Cursor { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The requested data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Artist[] Items { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. (null if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class User_followedArtistsCursor
	{
		
		/// <summary>
		/// The cursor to use as key to find the next page of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="after")]
		public string After { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/)
		/// 
		/// AlbumsGetByIdsAndMarket albums
		/// </summary>
		/// <param name="ids">A comma-separated list of IDs</param>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<AlbumsGetByIdsAndMarketReturn> AlbumsGetByIdsAndMarketAsync(string ids, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "albums?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlbumsGetByIdsAndMarketReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get an Album](https://developer.spotify.com/web-api/get-album/)
		/// 
		/// Albums_idGetByMarket albums/{id}
		/// </summary>
		/// <param name="id">The Spotify ID for the album</param>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<Album> Albums_idGetByMarketAsync(string id, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "albums/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Album>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/)
		/// 
		/// Albums_idTracksGetByLimitAndOffsetAndMarket albums/{id}/tracks
		/// </summary>
		/// <param name="id">The Spotify ID for the album</param>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<Track_simple_page> Albums_idTracksGetByLimitAndOffsetAndMarketAsync(string id, int limit, int offset, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "albums/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tracks&limit="+limit+"&offset="+offset+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Track_simple_page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/)
		/// 
		/// ArtistsGetByIds artists
		/// </summary>
		/// <param name="ids">A comma-separated list of IDs</param>
		/// <returns>OK</returns>
		public async Task<ArtistsGetByIdsReturn> ArtistsGetByIdsAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtistsGetByIdsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get an Artist](https://developer.spotify.com/web-api/get-artist/)
		/// 
		/// Artists_idGet artists/{id}
		/// </summary>
		/// <param name="id">The Spotify ID for the artist</param>
		/// <returns>OK</returns>
		public async Task<Artist> Artists_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artist>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/)
		/// 
		/// Artists_idAlbumsGetByLimitAndOffsetAndAlbum_typeAndMarket artists/{id}/albums
		/// </summary>
		/// <param name="id">The Spotify ID for the artist</param>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="album_type">Filter by album types</param>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<Album_simple_page> Artists_idAlbumsGetByLimitAndOffsetAndAlbum_typeAndMarketAsync(string id, int limit, int offset, string album_type, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/albums&limit="+limit+"&offset="+offset+"&album_type=" + (album_type==null? "" : System.Uri.EscapeDataString(album_type))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Album_simple_page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/)
		/// 
		/// Artists_idRelated_artistsGet artists/{id}/related-artists
		/// </summary>
		/// <param name="id">The Spotify ID for the artist</param>
		/// <returns>OK</returns>
		public async Task<Artists_idRelated_artistsGetReturn> Artists_idRelated_artistsGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/related-artists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artists_idRelated_artistsGetReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/)
		/// 
		/// Artists_idTop_tracksGetByCountry artists/{id}/top-tracks
		/// </summary>
		/// <param name="id">The Spotify ID for the artist</param>
		/// <param name="country">The country (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<Artists_idTop_tracksGetByCountryReturn> Artists_idTop_tracksGetByCountryAsync(string id, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/top-tracks&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artists_idTop_tracksGetByCountryReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/)
		/// 
		/// BrowseCategoriesGetByLimitAndOffsetAndCountryAndLocale browse/categories
		/// </summary>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="country">The country (an ISO 3166-1 alpha-2 country code)</param>
		/// <param name="locale">The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
		///</param>
		/// <returns>OK</returns>
		public async Task<Category_page> BrowseCategoriesGetByLimitAndOffsetAndCountryAndLocaleAsync(int limit, int offset, string country, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/categories?limit="+limit+"&offset="+offset+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Category_page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/)
		/// 
		/// BrowseCategories_category_idGetByCountryAndLocale browse/categories/{category_id}
		/// </summary>
		/// <param name="category_id">The Spotify ID of the category you wish to fetch.</param>
		/// <param name="country">The country (an ISO 3166-1 alpha-2 country code)</param>
		/// <param name="locale">The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
		///</param>
		/// <returns>OK</returns>
		public async Task<Category> BrowseCategories_category_idGetByCountryAndLocaleAsync(string category_id, string country, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Category>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a Category's playlists](https://developer.spotify.com/web-api/get-categorys-playlists/)
		/// 
		/// BrowseCategories_category_idPlaylistsGetByLimitAndOffsetAndCountry browse/categories/{category_id}/playlists
		/// </summary>
		/// <param name="category_id">The Spotify ID of the category you wish to fetch.</param>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="country">The country (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<BrowseCategories_category_idPlaylistsGetByLimitAndOffsetAndCountryReturn> BrowseCategories_category_idPlaylistsGetByLimitAndOffsetAndCountryAsync(string category_id, int limit, int offset, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id))+"/playlists&limit="+limit+"&offset="+offset+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BrowseCategories_category_idPlaylistsGetByLimitAndOffsetAndCountryReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/)
		/// 
		/// BrowseFeatured_playlistsGetByLimitAndOffsetAndCountryAndLocaleAndTimestamp browse/featured-playlists
		/// </summary>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="country">The country (an ISO 3166-1 alpha-2 country code)</param>
		/// <param name="locale">The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
		///</param>
		/// <param name="timestamp">A timestamp in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss) with the user's local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: "2014-10-23T09:00:00" for a user whose local time is 9AM.
		///</param>
		/// <returns>OK</returns>
		public async Task<Featured_playlists> BrowseFeatured_playlistsGetByLimitAndOffsetAndCountryAndLocaleAndTimestampAsync(int limit, int offset, string country, string locale, string timestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/featured-playlists?limit="+limit+"&offset="+offset+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Featured_playlists>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/)
		/// 
		/// BrowseNew_releasesGetByLimitAndOffsetAndCountry browse/new-releases
		/// </summary>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="country">The country (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<Album_simple_page> BrowseNew_releasesGetByLimitAndOffsetAndCountryAsync(int limit, int offset, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/new-releases?limit="+limit+"&offset="+offset+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Album_simple_page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/)
		/// 
		/// MeGet me
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Current_user_profile> MeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Current_user_profile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/)
		/// 
		/// MeFollowingGetByTypeAndLimitAndAfter me/following
		/// </summary>
		/// <param name="type">The ID type, currently only artist is supported.</param>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="after">The last artist ID retrieved from the previous request.</param>
		/// <returns>OK</returns>
		public async Task<User_followed> MeFollowingGetByTypeAndLimitAndAfterAsync(MeFollowingGetByTypeAndLimitAndAfterType type, int limit, string after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following?type=" + type+"&limit="+limit+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User_followed>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/)
		/// 
		/// MeFollowingPutByTypeAndIds me/following
		/// </summary>
		/// <param name="type">The type to follow.</param>
		/// <param name="ids">A comma-separated list of the artists or users ids</param>
		public async Task MeFollowingPutByTypeAndIdsAsync(MeFollowingPutByTypeAndIdsType type, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following?type=" + type+"&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/)
		/// 
		/// MeFollowingDeleteByTypeAndIds me/following
		/// </summary>
		/// <param name="type">The type to unfollow.</param>
		/// <param name="ids">A comma-separated list of the artists or users ids</param>
		public async Task MeFollowingDeleteByTypeAndIdsAsync(MeFollowingPutByTypeAndIdsType type, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following?type=" + type+"&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/)
		/// 
		/// MeFollowingContainsGetByTypeAndIds me/following/contains
		/// </summary>
		/// <param name="type">The type to follow.</param>
		/// <param name="ids">A comma-separated string of the artists or users ids.</param>
		/// <returns>OK</returns>
		public async Task<bool[]> MeFollowingContainsGetByTypeAndIdsAsync(MeFollowingPutByTypeAndIdsType type, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following/contains?type=" + type+"&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/)
		/// 
		/// MeTracksGetByLimitAndOffsetAndMarket me/tracks
		/// </summary>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<Saved_track_page> MeTracksGetByLimitAndOffsetAndMarketAsync(int limit, int offset, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/tracks?limit="+limit+"&offset="+offset+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Saved_track_page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/)
		/// 
		/// MeTracksPutByIds me/tracks
		/// </summary>
		/// <param name="ids">A comma-separated list of IDs</param>
		/// <returns>OK</returns>
		public async Task MeTracksPutByIdsAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/tracks?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/)
		/// 
		/// MeTracksDeleteByIds me/tracks
		/// </summary>
		/// <param name="ids">A comma-separated list of IDs</param>
		/// <returns>OK</returns>
		public async Task MeTracksDeleteByIdsAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/tracks?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/)
		/// 
		/// MeTracksContainsGetByIds me/tracks/contains
		/// </summary>
		/// <param name="ids">A comma-separated list of IDs</param>
		/// <returns>OK</returns>
		public async Task<bool[]> MeTracksContainsGetByIdsAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/tracks/contains?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Search for an Item](https://developer.spotify.com/web-api/search-item/)
		/// 
		/// SearchGetByLimitAndOffsetAndQAndTypeAndMarket search
		/// </summary>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="q">The search query's keywords (and optional field filters). The search is not case-sensitive: 'roadhouse' will match 'Roadhouse', 'roadHouse', etc. Keywords will be matched in any order unless surrounded by quotes, thus q=roadhouse&20blues will match both 'Blues Roadhouse' and 'Roadhouse of the Blues'. Quotation marks can be used to limit the match to a phrase: q=roadhouse&20blues will match 'My Roadhouse Blues' but not 'Roadhouse of the Blues'. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q=album:gold%20artist:abba&type=album will search for albums with the text 'gold' in the album name and the text 'abba' in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q=damian%20genre:reggae-pop&type=artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist's name and/or description.</param>
		/// <param name="type">A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q=name:abacab&type=album,track will return both albums and tracks with "abacab" in their name.</param>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.</param>
		/// <returns>OK</returns>
		public async Task<Search> SearchGetByLimitAndOffsetAndQAndTypeAndMarketAsync(int limit, int offset, string q, string type, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search?limit="+limit+"&offset="+offset+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Search>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/)
		/// 
		/// TracksGetByIdsAndMarket tracks
		/// </summary>
		/// <param name="ids">A comma-separated list of IDs</param>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<TracksGetByIdsAndMarketReturn> TracksGetByIdsAndMarketAsync(string ids, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tracks?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TracksGetByIdsAndMarketReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a Track](https://developer.spotify.com/web-api/get-track/)
		/// 
		/// Tracks_idGetByMarket tracks/{id}
		/// </summary>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<Track> Tracks_idGetByMarketAsync(string id, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tracks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Track>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/)
		/// 
		/// Users_user_idGet users/{user_id}
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <returns>OK</returns>
		public async Task<User_profile> Users_user_idGetAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User_profile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/)
		/// 
		/// Users_user_idPlaylistsGetByLimitAndOffset users/{user_id}/playlists
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <returns>OK</returns>
		public async Task<Playlist_simple_page> Users_user_idPlaylistsGetByLimitAndOffsetAsync(string user_id, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Playlist_simple_page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/)
		/// 
		/// Users_user_idPlaylistsPost users/{user_id}/playlists
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		public async Task Users_user_idPlaylistsPostAsync(string user_id, Users_user_idPlaylistsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/)
		/// 
		/// Users_user_idPlaylists_playlist_idGetByFieldsAndMarket users/{user_id}/playlists/{playlist_id}
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="playlist_id">The Spotify playlist ID.</param>
		/// <param name="fields">A comma-separated list of fields to filter query</param>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<Playlist> Users_user_idPlaylists_playlist_idGetByFieldsAndMarketAsync(string user_id, string playlist_id, string fields, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Playlist>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/)
		/// 
		/// Users_user_idPlaylists_playlist_idPut users/{user_id}/playlists/{playlist_id}
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="playlist_id">The Spotify playlist ID.</param>
		/// <returns>OK</returns>
		public async Task Users_user_idPlaylists_playlist_idPutAsync(string user_id, string playlist_id, Users_user_idPlaylists_playlist_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/)
		/// 
		/// Users_user_idPlaylists_playlist_idFollowersPut users/{user_id}/playlists/{playlist_id}/followers
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="playlist_id">The Spotify playlist ID.</param>
		/// <returns>OK</returns>
		public async Task Users_user_idPlaylists_playlist_idFollowersPutAsync(string user_id, string playlist_id, Users_user_idPlaylists_playlist_idFollowersPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/followers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/)
		/// 
		/// Users_user_idPlaylists_playlist_idFollowersDelete users/{user_id}/playlists/{playlist_id}/followers
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="playlist_id">The Spotify playlist ID.</param>
		/// <returns>OK</returns>
		public async Task Users_user_idPlaylists_playlist_idFollowersDeleteAsync(string user_id, string playlist_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/followers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/)
		/// 
		/// Users_user_idPlaylists_playlist_idFollowersContainsGetByIds users/{user_id}/playlists/{playlist_id}/followers/contains
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="playlist_id">The Spotify playlist ID.</param>
		/// <param name="ids">A comma-separated list of users ids</param>
		/// <returns>OK</returns>
		public async Task<bool[]> Users_user_idPlaylists_playlist_idFollowersContainsGetByIdsAsync(string user_id, string playlist_id, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/followers/contains&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/)
		/// 
		/// Users_user_idPlaylists_playlist_idTracksGetByLimitAndOffsetAndFieldsAndMarket users/{user_id}/playlists/{playlist_id}/tracks
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="playlist_id">The Spotify playlist ID.</param>
		/// <param name="limit">The maximum number of items to return
		/// Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">The index of the first item to return</param>
		/// <param name="fields">A comma-separated list of fields to filter query</param>
		/// <param name="market">The market (an ISO 3166-1 alpha-2 country code)</param>
		/// <returns>OK</returns>
		public async Task<Playlist_track_page> Users_user_idPlaylists_playlist_idTracksGetByLimitAndOffsetAndFieldsAndMarketAsync(string user_id, string playlist_id, int limit, int offset, string fields, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/tracks&limit="+limit+"&offset="+offset+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Playlist_track_page>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Reorder or replace a Playlist's Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/)
		/// 
		/// Users_user_idPlaylists_playlist_idTracksPut users/{user_id}/playlists/{playlist_id}/tracks
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="playlist_id">The Spotify playlist ID.</param>
		/// <returns>OK</returns>
		public async Task<Playlist_snapshot> Users_user_idPlaylists_playlist_idTracksPutAsync(string user_id, string playlist_id, Users_user_idPlaylists_playlist_idTracksPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/tracks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Playlist_snapshot>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/)
		/// 
		/// Users_user_idPlaylists_playlist_idTracksPostByPositionAndUris users/{user_id}/playlists/{playlist_id}/tracks
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="playlist_id">The Spotify playlist ID.</param>
		/// <param name="position">The position to insert the tracks, a zero-based index</param>
		/// <param name="uris">A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.</param>
		/// <returns>OK</returns>
		public async Task<Playlist_snapshot> Users_user_idPlaylists_playlist_idTracksPostByPositionAndUrisAsync(string user_id, string playlist_id, int position, string uris, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/tracks&position="+position+"&uris=" + (uris==null? "" : System.Uri.EscapeDataString(uris));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Playlist_snapshot>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/)
		/// 
		/// Users_user_idPlaylists_playlist_idTracksDelete users/{user_id}/playlists/{playlist_id}/tracks
		/// </summary>
		/// <param name="user_id">The user's Spotify user ID.</param>
		/// <param name="playlist_id">The Spotify playlist ID.</param>
		/// <returns>OK</returns>
		public async Task<Playlist_snapshot> Users_user_idPlaylists_playlist_idTracksDeleteAsync(string user_id, string playlist_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/tracks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Playlist_snapshot>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AlbumsGetByIdsAndMarketReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="albums")]
		public Album[] Albums { get; set; }
	}
	
	public class ArtistsGetByIdsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public Artist[] Artists { get; set; }
	}
	
	public class Artists_idRelated_artistsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public Artist[] Artists { get; set; }
	}
	
	public class Artists_idTop_tracksGetByCountryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public Track[] Tracks { get; set; }
	}
	
	public class BrowseCategories_category_idPlaylistsGetByLimitAndOffsetAndCountryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="playlists")]
		public Playlist_simple_page Playlists { get; set; }
	}
	
	public enum MeFollowingGetByTypeAndLimitAndAfterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		artist = 0,
	}
	
	public enum MeFollowingPutByTypeAndIdsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		artist = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 1,
	}
	
	public class TracksGetByIdsAndMarketReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public Track[] Tracks { get; set; }
	}
	
	public class Users_user_idPlaylistsPostPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
	}
	
	public class Users_user_idPlaylists_playlist_idPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
	}
	
	public class Users_user_idPlaylists_playlist_idFollowersPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
	}
	
	public class Users_user_idPlaylists_playlist_idTracksPutPutBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uris")]
		public string[] Uris { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
