//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A custom alert rule that checks if a value (depends on the custom alert type) is allowed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AllowlistCustomAlertRule
	{
		
		/// <summary>
		/// The values to allow. The format of the values depends on the rule type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowlistValues")]
		public string[] AllowlistValues { get; set; }
		
		/// <summary>
		/// The type of the custom alert rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleType")]
		public System.Nullable<AllowlistCustomAlertRuleRuleType> RuleType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AllowlistCustomAlertRuleRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConnectionToIpNotAllowed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocalUserNotAllowed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProcessNotAllowed = 2,
	}
	
	/// <summary>
	/// A custom alert rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomAlertRule
	{
		
		/// <summary>
		/// The description of the custom alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name of the custom alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Status of the custom alert.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// The type of the custom alert rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleType")]
		public string RuleType { get; set; }
	}
	
	/// <summary>
	/// A custom alert rule that checks if a value (depends on the custom alert type) is denied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DenylistCustomAlertRule
	{
		
		/// <summary>
		/// The values to deny. The format of the values depends on the rule type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="denylistValues")]
		public string[] DenylistValues { get; set; }
	}
	
	/// <summary>
	/// The device security group resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceSecurityGroup
	{
		
		/// <summary>
		/// describes properties of a security group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DeviceSecurityGroupProperties Properties { get; set; }
	}
	
	/// <summary>
	/// describes properties of a security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceSecurityGroupProperties
	{
		
		/// <summary>
		/// The allow-list custom alert rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowlistRules")]
		public AllowlistCustomAlertRule[] AllowlistRules { get; set; }
		
		/// <summary>
		/// The deny-list custom alert rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="denylistRules")]
		public DenylistCustomAlertRule[] DenylistRules { get; set; }
		
		/// <summary>
		/// The list of custom alert threshold rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thresholdRules")]
		public ThresholdCustomAlertRule[] ThresholdRules { get; set; }
		
		/// <summary>
		/// The list of custom alert time-window rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeWindowRules")]
		public TimeWindowCustomAlertRule[] TimeWindowRules { get; set; }
	}
	
	/// <summary>
	/// A custom alert rule that checks if a value (depends on the custom alert type) is within the given range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ThresholdCustomAlertRule
	{
		
		/// <summary>
		/// The maximum threshold.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxThreshold")]
		public int MaxThreshold { get; set; }
		
		/// <summary>
		/// The minimum threshold.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minThreshold")]
		public int MinThreshold { get; set; }
	}
	
	/// <summary>
	/// A custom alert rule that checks if the number of activities (depends on the custom alert type) in a time window is within the given range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TimeWindowCustomAlertRule
	{
		
		/// <summary>
		/// The type of the custom alert rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleType")]
		public System.Nullable<TimeWindowCustomAlertRuleRuleType> RuleType { get; set; }
		
		/// <summary>
		/// The time window size in iso8601 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeWindowSize")]
		public string TimeWindowSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TimeWindowCustomAlertRuleRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActiveConnectionsNotInAllowedRange = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AmqpC2DMessagesNotInAllowedRange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MqttC2DMessagesNotInAllowedRange = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HttpC2DMessagesNotInAllowedRange = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AmqpC2DRejectedMessagesNotInAllowedRange = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MqttC2DRejectedMessagesNotInAllowedRange = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HttpC2DRejectedMessagesNotInAllowedRange = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AmqpD2CMessagesNotInAllowedRange = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MqttD2CMessagesNotInAllowedRange = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HttpD2CMessagesNotInAllowedRange = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DirectMethodInvokesNotInAllowedRange = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedLocalLoginsNotInAllowedRange = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FileUploadsNotInAllowedRange = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QueuePurgesNotInAllowedRange = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwinUpdatesNotInAllowedRange = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnauthorizedOperationsNotInAllowedRange = 15,
	}
	
	/// <summary>
	/// List of device security groups
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeviceSecurityGroupList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of device security group objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DeviceSecurityGroup[] Value { get; set; }
	}
	
	/// <summary>
	/// A List custom alert rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListCustomAlertRule
	{
		
		/// <summary>
		/// The value type of the items in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public System.Nullable<ListCustomAlertRuleValueType> ValueType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ListCustomAlertRuleValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IpCidr = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Use this method get the list of device security groups for the specified IoT Hub resource.
		/// DeviceSecurityGroups_List {resourceId}/providers/Microsoft.Security/deviceSecurityGroups
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="resourceId">The identifier of the resource.</param>
		/// <returns>OK</returns>
		public async Task<DeviceSecurityGroupList> DeviceSecurityGroups_ListAsync(string api_version, string resourceId)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/providers/Microsoft.Security/deviceSecurityGroups?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeviceSecurityGroupList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to get the device security group for the specified IoT Hub resource.
		/// DeviceSecurityGroups_Get {resourceId}/providers/Microsoft.Security/deviceSecurityGroups/{deviceSecurityGroupName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="resourceId">The identifier of the resource.</param>
		/// <param name="deviceSecurityGroupName">The name of the device security group. Note that the name of the device security group is case insensitive.</param>
		/// <returns>Successful request to get device security group.</returns>
		public async Task<DeviceSecurityGroup> DeviceSecurityGroups_GetAsync(string api_version, string resourceId, string deviceSecurityGroupName)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/providers/Microsoft.Security/deviceSecurityGroups/"+ (deviceSecurityGroupName==null? "" : System.Uri.EscapeDataString(deviceSecurityGroupName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeviceSecurityGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this method to creates or updates the device security group on a specified IoT Hub resource.
		/// DeviceSecurityGroups_CreateOrUpdate {resourceId}/providers/Microsoft.Security/deviceSecurityGroups/{deviceSecurityGroupName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="resourceId">The identifier of the resource.</param>
		/// <param name="deviceSecurityGroupName">The name of the device security group. Note that the name of the device security group is case insensitive.</param>
		/// <param name="requestBody">Security group object.</param>
		/// <returns>Security group was updated.</returns>
		public async Task<DeviceSecurityGroup> DeviceSecurityGroups_CreateOrUpdateAsync(string api_version, string resourceId, string deviceSecurityGroupName, DeviceSecurityGroup requestBody)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/providers/Microsoft.Security/deviceSecurityGroups/"+ (deviceSecurityGroupName==null? "" : System.Uri.EscapeDataString(deviceSecurityGroupName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeviceSecurityGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User this method to deletes the device security group.
		/// DeviceSecurityGroups_Delete {resourceId}/providers/Microsoft.Security/deviceSecurityGroups/{deviceSecurityGroupName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="resourceId">The identifier of the resource.</param>
		/// <param name="deviceSecurityGroupName">The name of the device security group. Note that the name of the device security group is case insensitive.</param>
		/// <returns>Device security group has been deleted.</returns>
		public async Task DeviceSecurityGroups_DeleteAsync(string api_version, string resourceId, string deviceSecurityGroupName)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/providers/Microsoft.Security/deviceSecurityGroups/"+ (deviceSecurityGroupName==null? "" : System.Uri.EscapeDataString(deviceSecurityGroupName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
