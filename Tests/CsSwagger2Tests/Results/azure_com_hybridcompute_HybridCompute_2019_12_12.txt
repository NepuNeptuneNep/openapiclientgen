//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetail
	{
		
		/// <summary>
		/// The error's code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Additional error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDetail[] Details { get; set; }
		
		/// <summary>
		/// A human readable error message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Indicates which property in the request is responsible for the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
	}
	
	public class Machine
	{
	}
	
	public class MachineExtension
	{
	}
	
	/// <summary>
	/// Describes the Machine Extension Instance View.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineExtensionInstanceView
	{
		
		/// <summary>
		/// The machine extension name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Instance view status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public object Status { get; set; }
		
		/// <summary>
		/// Specifies the type of the extension; an example is "CustomScriptExtension".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Specifies the version of the script handler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeHandlerVersion")]
		public string TypeHandlerVersion { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a Machine Extension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineExtensionProperties
	{
		
		/// <summary>
		/// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpgradeMinorVersion")]
		public System.Nullable<System.Boolean> AutoUpgradeMinorVersion { get; set; }
		
		/// <summary>
		/// How the extension handler should be forced to update even if the extension configuration has not changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceUpdateTag")]
		public string ForceUpdateTag { get; set; }
		
		/// <summary>
		/// The machine extension instance view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceView")]
		public MachineExtensionInstanceView InstanceView { get; set; }
		
		/// <summary>
		/// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectedSettings")]
		public string ProtectedSettings { get; set; }
		
		/// <summary>
		/// The provisioning state, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The name of the extension handler publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Json formatted public settings for the extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public string Settings { get; set; }
		
		/// <summary>
		/// Specifies the type of the extension; an example is "CustomScriptExtension".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Specifies the version of the script handler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeHandlerVersion")]
		public string TypeHandlerVersion { get; set; }
	}
	
	/// <summary>
	/// Describes a Machine Extension Update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineExtensionUpdate : UpdateResource
	{
		
		/// <summary>
		/// Describes Machine Extension Update Properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MachineExtensionUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a Machine Extension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineExtensionUpdateProperties
	{
		
		/// <summary>
		/// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpgradeMinorVersion")]
		public System.Nullable<System.Boolean> AutoUpgradeMinorVersion { get; set; }
		
		/// <summary>
		/// How the extension handler should be forced to update even if the extension configuration has not changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceUpdateTag")]
		public string ForceUpdateTag { get; set; }
		
		/// <summary>
		/// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectedSettings")]
		public string ProtectedSettings { get; set; }
		
		/// <summary>
		/// The name of the extension handler publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Json formatted public settings for the extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public string Settings { get; set; }
		
		/// <summary>
		/// Specifies the type of the extension; an example is "CustomScriptExtension".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Specifies the version of the script handler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeHandlerVersion")]
		public string TypeHandlerVersion { get; set; }
	}
	
	/// <summary>
	/// Describes the Machine Extensions List Result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineExtensionsListResult
	{
		
		/// <summary>
		/// The uri to fetch the next page of machine extensions. Call ListNext() with this to fetch the next page of extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of extensions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MachineExtension[] Value { get; set; }
	}
	
	/// <summary>
	/// The List hybrid machine operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineListResult
	{
		
		/// <summary>
		/// The URI to fetch the next page of Machines. Call ListNext() with this URI to fetch the next page of hybrid machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of hybrid machines.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Machine[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a hybrid machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineProperties
	{
		
		/// <summary>
		/// The hybrid machine agent full version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentVersion")]
		public string AgentVersion { get; set; }
		
		/// <summary>
		/// Public Key that the client provides to be used during initial resource onboarding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientPublicKey")]
		public string ClientPublicKey { get; set; }
		
		/// <summary>
		/// Specifies the hybrid machine display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Details about the error state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public ErrorDetail[] ErrorDetails { get; set; }
		
		/// <summary>
		/// Machine Extensions information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public MachineExtensionInstanceView[] Extensions { get; set; }
		
		/// <summary>
		/// The time of the last status change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastStatusChange")]
		public System.Nullable<System.DateTimeOffset> LastStatusChange { get; set; }
		
		/// <summary>
		/// Metadata pertaining to the geographic location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationData")]
		public MachinePropertiesLocationData LocationData { get; set; }
		
		/// <summary>
		/// Specifies the hybrid machine FQDN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineFqdn")]
		public string MachineFqdn { get; set; }
		
		/// <summary>
		/// The Operating System running on the hybrid machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osName")]
		public string OsName { get; set; }
		
		/// <summary>
		/// Specifies the operating system settings for the hybrid machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osProfile")]
		public OSProfile OsProfile { get; set; }
		
		/// <summary>
		/// The version of Operating System running on the hybrid machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		/// <summary>
		/// The provisioning state, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The status of the hybrid machine agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<MachinePropertiesStatus> Status { get; set; }
		
		/// <summary>
		/// Specifies the hybrid machine unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
	}
	
	public class MachinePropertiesLocationData
	{
		
		/// <summary>
		/// The city or locality where the resource is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country or region where the resource is located
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryOrRegion")]
		public string CountryOrRegion { get; set; }
		
		/// <summary>
		/// The district, state, or province where the resource is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		/// <summary>
		/// A canonical name for the geographic or physical location.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MachinePropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disconnected = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 2,
	}
	
	/// <summary>
	/// Describes a hybrid machine reconnect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineReconnect
	{
		
		/// <summary>
		/// Hybrid Compute Machine properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MachineReconnectProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes the properties required to reconnect a hybrid machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineReconnectProperties
	{
		
		/// <summary>
		/// Public Key that the client provides to be used during initial resource onboarding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientPublicKey")]
		public string ClientPublicKey { get; set; }
		
		/// <summary>
		/// Specifies the hybrid machine unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
	}
	
	/// <summary>
	/// Describes a hybrid machine Update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineUpdate : UpdateResource
	{
		
		/// <summary>
		/// Hybrid Compute Machine Managed Identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public object Identity { get; set; }
		
		/// <summary>
		/// Hybrid Compute Machine properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MachineUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes the ARM updatable properties of a hybrid machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineUpdateProperties
	{
		
		/// <summary>
		/// Metadata pertaining to the geographic location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationData")]
		public MachineUpdatePropertiesLocationData LocationData { get; set; }
	}
	
	public class MachineUpdatePropertiesLocationData
	{
		
		/// <summary>
		/// The city or locality where the resource is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country or region where the resource is located
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryOrRegion")]
		public string CountryOrRegion { get; set; }
		
		/// <summary>
		/// The district, state, or province where the resource is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		/// <summary>
		/// A canonical name for the geographic or physical location.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Specifies the operating system settings for the hybrid machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OSProfile
	{
		
		/// <summary>
		/// Specifies the host OS name of the hybrid machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computerName")]
		public string ComputerName { get; set; }
	}
	
	/// <summary>
	/// The List Compute Operation operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The list of compute operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationValue[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a Compute Operation value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationValue
	{
		
		/// <summary>
		/// Display properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationValueDisplay Display { get; set; }
		
		/// <summary>
		/// The name of the compute operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of the compute operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a Hybrid Compute Operation Value Display.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationValueDisplay
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name of the compute operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The resource provider for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The display name of the resource the operation applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The Update Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateResource
	{
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of hybrid compute operations.
		/// Operations_List providers/Microsoft.HybridCompute/operations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.HybridCompute/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the hybrid machines in the specified subscription. Use the nextLink property in the response to get the next page of hybrid machines.
		/// Machines_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/machines
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK</returns>
		public async Task<MachineListResult> Machines_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.HybridCompute/machines?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MachineListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the hybrid machines in the specified resource group. Use the nextLink property in the response to get the next page of hybrid machines.
		/// Machines_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <returns>OK</returns>
		public async Task<MachineListResult> Machines_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MachineListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the model view or the instance view of a hybrid machine.
		/// Machines_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the hybrid machine.</param>
		/// <param name="expand">The expand expression to apply on the operation.</param>
		/// <returns>OK</returns>
		public async Task<Machine> Machines_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string name, Machines_GetExpand expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + expand;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Machine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to create or update a hybrid machine resource identity in Azure.
		/// Machines_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the hybrid machine.</param>
		/// <param name="requestBody">Parameters supplied to the Create hybrid machine operation.</param>
		/// <returns>OK</returns>
		public async Task<Machine> Machines_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string name, Machine requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Machine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The operation to remove a hybrid machine identity in Azure.
		/// Machines_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the hybrid machine.</param>
		/// <returns>OK</returns>
		public async Task Machines_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string name)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to update a hybrid machine.
		/// Machines_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the hybrid machine.</param>
		/// <param name="requestBody">Parameters supplied to the Update hybrid machine operation.</param>
		/// <returns>OK</returns>
		public async Task<Machine> Machines_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string name, MachineUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Machine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The operation to get all extensions of a non-Azure machine
		/// MachineExtensions_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the machine containing the extension.</param>
		/// <param name="expand">The expand expression to apply on the operation.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK</returns>
		public async Task<MachineExtensionsListResult> MachineExtensions_ListAsync(string resourceGroupName, string name, string expand, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/extensions&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MachineExtensionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to get the extension.
		/// MachineExtensions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the machine containing the extension.</param>
		/// <param name="extensionName">The name of the machine extension.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK</returns>
		public async Task<MachineExtension> MachineExtensions_GetAsync(string resourceGroupName, string name, string extensionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/extensions/"+ (extensionName==null? "" : System.Uri.EscapeDataString(extensionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MachineExtension>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to create or update the extension.
		/// MachineExtensions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the machine where the extension should be created or updated.</param>
		/// <param name="extensionName">The name of the machine extension.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters supplied to the Create Machine Extension operation.</param>
		/// <returns>OK</returns>
		public async Task<MachineExtension> MachineExtensions_CreateOrUpdateAsync(string resourceGroupName, string name, string extensionName, string api_version, string subscriptionId, MachineExtension requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/extensions/"+ (extensionName==null? "" : System.Uri.EscapeDataString(extensionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MachineExtension>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The operation to delete the extension.
		/// MachineExtensions_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the machine where the extension should be deleted.</param>
		/// <param name="extensionName">The name of the machine extension.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK</returns>
		public async Task MachineExtensions_DeleteAsync(string resourceGroupName, string name, string extensionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/extensions/"+ (extensionName==null? "" : System.Uri.EscapeDataString(extensionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to create or update the extension.
		/// MachineExtensions_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the machine where the extension should be created or updated.</param>
		/// <param name="extensionName">The name of the machine extension.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters supplied to the Create Machine Extension operation.</param>
		/// <returns>OK</returns>
		public async Task<MachineExtension> MachineExtensions_UpdateAsync(string resourceGroupName, string name, string extensionName, string api_version, string subscriptionId, MachineExtensionUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/extensions/"+ (extensionName==null? "" : System.Uri.EscapeDataString(extensionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MachineExtension>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The operation to reconnect a hybrid machine resource to its identity in Azure.
		/// Machines_Reconnect subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/reconnect
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="name">The name of the hybrid machine.</param>
		/// <param name="requestBody">Parameters supplied to the Reconnect hybrid machine operation.</param>
		/// <returns>OK</returns>
		public async Task<Machine> Machines_ReconnectAsync(string api_version, string subscriptionId, string resourceGroupName, string name, MachineReconnect requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HybridCompute/machines/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/reconnect?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Machine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Machines_GetExpand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instanceView = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
