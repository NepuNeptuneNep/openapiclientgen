//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ApplicationInfoDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public System.Collections.Generic.Dictionary<string, bool> Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AuthenticateModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rememberClient")]
		public System.Nullable<System.Boolean> RememberClient { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userNameOrEmailAddress")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string UserNameOrEmailAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AuthenticateResultModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptedAccessToken")]
		public string EncryptedAccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expireInSeconds")]
		public System.Nullable<System.Int32> ExpireInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BaseServices
	{
		
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ServiceCategory Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public int CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geoDetails")]
		public GeoDetails GeoDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ServiceImages[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainImage")]
		public string MainImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Boolean> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ServiceCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseServices")]
		public BaseServices[] BaseServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ServiceCategory[] Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class GeoDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseServices")]
		public BaseServices BaseServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public System.Nullable<System.Double> Lng { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="place")]
		public string Place { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="province")]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public System.Nullable<System.Int64> ServiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ServiceImages
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alt")]
		public string Alt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseServices")]
		public BaseServices BaseServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMain")]
		public System.Nullable<System.Boolean> IsMain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public System.Nullable<System.Int64> ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Boolean> State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thumbUrl")]
		public string ThumbUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessFailedCount")]
		public System.Nullable<System.Int32> AccessFailedCount { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationSource")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string AuthenticationSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claims")]
		public UserClaim[] Claims { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrencyStamp")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConcurrencyStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorUser")]
		public User CreatorUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorUserId")]
		public System.Nullable<System.Int64> CreatorUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleterUser")]
		public User DeleterUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleterUserId")]
		public System.Nullable<System.Int64> DeleterUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletionTime")]
		public System.Nullable<System.DateTimeOffset> DeletionTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 328
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailConfirmationCode")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(328)]
		public string EmailConfirmationCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public System.Nullable<System.DateTimeOffset> ExpireTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEmailConfirmed")]
		public System.Nullable<System.Boolean> IsEmailConfirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLockoutEnabled")]
		public System.Nullable<System.Boolean> IsLockoutEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPhoneNumberConfirmed")]
		public System.Nullable<System.Boolean> IsPhoneNumberConfirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTwoFactorEnabled")]
		public System.Nullable<System.Boolean> IsTwoFactorEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModificationTime")]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifierUser")]
		public User LastModifierUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifierUserId")]
		public System.Nullable<System.Int64> LastModifierUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lockoutEndDateUtc")]
		public System.Nullable<System.DateTimeOffset> LockoutEndDateUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logins")]
		public UserLogin[] Logins { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normalizedEmailAddress")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string NormalizedEmailAddress { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normalizedUserName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string NormalizedUserName { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Password { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 328
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordResetCode")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(328)]
		public string PasswordResetCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public UserPermissionSetting[] Permissions { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public UserRole[] Roles { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityStamp")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string SecurityStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public Setting[] Settings { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="surname")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Surname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public System.Nullable<System.Int32> TenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokens")]
		public UserToken[] Tokens { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserClaim
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claimType")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ClaimType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claimValue")]
		public string ClaimValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorUserId")]
		public System.Nullable<System.Int64> CreatorUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public System.Nullable<System.Int32> TenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserLogin
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loginProvider")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LoginProvider { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="providerKey")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ProviderKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public System.Nullable<System.Int32> TenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserPermissionSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorUserId")]
		public System.Nullable<System.Int64> CreatorUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isGranted")]
		public System.Nullable<System.Boolean> IsGranted { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public System.Nullable<System.Int32> TenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserRole
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorUserId")]
		public System.Nullable<System.Int64> CreatorUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public System.Nullable<System.Int32> RoleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public System.Nullable<System.Int32> TenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Setting
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorUserId")]
		public System.Nullable<System.Int64> CreatorUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModificationTime")]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifierUserId")]
		public System.Nullable<System.Int64> LastModifierUserId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public System.Nullable<System.Int32> TenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="expireDate")]
		public System.Nullable<System.DateTimeOffset> ExpireDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginProvider")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LoginProvider { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public System.Nullable<System.Int32> TenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ChangePasswordDto
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentPassword")]
		public string CurrentPassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ChangeUiThemeInput
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="theme")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Theme { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ChangeUserLanguageDto
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="languageName")]
		public string LanguageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CityDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ConfirmCodeDto
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public int Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreateRoleDto
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grantedPermissions")]
		public string[] GrantedPermissions { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="normalizedName")]
		public string NormalizedName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreateTenantDto
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adminEmailAddress")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string AdminEmailAddress { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ConnectionString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_-]{1,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tenancyName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z][a-zA-Z0-9_-]{1,}$")]
		public string TenancyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreateUserDto
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreateWeddingVendorDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="base64Images")]
		public ImageData[] Base64Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public int CategoryId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public System.Nullable<System.Double> Lng { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainImage")]
		public string MainImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceFacilities")]
		public int[] ServiceFacilities { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 3
		/// Max length: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ImageData
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public string FileType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMain")]
		public System.Nullable<System.Boolean> IsMain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ExternalAuthenticateModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authProvider")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string AuthProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="providerAccessCode")]
		public string ProviderAccessCode { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="providerKey")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ProviderKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ExternalAuthenticateResultModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptedAccessToken")]
		public string EncryptedAccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expireInSeconds")]
		public System.Nullable<System.Int32> ExpireInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waitingForActivation")]
		public System.Nullable<System.Boolean> WaitingForActivation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ExternalLoginProviderInfoModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class FlatPermissionDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class GeoDetailsCreateDto
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public double Lng { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public long ServiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class GeoDetailsDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="area")]
		public string Area { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class GeoDetailsUpdateDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public double Lng { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public long ServiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class GetCurrentLoginInformationsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="application")]
		public ApplicationInfoDto Application { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenant")]
		public TenantLoginInfoDto Tenant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserLoginInfoDto User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TenantLoginInfoDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenancyName")]
		public string TenancyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserLoginInfoDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class GetRoleForEditOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="grantedPermissionNames")]
		public string[] GrantedPermissionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public FlatPermissionDto[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public RoleEditDto Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RoleEditDto
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isStatic")]
		public System.Nullable<System.Boolean> IsStatic { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class IsTenantAvailableInput
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tenancyName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string TenancyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class IsTenantAvailableOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<IsTenantAvailableOutputState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public System.Nullable<System.Int32> TenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum IsTenantAvailableOutputState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ListResultDto_PermissionDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PermissionDto[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PermissionDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ListResultDto_RoleDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoleDto[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RoleDto
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grantedPermissions")]
		public string[] GrantedPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="normalizedName")]
		public string NormalizedName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ListResultDto_RoleListDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoleListDto[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RoleListDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isStatic")]
		public System.Nullable<System.Boolean> IsStatic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class LoginModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public string MobileNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PagedResultDto_GeoDetailsDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GeoDetailsDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PagedResultDto_RoleDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoleDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PagedResultDto_ServiceCategoryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ServiceCategoryDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ServiceCategoryDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ServiceCategoryDto[] Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PagedResultDto_ServiceFacilityDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ServiceFacilityDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ServiceFacilityDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PagedResultDto_TenantDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TenantDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class TenantDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_-]{1,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tenancyName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z][a-zA-Z0-9_-]{1,}$")]
		public string TenancyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PagedResultDto_UserDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public System.Nullable<System.DateTimeOffset> ExpireTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isExist")]
		public System.Nullable<System.Boolean> IsExist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastLoginTime")]
		public System.Nullable<System.DateTimeOffset> LastLoginTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleNames")]
		public string[] RoleNames { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="surname")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Surname { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PagedResultDto_WeddingVendorDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public WeddingVendorDto[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WeddingVendorDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public System.Nullable<System.Int32> CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainImage")]
		public string MainImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userDto")]
		public UserDto UserDto { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ProhibitPermissionInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionName")]
		public string PermissionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ProvinceDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RegisterInput
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RegisterOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="canLogin")]
		public System.Nullable<System.Boolean> CanLogin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ResetPasswordDto
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adminPassword")]
		public string AdminPassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public long UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ServiceCategoryUpdateDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ServiceCategoryDto[] Children { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public ServiceCategoryDto Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ServiceCategroyCreateDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public ServiceCategoryDto Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ServiceFacilityCreateDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ServiceFacilityUpdateDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ServiceListModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facilityDtos")]
		public ServiceFacilityDto[] FacilityDtos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceType")]
		public System.Nullable<ServiceListModelPriceType> PriceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Int32> Rate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ServiceListModelPriceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UpdateWeddingVendorDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="base64Images")]
		public ImageData[] Base64Images { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public int CategoryId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facilityDtos")]
		public ServiceFacilityDto[] FacilityDtos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public System.Nullable<System.Double> Lng { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainImage")]
		public string MainImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 3
		/// Max length: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserServicesDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="mainImage")]
		public string MainImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public System.Nullable<System.Int64> ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Boolean> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ApiServiceQueryGetGetByCurrentPageAndPageSizeAndSorting_PropertyNameAndSorting_OrderByDescending api/ServiceQuery/Get
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PagedResultDto_WeddingVendorDto> ApiServiceQueryGetGetByCurrentPageAndPageSizeAndSorting_PropertyNameAndSorting_OrderByDescendingAsync(int CurrentPage, int PageSize, string Sorting_PropertyName, bool Sorting_OrderByDescending, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ServiceQuery/Get?CurrentPage="+CurrentPage+"&PageSize="+PageSize+"&Sorting.PropertyName=" + (Sorting_PropertyName==null? "" : System.Uri.EscapeDataString(Sorting_PropertyName))+"&Sorting.OrderByDescending="+Sorting_OrderByDescending;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedResultDto_WeddingVendorDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServiceQuerySearchGetByCityAndCatgoryIdAndPageNumber api/ServiceQuery/Search
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceListModel[]> ApiServiceQuerySearchGetByCityAndCatgoryIdAndPageNumberAsync(string City, int CatgoryId, int PageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ServiceQuery/Search?City=" + (City==null? "" : System.Uri.EscapeDataString(City))+"&CatgoryId="+CatgoryId+"&PageNumber="+PageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceListModel[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServiceQueryUserServiceGetByServiceId api/ServiceQuery/UserService
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateWeddingVendorDto> ApiServiceQueryUserServiceGetByServiceIdAsync(long serviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ServiceQuery/UserService?serviceId="+serviceId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateWeddingVendorDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServiceQueryUserServicesGetByUserId api/ServiceQuery/UserServices
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserServicesDto[]> ApiServiceQueryUserServicesGetByUserIdAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ServiceQuery/UserServices?userId="+userId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserServicesDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiTokenAuthAuthenticatePost api/TokenAuth/Authenticate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AuthenticateResultModel> ApiTokenAuthAuthenticatePostAsync(AuthenticateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TokenAuth/Authenticate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthenticateResultModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiTokenAuthExternalAuthenticatePost api/TokenAuth/ExternalAuthenticate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExternalAuthenticateResultModel> ApiTokenAuthExternalAuthenticatePostAsync(ExternalAuthenticateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TokenAuth/ExternalAuthenticate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExternalAuthenticateResultModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiTokenAuthGetExternalAuthenticationProvidersGet api/TokenAuth/GetExternalAuthenticationProviders
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExternalLoginProviderInfoModel[]> ApiTokenAuthGetExternalAuthenticationProvidersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TokenAuth/GetExternalAuthenticationProviders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExternalLoginProviderInfoModel[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiTokenAuthLoginPost api/TokenAuth/Login
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AuthenticateResultModel> ApiTokenAuthLoginPostAsync(LoginModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TokenAuth/Login";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthenticateResultModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiTokenAuthRefreshTokenGetByUserName api/TokenAuth/RefreshToken
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AuthenticateResultModel> ApiTokenAuthRefreshTokenGetByUserNameAsync(string userName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TokenAuth/RefreshToken?userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthenticateResultModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppAccountIsTenantAvailablePost api/services/app/Account/IsTenantAvailable
		/// </summary>
		/// <returns>Success</returns>
		public async Task<IsTenantAvailableOutput> ApiServicesAppAccountIsTenantAvailablePostAsync(IsTenantAvailableInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Account/IsTenantAvailable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IsTenantAvailableOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppAccountRegisterPost api/services/app/Account/Register
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterOutput> ApiServicesAppAccountRegisterPostAsync(RegisterInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Account/Register";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RegisterOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppAddressServicesCreatePost api/services/app/AddressServices/Create
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GeoDetailsDto> ApiServicesAppAddressServicesCreatePostAsync(GeoDetailsCreateDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/AddressServices/Create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GeoDetailsDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppAddressServicesDeleteDeleteById api/services/app/AddressServices/Delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppAddressServicesDeleteDeleteByIdAsync(long Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/AddressServices/Delete?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppAddressServicesGetGetById api/services/app/AddressServices/Get
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GeoDetailsDto> ApiServicesAppAddressServicesGetGetByIdAsync(long Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/AddressServices/Get?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GeoDetailsDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppAddressServicesGetAllGetBySortingAndSkipCountAndMaxResultCount api/services/app/AddressServices/GetAll
		/// </summary>
		/// <param name="SkipCount">Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="MaxResultCount">Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task<PagedResultDto_GeoDetailsDto> ApiServicesAppAddressServicesGetAllGetBySortingAndSkipCountAndMaxResultCountAsync(string Sorting, int SkipCount, int MaxResultCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/AddressServices/GetAll?Sorting=" + (Sorting==null? "" : System.Uri.EscapeDataString(Sorting))+"&SkipCount="+SkipCount+"&MaxResultCount="+MaxResultCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedResultDto_GeoDetailsDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppAddressServicesGetCitiesGetByProvinceId api/services/app/AddressServices/GetCities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CityDto[]> ApiServicesAppAddressServicesGetCitiesGetByProvinceIdAsync(int provinceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/AddressServices/GetCities?provinceId="+provinceId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CityDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppAddressServicesGetProvinceGet api/services/app/AddressServices/GetProvince
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProvinceDto[]> ApiServicesAppAddressServicesGetProvinceGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/AddressServices/GetProvince";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProvinceDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppAddressServicesUpdatePut api/services/app/AddressServices/Update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GeoDetailsDto> ApiServicesAppAddressServicesUpdatePutAsync(GeoDetailsUpdateDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/AddressServices/Update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GeoDetailsDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppCategoryServiceCreatePost api/services/app/CategoryService/Create
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceCategoryDto> ApiServicesAppCategoryServiceCreatePostAsync(ServiceCategroyCreateDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/CategoryService/Create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCategoryDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppCategoryServiceDeleteDeleteById api/services/app/CategoryService/Delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppCategoryServiceDeleteDeleteByIdAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/CategoryService/Delete?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppCategoryServiceGetGetById api/services/app/CategoryService/Get
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceCategoryDto> ApiServicesAppCategoryServiceGetGetByIdAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/CategoryService/Get?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCategoryDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppCategoryServiceGetAllGetByTotalCountAndItems api/services/app/CategoryService/GetAll
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PagedResultDto_ServiceCategoryDto> ApiServicesAppCategoryServiceGetAllGetByTotalCountAndItemsAsync(int TotalCount, string[] Items, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/CategoryService/GetAll?TotalCount="+TotalCount+"&"+string.Join("&", Items.Select(z => $"Items={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedResultDto_ServiceCategoryDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppCategoryServiceGetByIdGetById api/services/app/CategoryService/GetById
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceCategory> ApiServicesAppCategoryServiceGetByIdGetByIdAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/CategoryService/GetById?id="+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCategory>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppCategoryServiceGetByNameGetByTitle api/services/app/CategoryService/GetByName
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceCategoryDto> ApiServicesAppCategoryServiceGetByNameGetByTitleAsync(string title, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/CategoryService/GetByName?title=" + (title==null? "" : System.Uri.EscapeDataString(title));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCategoryDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppCategoryServiceGetCategoriesGet api/services/app/CategoryService/GetCategories
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceCategoryDto[]> ApiServicesAppCategoryServiceGetCategoriesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/CategoryService/GetCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCategoryDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppCategoryServiceUpdatePut api/services/app/CategoryService/Update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceCategoryDto> ApiServicesAppCategoryServiceUpdatePutAsync(ServiceCategoryUpdateDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/CategoryService/Update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceCategoryDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppConfigurationChangeUiThemePost api/services/app/Configuration/ChangeUiTheme
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppConfigurationChangeUiThemePostAsync(ChangeUiThemeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Configuration/ChangeUiTheme";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppRoleCreatePost api/services/app/Role/Create
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RoleDto> ApiServicesAppRoleCreatePostAsync(CreateRoleDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Role/Create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppRoleDeleteDeleteById api/services/app/Role/Delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppRoleDeleteDeleteByIdAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Role/Delete?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppRoleGetGetById api/services/app/Role/Get
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RoleDto> ApiServicesAppRoleGetGetByIdAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Role/Get?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppRoleGetAllGetByKeywordAndSkipCountAndMaxResultCount api/services/app/Role/GetAll
		/// </summary>
		/// <param name="SkipCount">Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="MaxResultCount">Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task<PagedResultDto_RoleDto> ApiServicesAppRoleGetAllGetByKeywordAndSkipCountAndMaxResultCountAsync(string Keyword, int SkipCount, int MaxResultCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Role/GetAll?Keyword=" + (Keyword==null? "" : System.Uri.EscapeDataString(Keyword))+"&SkipCount="+SkipCount+"&MaxResultCount="+MaxResultCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedResultDto_RoleDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppRoleGetAllPermissionsGet api/services/app/Role/GetAllPermissions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListResultDto_PermissionDto> ApiServicesAppRoleGetAllPermissionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Role/GetAllPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResultDto_PermissionDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppRoleGetRoleForEditGetById api/services/app/Role/GetRoleForEdit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRoleForEditOutput> ApiServicesAppRoleGetRoleForEditGetByIdAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Role/GetRoleForEdit?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRoleForEditOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppRoleGetRolesAsyncGetByPermission api/services/app/Role/GetRolesAsync
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListResultDto_RoleListDto> ApiServicesAppRoleGetRolesAsyncGetByPermissionAsync(string Permission, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Role/GetRolesAsync?Permission=" + (Permission==null? "" : System.Uri.EscapeDataString(Permission));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResultDto_RoleListDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppRoleUpdatePut api/services/app/Role/Update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RoleDto> ApiServicesAppRoleUpdatePutAsync(RoleDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Role/Update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppServiceFacilityServiceCreatePost api/services/app/ServiceFacilityService/Create
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceFacilityDto> ApiServicesAppServiceFacilityServiceCreatePostAsync(ServiceFacilityCreateDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/ServiceFacilityService/Create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceFacilityDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppServiceFacilityServiceDeleteDeleteById api/services/app/ServiceFacilityService/Delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppServiceFacilityServiceDeleteDeleteByIdAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/ServiceFacilityService/Delete?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppServiceFacilityServiceGetGetById api/services/app/ServiceFacilityService/Get
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceFacilityDto> ApiServicesAppServiceFacilityServiceGetGetByIdAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/ServiceFacilityService/Get?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceFacilityDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppServiceFacilityServiceGetAllGetByInput api/services/app/ServiceFacilityService/GetAll
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PagedResultDto_ServiceFacilityDto> ApiServicesAppServiceFacilityServiceGetAllGetByInputAsync(string[] input, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/ServiceFacilityService/GetAll?"+string.Join("&", input.Select(z => $"input={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedResultDto_ServiceFacilityDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppServiceFacilityServiceGetFacilitiesGet api/services/app/ServiceFacilityService/GetFacilities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceFacilityDto[]> ApiServicesAppServiceFacilityServiceGetFacilitiesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/ServiceFacilityService/GetFacilities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceFacilityDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppServiceFacilityServiceGetServiceFacilityGetByFacilities api/services/app/ServiceFacilityService/GetServiceFacility
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceFacilityDto[]> ApiServicesAppServiceFacilityServiceGetServiceFacilityGetByFacilitiesAsync(int[] facilities, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/ServiceFacilityService/GetServiceFacility?"+string.Join("&", facilities.Select(z => $"facilities={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceFacilityDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppServiceFacilityServiceUpdatePut api/services/app/ServiceFacilityService/Update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ServiceFacilityDto> ApiServicesAppServiceFacilityServiceUpdatePutAsync(ServiceFacilityUpdateDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/ServiceFacilityService/Update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceFacilityDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppSessionGetCurrentLoginInformationsGet api/services/app/Session/GetCurrentLoginInformations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCurrentLoginInformationsOutput> ApiServicesAppSessionGetCurrentLoginInformationsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Session/GetCurrentLoginInformations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCurrentLoginInformationsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppTenantCreatePost api/services/app/Tenant/Create
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TenantDto> ApiServicesAppTenantCreatePostAsync(CreateTenantDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Tenant/Create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TenantDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppTenantDeleteDeleteById api/services/app/Tenant/Delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppTenantDeleteDeleteByIdAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Tenant/Delete?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppTenantGetGetById api/services/app/Tenant/Get
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TenantDto> ApiServicesAppTenantGetGetByIdAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Tenant/Get?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TenantDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppTenantGetAllGetByKeywordAndIsActiveAndSkipCountAndMaxResultCount api/services/app/Tenant/GetAll
		/// </summary>
		/// <param name="SkipCount">Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="MaxResultCount">Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task<PagedResultDto_TenantDto> ApiServicesAppTenantGetAllGetByKeywordAndIsActiveAndSkipCountAndMaxResultCountAsync(string Keyword, bool IsActive, int SkipCount, int MaxResultCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Tenant/GetAll?Keyword=" + (Keyword==null? "" : System.Uri.EscapeDataString(Keyword))+"&IsActive="+IsActive+"&SkipCount="+SkipCount+"&MaxResultCount="+MaxResultCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedResultDto_TenantDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppTenantUpdatePut api/services/app/Tenant/Update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TenantDto> ApiServicesAppTenantUpdatePutAsync(TenantDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/Tenant/Update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TenantDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserAddManagerToUserRolesPost api/services/app/User/AddManagerToUserRoles
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppUserAddManagerToUserRolesPostAsync(User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/AddManagerToUserRoles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserChangeLanguagePost api/services/app/User/ChangeLanguage
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppUserChangeLanguagePostAsync(ChangeUserLanguageDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/ChangeLanguage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserChangePasswordPost api/services/app/User/ChangePassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<bool> ApiServicesAppUserChangePasswordPostAsync(ChangePasswordDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/ChangePassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserConfrimCodePost api/services/app/User/ConfrimCode
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppUserConfrimCodePostAsync(ConfirmCodeDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/ConfrimCode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserCreatePost api/services/app/User/Create
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserDto> ApiServicesAppUserCreatePostAsync(CreateUserDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/Create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserDeleteDeleteById api/services/app/User/Delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppUserDeleteDeleteByIdAsync(long Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/Delete?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserGetGetById api/services/app/User/Get
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserDto> ApiServicesAppUserGetGetByIdAsync(long Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/Get?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserGetAllGetByKeywordAndIsActiveAndSkipCountAndMaxResultCount api/services/app/User/GetAll
		/// </summary>
		/// <param name="SkipCount">Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="MaxResultCount">Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task<PagedResultDto_UserDto> ApiServicesAppUserGetAllGetByKeywordAndIsActiveAndSkipCountAndMaxResultCountAsync(string Keyword, bool IsActive, int SkipCount, int MaxResultCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/GetAll?Keyword=" + (Keyword==null? "" : System.Uri.EscapeDataString(Keyword))+"&IsActive="+IsActive+"&SkipCount="+SkipCount+"&MaxResultCount="+MaxResultCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedResultDto_UserDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserGetRolesGet api/services/app/User/GetRoles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListResultDto_RoleDto> ApiServicesAppUserGetRolesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/GetRoles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResultDto_RoleDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserGetToEntityGetByUserId api/services/app/User/GetToEntity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<User> ApiServicesAppUserGetToEntityGetByUserIdAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/GetToEntity?userId="+userId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserProhibitPermissionPost api/services/app/User/ProhibitPermission
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppUserProhibitPermissionPostAsync(ProhibitPermissionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/ProhibitPermission";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserResetPasswordPost api/services/app/User/ResetPassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<bool> ApiServicesAppUserResetPasswordPostAsync(ResetPasswordDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/ResetPassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppUserUpdatePut api/services/app/User/Update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserDto> ApiServicesAppUserUpdatePutAsync(UserDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/User/Update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppWeddingVendorServicesCreatePost api/services/app/WeddingVendorServices/Create
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WeddingVendorDto> ApiServicesAppWeddingVendorServicesCreatePostAsync(CreateWeddingVendorDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/WeddingVendorServices/Create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WeddingVendorDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppWeddingVendorServicesDeleteDeleteById api/services/app/WeddingVendorServices/Delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiServicesAppWeddingVendorServicesDeleteDeleteByIdAsync(long Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/WeddingVendorServices/Delete?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppWeddingVendorServicesGetGetById api/services/app/WeddingVendorServices/Get
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WeddingVendorDto> ApiServicesAppWeddingVendorServicesGetGetByIdAsync(long Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/WeddingVendorServices/Get?Id="+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WeddingVendorDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppWeddingVendorServicesGetAllGetBySortingAndSkipCountAndMaxResultCount api/services/app/WeddingVendorServices/GetAll
		/// </summary>
		/// <param name="SkipCount">Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="MaxResultCount">Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task<PagedResultDto_WeddingVendorDto> ApiServicesAppWeddingVendorServicesGetAllGetBySortingAndSkipCountAndMaxResultCountAsync(string Sorting, int SkipCount, int MaxResultCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/WeddingVendorServices/GetAll?Sorting=" + (Sorting==null? "" : System.Uri.EscapeDataString(Sorting))+"&SkipCount="+SkipCount+"&MaxResultCount="+MaxResultCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedResultDto_WeddingVendorDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ApiServicesAppWeddingVendorServicesUpdatePut api/services/app/WeddingVendorServices/Update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WeddingVendorDto> ApiServicesAppWeddingVendorServicesUpdatePutAsync(UpdateWeddingVendorDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/services/app/WeddingVendorServices/Update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WeddingVendorDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
