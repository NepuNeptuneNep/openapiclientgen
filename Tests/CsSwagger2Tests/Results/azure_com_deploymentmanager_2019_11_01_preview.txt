//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// ApiKey authentication gives a name and a value that can be included in either the request header or query parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiKeyAuthentication
	{
		
		/// <summary>
		/// The location of the authentication key/value pair in the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="in")]
		public ApiKeyAuthenticationIn In { get; set; }
		
		/// <summary>
		/// The key name of the authentication key/value pair.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the authentication key/value pair.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApiKeyAuthenticationIn
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Query = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Header = 1,
	}
	
	public class ArtifactSource
	{
	}
	
	/// <summary>
	/// The properties that define the source location where the artifacts are located.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactSourceProperties
	{
		
		/// <summary>
		/// The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactRoot")]
		public string ArtifactRoot { get; set; }
		
		/// <summary>
		/// Defines the authentication method and properties to access the artifacts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public Authentication Authentication { get; set; }
		
		/// <summary>
		/// The type of artifact source used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public string SourceType { get; set; }
	}
	
	/// <summary>
	/// Defines the authentication method and properties to access the artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Authentication
	{
		
		/// <summary>
		/// The authentication type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The error information object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// Detailed error information of any failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// Detailed error information of any failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// Error code string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// More detailed error information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// Descriptive error information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Error target
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The attributes for the health check step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HealthCheckStepAttributes
	{
		
		/// <summary>
		/// The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="healthyStateDuration")]
		public string HealthyStateDuration { get; set; }
		
		/// <summary>
		/// The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn't. Health check starts to enforce healthyStateDuration once resource becomes healthy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxElasticDuration")]
		public string MaxElasticDuration { get; set; }
		
		/// <summary>
		/// The type of health check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The duration in ISO 8601 format for which health check waits idly without any checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitDuration")]
		public string WaitDuration { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of a health check step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HealthCheckStepProperties
	{
		
		/// <summary>
		/// The attributes for the health check step.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public HealthCheckStepAttributes Attributes { get; set; }
	}
	
	/// <summary>
	/// Identity for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identity
	{
		
		/// <summary>
		/// The list of identities.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityIds")]
		public string[] IdentityIds { get; set; }
		
		/// <summary>
		/// The identity type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Supplementary contextual messages during a rollout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Message
	{
		
		/// <summary>
		/// The actual message text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message1 { get; set; }
		
		/// <summary>
		/// Time in UTC this message was provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
	}
	
	/// <summary>
	/// Represents an operation that can be performed on the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The detail about an operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDetail Display { get; set; }
		
		/// <summary>
		/// The name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The properties of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	/// <summary>
	/// The detail about an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDetail
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The name of the provider that supports the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource type on which this operation can be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The operations response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsList
	{
		
		/// <summary>
		/// Represents an operation that can be performed on the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation Value { get; set; }
	}
	
	/// <summary>
	/// The properties that define a step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrePostStep
	{
		
		/// <summary>
		/// The resource Id of the step to be run.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
	}
	
	/// <summary>
	/// Individual resource operation information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceOperation
	{
		
		/// <summary>
		/// Unique identifier of the operation. For ARM resources, this is the operationId obtained from ARM service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// State of the resource deployment. For ARM resources, this is the current provisioning state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Name of the resource as specified in the artifacts. For ARM resources, this is the name of the resource specified in the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Type of the resource as specified in the artifacts. For ARM resources, this is the type of the resource specified in the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Http status code of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public string StatusCode { get; set; }
		
		/// <summary>
		/// Descriptive information of the resource operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	/// <summary>
	/// A REST based health check
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestHealthCheck
	{
		
		/// <summary>
		/// A unique name for this check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties that make up a REST request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="request")]
		public RestRequest Request { get; set; }
		
		/// <summary>
		/// The properties that make up the expected REST response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public RestResponse Response { get; set; }
	}
	
	/// <summary>
	/// The properties that make up a REST request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestRequest
	{
		
		/// <summary>
		/// The authentication information required in the REST health check request to the health provider.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public RestRequestAuthentication Authentication { get; set; }
		
		/// <summary>
		/// The HTTP method to use for the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public RestRequestMethod Method { get; set; }
		
		/// <summary>
		/// The HTTP URI to use for the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The authentication information required in the REST health check request to the health provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestRequestAuthentication
	{
		
		/// <summary>
		/// The authentication type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public RestRequestAuthenticationType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RestRequestAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApiKey = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RolloutIdentity = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RestRequestMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 1,
	}
	
	/// <summary>
	/// The properties that make up the expected REST response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestResponse
	{
		
		/// <summary>
		/// The regular expressions to match the response content with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regex")]
		public RestResponseRegex Regex { get; set; }
		
		/// <summary>
		/// The HTTP status codes expected in a successful health check response. The response is expected to match one of the given status codes. If no expected status codes are provided, default expected status code is 200 OK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successStatusCodes")]
		public string[] SuccessStatusCodes { get; set; }
	}
	
	public class RestResponseRegex
	{
		
		/// <summary>
		/// Indicates whether any or all of the expressions should match with the response content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchQuantifier")]
		public System.Nullable<RestResponseRegexMatchQuantifier> MatchQuantifier { get; set; }
		
		/// <summary>
		/// The list of regular expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matches")]
		public string[] Matches { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RestResponseRegexMatchQuantifier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Any = 1,
	}
	
	/// <summary>
	/// Defines the REST health check step properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestHealthCheckStepAttributes
	{
		
		/// <summary>
		/// The parameters for the REST health check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RestParameters Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters for the REST health check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestParameters
	{
		
		/// <summary>
		/// The list of checks that form the health check step.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="healthChecks")]
		public RestHealthCheck[] HealthChecks { get; set; }
	}
	
	public class Rollout
	{
	}
	
	/// <summary>
	/// RolloutIdentity uses the user-assigned managed identity authentication context specified in the Identity property during rollout creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RolloutIdentityAuthentication
	{
	}
	
	/// <summary>
	/// Detailed runtime information of the rollout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RolloutOperationInfo
	{
		
		/// <summary>
		/// The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Detailed error information of any failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
		
		/// <summary>
		/// The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryAttempt")]
		public System.Nullable<System.Int32> RetryAttempt { get; set; }
		
		/// <summary>
		/// True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipSucceededOnRetry")]
		public System.Nullable<System.Boolean> SkipSucceededOnRetry { get; set; }
		
		/// <summary>
		/// The start time of the rollout in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of a rollout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RolloutProperties
	{
		
		/// <summary>
		/// Detailed runtime information of the rollout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationInfo")]
		public RolloutOperationInfo OperationInfo { get; set; }
		
		/// <summary>
		/// The detailed information on the services being deployed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Service[] Services { get; set; }
		
		/// <summary>
		/// The current status of the rollout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The cardinal count of total number of retries performed on the rollout at a given time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRetryAttempts")]
		public System.Nullable<System.Int32> TotalRetryAttempts { get; set; }
	}
	
	/// <summary>
	/// Defines a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Service : ServiceProperties
	{
		
		/// <summary>
		/// Name of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The detailed information about the units that make up the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceUnits")]
		public ServiceUnit[] ServiceUnits { get; set; }
	}
	
	/// <summary>
	/// Defines a service unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceUnit : ServiceUnitProperties
	{
		
		/// <summary>
		/// Name of the service unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Detailed step information, if present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public RolloutStep[] Steps { get; set; }
	}
	
	/// <summary>
	/// Defines a specific step on a target service unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RolloutStep
	{
		
		/// <summary>
		/// Supplementary informative messages during rollout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Name of the step.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Detailed information of a specific step run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationInfo")]
		public StepOperationInfo OperationInfo { get; set; }
		
		/// <summary>
		/// Set of resource operations that were performed, if any, on an Azure resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOperations")]
		public ResourceOperation[] ResourceOperations { get; set; }
		
		/// <summary>
		/// Current state of the step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The step group the current step is part of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepGroup")]
		public string StepGroup { get; set; }
	}
	
	public class RolloutRequest
	{
	}
	
	/// <summary>
	/// The properties for defining a rollout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RolloutRequestProperties
	{
		
		/// <summary>
		/// The reference to the artifact source resource Id where the payload is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactSourceId")]
		public string ArtifactSourceId { get; set; }
		
		/// <summary>
		/// The version of the build being deployed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="buildVersion")]
		public string BuildVersion { get; set; }
		
		/// <summary>
		/// The list of step groups that define the orchestration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepGroups")]
		public StepGroup[] StepGroups { get; set; }
		
		/// <summary>
		/// The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetServiceTopologyId")]
		public string TargetServiceTopologyId { get; set; }
	}
	
	/// <summary>
	/// The properties that define a Step group in a rollout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StepGroup
	{
		
		/// <summary>
		/// The list of step group names on which this step group depends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependsOnStepGroups")]
		public string[] DependsOnStepGroups { get; set; }
		
		/// <summary>
		/// The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentTargetId")]
		public string DeploymentTargetId { get; set; }
		
		/// <summary>
		/// The name of the step group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of steps to be run after deploying the target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postDeploymentSteps")]
		public PrePostStep[] PostDeploymentSteps { get; set; }
		
		/// <summary>
		/// The list of steps to be run before deploying the target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preDeploymentSteps")]
		public PrePostStep[] PreDeploymentSteps { get; set; }
	}
	
	/// <summary>
	/// Defines the properties to access the artifacts using an Azure Storage SAS URI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SasAuthentication
	{
		
		/// <summary>
		/// The properties that define SAS authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SasProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties that define SAS authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SasProperties
	{
		
		/// <summary>
		/// The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sasUri")]
		public string SasUri { get; set; }
	}
	
	public class ServiceResource
	{
	}
	
	/// <summary>
	/// The properties of a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceProperties
	{
		
		/// <summary>
		/// The Azure location to which the resources in the service belong to or should be deployed to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetLocation")]
		public string TargetLocation { get; set; }
		
		/// <summary>
		/// The subscription to which the resources in the service belong to or should be deployed to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetSubscriptionId")]
		public string TargetSubscriptionId { get; set; }
	}
	
	public class ServiceTopologyResource
	{
	}
	
	/// <summary>
	/// The properties of a service topology.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceTopologyProperties
	{
		
		/// <summary>
		/// The resource Id of the artifact source that contains the artifacts that can be referenced in the service units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactSourceId")]
		public string ArtifactSourceId { get; set; }
	}
	
	/// <summary>
	/// Defines the artifacts of a service unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceUnitArtifacts
	{
		
		/// <summary>
		/// The path to the ARM parameters file relative to the artifact source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parametersArtifactSourceRelativePath")]
		public string ParametersArtifactSourceRelativePath { get; set; }
		
		/// <summary>
		/// The full URI of the ARM parameters file with the SAS token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parametersUri")]
		public string ParametersUri { get; set; }
		
		/// <summary>
		/// The path to the ARM template file relative to the artifact source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateArtifactSourceRelativePath")]
		public string TemplateArtifactSourceRelativePath { get; set; }
		
		/// <summary>
		/// The full URI of the ARM template file with the SAS token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateUri")]
		public string TemplateUri { get; set; }
	}
	
	public class ServiceUnitResource
	{
	}
	
	/// <summary>
	/// Defines the properties of a service unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceUnitProperties
	{
		
		/// <summary>
		/// Defines the artifacts of a service unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ServiceUnitArtifacts Artifacts { get; set; }
		
		/// <summary>
		/// Describes the type of ARM deployment to be performed on the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentMode")]
		public ServiceUnitPropertiesDeploymentMode DeploymentMode { get; set; }
		
		/// <summary>
		/// The Azure Resource Group to which the resources in the service unit belong to or should be deployed to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetResourceGroup")]
		public string TargetResourceGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServiceUnitPropertiesDeploymentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Incremental = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 1,
	}
	
	/// <summary>
	/// Detailed information of a specific step run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StepOperationInfo
	{
		
		/// <summary>
		/// Unique identifier to track the request for ARM-based resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// The name of the ARM deployment initiated as part of the step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentName")]
		public string DeploymentName { get; set; }
		
		/// <summary>
		/// End time of the action in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Detailed error information of any failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
		
		/// <summary>
		/// Last time in UTC this operation was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		/// <summary>
		/// Start time of the action in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// The properties of a step resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StepProperties
	{
		
		/// <summary>
		/// The type of step.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepType")]
		public StepPropertiesStepType StepType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StepPropertiesStepType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wait = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthCheck = 1,
	}
	
	public class StepResource
	{
	}
	
	/// <summary>
	/// The parameters for the wait step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStepAttributes
	{
		
		/// <summary>
		/// The duration in ISO 8601 format of how long the wait should be.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of a Wait step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStepProperties
	{
		
		/// <summary>
		/// The parameters for the wait step.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public WaitStepAttributes Attributes { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the supported operations.
		/// Operations_List providers/Microsoft.DeploymentManager/operations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>The operations are successfully returned. The response code does not determine if the request which this operation corresponds to is successful. Check the response content for the status and any error information on failures.</returns>
		public async Task<OperationsList> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DeploymentManager/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the artifact sources in a resource group.
		/// ArtifactSources_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<ArtifactSource[]> ArtifactSources_ListAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/artifactSources&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactSource[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an artifact source.
		/// ArtifactSources_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="artifactSourceName">The name of the artifact source.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<ArtifactSource> ArtifactSources_GetAsync(string subscriptionId, string resourceGroupName, string artifactSourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/artifactSources/"+ (artifactSourceName==null? "" : System.Uri.EscapeDataString(artifactSourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an artifact source.
		/// Synchronously creates a new artifact source or updates an existing artifact source.
		/// ArtifactSources_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="artifactSourceName">The name of the artifact source.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Source object that defines the resource.</param>
		public async Task ArtifactSources_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string artifactSourceName, string api_version, ArtifactSource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/artifactSources/"+ (artifactSourceName==null? "" : System.Uri.EscapeDataString(artifactSourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an artifact source.
		/// ArtifactSources_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="artifactSourceName">The name of the artifact source.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>The artifact source was successfully deleted.</returns>
		public async Task ArtifactSources_DeleteAsync(string subscriptionId, string resourceGroupName, string artifactSourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/artifactSources/"+ (artifactSourceName==null? "" : System.Uri.EscapeDataString(artifactSourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the rollouts in a resource group.
		/// Rollouts_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<Rollout[]> Rollouts_ListAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/rollouts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Rollout[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets detailed information of a rollout.
		/// Rollouts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="rolloutName">The rollout name.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="retryAttempt">Rollout retry attempt ordinal to get the result of. If not specified, result of the latest attempt will be returned.</param>
		/// <returns>OK</returns>
		public async Task<Rollout> Rollouts_GetAsync(string subscriptionId, string resourceGroupName, string rolloutName, string api_version, int retryAttempt)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/rollouts/"+ (rolloutName==null? "" : System.Uri.EscapeDataString(rolloutName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&retryAttempt="+retryAttempt;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Rollout>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a rollout.
		/// This is an asynchronous operation and can be polled to completion using the location header returned by this operation.
		/// Rollouts_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="rolloutName">The rollout name.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Source rollout request object that defines the rollout.</param>
		public async Task Rollouts_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string rolloutName, string api_version, RolloutRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/rollouts/"+ (rolloutName==null? "" : System.Uri.EscapeDataString(rolloutName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a rollout resource.
		/// Only rollouts in terminal state can be deleted.
		/// Rollouts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="rolloutName">The rollout name.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>The rollout was successfully deleted.</returns>
		public async Task Rollouts_DeleteAsync(string subscriptionId, string resourceGroupName, string rolloutName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/rollouts/"+ (rolloutName==null? "" : System.Uri.EscapeDataString(rolloutName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a running rollout.
		/// Only running rollouts can be canceled.
		/// Rollouts_Cancel subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/cancel
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="rolloutName">The rollout name.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<Rollout> Rollouts_CancelAsync(string subscriptionId, string resourceGroupName, string rolloutName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/rollouts/"+ (rolloutName==null? "" : System.Uri.EscapeDataString(rolloutName))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Rollout>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restarts a failed rollout and optionally skips all succeeded steps.
		/// Only failed rollouts can be restarted.
		/// Rollouts_Restart subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/restart
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="rolloutName">The rollout name.</param>
		/// <param name="skipSucceeded">If true, will skip all succeeded steps so far in the rollout. If false, will execute the entire rollout again regardless of the current state of individual resources. Defaults to false if not specified.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<Rollout> Rollouts_RestartAsync(string subscriptionId, string resourceGroupName, string rolloutName, bool skipSucceeded, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/rollouts/"+ (rolloutName==null? "" : System.Uri.EscapeDataString(rolloutName))+"/restart&skipSucceeded="+skipSucceeded+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Rollout>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the service topologies in the resource group.
		/// ServiceTopologies_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<ServiceTopologyResource[]> ServiceTopologies_ListAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceTopologyResource[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the service topology.
		/// ServiceTopologies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<ServiceTopologyResource> ServiceTopologies_GetAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceTopologyResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a service topology.
		/// Synchronously creates a new service topology or updates an existing service topology.
		/// ServiceTopologies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}
		/// </summary>
		/// <param name="requestBody">Source topology object defines the resource.</param>
		public async Task ServiceTopologies_CreateOrUpdateAsync(ServiceTopologyResource requestBody)
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the service topology.
		/// ServiceTopologies_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>The topology was successfully deleted.</returns>
		public async Task ServiceTopologies_DeleteAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the services in the service topology.
		/// Services_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<ServiceResource[]> Services_ListAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"/services&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceResource[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the service.
		/// Services_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="serviceName">The name of the service resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<ServiceResource> Services_GetAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string serviceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a service in the service topology.
		/// Synchronously creates a new service or updates an existing service.
		/// Services_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="serviceName">The name of the service resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">The service object</param>
		public async Task Services_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string serviceName, string api_version, ServiceResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the service.
		/// Services_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="serviceName">The name of the service resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>The service was successfully deleted.</returns>
		public async Task Services_DeleteAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string serviceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the service units under a service in the service topology.
		/// ServiceUnits_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="serviceName">The name of the service resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<ServiceUnitResource[]> ServiceUnits_ListAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string serviceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"/serviceUnits&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceUnitResource[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the service unit.
		/// ServiceUnits_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="serviceName">The name of the service resource.</param>
		/// <param name="serviceUnitName">The name of the service unit resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<ServiceUnitResource> ServiceUnits_GetAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"/serviceUnits/"+ (serviceUnitName==null? "" : System.Uri.EscapeDataString(serviceUnitName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceUnitResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a service unit under the service in the service topology.
		/// This is an asynchronous operation and can be polled to completion using the operation resource returned by this operation.
		/// ServiceUnits_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="serviceName">The name of the service resource.</param>
		/// <param name="serviceUnitName">The name of the service unit resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">The service unit resource object.</param>
		public async Task ServiceUnits_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName, string api_version, ServiceUnitResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"/serviceUnits/"+ (serviceUnitName==null? "" : System.Uri.EscapeDataString(serviceUnitName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the service unit.
		/// ServiceUnits_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="serviceTopologyName">The name of the service topology .</param>
		/// <param name="serviceName">The name of the service resource.</param>
		/// <param name="serviceUnitName">The name of the service unit resource.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>The service unit was successfully deleted.</returns>
		public async Task ServiceUnits_DeleteAsync(string subscriptionId, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/serviceTopologies/"+ (serviceTopologyName==null? "" : System.Uri.EscapeDataString(serviceTopologyName))+"/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+"/serviceUnits/"+ (serviceUnitName==null? "" : System.Uri.EscapeDataString(serviceUnitName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the steps in a resource group.
		/// Steps_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<StepResource[]> Steps_ListAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/steps&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StepResource[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the step.
		/// Steps_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="stepName">The name of the deployment step.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK</returns>
		public async Task<StepResource> Steps_GetAsync(string subscriptionId, string resourceGroupName, string stepName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/steps/"+ (stepName==null? "" : System.Uri.EscapeDataString(stepName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StepResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a rollout step with the given step properties.
		/// Synchronously creates a new step or updates an existing step.
		/// Steps_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="stepName">The name of the deployment step.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">The step object.</param>
		public async Task Steps_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string stepName, string api_version, StepResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/steps/"+ (stepName==null? "" : System.Uri.EscapeDataString(stepName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the step.
		/// Steps_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="stepName">The name of the deployment step.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>The step was successfully deleted.</returns>
		public async Task Steps_DeleteAsync(string subscriptionId, string resourceGroupName, string stepName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DeploymentManager/steps/"+ (stepName==null? "" : System.Uri.EscapeDataString(stepName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
