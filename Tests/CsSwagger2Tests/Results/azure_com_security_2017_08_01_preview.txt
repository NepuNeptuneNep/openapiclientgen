//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The Advanced Threat Protection settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AdvancedThreatProtectionProperties
	{
		
		/// <summary>
		/// Indicates whether Advanced Threat Protection is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
	}
	
	/// <summary>
	/// The Advanced Threat Protection resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AdvancedThreatProtectionSetting
	{
		
		/// <summary>
		/// The Advanced Threat Protection settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AdvancedThreatProtectionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Auto provisioning setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoProvisioningSetting
	{
		
		/// <summary>
		/// describes properties of an auto provisioning setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AutoProvisioningSettingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// describes properties of an auto provisioning setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoProvisioningSettingProperties
	{
		
		/// <summary>
		/// Describes what kind of security agent provisioning action to take
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoProvision")]
		public AutoProvisioningSettingPropertiesAutoProvision AutoProvision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoProvisioningSettingPropertiesAutoProvision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		On = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Off = 1,
	}
	
	/// <summary>
	/// List of all the auto provisioning settings response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoProvisioningSettingList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of all the auto provisioning settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AutoProvisioningSetting[] Value { get; set; }
	}
	
	/// <summary>
	/// Error response structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// Error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// Error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Compliance of a scope
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Compliance
	{
		
		/// <summary>
		/// The Compliance score (percentage) of a Subscription is a sum of all Resources' Compliances under the given Subscription. A Resource Compliance is defined as the compliant ('healthy') Policy Definitions out of all Policy Definitions applicable to a given resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ComplianceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The Compliance score (percentage) of a Subscription is a sum of all Resources' Compliances under the given Subscription. A Resource Compliance is defined as the compliant ('healthy') Policy Definitions out of all Policy Definitions applicable to a given resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComplianceProperties
	{
		
		/// <summary>
		/// An array of segment, which is the actually the compliance assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentResult")]
		public ComplianceSegment[] AssessmentResult { get; set; }
		
		/// <summary>
		/// The timestamp when the Compliance calculation was conducted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentTimestampUtcDate")]
		public System.Nullable<System.DateTimeOffset> AssessmentTimestampUtcDate { get; set; }
		
		/// <summary>
		/// The resource count of the given subscription for which the Compliance calculation was conducted (needed for Management Group Compliance calculation).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceCount")]
		public System.Nullable<System.Int32> ResourceCount { get; set; }
	}
	
	/// <summary>
	/// A segment of a compliance assessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComplianceSegment
	{
		
		/// <summary>
		/// The size (%) of the segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		/// <summary>
		/// The segment type, e.g. compliant, non-compliance, insufficient coverage, N/A, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentType")]
		public string SegmentType { get; set; }
	}
	
	/// <summary>
	/// List of Compliance objects response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComplianceList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Compliance objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Compliance[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a data export setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataExportSetting
	{
		
		/// <summary>
		/// The data export setting properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataExportSettingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The data export setting properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataExportSettingProperties
	{
		
		/// <summary>
		/// Is the data export setting is enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	/// <summary>
	/// The information type keyword.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationProtectionKeyword
	{
		
		/// <summary>
		/// Indicates whether the keyword can be applied on numeric types or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canBeNumeric")]
		public System.Nullable<System.Boolean> CanBeNumeric { get; set; }
		
		/// <summary>
		/// Indicates whether the keyword is custom or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public System.Nullable<System.Boolean> Custom { get; set; }
		
		/// <summary>
		/// Indicates whether the keyword is excluded or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excluded")]
		public System.Nullable<System.Boolean> Excluded { get; set; }
		
		/// <summary>
		/// The keyword pattern.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
	}
	
	/// <summary>
	/// Information protection policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationProtectionPolicy
	{
		
		/// <summary>
		/// describes properties of an information protection policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public InformationProtectionPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// describes properties of an information protection policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationProtectionPolicyProperties
	{
		
		/// <summary>
		/// The sensitivity information types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="informationTypes")]
		public System.Collections.Generic.Dictionary<string, InformationType> InformationTypes { get; set; }
		
		/// <summary>
		/// Dictionary of sensitivity labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, SensitivityLabel> Labels { get; set; }
		
		/// <summary>
		/// Describes the last UTC time the policy was modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedUtc")]
		public System.Nullable<System.DateTimeOffset> LastModifiedUtc { get; set; }
	}
	
	/// <summary>
	/// The information type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationType
	{
		
		/// <summary>
		/// Indicates whether the information type is custom or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public System.Nullable<System.Boolean> Custom { get; set; }
		
		/// <summary>
		/// The name of the information type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates whether the information type is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The information type keywords.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public InformationProtectionKeyword[] Keywords { get; set; }
		
		/// <summary>
		/// The order of the information type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Double> Order { get; set; }
		
		/// <summary>
		/// The recommended label id to be associated with this information type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedLabelId")]
		public string RecommendedLabelId { get; set; }
	}
	
	/// <summary>
	/// The sensitivity label.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SensitivityLabel
	{
		
		/// <summary>
		/// The name of the sensitivity label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates whether the label is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The order of the sensitivity label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Double> Order { get; set; }
	}
	
	/// <summary>
	/// Information protection policies response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InformationProtectionPolicyList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of information protection policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public InformationProtectionPolicy[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes an Azure resource with kind
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Kind
	{
		
		/// <summary>
		/// Kind of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind1 { get; set; }
	}
	
	/// <summary>
	/// Pricing tier will be applied for the scope based on the resource ID
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Pricing
	{
		
		/// <summary>
		/// Pricing data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PricingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Pricing data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PricingProperties
	{
		
		/// <summary>
		/// Pricing tier type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pricingTier")]
		public PricingPropertiesPricingTier PricingTier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PricingPropertiesPricingTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
	}
	
	/// <summary>
	/// List of pricing configurations response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PricingList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of pricing configurations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Pricing[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes an Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Contact details for security issues
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityContact
	{
		
		/// <summary>
		/// describes security contact properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SecurityContactProperties Properties { get; set; }
	}
	
	/// <summary>
	/// describes security contact properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityContactProperties
	{
		
		/// <summary>
		/// Whether to send security alerts notifications to the security contact
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertNotifications")]
		public AutoProvisioningSettingPropertiesAutoProvision AlertNotifications { get; set; }
		
		/// <summary>
		/// Whether to send security alerts notifications to subscription admins
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertsToAdmins")]
		public AutoProvisioningSettingPropertiesAutoProvision AlertsToAdmins { get; set; }
		
		/// <summary>
		/// The email of this security contact
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The phone number of this security contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	/// <summary>
	/// List of security contacts response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityContactList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of security contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SecurityContact[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a security setting in Azure Security Center.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Setting
	{
	}
	
	/// <summary>
	/// The kind of the security setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SettingResource
	{
		
		/// <summary>
		/// the kind of the settings string (DataExportSetting)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public SettingResourceKind Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SettingResourceKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DataExportSetting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlertSuppressionSetting = 1,
	}
	
	/// <summary>
	/// Subscription settings list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SettingsList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The settings list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Setting[] Value { get; set; }
	}
	
	/// <summary>
	/// Configures where to store the OMS agent data for workspaces under a scope
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceSetting
	{
		
		/// <summary>
		/// Workspace setting data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkspaceSettingProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Workspace setting data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceSettingProperties
	{
		
		/// <summary>
		/// All the VMs in this scope will send their security data to the mentioned workspace unless overridden by a setting with more specific scope
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The full Azure ID of the workspace to save the data in
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// List of workspace settings response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceSettingList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of workspace settings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WorkspaceSetting[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Exposes the auto provisioning settings of the subscriptions
		/// AutoProvisioningSettings_List subscriptions/{subscriptionId}/providers/Microsoft.Security/autoProvisioningSettings
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <returns>OK</returns>
		public async Task<AutoProvisioningSettingList> AutoProvisioningSettings_ListAsync(AutoProvisioningSettings_ListApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/autoProvisioningSettings?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AutoProvisioningSettingList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of a specific setting
		/// AutoProvisioningSettings_Get subscriptions/{subscriptionId}/providers/Microsoft.Security/autoProvisioningSettings/{settingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="settingName">Auto provisioning setting key</param>
		/// <returns>OK</returns>
		public async Task<AutoProvisioningSetting> AutoProvisioningSettings_GetAsync(AutoProvisioningSettings_GetApi_version api_version, string subscriptionId, string settingName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/autoProvisioningSettings/"+ (settingName==null? "" : System.Uri.EscapeDataString(settingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AutoProvisioningSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of a specific setting
		/// AutoProvisioningSettings_Create subscriptions/{subscriptionId}/providers/Microsoft.Security/autoProvisioningSettings/{settingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="settingName">Auto provisioning setting key</param>
		/// <param name="requestBody">Auto provisioning setting key</param>
		/// <returns>OK</returns>
		public async Task<AutoProvisioningSetting> AutoProvisioningSettings_CreateAsync(AutoProvisioningSettings_CreateApi_version api_version, string subscriptionId, string settingName, AutoProvisioningSetting requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/autoProvisioningSettings/"+ (settingName==null? "" : System.Uri.EscapeDataString(settingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AutoProvisioningSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Security pricing configurations in the subscription
		/// Pricings_List subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <returns>OK</returns>
		public async Task<PricingList> Pricings_ListAsync(Pricings_ListApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/pricings?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PricingList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Security pricing configuration in the subscriptionSecurity pricing configuration in the subscription
		/// Pricings_GetSubscriptionPricing subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="pricingName">name of the pricing configuration</param>
		/// <returns>OK</returns>
		public async Task<Pricing> Pricings_GetSubscriptionPricingAsync(Pricings_GetSubscriptionPricingApi_version api_version, string subscriptionId, string pricingName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/pricings/"+ (pricingName==null? "" : System.Uri.EscapeDataString(pricingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pricing>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Security pricing configuration in the subscription
		/// Pricings_UpdateSubscriptionPricing subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="pricingName">name of the pricing configuration</param>
		/// <param name="requestBody">Pricing object</param>
		/// <returns>OK</returns>
		public async Task<Pricing> Pricings_UpdateSubscriptionPricingAsync(Pricings_UpdateSubscriptionPricingApi_version api_version, string subscriptionId, string pricingName, Pricing requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/pricings/"+ (pricingName==null? "" : System.Uri.EscapeDataString(pricingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pricing>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Security contact configurations for the subscription
		/// SecurityContacts_List subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <returns>OK</returns>
		public async Task<SecurityContactList> SecurityContacts_ListAsync(SecurityContacts_ListApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/securityContacts?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SecurityContactList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Security contact configurations for the subscription
		/// SecurityContacts_Get subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="securityContactName">Name of the security contact object</param>
		/// <returns>OK</returns>
		public async Task<SecurityContact> SecurityContacts_GetAsync(SecurityContacts_GetApi_version api_version, string subscriptionId, string securityContactName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/securityContacts/"+ (securityContactName==null? "" : System.Uri.EscapeDataString(securityContactName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SecurityContact>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Security contact configurations for the subscription
		/// SecurityContacts_Create subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="securityContactName">Name of the security contact object</param>
		/// <param name="requestBody">Security contact object</param>
		/// <returns>OK</returns>
		public async Task<SecurityContact> SecurityContacts_CreateAsync(SecurityContacts_CreateApi_version api_version, string subscriptionId, string securityContactName, SecurityContact requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/securityContacts/"+ (securityContactName==null? "" : System.Uri.EscapeDataString(securityContactName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SecurityContact>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Security contact configurations for the subscription
		/// SecurityContacts_Delete subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="securityContactName">Name of the security contact object</param>
		public async Task SecurityContacts_DeleteAsync(SecurityContacts_DeleteApi_version api_version, string subscriptionId, string securityContactName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/securityContacts/"+ (securityContactName==null? "" : System.Uri.EscapeDataString(securityContactName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Security contact configurations for the subscription
		/// SecurityContacts_Update subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="securityContactName">Name of the security contact object</param>
		/// <param name="requestBody">Security contact object</param>
		/// <returns>OK</returns>
		public async Task<SecurityContact> SecurityContacts_UpdateAsync(SecurityContacts_UpdateApi_version api_version, string subscriptionId, string securityContactName, SecurityContact requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/securityContacts/"+ (securityContactName==null? "" : System.Uri.EscapeDataString(securityContactName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SecurityContact>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Settings about different configurations in security center
		/// Settings_List subscriptions/{subscriptionId}/providers/Microsoft.Security/settings
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <returns>OK</returns>
		public async Task<SettingsList> Settings_ListAsync(Settings_ListApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/settings?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Settings of different configurations in security center
		/// Settings_Get subscriptions/{subscriptionId}/providers/Microsoft.Security/settings/{settingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="settingName">Name of setting: (MCAS/WDATP)</param>
		/// <returns>OK</returns>
		public async Task<Setting> Settings_GetAsync(Settings_GetApi_version api_version, string subscriptionId, Settings_GetSettingName settingName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/settings/"+settingName+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Setting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// updating settings about different configurations in security center
		/// Settings_Update subscriptions/{subscriptionId}/providers/Microsoft.Security/settings/{settingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="settingName">Name of setting: (MCAS/WDATP)</param>
		/// <param name="requestBody">Setting object</param>
		/// <returns>OK</returns>
		public async Task<Setting> Settings_UpdateAsync(Settings_UpdateApi_version api_version, string subscriptionId, Settings_GetSettingName settingName, Setting requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/settings/"+settingName+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Setting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
		/// WorkspaceSettings_List subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <returns>OK</returns>
		public async Task<WorkspaceSettingList> WorkspaceSettings_ListAsync(WorkspaceSettings_ListApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/workspaceSettings?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkspaceSettingList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
		/// WorkspaceSettings_Get subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="workspaceSettingName">Name of the security setting</param>
		/// <returns>OK</returns>
		public async Task<WorkspaceSetting> WorkspaceSettings_GetAsync(WorkspaceSettings_GetApi_version api_version, string subscriptionId, string workspaceSettingName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/workspaceSettings/"+ (workspaceSettingName==null? "" : System.Uri.EscapeDataString(workspaceSettingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkspaceSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creating settings about where we should store your security data and logs
		/// WorkspaceSettings_Create subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="workspaceSettingName">Name of the security setting</param>
		/// <param name="requestBody">Security data setting object</param>
		/// <returns>OK</returns>
		public async Task<WorkspaceSetting> WorkspaceSettings_CreateAsync(WorkspaceSettings_CreateApi_version api_version, string subscriptionId, string workspaceSettingName, WorkspaceSetting requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/workspaceSettings/"+ (workspaceSettingName==null? "" : System.Uri.EscapeDataString(workspaceSettingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkspaceSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the custom workspace settings for this subscription. new VMs will report to the default workspace
		/// WorkspaceSettings_Delete subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="workspaceSettingName">Name of the security setting</param>
		public async Task WorkspaceSettings_DeleteAsync(WorkspaceSettings_DeleteApi_version api_version, string subscriptionId, string workspaceSettingName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/workspaceSettings/"+ (workspaceSettingName==null? "" : System.Uri.EscapeDataString(workspaceSettingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Settings about where we should store your security data and logs
		/// WorkspaceSettings_Update subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="workspaceSettingName">Name of the security setting</param>
		/// <param name="requestBody">Security data setting object</param>
		/// <returns>OK</returns>
		public async Task<WorkspaceSetting> WorkspaceSettings_UpdateAsync(WorkspaceSettings_UpdateApi_version api_version, string subscriptionId, string workspaceSettingName, WorkspaceSetting requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/workspaceSettings/"+ (workspaceSettingName==null? "" : System.Uri.EscapeDataString(workspaceSettingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkspaceSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Security pricing configurations in the resource group
		/// Pricings_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/pricings
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<PricingList> Pricings_ListByResourceGroupAsync(Pricings_ListByResourceGroupApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/pricings?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PricingList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Security pricing configuration in the resource group
		/// Pricings_GetResourceGroupPricing subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/pricings/{pricingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="pricingName">name of the pricing configuration</param>
		/// <returns>OK</returns>
		public async Task<Pricing> Pricings_GetResourceGroupPricingAsync(Pricings_GetResourceGroupPricingApi_version api_version, string subscriptionId, string resourceGroupName, string pricingName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/pricings/"+ (pricingName==null? "" : System.Uri.EscapeDataString(pricingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pricing>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Security pricing configuration in the resource group
		/// Pricings_CreateOrUpdateResourceGroupPricing subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/pricings/{pricingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="pricingName">name of the pricing configuration</param>
		/// <param name="requestBody">Pricing object</param>
		/// <returns>OK</returns>
		public async Task<Pricing> Pricings_CreateOrUpdateResourceGroupPricingAsync(Pricings_CreateOrUpdateResourceGroupPricingApi_version api_version, string subscriptionId, string resourceGroupName, string pricingName, Pricing requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/pricings/"+ (pricingName==null? "" : System.Uri.EscapeDataString(pricingName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pricing>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Advanced Threat Protection settings for the specified resource.
		/// AdvancedThreatProtection_Get {resourceId}/providers/Microsoft.Security/advancedThreatProtectionSettings/{settingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="resourceId">The identifier of the resource.</param>
		/// <param name="settingName">Advanced Threat Protection setting name.</param>
		/// <returns>Successful request to get Advanced Threat Protection settings.</returns>
		public async Task<AdvancedThreatProtectionSetting> AdvancedThreatProtection_GetAsync(AdvancedThreatProtection_GetApi_version api_version, string resourceId, AdvancedThreatProtection_GetSettingName settingName)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/providers/Microsoft.Security/advancedThreatProtectionSettings/"+settingName+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AdvancedThreatProtectionSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the Advanced Threat Protection settings on a specified resource.
		/// AdvancedThreatProtection_Create {resourceId}/providers/Microsoft.Security/advancedThreatProtectionSettings/{settingName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="resourceId">The identifier of the resource.</param>
		/// <param name="settingName">Advanced Threat Protection setting name.</param>
		/// <param name="requestBody">Advanced Threat Protection Settings</param>
		/// <returns>Successful request to put Advanced Threat Protection settings.</returns>
		public async Task<AdvancedThreatProtectionSetting> AdvancedThreatProtection_CreateAsync(AdvancedThreatProtection_CreateApi_version api_version, string resourceId, AdvancedThreatProtection_GetSettingName settingName, AdvancedThreatProtectionSetting requestBody)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/providers/Microsoft.Security/advancedThreatProtectionSettings/"+settingName+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AdvancedThreatProtectionSetting>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The Compliance scores of the specific management group.
		/// Compliances_List {scope}/providers/Microsoft.Security/compliances
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="scope">Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).</param>
		/// <returns>OK</returns>
		public async Task<ComplianceList> Compliances_ListAsync(Compliances_ListApi_version api_version, string scope)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Security/compliances?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ComplianceList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of a specific Compliance.
		/// Compliances_Get {scope}/providers/Microsoft.Security/compliances/{complianceName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="scope">Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).</param>
		/// <param name="complianceName">name of the Compliance</param>
		/// <returns>OK</returns>
		public async Task<Compliance> Compliances_GetAsync(Compliances_GetApi_version api_version, string scope, string complianceName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Security/compliances/"+ (complianceName==null? "" : System.Uri.EscapeDataString(complianceName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Compliance>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Information protection policies of a specific management group.
		/// InformationProtectionPolicies_List {scope}/providers/Microsoft.Security/informationProtectionPolicies
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="scope">Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).</param>
		/// <returns>OK</returns>
		public async Task<InformationProtectionPolicyList> InformationProtectionPolicies_ListAsync(InformationProtectionPolicies_ListApi_version api_version, string scope)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Security/informationProtectionPolicies?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InformationProtectionPolicyList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of the information protection policy.
		/// InformationProtectionPolicies_Get {scope}/providers/Microsoft.Security/informationProtectionPolicies/{informationProtectionPolicyName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="scope">Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).</param>
		/// <param name="informationProtectionPolicyName">Name of the information protection policy.</param>
		/// <returns>OK</returns>
		public async Task<InformationProtectionPolicy> InformationProtectionPolicies_GetAsync(InformationProtectionPolicies_GetApi_version api_version, string scope, InformationProtectionPolicies_GetInformationProtectionPolicyName informationProtectionPolicyName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Security/informationProtectionPolicies/"+informationProtectionPolicyName+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InformationProtectionPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of the information protection policy.
		/// InformationProtectionPolicies_CreateOrUpdate {scope}/providers/Microsoft.Security/informationProtectionPolicies/{informationProtectionPolicyName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="scope">Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).</param>
		/// <param name="informationProtectionPolicyName">Name of the information protection policy.</param>
		/// <returns>OK</returns>
		public async Task<InformationProtectionPolicy> InformationProtectionPolicies_CreateOrUpdateAsync(InformationProtectionPolicies_CreateOrUpdateApi_version api_version, string scope, InformationProtectionPolicies_GetInformationProtectionPolicyName informationProtectionPolicyName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Security/informationProtectionPolicies/"+informationProtectionPolicyName+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InformationProtectionPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum AutoProvisioningSettings_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum AutoProvisioningSettings_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum AutoProvisioningSettings_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Pricings_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Pricings_GetSubscriptionPricingApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Pricings_UpdateSubscriptionPricingApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum SecurityContacts_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum SecurityContacts_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum SecurityContacts_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum SecurityContacts_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum SecurityContacts_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Settings_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Settings_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Settings_GetSettingName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MCAS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WDATP = 1,
	}
	
	public enum Settings_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum WorkspaceSettings_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum WorkspaceSettings_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum WorkspaceSettings_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum WorkspaceSettings_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum WorkspaceSettings_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Pricings_ListByResourceGroupApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Pricings_GetResourceGroupPricingApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Pricings_CreateOrUpdateResourceGroupPricingApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum AdvancedThreatProtection_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum AdvancedThreatProtection_GetSettingName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		current = 0,
	}
	
	public enum AdvancedThreatProtection_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Compliances_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum Compliances_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum InformationProtectionPolicies_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum InformationProtectionPolicies_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
	
	public enum InformationProtectionPolicies_GetInformationProtectionPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		effective = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 1,
	}
	
	public enum InformationProtectionPolicies_CreateOrUpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017-08-01-preview")]
		_2017Minus08Minus01Minuspreview = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
