//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The parameters used to generate credentials for a specified token or user of a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GenerateCredentialsParameters
	{
		
		/// <summary>
		/// The expiry date of the generated credentials after which the credentials become invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.Nullable<System.DateTimeOffset> Expiry { get; set; }
		
		/// <summary>
		/// Specifies name of the password which should be regenerated if any -- password1 or password2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<GenerateCredentialsParametersName> Name { get; set; }
		
		/// <summary>
		/// The resource ID of the token for which credentials have to be generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		public string TokenId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GenerateCredentialsParametersName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password2 = 1,
	}
	
	/// <summary>
	/// The response from the GenerateCredentials operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GenerateCredentialsResult
	{
		
		/// <summary>
		/// The list of passwords for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwords")]
		public TokenPassword[] Passwords { get; set; }
		
		/// <summary>
		/// The username for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// The password that will be used for authenticating the token of a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TokenPassword
	{
		
		/// <summary>
		/// The creation datetime of the password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The expiry datetime of the password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.Nullable<System.DateTimeOffset> Expiry { get; set; }
		
		/// <summary>
		/// The password name "password1" or "password2"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public GenerateCredentialsParametersName Name { get; set; }
		
		/// <summary>
		/// The password value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An object that represents a scope map for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeMap
	{
		
		/// <summary>
		/// The properties of a scope map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScopeMapProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a scope map.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeMapProperties
	{
		
		/// <summary>
		/// The list of scoped permissions for registry artifacts.
		///E.g. repositories/repository-name/content/read,
		///repositories/repository-name/metadata/write
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// The creation date of scope map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The user friendly description of the scope map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Provisioning state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ScopeMapPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The type of the scope map. E.g. BuildIn scope map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ScopeMapPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
	}
	
	/// <summary>
	/// The result of a request to list scope maps for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeMapListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next list of scope maps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of scope maps. Since this list may be incomplete, the nextLink field should be used to request the next list of scope maps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ScopeMap[] Value { get; set; }
	}
	
	/// <summary>
	/// The update parameters for scope map properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeMapPropertiesUpdateParameters
	{
		
		/// <summary>
		/// The list of scope permissions for registry artifacts.
		///E.g. repositories/repository-name/pull, 
		///repositories/repository-name/delete
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// The user friendly description of the scope map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// The properties for updating the scope map.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopeMapUpdateParameters
	{
		
		/// <summary>
		/// The update parameters for scope map properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScopeMapPropertiesUpdateParameters Properties { get; set; }
	}
	
	/// <summary>
	/// An object that represents a token for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Token
	{
		
		/// <summary>
		/// The properties of a token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TokenProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TokenProperties
	{
		
		/// <summary>
		/// The creation date of scope map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The properties of the credentials that can be used for authenticating the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public TokenCredentialsProperties Credentials { get; set; }
		
		/// <summary>
		/// The user/group/application object ID for which the token has to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Provisioning state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ScopeMapPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The resource ID of the scope map to which the token will be associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopeMapId")]
		public string ScopeMapId { get; set; }
		
		/// <summary>
		/// The status of the token example enabled or disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TokenPropertiesStatus> Status { get; set; }
	}
	
	/// <summary>
	/// The properties of the credentials that can be used for authenticating the token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TokenCredentialsProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public TokenCertificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passwords")]
		public TokenPassword[] Passwords { get; set; }
	}
	
	/// <summary>
	/// The properties of a certificate used for authenticating a token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TokenCertificate
	{
		
		/// <summary>
		/// Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodedPemCertificate")]
		public string EncodedPemCertificate { get; set; }
		
		/// <summary>
		/// The expiry datetime of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.Nullable<System.DateTimeOffset> Expiry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<TokenCertificateName> Name { get; set; }
		
		/// <summary>
		/// The thumbprint of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TokenCertificateName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		certificate1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		certificate2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TokenPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 1,
	}
	
	/// <summary>
	/// The result of a request to list tokens for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TokenListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next list of tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of tokens. Since this list may be incomplete, the nextLink field should be used to request the next list of tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Token[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating a token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TokenUpdateParameters
	{
		
		/// <summary>
		/// The parameters for updating token properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TokenUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating token properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TokenUpdateProperties
	{
		
		/// <summary>
		/// The properties of the credentials that can be used for authenticating the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public TokenCredentialsProperties Credentials { get; set; }
		
		/// <summary>
		/// The resource ID of the scope map to which the token will be associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopeMapId")]
		public string ScopeMapId { get; set; }
		
		/// <summary>
		/// The status of the token example enabled or disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TokenPropertiesStatus Status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Generate keys for a token of a specified container registry.
		/// Registries_GenerateCredentials subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for generating credentials.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<GenerateCredentialsResult> Registries_GenerateCredentialsAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, GenerateCredentialsParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/generateCredentials?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GenerateCredentialsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the scope maps for the specified container registry.
		/// ScopeMaps_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ScopeMapListResult> ScopeMaps_ListAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/scopeMaps?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ScopeMapListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified scope map.
		/// ScopeMaps_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="scopeMapName">The name of the scope map.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ScopeMap> ScopeMaps_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string scopeMapName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/scopeMaps/"+ (scopeMapName==null? "" : System.Uri.EscapeDataString(scopeMapName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ScopeMap>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a scope map for a container registry with the specified parameters.
		/// ScopeMaps_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="scopeMapName">The name of the scope map.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for creating a scope map.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ScopeMap> ScopeMaps_CreateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string scopeMapName, ScopeMap requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/scopeMaps/"+ (scopeMapName==null? "" : System.Uri.EscapeDataString(scopeMapName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ScopeMap>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a scope map from a container registry.
		/// ScopeMaps_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="scopeMapName">The name of the scope map.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task ScopeMaps_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string scopeMapName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/scopeMaps/"+ (scopeMapName==null? "" : System.Uri.EscapeDataString(scopeMapName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a scope map with the specified parameters.
		/// ScopeMaps_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="scopeMapName">The name of the scope map.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for updating a scope map.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ScopeMap> ScopeMaps_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string scopeMapName, ScopeMapUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/scopeMaps/"+ (scopeMapName==null? "" : System.Uri.EscapeDataString(scopeMapName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ScopeMap>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the tokens for the specified container registry.
		/// Tokens_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<TokenListResult> Tokens_ListAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tokens?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TokenListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified token.
		/// Tokens_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="tokenName">The name of the token.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Token> Tokens_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string tokenName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tokens/"+ (tokenName==null? "" : System.Uri.EscapeDataString(tokenName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Token>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a token for a container registry with the specified parameters.
		/// Tokens_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="tokenName">The name of the token.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for creating a token.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Token> Tokens_CreateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string tokenName, Token requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tokens/"+ (tokenName==null? "" : System.Uri.EscapeDataString(tokenName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Token>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a token from a container registry.
		/// Tokens_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="tokenName">The name of the token.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task Tokens_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string tokenName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tokens/"+ (tokenName==null? "" : System.Uri.EscapeDataString(tokenName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a token with the specified parameters.
		/// Tokens_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="tokenName">The name of the token.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for updating a token.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Token> Tokens_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string tokenName, TokenUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tokens/"+ (tokenName==null? "" : System.Uri.EscapeDataString(tokenName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Token>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
