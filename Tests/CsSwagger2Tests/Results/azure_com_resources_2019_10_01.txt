//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The type of the paths for alias. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AliasPathType
	{
		
		/// <summary>
		/// The API versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersions")]
		public string[] ApiVersions { get; set; }
		
		/// <summary>
		/// The path of an alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// The alias type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AliasType
	{
		
		/// <summary>
		/// The alias name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The paths for an alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public AliasPathType[] Paths { get; set; }
	}
	
	/// <summary>
	/// Deployment dependency information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BasicDependency
	{
		
		/// <summary>
		/// The ID of the dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The dependency resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The dependency resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// An error response for a resource management request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// The resource management error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public object Error { get; set; }
	}
	
	/// <summary>
	/// The debug setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DebugSetting
	{
		
		/// <summary>
		/// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailLevel")]
		public string DetailLevel { get; set; }
	}
	
	/// <summary>
	/// Deployment dependency information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Dependency
	{
		
		/// <summary>
		/// The list of dependencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependsOn")]
		public BasicDependency[] DependsOn { get; set; }
		
		/// <summary>
		/// The ID of the dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The dependency resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The dependency resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// Deployment operation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Deployment
	{
		
		/// <summary>
		/// The location to store the deployment data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Deployment properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DeploymentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The deployment export result. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentExportResult
	{
		
		/// <summary>
		/// The template content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
	}
	
	/// <summary>
	/// Deployment information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentExtended
	{
		
		/// <summary>
		/// The ID of the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// the location of the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Deployment properties with additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DeploymentPropertiesExtended Properties { get; set; }
		
		/// <summary>
		/// The type of the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Deployment filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentExtendedFilter
	{
		
		/// <summary>
		/// The provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// List of deployments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of deployments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DeploymentExtended[] Value { get; set; }
	}
	
	/// <summary>
	/// Deployment operation information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentOperation
	{
		
		/// <summary>
		/// Full deployment operation ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Deployment operation ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Deployment operation properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DeploymentOperationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Deployment operation properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentOperationProperties
	{
		
		/// <summary>
		/// The duration of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// The state of the provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// HTTP message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public HttpMessage Request { get; set; }
		
		/// <summary>
		/// HTTP message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public HttpMessage Response { get; set; }
		
		/// <summary>
		/// Deployment operation service request id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceRequestId")]
		public string ServiceRequestId { get; set; }
		
		/// <summary>
		/// Operation status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public string StatusCode { get; set; }
		
		/// <summary>
		/// Operation status message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Target resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public TargetResource TargetResource { get; set; }
		
		/// <summary>
		/// The date and time of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// List of deployment operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentOperationsListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of deployment operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DeploymentOperation[] Value { get; set; }
	}
	
	/// <summary>
	/// Deployment properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentProperties
	{
		
		/// <summary>
		/// The debug setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugSetting")]
		public DebugSetting DebugSetting { get; set; }
		
		/// <summary>
		/// The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public DeploymentPropertiesMode Mode { get; set; }
		
		/// <summary>
		/// Deployment on error behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onErrorDeployment")]
		public OnErrorDeployment OnErrorDeployment { get; set; }
		
		/// <summary>
		/// Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// Entity representing the reference to the deployment parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parametersLink")]
		public ParametersLink ParametersLink { get; set; }
		
		/// <summary>
		/// The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		/// <summary>
		/// Entity representing the reference to the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateLink")]
		public TemplateLink TemplateLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentPropertiesMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Incremental = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 1,
	}
	
	/// <summary>
	/// Deployment properties with additional details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentPropertiesExtended
	{
		
		/// <summary>
		/// The correlation ID of the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// The debug setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugSetting")]
		public DebugSetting DebugSetting { get; set; }
		
		/// <summary>
		/// The list of deployment dependencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public Dependency[] Dependencies { get; set; }
		
		/// <summary>
		/// The duration of the template deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// The deployment mode. Possible values are Incremental and Complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public DeploymentPropertiesMode Mode { get; set; }
		
		/// <summary>
		/// Deployment on error behavior with additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onErrorDeployment")]
		public OnErrorDeploymentExtended OnErrorDeployment { get; set; }
		
		/// <summary>
		/// Key/value pairs that represent deployment output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public string Outputs { get; set; }
		
		/// <summary>
		/// Deployment parameters. Use only one of Parameters or ParametersLink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// Entity representing the reference to the deployment parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parametersLink")]
		public ParametersLink ParametersLink { get; set; }
		
		/// <summary>
		/// The list of resource providers needed for the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providers")]
		public Provider[] Providers { get; set; }
		
		/// <summary>
		/// The state of the provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The template content. Use only one of Template or TemplateLink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		/// <summary>
		/// Entity representing the reference to the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateLink")]
		public TemplateLink TemplateLink { get; set; }
		
		/// <summary>
		/// The timestamp of the template deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// Resource provider information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Provider
	{
		
		/// <summary>
		/// The provider ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The namespace of the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// The registration policy of the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationPolicy")]
		public string RegistrationPolicy { get; set; }
		
		/// <summary>
		/// The registration state of the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationState")]
		public string RegistrationState { get; set; }
		
		/// <summary>
		/// The collection of provider resource types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTypes")]
		public ProviderResourceType[] ResourceTypes { get; set; }
	}
	
	/// <summary>
	/// Resource type managed by the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProviderResourceType
	{
		
		/// <summary>
		/// The aliases that are supported by this resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public AliasType[] Aliases { get; set; }
		
		/// <summary>
		/// The API version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersions")]
		public string[] ApiVersions { get; set; }
		
		/// <summary>
		/// The additional capabilities offered by this resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public string Capabilities { get; set; }
		
		/// <summary>
		/// The collection of locations where this resource type can be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// The properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// Information from validate template deployment response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentValidateResult
	{
		
		/// <summary>
		/// The resource management error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public object Error { get; set; }
		
		/// <summary>
		/// Deployment properties with additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DeploymentPropertiesExtended Properties { get; set; }
	}
	
	/// <summary>
	/// Deployment What-if operation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentWhatIf
	{
		
		/// <summary>
		/// The location to store the deployment data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Deployment What-if properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DeploymentWhatIfProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Deployment What-if properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentWhatIfProperties : DeploymentProperties
	{
		
		/// <summary>
		/// Deployment What-If operation settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whatIfSettings")]
		public DeploymentWhatIfSettings WhatIfSettings { get; set; }
	}
	
	/// <summary>
	/// Deployment What-If operation settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentWhatIfSettings
	{
		
		/// <summary>
		/// The format of the What-If results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultFormat")]
		public System.Nullable<DeploymentWhatIfSettingsResultFormat> ResultFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentWhatIfSettingsResultFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceIdOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FullResourcePayloads = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
	}
	
	/// <summary>
	/// Export resource group template request parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportTemplateRequest
	{
		
		/// <summary>
		/// The export template options. A CSV-formatted list containing zero or more of the following: 'IncludeParameterDefaultValue', 'IncludeComments', 'SkipResourceNameParameterization', 'SkipAllParameterization'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string Options { get; set; }
		
		/// <summary>
		/// The IDs of the resources to filter the export by. To export all resources, supply an array with single entry '*'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public string[] Resources { get; set; }
	}
	
	/// <summary>
	/// Resource information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GenericResource : Resource
	{
		
		/// <summary>
		/// Identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public Identity Identity { get; set; }
		
		/// <summary>
		/// The kind of the resource.
		/// Pattern: ^[-\w\._,\(\)]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-\w\._,\(\)]+$")]
		public string Kind { get; set; }
		
		/// <summary>
		/// ID of the resource that manages this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedBy")]
		public string ManagedBy { get; set; }
		
		/// <summary>
		/// Plan for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public Plan Plan { get; set; }
		
		/// <summary>
		/// The resource properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
		
		/// <summary>
		/// SKU for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// Resource filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GenericResourceFilter
	{
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagname")]
		public string Tagname { get; set; }
		
		/// <summary>
		/// The tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagvalue")]
		public string Tagvalue { get; set; }
	}
	
	/// <summary>
	/// HTTP message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HttpMessage
	{
		
		/// <summary>
		/// HTTP message content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	/// <summary>
	/// Identity for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identity
	{
		
		/// <summary>
		/// The principal ID of resource identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant ID of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<IdentityType> Type { get; set; }
		
		/// <summary>
		/// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, IdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SystemAssigned, UserAssigned")]
		SystemAssigned_UserAssigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 3,
	}
	
	public class IdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// The client id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The principal id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// Deployment on error behavior.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OnErrorDeployment
	{
		
		/// <summary>
		/// The deployment to be used on error case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentName")]
		public string DeploymentName { get; set; }
		
		/// <summary>
		/// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OnErrorDeploymentType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OnErrorDeploymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastSuccessful = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SpecificDeployment = 1,
	}
	
	/// <summary>
	/// Deployment on error behavior with additional details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OnErrorDeploymentExtended
	{
		
		/// <summary>
		/// The deployment to be used on error case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentName")]
		public string DeploymentName { get; set; }
		
		/// <summary>
		/// The state of the provisioning for the on error deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OnErrorDeploymentType Type { get; set; }
	}
	
	/// <summary>
	/// Microsoft.Resources operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Microsoft.Resources operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Microsoft.Resources operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Entity representing the reference to the deployment parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParametersLink
	{
		
		/// <summary>
		/// If included, must match the ContentVersion in the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentVersion")]
		public string ContentVersion { get; set; }
		
		/// <summary>
		/// The URI of the parameters file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Plan for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Plan
	{
		
		/// <summary>
		/// The plan ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The offer ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// The promotion code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionCode")]
		public string PromotionCode { get; set; }
		
		/// <summary>
		/// The publisher ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The plan's version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// List of resource providers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProviderListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of resource providers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Provider[] Value { get; set; }
	}
	
	/// <summary>
	/// Specified resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Resource group information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroup
	{
		
		/// <summary>
		/// The ID of the resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource group. It cannot be changed after the resource group has been created. It must be one of the supported Azure locations.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The ID of the resource that manages this resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedBy")]
		public string ManagedBy { get; set; }
		
		/// <summary>
		/// The name of the resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource group properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ResourceGroupProperties Properties { get; set; }
		
		/// <summary>
		/// The tags attached to the resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Resource group export result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupExportResult
	{
		
		/// <summary>
		/// The resource management error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public object Error { get; set; }
		
		/// <summary>
		/// The template content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
	}
	
	/// <summary>
	/// Resource group filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupFilter
	{
		
		/// <summary>
		/// The tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagName")]
		public string TagName { get; set; }
		
		/// <summary>
		/// The tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagValue")]
		public string TagValue { get; set; }
	}
	
	/// <summary>
	/// List of resource groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of resource groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ResourceGroup[] Value { get; set; }
	}
	
	/// <summary>
	/// Resource group information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupPatchable
	{
		
		/// <summary>
		/// The ID of the resource that manages this resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedBy")]
		public string ManagedBy { get; set; }
		
		/// <summary>
		/// The name of the resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource group properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ResourceGroupProperties Properties { get; set; }
		
		/// <summary>
		/// The tags attached to the resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The resource group properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceGroupProperties
	{
		
		/// <summary>
		/// The provisioning state. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// List of resource groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GenericResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Resource provider operation's display properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProviderOperationDisplayProperties
	{
		
		/// <summary>
		/// Operation description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Resource provider operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Operation provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Operation description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Operation resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Parameters of move resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourcesMoveInfo
	{
		
		/// <summary>
		/// The IDs of the resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public string[] Resources { get; set; }
		
		/// <summary>
		/// The target resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceGroup")]
		public string TargetResourceGroup { get; set; }
	}
	
	/// <summary>
	/// Deployment operation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopedDeployment
	{
		
		/// <summary>
		/// The location to store the deployment data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Deployment properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DeploymentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// SKU for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The SKU capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// The SKU family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The SKU model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// The SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The SKU size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The SKU tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// Sub-resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubResource
	{
		
		/// <summary>
		/// Resource ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Tag count.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagCount
	{
		
		/// <summary>
		/// Type of count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Value of count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// Tag details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagDetails
	{
		
		/// <summary>
		/// Tag count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public TagCount Count { get; set; }
		
		/// <summary>
		/// The tag name ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagName")]
		public string TagName { get; set; }
		
		/// <summary>
		/// The list of tag values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public TagValue[] Values { get; set; }
	}
	
	/// <summary>
	/// Tag information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagValue
	{
		
		/// <summary>
		/// Tag count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public TagCount Count { get; set; }
		
		/// <summary>
		/// The tag value ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The tag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagValue")]
		public string TagValue1 { get; set; }
	}
	
	/// <summary>
	/// A dictionary of name and value pairs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Tags
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags1 { get; set; }
	}
	
	/// <summary>
	/// List of subscription tags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagsListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TagDetails[] Value { get; set; }
	}
	
	/// <summary>
	/// Wrapper resource for tags patch API request only.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagsPatchResource
	{
		
		/// <summary>
		/// The operation type for the patch API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public System.Nullable<TagsPatchResourceOperation> Operation { get; set; }
		
		/// <summary>
		/// A dictionary of name and value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Tags Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TagsPatchResourceOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Replace = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Merge = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete = 2,
	}
	
	/// <summary>
	/// Wrapper resource for tags API requests and responses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagsResource
	{
		
		/// <summary>
		/// The ID of the tags wrapper resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the tags wrapper resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A dictionary of name and value pairs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Tags Properties { get; set; }
		
		/// <summary>
		/// The type of the tags wrapper resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Target resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TargetResource
	{
		
		/// <summary>
		/// The ID of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// Result of the request to calculate template hash. It contains a string of minified template and its hash.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TemplateHashResult
	{
		
		/// <summary>
		/// The minified template string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minifiedTemplate")]
		public string MinifiedTemplate { get; set; }
		
		/// <summary>
		/// The template hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateHash")]
		public string TemplateHash { get; set; }
	}
	
	/// <summary>
	/// Entity representing the reference to the template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TemplateLink
	{
		
		/// <summary>
		/// If included, must match the ContentVersion in the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentVersion")]
		public string ContentVersion { get; set; }
		
		/// <summary>
		/// The URI of the template to deploy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Information about a single resource change predicted by What-If operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WhatIfChange
	{
		
		/// <summary>
		/// The predicted snapshot of the resource after the deployment is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="after")]
		public string After { get; set; }
		
		/// <summary>
		/// The snapshot of the resource before the deployment is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="before")]
		public string Before { get; set; }
		
		/// <summary>
		/// Type of change that will be made to the resource when the deployment is executed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public WhatIfChangeChangeType ChangeType { get; set; }
		
		/// <summary>
		/// The predicted changes to resource properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delta")]
		public WhatIfPropertyChange[] Delta { get; set; }
		
		/// <summary>
		/// Resource ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WhatIfChangeChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Create = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ignore = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deploy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoChange = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modify = 5,
	}
	
	/// <summary>
	/// The predicted change to the resource property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WhatIfPropertyChange
	{
		
		/// <summary>
		/// The value of the property after the deployment is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="after")]
		public string After { get; set; }
		
		/// <summary>
		/// The value of the property before the deployment is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="before")]
		public string Before { get; set; }
		
		/// <summary>
		/// Nested property changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public WhatIfPropertyChange[] Children { get; set; }
		
		/// <summary>
		/// The path of the property.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The type of property change.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="propertyChangeType")]
		public WhatIfPropertyChangePropertyChangeType PropertyChangeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WhatIfPropertyChangePropertyChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Create = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Modify = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Array = 3,
	}
	
	/// <summary>
	/// Deployment operation properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WhatIfOperationProperties
	{
		
		/// <summary>
		/// List of resource changes predicted by What-If operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public WhatIfChange[] Changes { get; set; }
	}
	
	/// <summary>
	/// Result of the What-If operation. Contains a list of predicted changes and a URL link to get to the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WhatIfOperationResult
	{
		
		/// <summary>
		/// The resource management error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public object Error { get; set; }
		
		/// <summary>
		/// Deployment operation properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WhatIfOperationProperties Properties { get; set; }
		
		/// <summary>
		/// Status of the What-If operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets all resource providers for the tenant.
		/// Providers_ListAtTenantScope providers
		/// </summary>
		/// <param name="top">The number of results to return. If null is passed returns all providers.</param>
		/// <param name="expand">The properties to include in the results. For example, use &$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns an array of resource providers.</returns>
		public async Task<ProviderListResult> Providers_ListAtTenantScopeAsync(int top, string expand, string api_version)
		{
			var requestUri = "providers?$top="+top+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProviderListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the deployments for a management group.
		/// Deployments_ListAtManagementGroupScope providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/
		/// </summary>
		/// <param name="groupId">The management group ID.</param>
		/// <param name="filter">The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.</param>
		/// <param name="top">The number of results to get. If null is passed, returns all deployments.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns an array of deployments.</returns>
		public async Task<DeploymentListResult> Deployments_ListAtManagementGroupScopeAsync(string groupId, string filter, int top, string api_version)
		{
			var requestUri = "providers/Microsoft.Management/managementGroups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/providers/Microsoft.Resources/deployments/&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployment.
		/// Deployments_GetAtManagementGroupScope providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="groupId">The management group ID.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_GetAtManagementGroupScopeAsync(string groupId, string deploymentName, string api_version)
		{
			var requestUri = "providers/Microsoft.Management/managementGroups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deploys resources at management group scope.
		/// You can provide the template and parameters directly in the request or link to JSON files.
		/// Deployments_CreateOrUpdateAtManagementGroupScope providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="groupId">The management group ID.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Additional parameters supplied to the operation.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_CreateOrUpdateAtManagementGroupScopeAsync(string groupId, string deploymentName, string api_version, ScopedDeployment requestBody)
		{
			var requestUri = "providers/Microsoft.Management/managementGroups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment from the deployment history.
		/// A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
		/// Deployments_DeleteAtManagementGroupScope providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="groupId">The management group ID.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		public async Task Deployments_DeleteAtManagementGroupScopeAsync(string groupId, string deploymentName, string api_version)
		{
			var requestUri = "providers/Microsoft.Management/managementGroups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a currently running template deployment.
		/// You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
		/// Deployments_CancelAtManagementGroupScope providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel
		/// </summary>
		/// <param name="groupId">The management group ID.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		public async Task Deployments_CancelAtManagementGroupScopeAsync(string groupId, string deploymentName, string api_version)
		{
			var requestUri = "providers/Microsoft.Management/managementGroups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the template used for specified deployment.
		/// Deployments_ExportTemplateAtManagementGroupScope providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate
		/// </summary>
		/// <param name="groupId">The management group ID.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns the template.</returns>
		public async Task<DeploymentExportResult> Deployments_ExportTemplateAtManagementGroupScopeAsync(string groupId, string deploymentName, string api_version)
		{
			var requestUri = "providers/Microsoft.Management/managementGroups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/exportTemplate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExportResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all deployments operations for a deployment.
		/// DeploymentOperations_ListAtManagementGroupScope providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations
		/// </summary>
		/// <param name="groupId">The management group ID.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="top">The number of results to return.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Return an array of deployment operations.</returns>
		public async Task<DeploymentOperationsListResult> DeploymentOperations_ListAtManagementGroupScopeAsync(string groupId, string deploymentName, int top, string api_version)
		{
			var requestUri = "providers/Microsoft.Management/managementGroups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperationsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployments operation.
		/// DeploymentOperations_GetAtManagementGroupScope providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}
		/// </summary>
		/// <param name="groupId">The management group ID.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="operationId">The ID of the operation to get.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the deployment operation.</returns>
		public async Task<DeploymentOperation> DeploymentOperations_GetAtManagementGroupScopeAsync(string groupId, string deploymentName, string operationId, string api_version)
		{
			var requestUri = "providers/Microsoft.Management/managementGroups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
		/// Deployments_ValidateAtManagementGroupScope providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate
		/// </summary>
		/// <param name="groupId">The management group ID.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Parameters to validate.</param>
		/// <returns>OK - Returns the validation result.</returns>
		public async Task<DeploymentValidateResult> Deployments_ValidateAtManagementGroupScopeAsync(string groupId, string deploymentName, string api_version, ScopedDeployment requestBody)
		{
			var requestUri = "providers/Microsoft.Management/managementGroups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/validate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentValidateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Calculate the hash of the given template.
		/// Deployments_CalculateTemplateHash providers/Microsoft.Resources/calculateTemplateHash
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">The template provided to calculate hash.</param>
		/// <returns>OK - Returns the hash.</returns>
		public async Task<TemplateHashResult> Deployments_CalculateTemplateHashAsync(string api_version, string requestBody)
		{
			var requestUri = "providers/Microsoft.Resources/calculateTemplateHash?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TemplateHashResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the deployments at the tenant scope.
		/// Deployments_ListAtTenantScope providers/Microsoft.Resources/deployments/
		/// </summary>
		/// <param name="filter">The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.</param>
		/// <param name="top">The number of results to get. If null is passed, returns all deployments.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns an array of deployments.</returns>
		public async Task<DeploymentListResult> Deployments_ListAtTenantScopeAsync(string filter, int top, string api_version)
		{
			var requestUri = "providers/Microsoft.Resources/deployments/?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployment.
		/// Deployments_GetAtTenantScope providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_GetAtTenantScopeAsync(string deploymentName, string api_version)
		{
			var requestUri = "providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deploys resources at tenant scope.
		/// You can provide the template and parameters directly in the request or link to JSON files.
		/// Deployments_CreateOrUpdateAtTenantScope providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Additional parameters supplied to the operation.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_CreateOrUpdateAtTenantScopeAsync(string deploymentName, string api_version, ScopedDeployment requestBody)
		{
			var requestUri = "providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment from the deployment history.
		/// A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
		/// Deployments_DeleteAtTenantScope providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		public async Task Deployments_DeleteAtTenantScopeAsync(string deploymentName, string api_version)
		{
			var requestUri = "providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a currently running template deployment.
		/// You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
		/// Deployments_CancelAtTenantScope providers/Microsoft.Resources/deployments/{deploymentName}/cancel
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		public async Task Deployments_CancelAtTenantScopeAsync(string deploymentName, string api_version)
		{
			var requestUri = "providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the template used for specified deployment.
		/// Deployments_ExportTemplateAtTenantScope providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns the template.</returns>
		public async Task<DeploymentExportResult> Deployments_ExportTemplateAtTenantScopeAsync(string deploymentName, string api_version)
		{
			var requestUri = "providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/exportTemplate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExportResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all deployments operations for a deployment.
		/// DeploymentOperations_ListAtTenantScope providers/Microsoft.Resources/deployments/{deploymentName}/operations
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="top">The number of results to return.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Return an array of deployment operations.</returns>
		public async Task<DeploymentOperationsListResult> DeploymentOperations_ListAtTenantScopeAsync(string deploymentName, int top, string api_version)
		{
			var requestUri = "providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperationsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployments operation.
		/// DeploymentOperations_GetAtTenantScope providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="operationId">The ID of the operation to get.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the deployment operation.</returns>
		public async Task<DeploymentOperation> DeploymentOperations_GetAtTenantScopeAsync(string deploymentName, string operationId, string api_version)
		{
			var requestUri = "providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
		/// Deployments_ValidateAtTenantScope providers/Microsoft.Resources/deployments/{deploymentName}/validate
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Parameters to validate.</param>
		/// <returns>OK - Returns the validation result.</returns>
		public async Task<DeploymentValidateResult> Deployments_ValidateAtTenantScopeAsync(string deploymentName, string api_version, ScopedDeployment requestBody)
		{
			var requestUri = "providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/validate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentValidateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all of the available Microsoft.Resources REST API operations.
		/// Operations_List providers/Microsoft.Resources/operations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Resources/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified resource provider at the tenant level.
		/// Providers_GetAtTenantScope providers/{resourceProviderNamespace}
		/// </summary>
		/// <param name="expand">The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases.</param>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the resource provider.</returns>
		public async Task<Provider> Providers_GetAtTenantScopeAsync(string expand, string resourceProviderNamespace, string api_version)
		{
			var requestUri = "providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"?$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Provider>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all resource providers for a subscription.
		/// Providers_List subscriptions/{subscriptionId}/providers
		/// </summary>
		/// <param name="top">The number of results to return. If null is passed returns all deployments.</param>
		/// <param name="expand">The properties to include in the results. For example, use &$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of resource providers.</returns>
		public async Task<ProviderListResult> Providers_ListAsync(int top, string expand, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers?$top="+top+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProviderListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the deployments for a subscription.
		/// Deployments_ListAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/
		/// </summary>
		/// <param name="filter">The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.</param>
		/// <param name="top">The number of results to get. If null is passed, returns all deployments.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of deployments.</returns>
		public async Task<DeploymentListResult> Deployments_ListAtSubscriptionScopeAsync(string filter, int top, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployment.
		/// Deployments_GetAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_GetAtSubscriptionScopeAsync(string deploymentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deploys resources at subscription scope.
		/// You can provide the template and parameters directly in the request or link to JSON files.
		/// Deployments_CreateOrUpdateAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Additional parameters supplied to the operation.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_CreateOrUpdateAtSubscriptionScopeAsync(string deploymentName, string api_version, string subscriptionId, Deployment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment from the deployment history.
		/// A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
		/// Deployments_DeleteAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		public async Task Deployments_DeleteAtSubscriptionScopeAsync(string deploymentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a currently running template deployment.
		/// You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
		/// Deployments_CancelAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		public async Task Deployments_CancelAtSubscriptionScopeAsync(string deploymentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the template used for specified deployment.
		/// Deployments_ExportTemplateAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns the template.</returns>
		public async Task<DeploymentExportResult> Deployments_ExportTemplateAtSubscriptionScopeAsync(string deploymentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/exportTemplate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExportResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all deployments operations for a deployment.
		/// DeploymentOperations_ListAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="top">The number of results to return.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Return an array of deployment operations.</returns>
		public async Task<DeploymentOperationsListResult> DeploymentOperations_ListAtSubscriptionScopeAsync(string deploymentName, int top, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperationsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployments operation.
		/// DeploymentOperations_GetAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="operationId">The ID of the operation to get.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the deployment operation.</returns>
		public async Task<DeploymentOperation> DeploymentOperations_GetAtSubscriptionScopeAsync(string deploymentName, string operationId, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
		/// Deployments_ValidateAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters to validate.</param>
		/// <returns>OK - Returns the validation result.</returns>
		public async Task<DeploymentValidateResult> Deployments_ValidateAtSubscriptionScopeAsync(string deploymentName, string api_version, string subscriptionId, Deployment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/validate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentValidateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns changes that will be made by the deployment if executed at the scope of the subscription.
		/// Deployments_WhatIfAtSubscriptionScope subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf
		/// </summary>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters to What If.</param>
		/// <returns>OK - Returns What-If operation status</returns>
		public async Task<WhatIfOperationResult> Deployments_WhatIfAtSubscriptionScopeAsync(string deploymentName, string api_version, string subscriptionId, DeploymentWhatIf requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/whatIf&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WhatIfOperationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the specified resource provider.
		/// Providers_Get subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
		/// </summary>
		/// <param name="expand">The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases.</param>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the resource provider.</returns>
		public async Task<Provider> Providers_GetAsync(string expand, string resourceProviderNamespace, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"?$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Provider>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Registers a subscription with a resource provider.
		/// Providers_Register subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register
		/// </summary>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider to register.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the resource provider.</returns>
		public async Task<Provider> Providers_RegisterAsync(string resourceProviderNamespace, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"/register&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Provider>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unregisters a subscription from a resource provider.
		/// Providers_Unregister subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister
		/// </summary>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider to unregister.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the resource provider.</returns>
		public async Task<Provider> Providers_UnregisterAsync(string resourceProviderNamespace, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"/unregister&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Provider>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the resources for a resource group.
		/// Resources_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources
		/// </summary>
		/// <param name="resourceGroupName">The resource group with the resources to get.</param>
		/// <param name="filter">The filter to apply on the operation.<br><br>The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.<br><br>For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'<br><br>You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.<br><br>For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)<br><br>You can link more than one substringof together by adding and/or operators.<br><br>You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.<br><br>You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId.</param>
		/// <param name="expand">The $expand query parameter. You can expand createdTime and changedTime. For example, to expand both properties, use $expand=changedTime,createdTime</param>
		/// <param name="top">The number of results to return. If null is passed, returns all resources.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of resources</returns>
		public async Task<ResourceListResult> Resources_ListByResourceGroupAsync(string resourceGroupName, string filter, string expand, int top, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/resources&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Moves resources from one resource group to another resource group.
		/// The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes.
		/// Resources_MoveResources subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources
		/// </summary>
		/// <param name="sourceResourceGroupName">The name of the resource group containing the resources to move.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters for moving resources.</param>
		public async Task Resources_MoveResourcesAsync(string sourceResourceGroupName, string api_version, string subscriptionId, ResourcesMoveInfo requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (sourceResourceGroupName==null? "" : System.Uri.EscapeDataString(sourceResourceGroupName))+"/moveResources&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validates whether resources can be moved from one resource group to another resource group.
		/// This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation.
		/// Resources_ValidateMoveResources subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources
		/// </summary>
		/// <param name="sourceResourceGroupName">The name of the resource group containing the resources to validate for move.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters for moving resources.</param>
		public async Task Resources_ValidateMoveResourcesAsync(string sourceResourceGroupName, string api_version, string subscriptionId, ResourcesMoveInfo requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (sourceResourceGroupName==null? "" : System.Uri.EscapeDataString(sourceResourceGroupName))+"/validateMoveResources&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets all the resource groups for a subscription.
		/// ResourceGroups_List subscriptions/{subscriptionId}/resourcegroups
		/// </summary>
		/// <param name="filter">The filter to apply on the operation.<br><br>You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'</param>
		/// <param name="top">The number of results to return. If null is passed, returns all resource groups.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of resource groups.</returns>
		public async Task<ResourceGroupListResult> ResourceGroups_ListAsync(string filter, int top, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroupListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a resource group.
		/// ResourceGroups_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group to get. The name is case insensitive.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the resource group.</returns>
		public async Task<ResourceGroup> ResourceGroups_GetAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a resource group.
		/// ResourceGroups_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group to create or update. Can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that match the allowed characters.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters supplied to the create or update a resource group.</param>
		/// <returns>OK - Returns information about the new resource group.</returns>
		public async Task<ResourceGroup> ResourceGroups_CreateOrUpdateAsync(string resourceGroupName, string api_version, string subscriptionId, ResourceGroup requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource group.
		/// When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.
		/// ResourceGroups_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group to delete. The name is case insensitive.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK</returns>
		public async Task ResourceGroups_DeleteAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a resource group.
		/// Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained.
		/// ResourceGroups_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group to update. The name is case insensitive.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters supplied to update a resource group.</param>
		/// <returns>OK - Returns information about the resource group.</returns>
		public async Task<ResourceGroup> ResourceGroups_UpdateAsync(string resourceGroupName, string api_version, string subscriptionId, ResourceGroupPatchable requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets all deployments operations for a deployment.
		/// DeploymentOperations_List subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="top">The number of results to return.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Return an array of deployment operations.</returns>
		public async Task<DeploymentOperationsListResult> DeploymentOperations_ListAsync(string resourceGroupName, string deploymentName, int top, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperationsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployments operation.
		/// DeploymentOperations_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="operationId">The ID of the operation to get.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the deployment operation.</returns>
		public async Task<DeploymentOperation> DeploymentOperations_GetAsync(string resourceGroupName, string deploymentName, string operationId, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Captures the specified resource group as a template.
		/// ResourceGroups_ExportTemplate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Parameters for exporting the template.</param>
		/// <returns>OK - Returns the result of the export.</returns>
		public async Task<ResourceGroupExportResult> ResourceGroups_ExportTemplateAsync(string subscriptionId, string resourceGroupName, string api_version, ExportTemplateRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/exportTemplate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroupExportResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the deployments for a resource group.
		/// Deployments_ListByResourceGroup subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group with the deployments to get. The name is case insensitive.</param>
		/// <param name="filter">The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.</param>
		/// <param name="top">The number of results to get. If null is passed, returns all deployments.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of deployments.</returns>
		public async Task<DeploymentListResult> Deployments_ListByResourceGroupAsync(string resourceGroupName, string filter, int top, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deployments/&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployment.
		/// Deployments_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_GetAsync(string resourceGroupName, string deploymentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deploys resources to a resource group.
		/// You can provide the template and parameters directly in the request or link to JSON files.
		/// Deployments_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group to deploy the resources to. The name is case insensitive. The resource group must already exist.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Additional parameters supplied to the operation.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_CreateOrUpdateAsync(string resourceGroupName, string deploymentName, string api_version, string subscriptionId, Deployment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment from the deployment history.
		/// A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
		/// Deployments_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group with the deployment to delete. The name is case insensitive.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		public async Task Deployments_DeleteAsync(string resourceGroupName, string deploymentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a currently running template deployment.
		/// You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resource group partially deployed.
		/// Deployments_Cancel subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		public async Task Deployments_CancelAsync(string resourceGroupName, string deploymentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the template used for specified deployment.
		/// Deployments_ExportTemplate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns the template.</returns>
		public async Task<DeploymentExportResult> Deployments_ExportTemplateAsync(string resourceGroupName, string deploymentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/exportTemplate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExportResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
		/// Deployments_Validate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group the template will be deployed to. The name is case insensitive.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters to validate.</param>
		/// <returns>OK - Returns the validation result.</returns>
		public async Task<DeploymentValidateResult> Deployments_ValidateAsync(string resourceGroupName, string deploymentName, string api_version, string subscriptionId, Deployment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/validate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentValidateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns changes that will be made by the deployment if executed at the scope of the resource group.
		/// Deployments_WhatIf subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group the template will be deployed to. The name is case insensitive.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters to validate.</param>
		/// <returns>OK - Returns What-If operation status</returns>
		public async Task<WhatIfOperationResult> Deployments_WhatIfAsync(string resourceGroupName, string deploymentName, string api_version, string subscriptionId, DeploymentWhatIf requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/whatIf&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WhatIfOperationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a resource.
		/// Resources_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the resource to get. The name is case insensitive.</param>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider.</param>
		/// <param name="parentResourcePath">The parent resource identity.</param>
		/// <param name="resourceType">The resource type of the resource.</param>
		/// <param name="resourceName">The name of the resource to get.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the resource.</returns>
		public async Task<GenericResource> Resources_GetAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"/"+ (parentResourcePath==null? "" : System.Uri.EscapeDataString(parentResourcePath))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a resource.
		/// Resources_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group for the resource. The name is case insensitive.</param>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider.</param>
		/// <param name="parentResourcePath">The parent resource identity.</param>
		/// <param name="resourceType">The resource type of the resource to create.</param>
		/// <param name="resourceName">The name of the resource to create.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters for creating or updating the resource.</param>
		/// <returns>OK - Returns information about the resource.</returns>
		public async Task<GenericResource> Resources_CreateOrUpdateAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string api_version, string subscriptionId, GenericResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"/"+ (parentResourcePath==null? "" : System.Uri.EscapeDataString(parentResourcePath))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource.
		/// Resources_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource to delete. The name is case insensitive.</param>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider.</param>
		/// <param name="parentResourcePath">The parent resource identity.</param>
		/// <param name="resourceType">The resource type.</param>
		/// <param name="resourceName">The name of the resource to delete.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK</returns>
		public async Task Resources_DeleteAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"/"+ (parentResourcePath==null? "" : System.Uri.EscapeDataString(parentResourcePath))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a resource.
		/// Resources_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group for the resource. The name is case insensitive.</param>
		/// <param name="resourceProviderNamespace">The namespace of the resource provider.</param>
		/// <param name="parentResourcePath">The parent resource identity.</param>
		/// <param name="resourceType">The resource type of the resource to update.</param>
		/// <param name="resourceName">The name of the resource to update.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters for updating the resource.</param>
		/// <returns>OK - Returns information about the resource.</returns>
		public async Task<GenericResource> Resources_UpdateAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string api_version, string subscriptionId, GenericResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/"+ (resourceProviderNamespace==null? "" : System.Uri.EscapeDataString(resourceProviderNamespace))+"/"+ (parentResourcePath==null? "" : System.Uri.EscapeDataString(parentResourcePath))+"/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the resources in a subscription.
		/// Resources_List subscriptions/{subscriptionId}/resources
		/// </summary>
		/// <param name="filter">The filter to apply on the operation.<br><br>The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.<br><br>For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'<br><br>You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.<br><br>For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)<br><br>You can link more than one substringof together by adding and/or operators.<br><br>You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.<br><br>You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId.</param>
		/// <param name="expand">The $expand query parameter. You can expand createdTime and changedTime. For example, to expand both properties, use $expand=changedTime,createdTime</param>
		/// <param name="top">The number of results to return. If null is passed, returns all resource groups.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of resources.</returns>
		public async Task<ResourceListResult> Resources_ListAsync(string filter, string expand, int top, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resources?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a summary of tag usage under the subscription.
		/// This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result.
		/// Tags_List subscriptions/{subscriptionId}/tagNames
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of tag names and values.</returns>
		public async Task<TagsListResult> Tags_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tagNames?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a predefined tag name.
		/// This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.
		/// Tags_CreateOrUpdate subscriptions/{subscriptionId}/tagNames/{tagName}
		/// </summary>
		/// <param name="tagName">The name of the tag to create.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>Predefined tag name already exists. Returns information about the predefined tag name.</returns>
		public async Task<TagDetails> Tags_CreateOrUpdateAsync(string tagName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tagNames/"+ (tagName==null? "" : System.Uri.EscapeDataString(tagName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a predefined tag name.
		/// This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted.
		/// Tags_Delete subscriptions/{subscriptionId}/tagNames/{tagName}
		/// </summary>
		/// <param name="tagName">The name of the tag.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>Predefined tag name successfully deleted.</returns>
		public async Task Tags_DeleteAsync(string tagName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tagNames/"+ (tagName==null? "" : System.Uri.EscapeDataString(tagName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a predefined value for a predefined tag name.
		/// This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters.
		/// Tags_CreateOrUpdateValue subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}
		/// </summary>
		/// <param name="tagName">The name of the tag.</param>
		/// <param name="tagValue">The value of the tag to create.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>Predefined tag value already exists. Returns information about the predefined tag value.</returns>
		public async Task<TagValue> Tags_CreateOrUpdateValueAsync(string tagName, string tagValue, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tagNames/"+ (tagName==null? "" : System.Uri.EscapeDataString(tagName))+"/tagValues/"+ (tagValue==null? "" : System.Uri.EscapeDataString(tagValue))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagValue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a predefined tag value for a predefined tag name.
		/// This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource.
		/// Tags_DeleteValue subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}
		/// </summary>
		/// <param name="tagName">The name of the tag.</param>
		/// <param name="tagValue">The value of the tag to delete.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>Predefined tag value successfully deleted.</returns>
		public async Task Tags_DeleteValueAsync(string tagName, string tagValue, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tagNames/"+ (tagName==null? "" : System.Uri.EscapeDataString(tagName))+"/tagValues/"+ (tagValue==null? "" : System.Uri.EscapeDataString(tagValue))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a resource by ID.
		/// Resources_GetById {resourceId}
		/// </summary>
		/// <param name="resourceId">The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <returns>OK - Returns information about the resource.</returns>
		public async Task<GenericResource> Resources_GetByIdAsync(string resourceId, string api_version)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a resource by ID.
		/// Resources_CreateOrUpdateById {resourceId}
		/// </summary>
		/// <param name="resourceId">The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="requestBody">Create or update resource parameters.</param>
		/// <returns>OK - Returns information about the resource.</returns>
		public async Task<GenericResource> Resources_CreateOrUpdateByIdAsync(string resourceId, string api_version, GenericResource requestBody)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource by ID.
		/// Resources_DeleteById {resourceId}
		/// </summary>
		/// <param name="resourceId">The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <returns>OK</returns>
		public async Task Resources_DeleteByIdAsync(string resourceId, string api_version)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a resource by ID.
		/// Resources_UpdateById {resourceId}
		/// </summary>
		/// <param name="resourceId">The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="requestBody">Update resource parameters.</param>
		/// <returns>OK - Returns information about the resource.</returns>
		public async Task<GenericResource> Resources_UpdateByIdAsync(string resourceId, string api_version, GenericResource requestBody)
		{
			var requestUri = ""+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenericResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the deployments at the given scope.
		/// Deployments_ListAtScope {scope}/providers/Microsoft.Resources/deployments/
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="filter">The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.</param>
		/// <param name="top">The number of results to get. If null is passed, returns all deployments.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns an array of deployments.</returns>
		public async Task<DeploymentListResult> Deployments_ListAtScopeAsync(string scope, string filter, int top, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/deployments/&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployment.
		/// Deployments_GetAtScope {scope}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_GetAtScopeAsync(string scope, string deploymentName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deploys resources at a given scope.
		/// You can provide the template and parameters directly in the request or link to JSON files.
		/// Deployments_CreateOrUpdateAtScope {scope}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Additional parameters supplied to the operation.</param>
		/// <returns>OK - Returns information about the deployment, including provisioning status.</returns>
		public async Task<DeploymentExtended> Deployments_CreateOrUpdateAtScopeAsync(string scope, string deploymentName, string api_version, Deployment requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExtended>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment from the deployment history.
		/// A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
		/// Deployments_DeleteAtScope {scope}/providers/Microsoft.Resources/deployments/{deploymentName}
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		public async Task Deployments_DeleteAtScopeAsync(string scope, string deploymentName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a currently running template deployment.
		/// You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.
		/// Deployments_CancelAtScope {scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		public async Task Deployments_CancelAtScopeAsync(string scope, string deploymentName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the template used for specified deployment.
		/// Deployments_ExportTemplateAtScope {scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns the template.</returns>
		public async Task<DeploymentExportResult> Deployments_ExportTemplateAtScopeAsync(string scope, string deploymentName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/exportTemplate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentExportResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all deployments operations for a deployment.
		/// DeploymentOperations_ListAtScope {scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="top">The number of results to return.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Return an array of deployment operations.</returns>
		public async Task<DeploymentOperationsListResult> DeploymentOperations_ListAtScopeAsync(string scope, string deploymentName, int top, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations&$top="+top+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperationsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployments operation.
		/// DeploymentOperations_GetAtScope {scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="operationId">The ID of the operation to get.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns information about the deployment operation.</returns>
		public async Task<DeploymentOperation> DeploymentOperations_GetAtScopeAsync(string scope, string deploymentName, string operationId, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
		/// Deployments_ValidateAtScope {scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="deploymentName">The name of the deployment.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Parameters to validate.</param>
		/// <returns>OK - Returns the validation result.</returns>
		public async Task<DeploymentValidateResult> Deployments_ValidateAtScopeAsync(string scope, string deploymentName, string api_version, Deployment requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/deployments/"+ (deploymentName==null? "" : System.Uri.EscapeDataString(deploymentName))+"/validate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeploymentValidateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the entire set of tags on a resource or subscription.
		/// Tags_GetAtScope {scope}/providers/Microsoft.Resources/tags/default
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>Returns tags from the specified object.</returns>
		public async Task<TagsResource> Tags_GetAtScopeAsync(string scope, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/tags/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagsResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the entire set of tags on a resource or subscription.
		/// This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags.
		/// Tags_CreateOrUpdateAtScope {scope}/providers/Microsoft.Resources/tags/default
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>Tags updated successfully. Returns tags from the specified object.</returns>
		public async Task<TagsResource> Tags_CreateOrUpdateAtScopeAsync(string scope, string api_version, TagsResource requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/tags/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagsResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the entire set of tags on a resource or subscription.
		/// Tags_DeleteAtScope {scope}/providers/Microsoft.Resources/tags/default
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>Tags successfully deleted.</returns>
		public async Task Tags_DeleteAtScopeAsync(string scope, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/tags/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Selectively updates the set of tags on a resource or subscription.
		/// This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows adding tags with new names and updating the values of tags with existing names. The 'delete' option allows selectively deleting tags based on given names or name/value pairs.
		/// Tags_UpdateAtScope {scope}/providers/Microsoft.Resources/tags/default
		/// </summary>
		/// <param name="scope">The resource scope.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>Tags updated successfully. Returns tags from the specified object.</returns>
		public async Task<TagsResource> Tags_UpdateAtScopeAsync(string scope, string api_version, TagsPatchResource requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.Resources/tags/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagsResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
