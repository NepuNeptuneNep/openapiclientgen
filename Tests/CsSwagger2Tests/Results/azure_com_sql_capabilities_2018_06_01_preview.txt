//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Supported auto pause delay time range
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoPauseDelayTimeRange
	{
		
		/// <summary>
		/// Default value is no value is provided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int32> Default { get; set; }
		
		/// <summary>
		/// Value that is used to not pause (infinite delay before pause)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotPauseValue")]
		public System.Nullable<System.Int32> DoNotPauseValue { get; set; }
		
		/// <summary>
		/// Maximum value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public System.Nullable<System.Int32> MaxValue { get; set; }
		
		/// <summary>
		/// Minimum value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public System.Nullable<System.Int32> MinValue { get; set; }
		
		/// <summary>
		/// Step value for discrete values between the minimum value and the maximum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepSize")]
		public System.Nullable<System.Int32> StepSize { get; set; }
		
		/// <summary>
		/// Unit of time that delay is expressed in
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<AutoPauseDelayTimeRangeUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoPauseDelayTimeRangeUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minutes = 0,
	}
	
	/// <summary>
	/// The edition capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EditionCapability
	{
		
		/// <summary>
		/// The database edition name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The read scale capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readScale")]
		public ReadScaleCapability ReadScale { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The list of supported service objectives for the edition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedServiceLevelObjectives")]
		public ServiceObjectiveCapability[] SupportedServiceLevelObjectives { get; set; }
		
		/// <summary>
		/// The list of supported storage capabilities for this edition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedStorageCapabilities")]
		public StorageCapability[] SupportedStorageCapabilities { get; set; }
		
		/// <summary>
		/// Whether or not zone redundancy is supported for the edition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneRedundant")]
		public System.Nullable<System.Boolean> ZoneRedundant { get; set; }
	}
	
	/// <summary>
	/// The read scale capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReadScaleCapability
	{
		
		/// <summary>
		/// The maximum number of read scale replicas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNumberOfReplicas")]
		public System.Nullable<System.Int32> MaxNumberOfReplicas { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ReadScaleCapabilityStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ReadScaleCapabilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Visible = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 3,
	}
	
	/// <summary>
	/// The service objectives capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceObjectiveCapability
	{
		
		/// <summary>
		/// The compute model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeModel")]
		public string ComputeModel { get; set; }
		
		/// <summary>
		/// The unique ID of the service objective.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The maximum size capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedMaxSize")]
		public MaxSizeCapability IncludedMaxSize { get; set; }
		
		/// <summary>
		/// The service objective name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The performance level capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceLevel")]
		public PerformanceLevelCapability PerformanceLevel { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// An ARM Resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ServiceObjectiveCapabilitySku Sku { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// Supported auto pause delay time range
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedAutoPauseDelay")]
		public AutoPauseDelayTimeRange SupportedAutoPauseDelay { get; set; }
		
		/// <summary>
		/// List of supported license types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedLicenseTypes")]
		public LicenseTypeCapability[] SupportedLicenseTypes { get; set; }
		
		/// <summary>
		/// The list of supported maximum database sizes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedMaxSizes")]
		public MaxSizeRangeCapability[] SupportedMaxSizes { get; set; }
		
		/// <summary>
		/// List of supported min capacities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedMinCapacities")]
		public MinCapacityCapability[] SupportedMinCapacities { get; set; }
		
		/// <summary>
		/// Whether or not zone redundancy is supported for the service objective.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneRedundant")]
		public System.Nullable<System.Boolean> ZoneRedundant { get; set; }
	}
	
	/// <summary>
	/// The maximum size capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MaxSizeCapability
	{
		
		/// <summary>
		/// The maximum size limit (see 'unit' for the units).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The units that the limit is expressed in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<MaxSizeCapabilityUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MaxSizeCapabilityUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Petabytes = 3,
	}
	
	/// <summary>
	/// The performance level capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PerformanceLevelCapability
	{
		
		/// <summary>
		/// Unit type used to measure performance level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<PerformanceLevelCapabilityUnit> Unit { get; set; }
		
		/// <summary>
		/// Performance level value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PerformanceLevelCapabilityUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DTU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCores = 1,
	}
	
	public class ServiceObjectiveCapabilitySku
	{
		
		/// <summary>
		/// Capacity of the particular SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// If the service has different generations of hardware, for the same SKU, then that can be captured here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The name of the SKU, typically, a letter + Number code, e.g. P3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size of the particular SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The tier or edition of the particular SKU, e.g. Basic, Premium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// The license type capability
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LicenseTypeCapability
	{
		
		/// <summary>
		/// License type identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
	}
	
	/// <summary>
	/// The maximum size range capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MaxSizeRangeCapability
	{
		
		/// <summary>
		/// The log size capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logSize")]
		public LogSizeCapability LogSize { get; set; }
		
		/// <summary>
		/// The maximum size capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public MaxSizeCapability MaxValue { get; set; }
		
		/// <summary>
		/// The maximum size capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public MaxSizeCapability MinValue { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The maximum size capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleSize")]
		public MaxSizeCapability ScaleSize { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
	}
	
	/// <summary>
	/// The log size capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogSizeCapability
	{
		
		/// <summary>
		/// The log size limit (see 'unit' for the units).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The units that the limit is expressed in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<LogSizeCapabilityUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LogSizeCapabilityUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Petabytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 4,
	}
	
	/// <summary>
	/// The min capacity capability
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MinCapacityCapability
	{
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// Min capacity value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// The storage account type capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageCapability
	{
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The storage account type for the database's backups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountType")]
		public System.Nullable<StorageCapabilityStorageAccountType> StorageAccountType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StorageCapabilityStorageAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LRS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZRS = 2,
	}
	
	/// <summary>
	/// The elastic pool edition capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolEditionCapability
	{
		
		/// <summary>
		/// The elastic pool edition name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The list of supported elastic pool DTU levels for the edition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedElasticPoolPerformanceLevels")]
		public ElasticPoolPerformanceLevelCapability[] SupportedElasticPoolPerformanceLevels { get; set; }
		
		/// <summary>
		/// Whether or not zone redundancy is supported for the edition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneRedundant")]
		public System.Nullable<System.Boolean> ZoneRedundant { get; set; }
	}
	
	/// <summary>
	/// The Elastic Pool performance level capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolPerformanceLevelCapability
	{
		
		/// <summary>
		/// The maximum size capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedMaxSize")]
		public MaxSizeCapability IncludedMaxSize { get; set; }
		
		/// <summary>
		/// The maximum number of databases supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDatabaseCount")]
		public System.Nullable<System.Int32> MaxDatabaseCount { get; set; }
		
		/// <summary>
		/// The performance level capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceLevel")]
		public PerformanceLevelCapability PerformanceLevel { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// An ARM Resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ElasticPoolPerformanceLevelCapabilitySku Sku { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// List of supported license types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedLicenseTypes")]
		public LicenseTypeCapability[] SupportedLicenseTypes { get; set; }
		
		/// <summary>
		/// The list of supported max sizes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedMaxSizes")]
		public MaxSizeRangeCapability[] SupportedMaxSizes { get; set; }
		
		/// <summary>
		/// The list of supported per database max performance levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedPerDatabaseMaxPerformanceLevels")]
		public ElasticPoolPerDatabaseMaxPerformanceLevelCapability[] SupportedPerDatabaseMaxPerformanceLevels { get; set; }
		
		/// <summary>
		/// The list of supported per database max sizes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedPerDatabaseMaxSizes")]
		public MaxSizeRangeCapability[] SupportedPerDatabaseMaxSizes { get; set; }
		
		/// <summary>
		/// Whether or not zone redundancy is supported for the performance level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneRedundant")]
		public System.Nullable<System.Boolean> ZoneRedundant { get; set; }
	}
	
	public class ElasticPoolPerformanceLevelCapabilitySku
	{
		
		/// <summary>
		/// Capacity of the particular SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// If the service has different generations of hardware, for the same SKU, then that can be captured here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The name of the SKU, typically, a letter + Number code, e.g. P3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size of the particular SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The tier or edition of the particular SKU, e.g. Basic, Premium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// The max per-database performance level capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolPerDatabaseMaxPerformanceLevelCapability
	{
		
		/// <summary>
		/// The maximum performance level per database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Double> Limit { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The list of supported min database performance levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedPerDatabaseMinPerformanceLevels")]
		public ElasticPoolPerDatabaseMinPerformanceLevelCapability[] SupportedPerDatabaseMinPerformanceLevels { get; set; }
		
		/// <summary>
		/// Unit type used to measure performance level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public PerformanceLevelCapabilityUnit Unit { get; set; }
	}
	
	/// <summary>
	/// The minimum per-database performance level capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ElasticPoolPerDatabaseMinPerformanceLevelCapability
	{
		
		/// <summary>
		/// The minimum performance level per database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Double> Limit { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// Unit type used to measure performance level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public PerformanceLevelCapabilityUnit Unit { get; set; }
	}
	
	/// <summary>
	/// The instance pool capability
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstancePoolEditionCapability
	{
		
		/// <summary>
		/// The instance pool version name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The supported families.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedFamilies")]
		public InstancePoolFamilyCapability[] SupportedFamilies { get; set; }
	}
	
	/// <summary>
	/// The instance pool family capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstancePoolFamilyCapability
	{
		
		/// <summary>
		/// Family name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// List of supported license types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedLicenseTypes")]
		public LicenseTypeCapability[] SupportedLicenseTypes { get; set; }
		
		/// <summary>
		/// List of supported virtual cores values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedVcoresValues")]
		public InstancePoolVcoresCapability[] SupportedVcoresValues { get; set; }
	}
	
	/// <summary>
	/// The managed instance virtual cores capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstancePoolVcoresCapability
	{
		
		/// <summary>
		/// The virtual cores identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The maximum size capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageLimit")]
		public MaxSizeCapability StorageLimit { get; set; }
		
		/// <summary>
		/// The virtual cores value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// The location capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocationCapabilities
	{
		
		/// <summary>
		/// The location name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The list of supported managed instance versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedManagedInstanceVersions")]
		public ManagedInstanceVersionCapability[] SupportedManagedInstanceVersions { get; set; }
		
		/// <summary>
		/// The list of supported server versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedServerVersions")]
		public ServerVersionCapability[] SupportedServerVersions { get; set; }
	}
	
	/// <summary>
	/// The managed instance capability
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedInstanceVersionCapability
	{
		
		/// <summary>
		/// The server version name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The list of supported managed instance editions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedEditions")]
		public ManagedInstanceEditionCapability[] SupportedEditions { get; set; }
		
		/// <summary>
		/// The list of supported instance pool editions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedInstancePoolEditions")]
		public InstancePoolEditionCapability[] SupportedInstancePoolEditions { get; set; }
	}
	
	/// <summary>
	/// The managed server capability
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedInstanceEditionCapability
	{
		
		/// <summary>
		/// The managed server version name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The supported families.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedFamilies")]
		public ManagedInstanceFamilyCapability[] SupportedFamilies { get; set; }
	}
	
	/// <summary>
	/// The managed server family capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedInstanceFamilyCapability
	{
		
		/// <summary>
		/// Family name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// List of supported license types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedLicenseTypes")]
		public LicenseTypeCapability[] SupportedLicenseTypes { get; set; }
		
		/// <summary>
		/// List of supported virtual cores values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedVcoresValues")]
		public ManagedInstanceVcoresCapability[] SupportedVcoresValues { get; set; }
	}
	
	/// <summary>
	/// The managed instance virtual cores capability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedInstanceVcoresCapability
	{
		
		/// <summary>
		/// The maximum size capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedMaxSize")]
		public MaxSizeCapability IncludedMaxSize { get; set; }
		
		/// <summary>
		/// True if this service objective is supported for managed instances in an instance pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instancePoolSupported")]
		public System.Nullable<System.Boolean> InstancePoolSupported { get; set; }
		
		/// <summary>
		/// The virtual cores identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// True if this service objective is supported for standalone managed instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standaloneSupported")]
		public System.Nullable<System.Boolean> StandaloneSupported { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// Storage size ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedStorageSizes")]
		public MaxSizeRangeCapability[] SupportedStorageSizes { get; set; }
		
		/// <summary>
		/// The virtual cores value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// The server capability
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerVersionCapability
	{
		
		/// <summary>
		/// The server version name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reason for the capability not being available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The status of the capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadScaleCapabilityStatus Status { get; set; }
		
		/// <summary>
		/// The list of supported database editions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedEditions")]
		public EditionCapability[] SupportedEditions { get; set; }
		
		/// <summary>
		/// The list of supported elastic pool editions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedElasticPoolEditions")]
		public ElasticPoolEditionCapability[] SupportedElasticPoolEditions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the subscription capabilities available for the specified location.
		/// Capabilities_ListByLocation subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/capabilities
		/// </summary>
		/// <param name="locationName">The location name whose capabilities are retrieved.</param>
		/// <param name="include">If specified, restricts the response to only include the selected item.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the subscription location capabilities.</returns>
		public async Task<LocationCapabilities> Capabilities_ListByLocationAsync(string locationName, Capabilities_ListByLocationInclude include, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/capabilities&include=" + include+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationCapabilities>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Capabilities_ListByLocationInclude
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supportedEditions = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supportedElasticPoolEditions = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supportedManagedInstanceVersions = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supportedInstancePoolEditions = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supportedManagedInstanceEditions = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
