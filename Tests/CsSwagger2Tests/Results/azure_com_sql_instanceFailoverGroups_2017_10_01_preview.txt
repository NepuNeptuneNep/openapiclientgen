//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An instance failover group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstanceFailoverGroup
	{
		
		/// <summary>
		/// Properties of a instance failover group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public InstanceFailoverGroupProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a instance failover group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstanceFailoverGroupProperties
	{
		
		/// <summary>
		/// List of managed instance pairs in the failover group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="managedInstancePairs")]
		public ManagedInstancePairInfo[] ManagedInstancePairs { get; set; }
		
		/// <summary>
		/// Partner region information for the failover group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partnerRegions")]
		public PartnerRegionInfo[] PartnerRegions { get; set; }
		
		/// <summary>
		/// Read-only endpoint of the failover group instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnlyEndpoint")]
		public InstanceFailoverGroupReadOnlyEndpoint ReadOnlyEndpoint { get; set; }
		
		/// <summary>
		/// Read-write endpoint of the failover group instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readWriteEndpoint")]
		public InstanceFailoverGroupReadWriteEndpoint ReadWriteEndpoint { get; set; }
		
		/// <summary>
		/// Local replication role of the failover group instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationRole")]
		public PartnerRegionInfoReplicationRole ReplicationRole { get; set; }
		
		/// <summary>
		/// Replication state of the failover group instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationState")]
		public string ReplicationState { get; set; }
	}
	
	/// <summary>
	/// Pairs of Managed Instances in the failover group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedInstancePairInfo
	{
		
		/// <summary>
		/// Id of Partner Managed Instance in pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerManagedInstanceId")]
		public string PartnerManagedInstanceId { get; set; }
		
		/// <summary>
		/// Id of Primary Managed Instance in pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryManagedInstanceId")]
		public string PrimaryManagedInstanceId { get; set; }
	}
	
	/// <summary>
	/// Partner region information for the failover group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartnerRegionInfo
	{
		
		/// <summary>
		/// Geo location of the partner managed instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Replication role of the partner managed instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationRole")]
		public System.Nullable<PartnerRegionInfoReplicationRole> ReplicationRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PartnerRegionInfoReplicationRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Secondary = 1,
	}
	
	/// <summary>
	/// Read-only endpoint of the failover group instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstanceFailoverGroupReadOnlyEndpoint
	{
		
		/// <summary>
		/// Failover policy of the read-only endpoint for the failover group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverPolicy")]
		public System.Nullable<InstanceFailoverGroupReadOnlyEndpointFailoverPolicy> FailoverPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InstanceFailoverGroupReadOnlyEndpointFailoverPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Read-write endpoint of the failover group instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstanceFailoverGroupReadWriteEndpoint
	{
		
		/// <summary>
		/// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failoverPolicy")]
		public InstanceFailoverGroupReadWriteEndpointFailoverPolicy FailoverPolicy { get; set; }
		
		/// <summary>
		/// Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverWithDataLossGracePeriodMinutes")]
		public System.Nullable<System.Int32> FailoverWithDataLossGracePeriodMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InstanceFailoverGroupReadWriteEndpointFailoverPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Manual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automatic = 1,
	}
	
	/// <summary>
	/// A list of instance failover groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstanceFailoverGroupListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public InstanceFailoverGroup[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the failover groups in a location.
		/// InstanceFailoverGroups_ListByLocation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The name of the region where the resource is located.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the failover groups.</returns>
		public async Task<InstanceFailoverGroupListResult> InstanceFailoverGroups_ListByLocationAsync(string resourceGroupName, string locationName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/instanceFailoverGroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InstanceFailoverGroupListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a failover group.
		/// InstanceFailoverGroups_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The name of the region where the resource is located.</param>
		/// <param name="failoverGroupName">The name of the failover group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the specified failover group.</returns>
		public async Task<InstanceFailoverGroup> InstanceFailoverGroups_GetAsync(string resourceGroupName, string locationName, string failoverGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/instanceFailoverGroups/"+ (failoverGroupName==null? "" : System.Uri.EscapeDataString(failoverGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InstanceFailoverGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a failover group.
		/// InstanceFailoverGroups_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The name of the region where the resource is located.</param>
		/// <param name="failoverGroupName">The name of the failover group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The failover group parameters.</param>
		/// <returns>Successfully updated the failover group.</returns>
		public async Task<InstanceFailoverGroup> InstanceFailoverGroups_CreateOrUpdateAsync(string resourceGroupName, string locationName, string failoverGroupName, string subscriptionId, string api_version, InstanceFailoverGroup requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/instanceFailoverGroups/"+ (failoverGroupName==null? "" : System.Uri.EscapeDataString(failoverGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InstanceFailoverGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a failover group.
		/// InstanceFailoverGroups_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The name of the region where the resource is located.</param>
		/// <param name="failoverGroupName">The name of the failover group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully deleted the failover group.</returns>
		public async Task InstanceFailoverGroups_DeleteAsync(string resourceGroupName, string locationName, string failoverGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/instanceFailoverGroups/"+ (failoverGroupName==null? "" : System.Uri.EscapeDataString(failoverGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fails over from the current primary managed instance to this managed instance.
		/// InstanceFailoverGroups_Failover subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/failover
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The name of the region where the resource is located.</param>
		/// <param name="failoverGroupName">The name of the failover group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully failed over.</returns>
		public async Task<InstanceFailoverGroup> InstanceFailoverGroups_FailoverAsync(string resourceGroupName, string locationName, string failoverGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/instanceFailoverGroups/"+ (failoverGroupName==null? "" : System.Uri.EscapeDataString(failoverGroupName))+"/failover&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InstanceFailoverGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fails over from the current primary managed instance to this managed instance. This operation might result in data loss.
		/// InstanceFailoverGroups_ForceFailoverAllowDataLoss subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/forceFailoverAllowDataLoss
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The name of the region where the resource is located.</param>
		/// <param name="failoverGroupName">The name of the failover group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully failed over.</returns>
		public async Task<InstanceFailoverGroup> InstanceFailoverGroups_ForceFailoverAllowDataLossAsync(string resourceGroupName, string locationName, string failoverGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/instanceFailoverGroups/"+ (failoverGroupName==null? "" : System.Uri.EscapeDataString(failoverGroupName))+"/forceFailoverAllowDataLoss&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InstanceFailoverGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
