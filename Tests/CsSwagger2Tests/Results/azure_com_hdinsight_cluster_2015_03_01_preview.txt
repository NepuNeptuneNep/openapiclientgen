//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The autoscale request parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Autoscale
	{
		
		/// <summary>
		/// The load-based autoscale request parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public AutoscaleCapacity Capacity { get; set; }
		
		/// <summary>
		/// Schedule-based autoscale request parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public AutoscaleRecurrence Recurrence { get; set; }
	}
	
	/// <summary>
	/// The load-based autoscale request parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleCapacity
	{
		
		/// <summary>
		/// The maximum instance count of the cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxInstanceCount")]
		public System.Nullable<System.Int32> MaxInstanceCount { get; set; }
		
		/// <summary>
		/// The minimum instance count of the cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minInstanceCount")]
		public System.Nullable<System.Int32> MinInstanceCount { get; set; }
	}
	
	/// <summary>
	/// Schedule-based autoscale request parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleRecurrence
	{
		
		/// <summary>
		/// Array of schedule-based autoscale rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public AutoscaleSchedule[] Schedule { get; set; }
		
		/// <summary>
		/// The time zone for the autoscale schedule times
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// Parameters for a schedule-based autoscale rule, consisting of an array of days + a time and capacity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleSchedule
	{
		
		/// <summary>
		/// Days of the week for a schedule-based autoscale rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="days")]
		public string[] Days { get; set; }
		
		/// <summary>
		/// Time and capacity request parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeAndCapacity")]
		public AutoscaleTimeAndCapacity TimeAndCapacity { get; set; }
	}
	
	/// <summary>
	/// Time and capacity request parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleTimeAndCapacity
	{
		
		/// <summary>
		/// The maximum instance count of the cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxInstanceCount")]
		public System.Nullable<System.Int32> MaxInstanceCount { get; set; }
		
		/// <summary>
		/// The minimum instance count of the cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minInstanceCount")]
		public System.Nullable<System.Int32> MinInstanceCount { get; set; }
		
		/// <summary>
		/// 24-hour time in the form xx:xx
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// The information of AAD security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClientGroupInfo
	{
		
		/// <summary>
		/// The AAD security group id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// The AAD security group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
	}
	
	/// <summary>
	/// The HDInsight cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Cluster : TrackedResource
	{
		
		/// <summary>
		/// The ETag for the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Identity for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ClusterIdentity Identity { get; set; }
		
		/// <summary>
		/// The properties of cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ClusterGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The CreateCluster request parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterCreateParametersExtended
	{
		
		/// <summary>
		/// Identity for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ClusterIdentity Identity { get; set; }
		
		/// <summary>
		/// The location of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The cluster create parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ClusterCreateProperties Properties { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The cluster create parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterCreateProperties
	{
		
		/// <summary>
		/// The cluster definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterDefinition")]
		public ClusterDefinition ClusterDefinition { get; set; }
		
		/// <summary>
		/// The version of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterVersion")]
		public string ClusterVersion { get; set; }
		
		/// <summary>
		/// Describes the compute profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeProfile")]
		public ComputeProfile ComputeProfile { get; set; }
		
		/// <summary>
		/// The disk encryption properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskEncryptionProperties")]
		public DiskEncryptionProperties DiskEncryptionProperties { get; set; }
		
		/// <summary>
		/// The kafka rest proxy configuration which contains AAD security group information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kafkaRestProperties")]
		public KafkaRestProperties KafkaRestProperties { get; set; }
		
		/// <summary>
		/// The type of operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public System.Nullable<ClusterCreatePropertiesOsType> OsType { get; set; }
		
		/// <summary>
		/// The security profile which contains Ssh public key for the HDInsight cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityProfile")]
		public SecurityProfile SecurityProfile { get; set; }
		
		/// <summary>
		/// The storage profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageProfile")]
		public StorageProfile StorageProfile { get; set; }
		
		/// <summary>
		/// The cluster tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<ClusterCreatePropertiesTier> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterCreatePropertiesOsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterCreatePropertiesTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 1,
	}
	
	/// <summary>
	/// The cluster definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterDefinition
	{
		
		/// <summary>
		/// The link to the blueprint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blueprint")]
		public string Blueprint { get; set; }
		
		/// <summary>
		/// The versions of different services in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentVersion")]
		public System.Collections.Generic.Dictionary<string, string> ComponentVersion { get; set; }
		
		/// <summary>
		/// The cluster configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public string Configurations { get; set; }
		
		/// <summary>
		/// The type of cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// The Disk Encryption Cluster request parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterDiskEncryptionParameters
	{
		
		/// <summary>
		/// Key name that is used for enabling disk encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Specific key version that is used for enabling disk encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVersion")]
		public string KeyVersion { get; set; }
		
		/// <summary>
		/// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vaultUri")]
		public string VaultUri { get; set; }
	}
	
	/// <summary>
	/// The properties of cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterGetProperties
	{
		
		/// <summary>
		/// The cluster definition.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clusterDefinition")]
		public ClusterDefinition ClusterDefinition { get; set; }
		
		/// <summary>
		/// The state of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterState")]
		public string ClusterState { get; set; }
		
		/// <summary>
		/// The version of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterVersion")]
		public string ClusterVersion { get; set; }
		
		/// <summary>
		/// Describes the compute profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeProfile")]
		public ComputeProfile ComputeProfile { get; set; }
		
		/// <summary>
		/// The list of connectivity endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectivityEndpoints")]
		public ConnectivityEndpoint[] ConnectivityEndpoints { get; set; }
		
		/// <summary>
		/// The date on which the cluster was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// The disk encryption properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskEncryptionProperties")]
		public DiskEncryptionProperties DiskEncryptionProperties { get; set; }
		
		/// <summary>
		/// The list of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Errors[] Errors { get; set; }
		
		/// <summary>
		/// The kafka rest proxy configuration which contains AAD security group information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kafkaRestProperties")]
		public KafkaRestProperties KafkaRestProperties { get; set; }
		
		/// <summary>
		/// The type of operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public ClusterCreatePropertiesOsType OsType { get; set; }
		
		/// <summary>
		/// The provisioning state, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ClusterGetPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The quota properties for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaInfo")]
		public QuotaInfo QuotaInfo { get; set; }
		
		/// <summary>
		/// The security profile which contains Ssh public key for the HDInsight cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityProfile")]
		public SecurityProfile SecurityProfile { get; set; }
		
		/// <summary>
		/// The cluster tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public ClusterCreatePropertiesTier Tier { get; set; }
	}
	
	/// <summary>
	/// The connectivity properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectivityEndpoint
	{
		
		/// <summary>
		/// The location of the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The port to connect to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// The protocol of the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
	}
	
	/// <summary>
	/// The error message associated with the cluster creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Errors
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterGetPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 4,
	}
	
	/// <summary>
	/// Identity for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterIdentity
	{
		
		/// <summary>
		/// The principal id of cluster identity. This property will only be provided for a system assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant id associated with the cluster. This property will only be provided for a system assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ClusterIdentityType> Type { get; set; }
		
		/// <summary>
		/// The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, ClusterIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SystemAssigned, UserAssigned")]
		SystemAssigned_UserAssigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 3,
	}
	
	public class ClusterIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// The client id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The principal id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// The ListPersistedScriptActions operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterListPersistedScriptActionsResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of Persisted Script Actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RuntimeScriptAction[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes a script action on a running cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuntimeScriptAction
	{
		
		/// <summary>
		/// The application name of the script action, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// The name of the script action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters for the script
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// The list of roles where script will be executed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
		
		/// <summary>
		/// The URI to the script.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The List Cluster operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of Clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Cluster[] Value { get; set; }
	}
	
	/// <summary>
	/// The list runtime script action detail response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterListRuntimeScriptActionDetailResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RuntimeScriptActionDetail[] Value { get; set; }
	}
	
	/// <summary>
	/// The execution details of a script action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RuntimeScriptActionDetail : RuntimeScriptAction
	{
		
		/// <summary>
		/// The script action execution debug information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugInformation")]
		public string DebugInformation { get; set; }
		
		/// <summary>
		/// The end time of script action execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The summary of script action execution result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionSummary")]
		public ScriptActionExecutionSummary[] ExecutionSummary { get; set; }
		
		/// <summary>
		/// The reason why the script action was executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The execution id of the script action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptExecutionId")]
		public System.Nullable<System.Int64> ScriptExecutionId { get; set; }
		
		/// <summary>
		/// The start time of script action execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The current execution status of the script action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The execution summary of a script action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScriptActionExecutionSummary
	{
		
		/// <summary>
		/// The instance count for a given script action execution status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceCount")]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		/// <summary>
		/// The status of script action execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The PatchCluster request parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterPatchParameters
	{
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The Resize Cluster request parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterResizeParameters
	{
		
		/// <summary>
		/// The target instance count for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetInstanceCount")]
		public System.Nullable<System.Int32> TargetInstanceCount { get; set; }
	}
	
	/// <summary>
	/// Describes the compute profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputeProfile
	{
		
		/// <summary>
		/// The list of roles in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public Role[] Roles { get; set; }
	}
	
	/// <summary>
	/// Describes a role on the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Role
	{
		
		/// <summary>
		/// The autoscale request parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscale")]
		public Autoscale Autoscale { get; set; }
		
		/// <summary>
		/// The data disks groups for the role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisksGroups")]
		public DataDisksGroups[] DataDisksGroups { get; set; }
		
		/// <summary>
		/// The hardware profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardwareProfile")]
		public HardwareProfile HardwareProfile { get; set; }
		
		/// <summary>
		/// The minimum instance count of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minInstanceCount")]
		public System.Nullable<System.Int32> MinInstanceCount { get; set; }
		
		/// <summary>
		/// The name of the role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Linux operation systems profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osProfile")]
		public OsProfile OsProfile { get; set; }
		
		/// <summary>
		/// The list of script actions on the role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptActions")]
		public RoleScriptActions[] RoleScriptActions { get; set; }
		
		/// <summary>
		/// The instance count of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetInstanceCount")]
		public System.Nullable<System.Int32> TargetInstanceCount { get; set; }
		
		/// <summary>
		/// The virtual network properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkProfile")]
		public VirtualNetworkProfile VirtualNetworkProfile { get; set; }
	}
	
	/// <summary>
	/// The data disks groups for the role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataDisksGroups
	{
		
		/// <summary>
		/// ReadOnly. The DiskSize in GB. Do not set this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGB")]
		public System.Nullable<System.Int32> DiskSizeGB { get; set; }
		
		/// <summary>
		/// The number of disks per node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disksPerNode")]
		public System.Nullable<System.Int32> DisksPerNode { get; set; }
		
		/// <summary>
		/// ReadOnly. The storage account type. Do not set this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountType")]
		public string StorageAccountType { get; set; }
	}
	
	public class RoleScriptActions
	{
		
		/// <summary>
		/// The name of the script action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters for the script provided.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// The URI to the script.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The disk encryption properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DiskEncryptionProperties
	{
		
		/// <summary>
		/// Algorithm identifier for encryption, default RSA-OAEP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionAlgorithm")]
		public System.Nullable<DiskEncryptionPropertiesEncryptionAlgorithm> EncryptionAlgorithm { get; set; }
		
		/// <summary>
		/// Key name that is used for enabling disk encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Specific key version that is used for enabling disk encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVersion")]
		public string KeyVersion { get; set; }
		
		/// <summary>
		/// Resource ID of Managed Identity that is used to access the key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msiResourceId")]
		public string MsiResourceId { get; set; }
		
		/// <summary>
		/// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vaultUri")]
		public string VaultUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DiskEncryptionPropertiesEncryptionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA-OAEP")]
		RSAMinusOAEP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSA-OAEP-256")]
		RSAMinusOAEPMinus256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA1_5 = 2,
	}
	
	/// <summary>
	/// The parameters for the script actions to execute on a running cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExecuteScriptActionParameters
	{
		
		/// <summary>
		/// Gets or sets if the scripts needs to be persisted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="persistOnSuccess")]
		public bool PersistOnSuccess { get; set; }
		
		/// <summary>
		/// The list of run time script actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptActions")]
		public RuntimeScriptAction[] ScriptActions { get; set; }
	}
	
	/// <summary>
	/// Gateway settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GatewaySettings
	{
		
		/// <summary>
		/// Indicates whether or not the gateway settings based authorization is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restAuthCredential.isEnabled")]
		public string RestAuthCredential_isEnabled { get; set; }
		
		/// <summary>
		/// The gateway settings user password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restAuthCredential.password")]
		public string RestAuthCredential_password { get; set; }
		
		/// <summary>
		/// The gateway settings user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restAuthCredential.username")]
		public string RestAuthCredential_username { get; set; }
	}
	
	/// <summary>
	/// The hardware profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HardwareProfile
	{
		
		/// <summary>
		/// The size of the VM
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	/// <summary>
	/// The kafka rest proxy configuration which contains AAD security group information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KafkaRestProperties
	{
		
		/// <summary>
		/// The information of AAD security group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientGroupInfo")]
		public ClientGroupInfo ClientGroupInfo { get; set; }
	}
	
	/// <summary>
	/// The ssh username, password, and ssh public key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinuxOperatingSystemProfile
	{
		
		/// <summary>
		/// The password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The list of SSH public keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshProfile")]
		public SshProfile SshProfile { get; set; }
		
		/// <summary>
		/// The username.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// The azure async operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResource
	{
		
		/// <summary>
		/// The error message associated with the cluster creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Errors Error { get; set; }
		
		/// <summary>
		/// The async operation state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OperationResourceStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// The Linux operation systems profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OsProfile
	{
		
		/// <summary>
		/// The ssh username, password, and ssh public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linuxOperatingSystemProfile")]
		public LinuxOperatingSystemProfile LinuxOperatingSystemProfile { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
	}
	
	/// <summary>
	/// The quota properties for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QuotaInfo
	{
		
		/// <summary>
		/// The cores used by the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coresUsed")]
		public System.Nullable<System.Int32> CoresUsed { get; set; }
	}
	
	/// <summary>
	/// The core properties of ARM resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Fully qualified resource Id for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The security profile which contains Ssh public key for the HDInsight cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecurityProfile
	{
		
		/// <summary>
		/// The resource ID of the user's Azure Active Directory Domain Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aaddsResourceId")]
		public string AaddsResourceId { get; set; }
		
		/// <summary>
		/// Optional. The Distinguished Names for cluster user groups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUsersGroupDNs")]
		public string[] ClusterUsersGroupDNs { get; set; }
		
		/// <summary>
		/// The directory type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directoryType")]
		public System.Nullable<SecurityProfileDirectoryType> DirectoryType { get; set; }
		
		/// <summary>
		/// The organization's active directory domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The domain admin password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainUserPassword")]
		public string DomainUserPassword { get; set; }
		
		/// <summary>
		/// The domain user account that will have admin privileges on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainUsername")]
		public string DomainUsername { get; set; }
		
		/// <summary>
		/// The LDAPS protocol URLs to communicate with the Active Directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ldapsUrls")]
		public string[] LdapsUrls { get; set; }
		
		/// <summary>
		/// User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msiResourceId")]
		public string MsiResourceId { get; set; }
		
		/// <summary>
		/// The organizational unit within the Active Directory to place the cluster and service accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationalUnitDN")]
		public string OrganizationalUnitDN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecurityProfileDirectoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActiveDirectory = 0,
	}
	
	/// <summary>
	/// The list of SSH public keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SshProfile
	{
		
		/// <summary>
		/// The list of SSH public keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKeys")]
		public SshPublicKey[] PublicKeys { get; set; }
	}
	
	/// <summary>
	/// The SSH public key for the cluster nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SshPublicKey
	{
		
		/// <summary>
		/// The certificate for SSH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateData")]
		public string CertificateData { get; set; }
	}
	
	/// <summary>
	/// The storage Account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccount
	{
		
		/// <summary>
		/// The container in the storage account, only to be specified for WASB storage accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// The filesystem, only to be specified for Azure Data Lake Storage Gen 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSystem")]
		public string FileSystem { get; set; }
		
		/// <summary>
		/// Whether or not the storage account is the default storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// The storage account access key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The managed identity (MSI) that is allowed to access the storage account, only to be specified for Azure Data Lake Storage Gen 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msiResourceId")]
		public string MsiResourceId { get; set; }
		
		/// <summary>
		/// The name of the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource ID of storage account, only to be specified for Azure Data Lake Storage Gen 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// The storage profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageProfile
	{
		
		/// <summary>
		/// The list of storage accounts in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageaccounts")]
		public StorageAccount[] Storageaccounts { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a ARM tracked top level resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource : Resource
	{
		
		/// <summary>
		/// The Azure Region where the resource lives
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The update gateway settings request parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateGatewaySettingsParameters
	{
		
		/// <summary>
		/// Indicates whether or not the gateway settings based authorization is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restAuthCredential.isEnabled")]
		public System.Nullable<System.Boolean> RestAuthCredential_isEnabled { get; set; }
		
		/// <summary>
		/// The gateway settings user password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restAuthCredential.password")]
		public string RestAuthCredential_password { get; set; }
		
		/// <summary>
		/// The gateway settings user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restAuthCredential.username")]
		public string RestAuthCredential_username { get; set; }
	}
	
	/// <summary>
	/// The virtual network properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkProfile
	{
		
		/// <summary>
		/// The ID of the virtual network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public string Subnet { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all the HDInsight clusters under the subscription.
		/// Clusters_List subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/clusters
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <returns>OK response definition.</returns>
		public async Task<ClusterListResult> Clusters_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.HDInsight/clusters&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClusterListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the HDInsight clusters in a resource group.
		/// Clusters_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <returns>OK response definition.</returns>
		public async Task<ClusterListResult> Clusters_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HDInsight/clusters&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClusterListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified cluster.
		/// Clusters_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="clusterName">The name of the cluster.</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <returns>OK response definition.</returns>
		public async Task<Cluster> Clusters_GetAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HDInsight/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Cluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new HDInsight cluster with the specified parameters.
		/// Clusters_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="clusterName">The name of the cluster.</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <param name="requestBody">The cluster create request.</param>
		/// <returns>OK response definition.</returns>
		public async Task<Cluster> Clusters_CreateAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version, ClusterCreateParametersExtended requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HDInsight/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Cluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified HDInsight cluster.
		/// Clusters_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="clusterName">The name of the cluster.</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <returns>Ok response definition.</returns>
		public async Task Clusters_DeleteAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HDInsight/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch HDInsight cluster with the specified parameters.
		/// Clusters_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="clusterName">The name of the cluster.</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <param name="requestBody">The cluster patch request.</param>
		/// <returns>OK response definition.</returns>
		public async Task<Cluster> Clusters_UpdateAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version, ClusterPatchParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HDInsight/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Cluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the gateway settings for the specified cluster.
		/// Clusters_GetGatewaySettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/getGatewaySettings
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="clusterName">The name of the cluster.</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <returns>OK response definition.</returns>
		public async Task<GatewaySettings> Clusters_GetGatewaySettingsAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HDInsight/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/getGatewaySettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GatewaySettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resizes the specified HDInsight cluster to the specified size.
		/// Clusters_Resize subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/roles/{roleName}/resize
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="clusterName">The name of the cluster.</param>
		/// <param name="roleName">The constant value for the roleName</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <param name="requestBody">The parameters for the resize operation.</param>
		/// <returns>OK response definition.</returns>
		public async Task Clusters_ResizeAsync(string subscriptionId, string resourceGroupName, string clusterName, Clusters_ResizeRoleName roleName, string api_version, ClusterResizeParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HDInsight/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/roles/"+roleName+"/resize&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotate disk encryption key of the specified HDInsight cluster.
		/// Clusters_RotateDiskEncryptionKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/rotatediskencryptionkey
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="clusterName">The name of the cluster.</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <param name="requestBody">The parameters for the disk encryption operation.</param>
		/// <returns>OK response definition.</returns>
		public async Task Clusters_RotateDiskEncryptionKeyAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version, ClusterDiskEncryptionParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HDInsight/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/rotatediskencryptionkey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures the gateway settings on the specified cluster.
		/// Clusters_UpdateGatewaySettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/updateGatewaySettings
		/// </summary>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="clusterName">The name of the cluster.</param>
		/// <param name="api_version">The HDInsight client API Version.</param>
		/// <param name="requestBody">The cluster configurations.</param>
		/// <returns>OK response definition.</returns>
		public async Task Clusters_UpdateGatewaySettingsAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version, UpdateGatewaySettingsParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HDInsight/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/updateGatewaySettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Clusters_ResizeRoleName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		workernode = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
