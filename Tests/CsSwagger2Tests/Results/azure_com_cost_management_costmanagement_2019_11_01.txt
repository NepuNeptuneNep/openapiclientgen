//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The common properties of the export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommonExportProperties
	{
		
		/// <summary>
		/// The definition of a query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public QueryDefinition Definition { get; set; }
		
		/// <summary>
		/// The delivery information associated with a export.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deliveryInfo")]
		public ExportDeliveryInfo DeliveryInfo { get; set; }
		
		/// <summary>
		/// The format of the export being delivered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<CommonExportPropertiesFormat> Format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CommonExportPropertiesFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Csv = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Dimension
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DimensionProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DimensionProperties
	{
		
		/// <summary>
		/// Dimension category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
		
		/// <summary>
		/// Dimension description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Filter enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterEnabled")]
		public System.Nullable<System.Boolean> FilterEnabled { get; set; }
		
		/// <summary>
		/// Grouping enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupingEnabled")]
		public System.Nullable<System.Boolean> GroupingEnabled { get; set; }
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Total number of data for the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		/// <summary>
		/// Usage end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageEnd")]
		public System.Nullable<System.DateTimeOffset> UsageEnd { get; set; }
		
		/// <summary>
		/// Usage start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageStart")]
		public System.Nullable<System.DateTimeOffset> UsageStart { get; set; }
	}
	
	/// <summary>
	/// Result of listing dimensions. It contains a list of available dimensions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DimensionsListResult
	{
		
		/// <summary>
		/// The list of dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Dimension[] Value { get; set; }
	}
	
	/// <summary>
	/// The details of the error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// The details of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDetails Error { get; set; }
	}
	
	/// <summary>
	/// A export resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Export
	{
		
		/// <summary>
		/// The properties of the export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ExportProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of the export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportProperties
	{
		
		/// <summary>
		/// The schedule associated with a export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public ExportSchedule Schedule { get; set; }
	}
	
	/// <summary>
	/// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportDeliveryDestination
	{
		
		/// <summary>
		/// The name of the container where exports will be uploaded.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// The resource id of the storage account where exports will be delivered.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The name of the directory where exports will be uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootFolderPath")]
		public string RootFolderPath { get; set; }
	}
	
	/// <summary>
	/// The delivery information associated with a export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportDeliveryInfo
	{
		
		/// <summary>
		/// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public ExportDeliveryDestination Destination { get; set; }
	}
	
	/// <summary>
	/// A export execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportExecution
	{
		
		/// <summary>
		/// The properties of the export execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ExportExecutionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Result of listing exports execution history of a export by name
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportExecutionListResult
	{
		
		/// <summary>
		/// The list of export executions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExportExecution[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the export execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportExecutionProperties
	{
		
		/// <summary>
		/// The type of the export execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionType")]
		public System.Nullable<ExportExecutionPropertiesExecutionType> ExecutionType { get; set; }
		
		/// <summary>
		/// The name of the file export got written to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// The time when export execution finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingEndTime")]
		public System.Nullable<System.DateTimeOffset> ProcessingEndTime { get; set; }
		
		/// <summary>
		/// The time when export was picked up to be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingStartTime")]
		public System.Nullable<System.DateTimeOffset> ProcessingStartTime { get; set; }
		
		/// <summary>
		/// The common properties of the export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runSettings")]
		public CommonExportProperties RunSettings { get; set; }
		
		/// <summary>
		/// The status of the export execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ExportExecutionPropertiesStatus> Status { get; set; }
		
		/// <summary>
		/// The identifier for the entity that executed the export. For OnDemand executions, it is the email id. For Scheduled executions, it is the constant value - System.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submittedBy")]
		public string SubmittedBy { get; set; }
		
		/// <summary>
		/// The time when export was queued to be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submittedTime")]
		public System.Nullable<System.DateTimeOffset> SubmittedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExportExecutionPropertiesExecutionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnDemand = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExportExecutionPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Timeout = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NewDataNotAvailable = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DataNotAvailable = 6,
	}
	
	/// <summary>
	/// Result of listing exports. It contains a list of available exports in the scope provided.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportListResult
	{
		
		/// <summary>
		/// The list of exports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Export[] Value { get; set; }
	}
	
	/// <summary>
	/// The start and end date for recurrence schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportRecurrencePeriod
	{
		
		/// <summary>
		/// The start date of recurrence.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.DateTimeOffset From { get; set; }
		
		/// <summary>
		/// The end date of recurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.DateTimeOffset> To { get; set; }
	}
	
	/// <summary>
	/// The schedule associated with a export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportSchedule
	{
		
		/// <summary>
		/// The schedule recurrence.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public ExportScheduleRecurrence Recurrence { get; set; }
		
		/// <summary>
		/// The start and end date for recurrence schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrencePeriod")]
		public ExportRecurrencePeriod RecurrencePeriod { get; set; }
		
		/// <summary>
		/// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ExportScheduleStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExportScheduleRecurrence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Annually = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExportScheduleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	/// <summary>
	/// A Cost management REST API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of listing cost management operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of cost management operations supported by the Microsoft.CostManagement resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The aggregation expression to be used in the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryAggregation
	{
		
		/// <summary>
		/// The name of the aggregation function to use.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="function")]
		public QueryAggregationFunction Function { get; set; }
		
		/// <summary>
		/// The name of the column to aggregate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum QueryAggregationFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryColumn
	{
		
		/// <summary>
		/// The name of column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The type of the column in the export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum QueryColumnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tag = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dimension = 1,
	}
	
	/// <summary>
	/// The comparison expression to be used in the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryComparisonExpression
	{
		
		/// <summary>
		/// The name of the column to use in comparison.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The operator to use for comparison.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public QueryComparisonExpressionOperator Operator { get; set; }
		
		/// <summary>
		/// Array of values to use for comparison
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum QueryComparisonExpressionOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		In = 0,
	}
	
	/// <summary>
	/// The definition of data present in the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryDataset
	{
		
		/// <summary>
		/// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregation")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public System.Collections.Generic.Dictionary<string, QueryAggregation> Aggregation { get; set; }
		
		/// <summary>
		/// The configuration of dataset in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public QueryDatasetConfiguration Configuration { get; set; }
		
		/// <summary>
		/// The filter expression to be used in the export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public QueryFilter Filter { get; set; }
		
		/// <summary>
		/// The granularity of rows in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="granularity")]
		public System.Nullable<QueryDatasetGranularity> Granularity { get; set; }
		
		/// <summary>
		/// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grouping")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public QueryGrouping[] Grouping { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum QueryDatasetGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 0,
	}
	
	/// <summary>
	/// The group by expression to be used in the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryGrouping
	{
		
		/// <summary>
		/// The name of the column to group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the column in the export.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public QueryColumnType Type { get; set; }
	}
	
	/// <summary>
	/// The configuration of dataset in the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryDatasetConfiguration
	{
		
		/// <summary>
		/// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public string[] Columns { get; set; }
	}
	
	/// <summary>
	/// The definition of a query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryDefinition
	{
		
		/// <summary>
		/// The definition of data present in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public QueryDataset Dataset { get; set; }
		
		/// <summary>
		/// The start and end date for pulling data for the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timePeriod")]
		public QueryTimePeriod TimePeriod { get; set; }
		
		/// <summary>
		/// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeframe")]
		public QueryDefinitionTimeframe Timeframe { get; set; }
		
		/// <summary>
		/// The type of the query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public QueryDefinitionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum QueryDefinitionTimeframe
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MonthToDate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BillingMonthToDate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TheLastMonth = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TheLastBillingMonth = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WeekToDate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum QueryDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Usage = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActualCost = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AmortizedCost = 2,
	}
	
	/// <summary>
	/// The filter expression to be used in the export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryFilter
	{
		
		/// <summary>
		/// The logical "AND" expression. Must have at least 2 items.
		/// Minimum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="and")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		public QueryFilter[] And { get; set; }
		
		/// <summary>
		/// The comparison expression to be used in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public QueryComparisonExpression Dimension { get; set; }
		
		/// <summary>
		/// The filter expression to be used in the export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="not")]
		public QueryFilter Not { get; set; }
		
		/// <summary>
		/// The logical "OR" expression. Must have at least 2 items.
		/// Minimum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="or")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		public QueryFilter[] Or { get; set; }
		
		/// <summary>
		/// The comparison expression to be used in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public QueryComparisonExpression Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryProperties
	{
		
		/// <summary>
		/// Array of columns
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public QueryColumn[] Columns { get; set; }
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of rows
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public string[] Rows { get; set; }
	}
	
	/// <summary>
	/// Result of query. It contains all columns listed under groupings and aggregation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public QueryProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The start and end date for pulling data for the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryTimePeriod
	{
		
		/// <summary>
		/// The start date to pull data from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.DateTimeOffset From { get; set; }
		
		/// <summary>
		/// The end date to pull data to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.DateTimeOffset To { get; set; }
	}
	
	/// <summary>
	/// The Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available cost management REST API operations.
		/// Operations_List providers/Microsoft.CostManagement/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-11-01.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.CostManagement/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the dimensions by the defined scope.
		/// Dimensions_List {scope}/providers/Microsoft.CostManagement/dimensions
		/// </summary>
		/// <param name="scope">The scope associated with dimension operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-11-01.</param>
		/// <param name="filter">May be used to filter dimensions by properties/category, properties/usageStart, properties/usageEnd. Supported operators are 'eq','lt', 'gt', 'le', 'ge'.</param>
		/// <param name="expand">May be used to expand the properties/data within a dimension category. By default, data is not included when listing dimensions.</param>
		/// <param name="skiptoken">Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <param name="top">May be used to limit the number of results to the most recent N dimension data.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<DimensionsListResult> Dimensions_ListAsync(string scope, string api_version, string filter, string expand, string skiptoken, int top)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CostManagement/dimensions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&$skiptoken=" + (skiptoken==null? "" : System.Uri.EscapeDataString(skiptoken))+"&$top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DimensionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to list all exports at the given scope.
		/// Exports_List {scope}/providers/Microsoft.CostManagement/exports
		/// </summary>
		/// <param name="scope">The scope associated with query and export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-11-01.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<ExportListResult> Exports_ListAsync(string scope, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CostManagement/exports&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to get the export for the defined scope by export name.
		/// Exports_Get {scope}/providers/Microsoft.CostManagement/exports/{exportName}
		/// </summary>
		/// <param name="scope">The scope associated with query and export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-11-01.</param>
		/// <param name="exportName">Export Name.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Export> Exports_GetAsync(string scope, string api_version, string exportName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CostManagement/exports/"+ (exportName==null? "" : System.Uri.EscapeDataString(exportName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Export>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to create or update a export. Update operation requires latest eTag to be set in the request. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
		/// Exports_CreateOrUpdate {scope}/providers/Microsoft.CostManagement/exports/{exportName}
		/// </summary>
		/// <param name="scope">The scope associated with query and export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-11-01.</param>
		/// <param name="exportName">Export Name.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate Export operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Export> Exports_CreateOrUpdateAsync(string scope, string api_version, string exportName, Export requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CostManagement/exports/"+ (exportName==null? "" : System.Uri.EscapeDataString(exportName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Export>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The operation to delete a export.
		/// Exports_Delete {scope}/providers/Microsoft.CostManagement/exports/{exportName}
		/// </summary>
		/// <param name="scope">The scope associated with query and export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-11-01.</param>
		/// <param name="exportName">Export Name.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task Exports_DeleteAsync(string scope, string api_version, string exportName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CostManagement/exports/"+ (exportName==null? "" : System.Uri.EscapeDataString(exportName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to execute a export.
		/// Exports_Execute {scope}/providers/Microsoft.CostManagement/exports/{exportName}/run
		/// </summary>
		/// <param name="scope">The scope associated with query and export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-11-01.</param>
		/// <param name="exportName">Export Name.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task Exports_ExecuteAsync(string scope, string api_version, string exportName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CostManagement/exports/"+ (exportName==null? "" : System.Uri.EscapeDataString(exportName))+"/run&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to get the execution history of an export for the defined scope by export name.
		/// Exports_GetExecutionHistory {scope}/providers/Microsoft.CostManagement/exports/{exportName}/runHistory
		/// </summary>
		/// <param name="scope">The scope associated with query and export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-11-01.</param>
		/// <param name="exportName">Export Name.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<ExportExecutionListResult> Exports_GetExecutionHistoryAsync(string scope, string api_version, string exportName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CostManagement/exports/"+ (exportName==null? "" : System.Uri.EscapeDataString(exportName))+"/runHistory&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportExecutionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query the usage data for scope defined.
		/// Query_Usage {scope}/providers/Microsoft.CostManagement/query
		/// </summary>
		/// <param name="scope">The scope associated with query and export operations. This includes '/subscriptions/{subscriptionId}/' for subscription scope, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope, and '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-11-01.</param>
		/// <param name="requestBody">Parameters supplied to the CreateOrUpdate Query Config operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<QueryResult> Query_UsageAsync(string scope, string api_version, QueryDefinition requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CostManagement/query&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
