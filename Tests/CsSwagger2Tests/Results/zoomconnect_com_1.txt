//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Link
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templated")]
		public System.Nullable<System.Boolean> Templated { get; set; }
	}
	
	/// <summary>
	/// RestErrorDTO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class RestErrorDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="developerMessage")]
		public string DeveloperMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moreInfoUrl")]
		public string MoreInfoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Void
	{
	}
	
	/// <summary>
	/// WebServiceAccount
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="creditBalance")]
		public System.Nullable<System.Double> CreditBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
	}
	
	/// <summary>
	/// WebServiceAccountStatistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceAccountStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.DateTimeOffset> From { get; set; }
		
		/// <summary>
		/// WebServiceStatistics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grandTotal")]
		public WebServiceStatistics GrandTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showingCreditValue")]
		public System.Nullable<System.Boolean> ShowingCreditValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.DateTimeOffset> To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public WebServiceUserStatistics[] Users { get; set; }
	}
	
	/// <summary>
	/// WebServiceUserStatistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceUserStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="campaigns")]
		public WebServiceCampaignStatistics[] Campaigns { get; set; }
		
		/// <summary>
		/// WebServiceStatistics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public WebServiceStatistics Total { get; set; }
		
		/// <summary>
		/// WebServiceUser
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public WebServiceUser User { get; set; }
	}
	
	/// <summary>
	/// WebServiceCampaignStatistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceCampaignStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="campaign")]
		public string Campaign { get; set; }
		
		/// <summary>
		/// WebServiceStatistics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public WebServiceStatistics Statistics { get; set; }
	}
	
	/// <summary>
	/// WebServiceAnalyseMessageRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceAnalyseMessageRequestMessageAndRecipientNumber
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipientNumber")]
		public string RecipientNumber { get; set; }
	}
	
	/// <summary>
	/// WebServiceAnalyseMessageRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceAnalyseMessageRequestMessageOnly
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipientNumber")]
		public string RecipientNumber { get; set; }
	}
	
	/// <summary>
	/// WebServiceAnalyseMessageResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceAnalyseMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterAnalysis")]
		public string[] CharacterAnalysis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageCreditCost")]
		public System.Nullable<System.Double> MessageCreditCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageEncoding")]
		public string MessageEncoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageLength")]
		public System.Nullable<System.Int32> MessageLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageLengthWithinMaximumAllowed")]
		public System.Nullable<System.Boolean> MessageLengthWithinMaximumAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfMessages")]
		public System.Nullable<System.Int32> NumberOfMessages { get; set; }
	}
	
	/// <summary>
	/// WebServiceContact
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceContact
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public string ContactId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactNumber")]
		public string ContactNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// WebServiceContactLink
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceContactLink
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public string ContactId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
	}
	
	/// <summary>
	/// WebServiceContacts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceContacts
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webServiceContacts")]
		public WebServiceContact[] WebServiceContacts1 { get; set; }
	}
	
	/// <summary>
	/// WebServiceGroup
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// WebServiceGroups
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceGroups
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webServiceGroups")]
		public WebServiceGroup[] WebServiceGroups1 { get; set; }
	}
	
	/// <summary>
	/// WebServiceMessage
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="campaign")]
		public string Campaign { get; set; }
		
		/// <summary>
		/// WebServiceContactLink
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public WebServiceContactLink Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditCost")]
		public System.Nullable<System.Double> CreditCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateTimeReceived")]
		public System.Nullable<System.DateTimeOffset> DateTimeReceived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateTimeScheduled")]
		public System.Nullable<System.DateTimeOffset> DateTimeScheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateTimeSent")]
		public System.Nullable<System.DateTimeOffset> DateTimeSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageStatus")]
		public string MessageStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageType")]
		public string MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfMessages")]
		public System.Nullable<System.Int32> NumberOfMessages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="read")]
		public System.Nullable<System.Boolean> Read { get; set; }
		
		/// <summary>
		/// WebServiceMessageLink
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repliedToMessage")]
		public WebServiceMessageLink RepliedToMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toNumber")]
		public string ToNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userDataField")]
		public string UserDataField { get; set; }
	}
	
	/// <summary>
	/// WebServiceMessageLink
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceMessageLink
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
	}
	
	/// <summary>
	/// WebServiceMessages
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceMessages
	{
		
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public System.Nullable<System.Int32> Elements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int64> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webServiceMessages")]
		public WebServiceMessage[] WebServiceMessages1 { get; set; }
	}
	
	/// <summary>
	/// WebServiceSendSmsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceSendSmsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="campaign")]
		public string Campaign { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataField")]
		public string DataField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateToSend")]
		public System.Nullable<System.DateTimeOffset> DateToSend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipientNumber")]
		public string RecipientNumber { get; set; }
	}
	
	/// <summary>
	/// WebServiceSendSmsRequests
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceSendSmsRequests
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultDateToSend")]
		public System.Nullable<System.DateTimeOffset> DefaultDateToSend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messagesPerMinute")]
		public System.Nullable<System.Int32> MessagesPerMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendSmsRequests")]
		public WebServiceSendSmsRequest[] SendSmsRequests { get; set; }
	}
	
	/// <summary>
	/// WebServiceSendSmsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceSendSmsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
	}
	
	/// <summary>
	/// WebServiceSendSmsResponses
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceSendSmsResponses
	{
		
		[System.Runtime.Serialization.DataMember(Name="sendSmsResponses")]
		public WebServiceSendSmsResponse[] SendSmsResponses { get; set; }
	}
	
	/// <summary>
	/// WebServiceSendVoiceMessageResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceSendVoiceMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceMessageId")]
		public string VoiceMessageId { get; set; }
	}
	
	/// <summary>
	/// WebServiceStatistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="delivered")]
		public System.Nullable<System.Double> Delivered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Double> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedOptout")]
		public System.Nullable<System.Double> FailedOptout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedRefunded")]
		public System.Nullable<System.Double> FailedRefunded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sent")]
		public System.Nullable<System.Double> Sent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	/// <summary>
	/// WebServiceTemplate
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public System.Nullable<System.Int64> TemplateId { get; set; }
	}
	
	/// <summary>
	/// WebServiceTemplates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceTemplates
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webServiceTemplates")]
		public WebServiceTemplate[] WebServiceTemplates1 { get; set; }
	}
	
	/// <summary>
	/// WebServiceTransferCreditsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceTransferCreditsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfCreditsToTransfer")]
		public System.Nullable<System.Int32> NumberOfCreditsToTransfer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferFromEmailAddress")]
		public string TransferFromEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferToEmailAddress")]
		public string TransferToEmailAddress { get; set; }
	}
	
	/// <summary>
	/// WebServiceUser
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public string Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactNumber")]
		public string ContactNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditBalance")]
		public System.Nullable<System.Double> CreditBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	/// <summary>
	/// WebServiceUsers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceUsers
	{
		
		[System.Runtime.Serialization.DataMember(Name="webServiceUserList")]
		public WebServiceUser[] WebServiceUserList { get; set; }
	}
	
	/// <summary>
	/// WebServiceVoiceMessage
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceVoiceMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioFileUrl")]
		public string AudioFileUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="campaign")]
		public string Campaign { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateTimeSent")]
		public System.Nullable<System.DateTimeOffset> DateTimeSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageStatus")]
		public string MessageStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toNumber")]
		public string ToNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userDataField")]
		public string UserDataField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voiceMessageId")]
		public string VoiceMessageId { get; set; }
	}
	
	/// <summary>
	/// WebServiceVoiceMessageSendSingleTextRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceVoiceMessageSendSingleTextRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="campaign")]
		public string Campaign { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataField")]
		public string DataField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipientNumber")]
		public string RecipientNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public System.Nullable<System.Int32> RetryCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retryMaximumInterval")]
		public System.Nullable<System.Int32> RetryMaximumInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retryMinimumInterval")]
		public System.Nullable<System.Int32> RetryMinimumInterval { get; set; }
	}
	
	/// <summary>
	/// WebServiceVoiceMessages
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebServiceVoiceMessages
	{
		
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public System.Nullable<System.Int32> Elements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public WebServiceVoiceMessage[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int64> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// balance
		/// Returns your account's credit balance
		/// ApiRestV1AccountBalanceGet api/rest/v1/account/balance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WebServiceAccount> ApiRestV1AccountBalanceGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/account/balance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// statistics
		/// Returns data from the statistics report. Note that by default the statistics shown are based on the number of messages, use the calculateCreditValue should you wish to calculate the statistics based on credit value.
		/// ApiRestV1AccountStatisticsGetByFromAndToAndUserEmailAddressAndCampaignAndIncludeRefundedAndOptoutAndCalculateCreditValue api/rest/v1/account/statistics
		/// </summary>
		/// <param name="from">date format: dd-MM-yyyy</param>
		/// <param name="to">date format: dd-MM-yyyy</param>
		/// <param name="userEmailAddress">optional email address of user to return statistics for a single user, default is to return statistics for all users if administrator, or statistics for your own account if not an administrator</param>
		/// <param name="campaign">optional campaign name</param>
		/// <param name="includeRefundedAndOptout">optionally include refunded and optout counts, default is false</param>
		/// <param name="calculateCreditValue">optionally calculate using credit value rather than message count, default is false</param>
		/// <returns>Success</returns>
		public async Task<WebServiceAccountStatistics> ApiRestV1AccountStatisticsGetByFromAndToAndUserEmailAddressAndCampaignAndIncludeRefundedAndOptoutAndCalculateCreditValueAsync(System.DateTimeOffset from, System.DateTimeOffset to, string userEmailAddress, string campaign, bool includeRefundedAndOptout, bool calculateCreditValue, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/account/statistics?from=" + from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&to=" + to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&userEmailAddress=" + (userEmailAddress==null? "" : System.Uri.EscapeDataString(userEmailAddress))+"&campaign=" + (campaign==null? "" : System.Uri.EscapeDataString(campaign))+"&includeRefundedAndOptout="+includeRefundedAndOptout+"&calculateCreditValue="+calculateCreditValue;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceAccountStatistics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// transfer
		/// Transfers credits between two users in the same team. The <i>account email address</i> fields as well as the <i>number of credits to transfer</i> are required.
		/// ApiRestV1AccountTransferPost api/rest/v1/account/transfer
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceUser> ApiRestV1AccountTransferPostAsync(WebServiceTransferCreditsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/account/transfer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// search
		/// Find a user for a particular email address
		/// ApiRestV1AccountUserGetBySearchEmail api/rest/v1/account/user
		/// </summary>
		/// <param name="searchEmail">search by email address</param>
		/// <returns>OK</returns>
		public async Task<WebServiceUsers> ApiRestV1AccountUserGetBySearchEmailAsync(string searchEmail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/account/user?searchEmail=" + (searchEmail==null? "" : System.Uri.EscapeDataString(searchEmail));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceUsers>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create
		/// Creates a new sub-account in your team. The following fields are required <i>firstname, lastname, email address, contact number</i> and <i>password.</i>
		/// ApiRestV1AccountUserPut api/rest/v1/account/user
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceUser> ApiRestV1AccountUserPutAsync(WebServiceUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/account/user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getUser
		/// Gets a user from a given user id
		/// ApiRestV1AccountUser_userIdGet api/rest/v1/account/user/{userId}
		/// </summary>
		/// <param name="userId">userId</param>
		/// <returns>OK</returns>
		public async Task<WebServiceUser> ApiRestV1AccountUser_userIdGetAsync(long userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/account/user/"+userId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update
		/// Updates a sub-account in your team. The following fields can be updated <i>firstname, lastname, contact number</i> and <i>password.</i>
		/// ApiRestV1AccountUser_userIdPost api/rest/v1/account/user/{userId}
		/// </summary>
		/// <param name="userId">userId</param>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceUser> ApiRestV1AccountUser_userIdPostAsync(long userId, WebServiceUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/account/user/"+userId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// all
		/// Returns all contacts
		/// ApiRestV1ContactsAllGet api/rest/v1/contacts/all
		/// </summary>
		/// <returns>OK</returns>
		public async Task<WebServiceContacts> ApiRestV1ContactsAllGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/contacts/all";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceContacts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create
		/// Creates a  contact
		/// ApiRestV1ContactsCreatePost api/rest/v1/contacts/create
		/// </summary>
		/// <param name="requestBody">webServiceContact</param>
		/// <returns>No response was specified</returns>
		public async Task<WebServiceContact> ApiRestV1ContactsCreatePostAsync(WebServiceContact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/contacts/create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceContact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get
		/// Returns details for a single contact
		/// ApiRestV1Contacts_contactIdGet api/rest/v1/contacts/{contactId}
		/// </summary>
		/// <param name="contactId">contactId</param>
		/// <returns>OK</returns>
		public async Task<WebServiceContact> ApiRestV1Contacts_contactIdGetAsync(string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceContact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update
		/// Updates a  contact
		/// ApiRestV1Contacts_contactIdPost api/rest/v1/contacts/{contactId}
		/// </summary>
		/// <param name="contactId">contactId</param>
		/// <param name="requestBody">webServiceContact</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceContact> ApiRestV1Contacts_contactIdPostAsync(string contactId, WebServiceContact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceContact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete
		/// Deletes a  contact
		/// ApiRestV1Contacts_contactIdDelete api/rest/v1/contacts/{contactId}
		/// </summary>
		/// <param name="contactId">contactId</param>
		/// <returns>Description was not specified</returns>
		public async Task ApiRestV1Contacts_contactIdDeleteAsync(string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// removeFromGroup
		/// Remove a contact from a group
		/// ApiRestV1Contacts_contactIdAddFromGroup_groupIdGet api/rest/v1/contacts/{contactId}/addFromGroup/{groupId}
		/// </summary>
		/// <param name="contactId">contactId</param>
		/// <param name="groupId">groupId</param>
		/// <returns>OK</returns>
		public async Task ApiRestV1Contacts_contactIdAddFromGroup_groupIdGetAsync(string contactId, string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId))+"/addFromGroup/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// removeFromGroup
		/// Remove a contact from a group
		/// ApiRestV1Contacts_contactIdAddFromGroup_groupIdPost api/rest/v1/contacts/{contactId}/addFromGroup/{groupId}
		/// </summary>
		/// <param name="contactId">contactId</param>
		/// <param name="groupId">groupId</param>
		/// <returns>Description was not specified</returns>
		public async Task ApiRestV1Contacts_contactIdAddFromGroup_groupIdPostAsync(string contactId, string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId))+"/addFromGroup/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// addToGroup
		/// Add a contact to a group
		/// ApiRestV1Contacts_contactIdAddToGroup_groupIdGet api/rest/v1/contacts/{contactId}/addToGroup/{groupId}
		/// </summary>
		/// <param name="contactId">contactId</param>
		/// <param name="groupId">groupId</param>
		/// <returns>OK</returns>
		public async Task ApiRestV1Contacts_contactIdAddToGroup_groupIdGetAsync(string contactId, string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId))+"/addToGroup/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// addToGroup
		/// Add a contact to a group
		/// ApiRestV1Contacts_contactIdAddToGroup_groupIdPost api/rest/v1/contacts/{contactId}/addToGroup/{groupId}
		/// </summary>
		/// <param name="contactId">contactId</param>
		/// <param name="groupId">groupId</param>
		/// <returns>Description was not specified</returns>
		public async Task ApiRestV1Contacts_contactIdAddToGroup_groupIdPostAsync(string contactId, string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/contacts/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId))+"/addToGroup/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// all
		/// Returns all groups
		/// ApiRestV1GroupsAllGet api/rest/v1/groups/all
		/// </summary>
		/// <returns>OK</returns>
		public async Task<WebServiceGroups> ApiRestV1GroupsAllGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/groups/all";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceGroups>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create
		/// Create a  group
		/// ApiRestV1GroupsCreatePost api/rest/v1/groups/create
		/// </summary>
		/// <param name="requestBody">webServiceGroup</param>
		/// <returns>No response was specified</returns>
		public async Task<WebServiceGroup> ApiRestV1GroupsCreatePostAsync(WebServiceGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/groups/create";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get
		/// Returns details for a single group
		/// ApiRestV1Groups_groupIdGet api/rest/v1/groups/{groupId}
		/// </summary>
		/// <param name="groupId">groupId</param>
		/// <returns>OK</returns>
		public async Task<WebServiceGroup> ApiRestV1Groups_groupIdGetAsync(string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update
		/// Update a  group
		/// ApiRestV1Groups_groupIdPost api/rest/v1/groups/{groupId}
		/// </summary>
		/// <param name="groupId">groupId</param>
		/// <param name="requestBody">webServiceGroup</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceGroup> ApiRestV1Groups_groupIdPostAsync(string groupId, WebServiceGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete
		/// Deletes a  group
		/// ApiRestV1Groups_groupIdDelete api/rest/v1/groups/{groupId}
		/// </summary>
		/// <param name="groupId">groupId</param>
		/// <returns>Description was not specified</returns>
		public async Task ApiRestV1Groups_groupIdDeleteAsync(string groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// addContact
		/// Add a contact to a group
		/// ApiRestV1Groups_groupIdAddContact_contactIdGet api/rest/v1/groups/{groupId}/addContact/{contactId}
		/// </summary>
		/// <param name="groupId">groupId</param>
		/// <param name="contactId">contactId</param>
		/// <returns>OK</returns>
		public async Task ApiRestV1Groups_groupIdAddContact_contactIdGetAsync(string groupId, string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/addContact/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// addContact
		/// Add a contact to a group
		/// ApiRestV1Groups_groupIdAddContact_contactIdPost api/rest/v1/groups/{groupId}/addContact/{contactId}
		/// </summary>
		/// <param name="groupId">groupId</param>
		/// <param name="contactId">contactId</param>
		/// <returns>Description was not specified</returns>
		public async Task ApiRestV1Groups_groupIdAddContact_contactIdPostAsync(string groupId, string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/addContact/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// removeContact
		/// Remove a contact from a group
		/// ApiRestV1Groups_groupIdRemoveContact_contactIdGet api/rest/v1/groups/{groupId}/removeContact/{contactId}
		/// </summary>
		/// <param name="groupId">groupId</param>
		/// <param name="contactId">contactId</param>
		/// <returns>OK</returns>
		public async Task ApiRestV1Groups_groupIdRemoveContact_contactIdGetAsync(string groupId, string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/removeContact/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// removeContact
		/// Remove a contact from a group
		/// ApiRestV1Groups_groupIdRemoveContact_contactIdPost api/rest/v1/groups/{groupId}/removeContact/{contactId}
		/// </summary>
		/// <param name="groupId">groupId</param>
		/// <param name="contactId">contactId</param>
		/// <returns>Description was not specified</returns>
		public async Task ApiRestV1Groups_groupIdRemoveContact_contactIdPostAsync(string groupId, string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/groups/"+ (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"/removeContact/"+ (contactId==null? "" : System.Uri.EscapeDataString(contactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// all
		/// Returns all messages
		/// ApiRestV1MessagesAllGetByPageSizeAndPageAndTypeAndStatusAndFromDateTimeSentAndToDateTimeSentAndFromDateTimeReceivedAndToDateTimeReceivedAndFromNumberAndToNumberAndMessageAndCampaignAndDataFieldAndDeletedAndReadAndRepliesToMessageId api/rest/v1/messages/all
		/// </summary>
		/// <param name="pageSize">number of elements to return at a time</param>
		/// <param name="page">page number</param>
		/// <param name="type">filter by message type</param>
		/// <param name="status">filter by message status</param>
		/// <param name="fromDateTimeSent">date format: yyyyMMdd</param>
		/// <param name="toDateTimeSent">date format: yyyyMMdd</param>
		/// <param name="fromDateTimeReceived">date format: yyyyMMdd</param>
		/// <param name="toDateTimeReceived">date format: yyyyMMdd</param>
		/// <param name="fromNumber">phone number the message was sent from</param>
		/// <param name="toNumber">phone number the message was sent to</param>
		/// <param name="message">search matching message text</param>
		/// <param name="campaign">search by campaign</param>
		/// <param name="dataField">search by data field</param>
		/// <param name="deleted">return only deleted / not deleted messages</param>
		/// <param name="read">return only read / unread messages (inbox messages only)</param>
		/// <param name="repliesToMessageId">return only inbox messages which are a reply to the message with the given message id</param>
		/// <returns>OK</returns>
		public async Task<WebServiceMessages> ApiRestV1MessagesAllGetByPageSizeAndPageAndTypeAndStatusAndFromDateTimeSentAndToDateTimeSentAndFromDateTimeReceivedAndToDateTimeReceivedAndFromNumberAndToNumberAndMessageAndCampaignAndDataFieldAndDeletedAndReadAndRepliesToMessageIdAsync(
					int pageSize, 
					int page, 
					ApiRestV1MessagesAllGetByPageSizeAndPageAndTypeAndStatusAndFromDateTimeSentAndToDateTimeSentAndFromDateTimeReceivedAndToDateTimeReceivedAndFromNumberAndToNumberAndMessageAndCampaignAndDataFieldAndDeletedAndReadAndRepliesToMessageIdType type, 
					ApiRestV1MessagesAllGetByPageSizeAndPageAndTypeAndStatusAndFromDateTimeSentAndToDateTimeSentAndFromDateTimeReceivedAndToDateTimeReceivedAndFromNumberAndToNumberAndMessageAndCampaignAndDataFieldAndDeletedAndReadAndRepliesToMessageIdStatus status, 
					System.DateTimeOffset fromDateTimeSent, 
					System.DateTimeOffset toDateTimeSent, 
					System.DateTimeOffset fromDateTimeReceived, 
					System.DateTimeOffset toDateTimeReceived, 
					string fromNumber, 
					string toNumber, 
					string message, 
					string campaign, 
					string dataField, 
					bool deleted, 
					bool read, 
					string repliesToMessageId, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/all?pageSize="+pageSize+"&page="+page+"&type=" + type+"&status=" + status+"&fromDateTimeSent=" + fromDateTimeSent.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toDateTimeSent=" + toDateTimeSent.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&fromDateTimeReceived=" + fromDateTimeReceived.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toDateTimeReceived=" + toDateTimeReceived.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&fromNumber=" + (fromNumber==null? "" : System.Uri.EscapeDataString(fromNumber))+"&toNumber=" + (toNumber==null? "" : System.Uri.EscapeDataString(toNumber))+"&message=" + (message==null? "" : System.Uri.EscapeDataString(message))+"&campaign=" + (campaign==null? "" : System.Uri.EscapeDataString(campaign))+"&dataField=" + (dataField==null? "" : System.Uri.EscapeDataString(dataField))+"&deleted="+deleted+"&read="+read+"&repliesToMessageId=" + (repliesToMessageId==null? "" : System.Uri.EscapeDataString(repliesToMessageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceMessages>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// analyse-full
		/// Returns full analysis of message
		/// ApiRestV1MessagesAnalyseFullPost api/rest/v1/messages/analyse/full
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceAnalyseMessageResponse> ApiRestV1MessagesAnalyseFullPostAsync(WebServiceAnalyseMessageRequestMessageAndRecipientNumber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/analyse/full";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceAnalyseMessageResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// analyse-message-credit-cost
		/// Returns the number of credit which would be required to send the request message to the requested recipient number
		/// ApiRestV1MessagesAnalyseMessage_credit_costPost api/rest/v1/messages/analyse/message-credit-cost
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<double> ApiRestV1MessagesAnalyseMessage_credit_costPostAsync(WebServiceAnalyseMessageRequestMessageAndRecipientNumber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/analyse/message-credit-cost";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<double>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// analyse-message-encoding
		/// Returns the message encoding that would be required to send the requested message
		/// ApiRestV1MessagesAnalyseMessage_encodingPost api/rest/v1/messages/analyse/message-encoding
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<string> ApiRestV1MessagesAnalyseMessage_encodingPostAsync(WebServiceAnalyseMessageRequestMessageOnly requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/analyse/message-encoding";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// analyse-message-length
		/// Returns the number of characters the requested message consists of
		/// ApiRestV1MessagesAnalyseMessage_lengthPost api/rest/v1/messages/analyse/message-length
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<int> ApiRestV1MessagesAnalyseMessage_lengthPostAsync(WebServiceAnalyseMessageRequestMessageOnly requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/analyse/message-length";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<int>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// analyse-
		/// Returns details for a single message
		/// ApiRestV1MessagesAnalyseMessage_length_within_max_allowedPost api/rest/v1/messages/analyse/message-length-within-max-allowed
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<bool> ApiRestV1MessagesAnalyseMessage_length_within_max_allowedPostAsync(WebServiceAnalyseMessageRequestMessageOnly requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/analyse/message-length-within-max-allowed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// analyse-number-of-messages
		/// Returns the number of SMS parts which would be sent when sending the requested message
		/// ApiRestV1MessagesAnalyseNumber_of_messagesPost api/rest/v1/messages/analyse/number-of-messages
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<int> ApiRestV1MessagesAnalyseNumber_of_messagesPostAsync(WebServiceAnalyseMessageRequestMessageOnly requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/analyse/number-of-messages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<int>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get
		/// Returns details for a single message
		/// ApiRestV1Messages_messageIdGet api/rest/v1/messages/{messageId}
		/// </summary>
		/// <param name="messageId">messageId</param>
		/// <returns>OK</returns>
		public async Task<WebServiceMessage> ApiRestV1Messages_messageIdGetAsync(string messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceMessage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete
		/// Deletes a  message
		/// ApiRestV1Messages_messageIdDelete api/rest/v1/messages/{messageId}
		/// </summary>
		/// <param name="messageId">messageId</param>
		/// <returns>Description was not specified</returns>
		public async Task ApiRestV1Messages_messageIdDeleteAsync(string messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// markRead
		/// Marks a  message as read
		/// ApiRestV1Messages_messageIdMarkReadPut api/rest/v1/messages/{messageId}/markRead
		/// </summary>
		/// <param name="messageId">messageId</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceMessage> ApiRestV1Messages_messageIdMarkReadPutAsync(string messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId))+"/markRead";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceMessage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// markRead
		/// Marks a  message as read
		/// ApiRestV1Messages_messageIdMarkReadPost api/rest/v1/messages/{messageId}/markRead
		/// </summary>
		/// <param name="messageId">messageId</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceMessage> ApiRestV1Messages_messageIdMarkReadPostAsync(string messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId))+"/markRead";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceMessage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// markUnread
		/// Marks a  message as unread
		/// ApiRestV1Messages_messageIdMarkUnreadPut api/rest/v1/messages/{messageId}/markUnread
		/// </summary>
		/// <param name="messageId">messageId</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceMessage> ApiRestV1Messages_messageIdMarkUnreadPutAsync(string messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId))+"/markUnread";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceMessage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// markUnread
		/// Marks a  message as unread
		/// ApiRestV1Messages_messageIdMarkUnreadPost api/rest/v1/messages/{messageId}/markUnread
		/// </summary>
		/// <param name="messageId">messageId</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceMessage> ApiRestV1Messages_messageIdMarkUnreadPostAsync(string messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/messages/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId))+"/markUnread";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceMessage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// send
		/// Returns an example of the data to POST to send a single message.
		/// ApiRestV1SmsSendGet api/rest/v1/sms/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task<WebServiceSendSmsRequest> ApiRestV1SmsSendGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/sms/send";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceSendSmsRequest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// send
		/// Sends a single message. The <i>recipientNumber</i> and <i>message</i> fields are required. All other fields are optional.
		/// ApiRestV1SmsSendPost api/rest/v1/sms/send
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceSendSmsResponse> ApiRestV1SmsSendPostAsync(WebServiceSendSmsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/sms/send";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceSendSmsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// send-bulk
		/// Returns an example of the data to POST to send multiple messages in one transaction.
		/// ApiRestV1SmsSend_bulkGet api/rest/v1/sms/send-bulk
		/// </summary>
		/// <returns>OK</returns>
		public async Task<WebServiceSendSmsRequests> ApiRestV1SmsSend_bulkGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/sms/send-bulk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceSendSmsRequests>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// send-bulk
		/// Send multiple messages in one transaction.
		/// ApiRestV1SmsSend_bulkPost api/rest/v1/sms/send-bulk
		/// </summary>
		/// <param name="requestBody">requests</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceSendSmsResponses> ApiRestV1SmsSend_bulkPostAsync(WebServiceSendSmsRequests requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/sms/send-bulk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceSendSmsResponses>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// send-url-parameters
		/// Send a single message using URL parameters.The <i>recipientNumber</i> and <i>message</i> parameters are required. All other parameters are optional.
		/// ApiRestV1SmsSend_url_parametersGetByRecipientNumberAndMessageAndDateToSendAndCampaignAndDataField api/rest/v1/sms/send-url-parameters
		/// </summary>
		/// <param name="recipientNumber">the phone number of the recipient to send to</param>
		/// <param name="message">the message to send</param>
		/// <param name="dateToSend">date format: yyyyMMddHHmm</param>
		/// <param name="campaign">optional campaign name</param>
		/// <param name="dataField">optional extra data</param>
		/// <returns>OK</returns>
		public async Task<string> ApiRestV1SmsSend_url_parametersGetByRecipientNumberAndMessageAndDateToSendAndCampaignAndDataFieldAsync(string recipientNumber, string message, System.DateTimeOffset dateToSend, string campaign, string dataField, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/sms/send-url-parameters?recipientNumber=" + (recipientNumber==null? "" : System.Uri.EscapeDataString(recipientNumber))+"&message=" + (message==null? "" : System.Uri.EscapeDataString(message))+"&dateToSend=" + dateToSend.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&campaign=" + (campaign==null? "" : System.Uri.EscapeDataString(campaign))+"&dataField=" + (dataField==null? "" : System.Uri.EscapeDataString(dataField));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// send-url-parameters
		/// Send a single message using URL parameters.The <i>recipientNumber</i> and <i>message</i> parameters are required. All other parameters are optional.
		/// ApiRestV1SmsSend_url_parametersPostByRecipientNumberAndMessageAndDateToSendAndCampaignAndDataField api/rest/v1/sms/send-url-parameters
		/// </summary>
		/// <param name="recipientNumber">the phone number of the recipient to send to</param>
		/// <param name="message">the message to send</param>
		/// <param name="dateToSend">date format: yyyyMMddHHmm</param>
		/// <param name="campaign">optional campaign name</param>
		/// <param name="dataField">optional extra data</param>
		/// <returns>Description was not specified</returns>
		public async Task<string> ApiRestV1SmsSend_url_parametersPostByRecipientNumberAndMessageAndDateToSendAndCampaignAndDataFieldAsync(string recipientNumber, string message, System.DateTimeOffset dateToSend, string campaign, string dataField, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/sms/send-url-parameters?recipientNumber=" + (recipientNumber==null? "" : System.Uri.EscapeDataString(recipientNumber))+"&message=" + (message==null? "" : System.Uri.EscapeDataString(message))+"&dateToSend=" + dateToSend.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&campaign=" + (campaign==null? "" : System.Uri.EscapeDataString(campaign))+"&dataField=" + (dataField==null? "" : System.Uri.EscapeDataString(dataField));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// send-url
		/// Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The <i>recipientNumber</i> and <i>message</i> parameters are required. All other parameters are optional. Not that the token required here is
		/// ApiRestV1SmsSend_url_tokenGetByRecipientNumberAndMessageAndDateToSendAndCampaignAndDataField api/rest/v1/sms/send-url/{token}
		/// </summary>
		/// <param name="token">token</param>
		/// <param name="recipientNumber">the phone number of the recipient to send to</param>
		/// <param name="message">the message to send</param>
		/// <param name="dateToSend">date format: yyyyMMddHHmm</param>
		/// <param name="campaign">optional campaign name</param>
		/// <param name="dataField">optional extra data</param>
		/// <returns>OK</returns>
		public async Task<string> ApiRestV1SmsSend_url_tokenGetByRecipientNumberAndMessageAndDateToSendAndCampaignAndDataFieldAsync(string token, string recipientNumber, string message, System.DateTimeOffset dateToSend, string campaign, string dataField, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/sms/send-url/"+ (token==null? "" : System.Uri.EscapeDataString(token))+"&recipientNumber=" + (recipientNumber==null? "" : System.Uri.EscapeDataString(recipientNumber))+"&message=" + (message==null? "" : System.Uri.EscapeDataString(message))+"&dateToSend=" + dateToSend.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&campaign=" + (campaign==null? "" : System.Uri.EscapeDataString(campaign))+"&dataField=" + (dataField==null? "" : System.Uri.EscapeDataString(dataField));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// send-url
		/// Send a single message using your unique URL without having to authenticate using your email address or REST API token. The token required is the URL Sending token available on the developer setting page. The <i>recipientNumber</i> and <i>message</i> parameters are required. All other parameters are optional. Not that the token required here is
		/// ApiRestV1SmsSend_url_tokenPostByRecipientNumberAndMessageAndDateToSendAndCampaignAndDataField api/rest/v1/sms/send-url/{token}
		/// </summary>
		/// <param name="token">token</param>
		/// <param name="recipientNumber">the phone number of the recipient to send to</param>
		/// <param name="message">the message to send</param>
		/// <param name="dateToSend">date format: yyyyMMddHHmm</param>
		/// <param name="campaign">optional campaign name</param>
		/// <param name="dataField">optional extra data</param>
		/// <returns>Description was not specified</returns>
		public async Task<string> ApiRestV1SmsSend_url_tokenPostByRecipientNumberAndMessageAndDateToSendAndCampaignAndDataFieldAsync(string token, string recipientNumber, string message, System.DateTimeOffset dateToSend, string campaign, string dataField, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/sms/send-url/"+ (token==null? "" : System.Uri.EscapeDataString(token))+"&recipientNumber=" + (recipientNumber==null? "" : System.Uri.EscapeDataString(recipientNumber))+"&message=" + (message==null? "" : System.Uri.EscapeDataString(message))+"&dateToSend=" + dateToSend.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&campaign=" + (campaign==null? "" : System.Uri.EscapeDataString(campaign))+"&dataField=" + (dataField==null? "" : System.Uri.EscapeDataString(dataField));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// all
		/// Returns all templates
		/// ApiRestV1TemplatesAllGet api/rest/v1/templates/all
		/// </summary>
		/// <returns>OK</returns>
		public async Task<WebServiceTemplates> ApiRestV1TemplatesAllGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/templates/all";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceTemplates>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get
		/// Returns details for a single template
		/// ApiRestV1Templates_templateIdGet api/rest/v1/templates/{templateId}
		/// </summary>
		/// <param name="templateId">templateId</param>
		/// <returns>OK</returns>
		public async Task<WebServiceTemplate> ApiRestV1Templates_templateIdGetAsync(long templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/templates/"+templateId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceTemplate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete
		/// Deletes a  template
		/// ApiRestV1Templates_templateIdDelete api/rest/v1/templates/{templateId}
		/// </summary>
		/// <param name="templateId">templateId</param>
		/// <returns>Description was not specified</returns>
		public async Task ApiRestV1Templates_templateIdDeleteAsync(long templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/templates/"+templateId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// all
		/// Returns all voice messages
		/// ApiRestV1VoiceAllGetByPageSizeAndPageAndStatusAndFromDateTimeSentAndToDateTimeSentAndToNumberAndMessageAndCampaignAndDataFieldAndDeleted api/rest/v1/voice/all
		/// </summary>
		/// <param name="pageSize">number of elements to return at a time</param>
		/// <param name="page">page number</param>
		/// <param name="status">filter by message status</param>
		/// <param name="fromDateTimeSent">date format: yyyyMMdd</param>
		/// <param name="toDateTimeSent">date format: yyyyMMdd</param>
		/// <param name="toNumber">phone number the message was sent to</param>
		/// <param name="message">search matching message text</param>
		/// <param name="campaign">search by campaign</param>
		/// <param name="dataField">search by data field</param>
		/// <param name="deleted">return only deleted / not deleted messages</param>
		/// <returns>OK</returns>
		public async Task<WebServiceVoiceMessages> ApiRestV1VoiceAllGetByPageSizeAndPageAndStatusAndFromDateTimeSentAndToDateTimeSentAndToNumberAndMessageAndCampaignAndDataFieldAndDeletedAsync(int pageSize, int page, ApiRestV1MessagesAllGetByPageSizeAndPageAndTypeAndStatusAndFromDateTimeSentAndToDateTimeSentAndFromDateTimeReceivedAndToDateTimeReceivedAndFromNumberAndToNumberAndMessageAndCampaignAndDataFieldAndDeletedAndReadAndRepliesToMessageIdStatus status, System.DateTimeOffset fromDateTimeSent, System.DateTimeOffset toDateTimeSent, string toNumber, string message, string campaign, string dataField, bool deleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/voice/all?pageSize="+pageSize+"&page="+page+"&status=" + status+"&fromDateTimeSent=" + fromDateTimeSent.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toDateTimeSent=" + toDateTimeSent.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toNumber=" + (toNumber==null? "" : System.Uri.EscapeDataString(toNumber))+"&message=" + (message==null? "" : System.Uri.EscapeDataString(message))+"&campaign=" + (campaign==null? "" : System.Uri.EscapeDataString(campaign))+"&dataField=" + (dataField==null? "" : System.Uri.EscapeDataString(dataField))+"&deleted="+deleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceVoiceMessages>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// single-text
		/// Send a single text voice message to one recipient
		/// ApiRestV1VoiceSingle_textPost api/rest/v1/voice/single-text
		/// </summary>
		/// <param name="requestBody">request</param>
		/// <returns>Description was not specified</returns>
		public async Task<WebServiceSendVoiceMessageResponse> ApiRestV1VoiceSingle_textPostAsync(WebServiceVoiceMessageSendSingleTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/voice/single-text";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceSendVoiceMessageResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get
		/// Returns details for a single message
		/// ApiRestV1Voice_messageIdGet api/rest/v1/voice/{messageId}
		/// </summary>
		/// <param name="messageId">messageId</param>
		/// <returns>OK</returns>
		public async Task<WebServiceVoiceMessage> ApiRestV1Voice_messageIdGetAsync(string messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/voice/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebServiceVoiceMessage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete
		/// Deletes a  message
		/// ApiRestV1Voice_messageIdDelete api/rest/v1/voice/{messageId}
		/// </summary>
		/// <param name="messageId">messageId</param>
		/// <returns>Description was not specified</returns>
		public async Task ApiRestV1Voice_messageIdDeleteAsync(string messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/voice/"+ (messageId==null? "" : System.Uri.EscapeDataString(messageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ApiRestV1MessagesAllGetByPageSizeAndPageAndTypeAndStatusAndFromDateTimeSentAndToDateTimeSentAndFromDateTimeReceivedAndToDateTimeReceivedAndFromNumberAndToNumberAndMessageAndCampaignAndDataFieldAndDeletedAndReadAndRepliesToMessageIdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTBOUND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INBOUND = 1,
	}
	
	public enum ApiRestV1MessagesAllGetByPageSizeAndPageAndTypeAndStatusAndFromDateTimeSentAndToDateTimeSentAndFromDateTimeReceivedAndToDateTimeReceivedAndFromNumberAndToNumberAndMessageAndCampaignAndDataFieldAndDeletedAndReadAndRepliesToMessageIdStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_REFUNDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_OPTOUT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERED = 6,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
