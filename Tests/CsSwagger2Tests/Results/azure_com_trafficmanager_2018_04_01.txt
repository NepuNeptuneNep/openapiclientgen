//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Parameters supplied to check Traffic Manager name operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckTrafficManagerRelativeDnsNameAvailabilityParameters
	{
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An error returned by the Azure Resource Manager
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// The content of an error returned by the Azure Resource Manager
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// The content of an error returned by the Azure Resource Manager
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// Error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Error target
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The result of the request or operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteOperationResult
	{
		
		/// <summary>
		/// The result of the operation or request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolean")]
		public System.Nullable<System.Boolean> Boolean { get; set; }
	}
	
	/// <summary>
	/// Class containing DNS settings in a Traffic Manager profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DnsConfig
	{
		
		/// <summary>
		/// The fully-qualified domain name (FQDN) of the Traffic Manager profile. This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		/// <summary>
		/// The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeName")]
		public string RelativeName { get; set; }
		
		/// <summary>
		/// The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int64> Ttl { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Endpoint : ProxyResource
	{
		
		/// <summary>
		/// Class representing a Traffic Manager endpoint properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EndpointProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager endpoint properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EndpointProperties
	{
		
		/// <summary>
		/// List of custom headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		public EndpointPropertiesCustomHeaders[] EndpointPropertiesCustomHeaders { get; set; }
		
		/// <summary>
		/// Specifies the location of the external or nested endpoints when using the 'Performance' traffic routing method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointLocation")]
		public string EndpointLocation { get; set; }
		
		/// <summary>
		/// The monitoring status of the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointMonitorStatus")]
		public System.Nullable<EndpointPropertiesEndpointMonitorStatus> EndpointMonitorStatus { get; set; }
		
		/// <summary>
		/// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointStatus")]
		public System.Nullable<EndpointPropertiesEndpointStatus> EndpointStatus { get; set; }
		
		/// <summary>
		/// The list of countries/regions mapped to this endpoint when using the 'Geographic' traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoMapping")]
		public string[] GeoMapping { get; set; }
		
		/// <summary>
		/// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minChildEndpoints")]
		public System.Nullable<System.Int64> MinChildEndpoints { get; set; }
		
		/// <summary>
		/// The priority of this endpoint when using the 'Priority' traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int64> Priority { get; set; }
		
		/// <summary>
		/// The list of subnets, IP addresses, and/or address ranges mapped to this endpoint when using the 'Subnet' traffic routing method. An empty list will match all ranges not covered by other endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnets")]
		public EndpointPropertiesSubnets[] EndpointPropertiesSubnets { get; set; }
		
		/// <summary>
		/// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceId")]
		public string TargetResourceId { get; set; }
		
		/// <summary>
		/// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int64> Weight { get; set; }
	}
	
	public class EndpointPropertiesCustomHeaders
	{
		
		/// <summary>
		/// Header name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Header value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EndpointPropertiesEndpointMonitorStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckingEndpoint = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Online = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Degraded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EndpointPropertiesEndpointStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	public class EndpointPropertiesSubnets
	{
		
		/// <summary>
		/// First address in the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		/// <summary>
		/// Last address in the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		/// <summary>
		/// Block size (number of leading bits in the subnet mask).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
	}
	
	/// <summary>
	/// Class representing the properties of the Geographic hierarchy used with the Geographic traffic routing method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GeographicHierarchyProperties
	{
		
		/// <summary>
		/// Class representing a region in the Geographic hierarchy used with the Geographic traffic routing method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geographicHierarchy")]
		public Region GeographicHierarchy { get; set; }
	}
	
	/// <summary>
	/// Class which is a sparse representation of a Traffic Manager endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HeatMapEndpoint
	{
		
		/// <summary>
		/// A number uniquely identifying this endpoint in query experiences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public System.Nullable<System.Int32> EndpointId { get; set; }
		
		/// <summary>
		/// The ARM Resource ID of this Traffic Manager endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager HeatMap.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HeatMapModel : ProxyResource
	{
		
		/// <summary>
		/// Class representing a Traffic Manager HeatMap properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public HeatMapProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager HeatMap properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HeatMapProperties
	{
		
		/// <summary>
		/// The ending of the time window for this HeatMap, exclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The endpoints used in this HeatMap calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public HeatMapEndpoint[] Endpoints { get; set; }
		
		/// <summary>
		/// The beginning of the time window for this HeatMap, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The traffic flows produced in this HeatMap calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trafficFlows")]
		public TrafficFlow[] TrafficFlows { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager HeatMap traffic flow properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrafficFlow
	{
		
		/// <summary>
		/// The approximate latitude that these queries originated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The approximate longitude that these queries originated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// The query experiences produced in this HeatMap calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryExperiences")]
		public QueryExperience[] QueryExperiences { get; set; }
		
		/// <summary>
		/// The IP address that this query experience originated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceIp")]
		public string SourceIp { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager HeatMap query experience properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryExperience
	{
		
		/// <summary>
		/// The id of the endpoint from the 'endpoints' array which these queries were routed to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public int EndpointId { get; set; }
		
		/// <summary>
		/// The latency experienced by queries originating from this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency")]
		public System.Nullable<System.Double> Latency { get; set; }
		
		/// <summary>
		/// The number of queries originating from this location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryCount")]
		public int QueryCount { get; set; }
	}
	
	/// <summary>
	/// Class containing endpoint monitoring settings in a Traffic Manager profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MonitorConfig
	{
		
		/// <summary>
		/// List of custom headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		public MonitorConfigCustomHeaders[] MonitorConfigCustomHeaders { get; set; }
		
		/// <summary>
		/// List of expected status code ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedStatusCodeRanges")]
		public MonitorConfigExpectedStatusCodeRanges[] MonitorConfigExpectedStatusCodeRanges { get; set; }
		
		/// <summary>
		/// The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalInSeconds")]
		public System.Nullable<System.Int64> IntervalInSeconds { get; set; }
		
		/// <summary>
		/// The path relative to the endpoint domain name used to probe for endpoint health.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The TCP port used to probe for endpoint health.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int64> Port { get; set; }
		
		/// <summary>
		/// The profile-level monitoring status of the Traffic Manager profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileMonitorStatus")]
		public System.Nullable<MonitorConfigProfileMonitorStatus> ProfileMonitorStatus { get; set; }
		
		/// <summary>
		/// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<MonitorConfigProtocol> Protocol { get; set; }
		
		/// <summary>
		/// The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutInSeconds")]
		public System.Nullable<System.Int64> TimeoutInSeconds { get; set; }
		
		/// <summary>
		/// The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toleratedNumberOfFailures")]
		public System.Nullable<System.Int64> ToleratedNumberOfFailures { get; set; }
	}
	
	public class MonitorConfigCustomHeaders
	{
		
		/// <summary>
		/// Header name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Header value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class MonitorConfigExpectedStatusCodeRanges
	{
		
		/// <summary>
		/// Max status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Int32> Max { get; set; }
		
		/// <summary>
		/// Min status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Int32> Min { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MonitorConfigProfileMonitorStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckingEndpoints = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Online = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Degraded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MonitorConfigProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
	}
	
	/// <summary>
	/// Class representing a Traffic Manager profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Profile : TrackedResource
	{
		
		/// <summary>
		/// Class representing the Traffic Manager profile properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProfileProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The list Traffic Manager profiles operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileListResult
	{
		
		/// <summary>
		/// Gets the list of Traffic manager profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Profile[] Value { get; set; }
	}
	
	/// <summary>
	/// Class representing the Traffic Manager profile properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProfileProperties
	{
		
		/// <summary>
		/// Class containing DNS settings in a Traffic Manager profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsConfig")]
		public DnsConfig DnsConfig { get; set; }
		
		/// <summary>
		/// The list of endpoints in the Traffic Manager profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public Endpoint[] Endpoints { get; set; }
		
		/// <summary>
		/// Maximum number of endpoints to be returned for MultiValue routing type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxReturn")]
		public System.Nullable<System.Int64> MaxReturn { get; set; }
		
		/// <summary>
		/// Class containing endpoint monitoring settings in a Traffic Manager profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitorConfig")]
		public MonitorConfig MonitorConfig { get; set; }
		
		/// <summary>
		/// The status of the Traffic Manager profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileStatus")]
		public EndpointPropertiesEndpointStatus ProfileStatus { get; set; }
		
		/// <summary>
		/// The traffic routing method of the Traffic Manager profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trafficRoutingMethod")]
		public System.Nullable<ProfilePropertiesTrafficRoutingMethod> TrafficRoutingMethod { get; set; }
		
		/// <summary>
		/// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trafficViewEnrollmentStatus")]
		public EndpointPropertiesEndpointStatus TrafficViewEnrollmentStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProfilePropertiesTrafficRoutingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Performance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Priority = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weighted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Geographic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MultiValue = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Subnet = 5,
	}
	
	/// <summary>
	/// The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
	}
	
	/// <summary>
	/// Class representing a region in the Geographic hierarchy used with the Geographic traffic routing method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Region
	{
		
		/// <summary>
		/// The code of the region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The name of the region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of Regions grouped under this Region in the Geographic Hierarchy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public Region[] Regions { get; set; }
	}
	
	/// <summary>
	/// The core properties of ARM resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a ARM tracked top level resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource : Resource
	{
		
		/// <summary>
		/// The Azure Region where the resource lives
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Class representing the Geographic hierarchy used with the Geographic traffic routing method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrafficManagerGeographicHierarchy : ProxyResource
	{
		
		/// <summary>
		/// Class representing the properties of the Geographic hierarchy used with the Geographic traffic routing method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GeographicHierarchyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager Name Availability response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrafficManagerNameAvailability
	{
		
		/// <summary>
		/// Descriptive message that explains why the name is not available, when applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The relative name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Describes whether the relative name is available or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason why the name is not available, when applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Traffic Manager profile resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Class representing Traffic Manager User Metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserMetricsModel : ProxyResource
	{
		
		/// <summary>
		/// Class representing a Traffic Manager Real User Metrics key response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UserMetricsProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager Real User Metrics key response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserMetricsProperties
	{
		
		/// <summary>
		/// The key returned by the User Metrics operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Checks the availability of a Traffic Manager Relative DNS name.
		/// Profiles_CheckTrafficManagerRelativeDnsNameAvailability providers/Microsoft.Network/checkTrafficManagerNameAvailability
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The Traffic Manager name parameters supplied to the CheckTrafficManagerNameAvailability operation.</param>
		/// <returns>The Traffic Manager Name Availability.</returns>
		public async Task<TrafficManagerNameAvailability> Profiles_CheckTrafficManagerRelativeDnsNameAvailabilityAsync(string api_version, CheckTrafficManagerRelativeDnsNameAvailabilityParameters requestBody)
		{
			var requestUri = "providers/Microsoft.Network/checkTrafficManagerNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TrafficManagerNameAvailability>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the default Geographic Hierarchy used by the Geographic traffic routing method.
		/// GeographicHierarchies_GetDefault providers/Microsoft.Network/trafficManagerGeographicHierarchies/default
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The default Geographic Hierarchy.</returns>
		public async Task<TrafficManagerGeographicHierarchy> GeographicHierarchies_GetDefaultAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Network/trafficManagerGeographicHierarchies/default?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TrafficManagerGeographicHierarchy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the subscription-level key used for Real User Metrics collection.
		/// TrafficManagerUserMetricsKeys_Get subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The subscription-level Traffic Manager Real User Metrics key.</returns>
		public async Task<UserMetricsModel> TrafficManagerUserMetricsKeys_GetAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserMetricsModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a subscription-level key used for Real User Metrics collection.
		/// TrafficManagerUserMetricsKeys_CreateOrUpdate subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		public async Task TrafficManagerUserMetricsKeys_CreateOrUpdateAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a subscription-level key used for Real User Metrics collection.
		/// TrafficManagerUserMetricsKeys_Delete subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The Traffic Manager Real User Metrics key was deleted successfully.</returns>
		public async Task<DeleteOperationResult> TrafficManagerUserMetricsKeys_DeleteAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteOperationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Traffic Manager profiles within a subscription.
		/// Profiles_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The list of Traffic Manager profiles.</returns>
		public async Task<ProfileListResult> Profiles_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/trafficmanagerprofiles?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProfileListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Traffic Manager profiles within a resource group.
		/// Profiles_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager profiles to be listed.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The list of Traffic Manager profiles.</returns>
		public async Task<ProfileListResult> Profiles_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProfileListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Traffic Manager profile.
		/// Profiles_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager profile.</param>
		/// <param name="profileName">The name of the Traffic Manager profile.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The Traffic Manager profile.</returns>
		public async Task<Profile> Profiles_GetAsync(string resourceGroupName, string profileName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Profile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a Traffic Manager profile.
		/// Profiles_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager profile.</param>
		/// <param name="profileName">The name of the Traffic Manager profile.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The Traffic Manager profile parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>The created or updated Traffic Manager profile.</returns>
		public async Task<Profile> Profiles_CreateOrUpdateAsync(string resourceGroupName, string profileName, string api_version, string subscriptionId, Profile requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Profile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Traffic Manager profile.
		/// Profiles_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager profile to be deleted.</param>
		/// <param name="profileName">The name of the Traffic Manager profile to be deleted.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The Traffic Manager Profile was deleted successfully.</returns>
		public async Task<DeleteOperationResult> Profiles_DeleteAsync(string resourceGroupName, string profileName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteOperationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Traffic Manager profile.
		/// Profiles_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager profile.</param>
		/// <param name="profileName">The name of the Traffic Manager profile.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The Traffic Manager profile parameters supplied to the Update operation.</param>
		/// <returns>The updated Traffic Manager profile.</returns>
		public async Task<Profile> Profiles_UpdateAsync(string resourceGroupName, string profileName, string api_version, string subscriptionId, Profile requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Profile>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets latest heatmap for Traffic Manager profile.
		/// HeatMap_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager endpoint.</param>
		/// <param name="profileName">The name of the Traffic Manager profile.</param>
		/// <param name="heatMapType">The type of HeatMap for the Traffic Manager profile.</param>
		/// <param name="topLeft">The top left latitude,longitude pair of the rectangular viewport to query for.</param>
		/// <param name="botRight">The bottom right latitude,longitude pair of the rectangular viewport to query for.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The Traffic Manager heatmap.</returns>
		public async Task<HeatMapModel> HeatMap_GetAsync(string subscriptionId, string resourceGroupName, string profileName, HeatMap_GetHeatMapType heatMapType, double[] topLeft, double[] botRight, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/heatMaps/"+heatMapType+"&"+string.Join("&", topLeft.Select(z => $"topLeft={z}"))+"&"+string.Join("&", botRight.Select(z => $"botRight={z}"))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HeatMapModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Traffic Manager endpoint.
		/// Endpoints_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager endpoint.</param>
		/// <param name="profileName">The name of the Traffic Manager profile.</param>
		/// <param name="endpointType">The type of the Traffic Manager endpoint.</param>
		/// <param name="endpointName">The name of the Traffic Manager endpoint.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The Traffic Manager endpoint.</returns>
		public async Task<Endpoint> Endpoints_GetAsync(string resourceGroupName, string profileName, string endpointType, string endpointName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/"+ (endpointType==null? "" : System.Uri.EscapeDataString(endpointType))+"/"+ (endpointName==null? "" : System.Uri.EscapeDataString(endpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Endpoint>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a Traffic Manager endpoint.
		/// Endpoints_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager endpoint to be created or updated.</param>
		/// <param name="profileName">The name of the Traffic Manager profile.</param>
		/// <param name="endpointType">The type of the Traffic Manager endpoint to be created or updated.</param>
		/// <param name="endpointName">The name of the Traffic Manager endpoint to be created or updated.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation.</param>
		/// <returns>The created or updated Endpoint.</returns>
		public async Task<Endpoint> Endpoints_CreateOrUpdateAsync(string resourceGroupName, string profileName, string endpointType, string endpointName, string api_version, string subscriptionId, Endpoint requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/"+ (endpointType==null? "" : System.Uri.EscapeDataString(endpointType))+"/"+ (endpointName==null? "" : System.Uri.EscapeDataString(endpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Endpoint>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Traffic Manager endpoint.
		/// Endpoints_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager endpoint to be deleted.</param>
		/// <param name="profileName">The name of the Traffic Manager profile.</param>
		/// <param name="endpointType">The type of the Traffic Manager endpoint to be deleted.</param>
		/// <param name="endpointName">The name of the Traffic Manager endpoint to be deleted.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The Traffic Manager Endpoint was deleted successfully.</returns>
		public async Task<DeleteOperationResult> Endpoints_DeleteAsync(string resourceGroupName, string profileName, string endpointType, string endpointName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/"+ (endpointType==null? "" : System.Uri.EscapeDataString(endpointType))+"/"+ (endpointName==null? "" : System.Uri.EscapeDataString(endpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteOperationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Traffic Manager endpoint.
		/// Endpoints_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager endpoint to be updated.</param>
		/// <param name="profileName">The name of the Traffic Manager profile.</param>
		/// <param name="endpointType">The type of the Traffic Manager endpoint to be updated.</param>
		/// <param name="endpointName">The name of the Traffic Manager endpoint to be updated.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The Traffic Manager endpoint parameters supplied to the Update operation.</param>
		/// <returns>The updated Traffic Manager endpoint.</returns>
		public async Task<Endpoint> Endpoints_UpdateAsync(string resourceGroupName, string profileName, string endpointType, string endpointName, string api_version, string subscriptionId, Endpoint requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/"+ (endpointType==null? "" : System.Uri.EscapeDataString(endpointType))+"/"+ (endpointName==null? "" : System.Uri.EscapeDataString(endpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Endpoint>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum HeatMap_GetHeatMapType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
