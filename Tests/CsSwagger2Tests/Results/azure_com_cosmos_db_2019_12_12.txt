//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ARMProxyResource
	{
		
		/// <summary>
		/// The unique resource identifier of the database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of Azure resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The core properties of ARM resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ARMResourceProperties
	{
		
		/// <summary>
		/// The unique resource identifier of the ARM resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource group to which the resource belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the ARM resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// The type of Azure resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Tags
	{
	}
	
	/// <summary>
	/// Cosmos DB capability object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Capability
	{
		
		/// <summary>
		/// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB Cassandra keyspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraKeyspaceCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB Cassandra keyspace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CassandraKeyspaceCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB Cassandra keyspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraKeyspaceCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB Cassandra keyspace resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public CassandraKeyspaceResource Resource { get; set; }
	}
	
	/// <summary>
	/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateUpdateOptions
	{
	}
	
	/// <summary>
	/// Cosmos DB Cassandra keyspace resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraKeyspaceResource
	{
		
		/// <summary>
		/// Name of the Cosmos DB Cassandra keyspace
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB Cassandra keyspace
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraKeyspaceGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public CassandraKeyspaceResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB Cassandra keyspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraKeyspaceGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB Cassandra keyspace
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CassandraKeyspaceGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the Cassandra keyspaces and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraKeyspaceListResult
	{
		
		/// <summary>
		/// List of Cassandra keyspaces and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CassandraKeyspaceGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB Cassandra table partition key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraPartitionKey
	{
		
		/// <summary>
		/// Name of the Cosmos DB Cassandra table partition key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB Cassandra table schema
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraSchema
	{
		
		/// <summary>
		/// List of cluster key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterKeys")]
		public ClusterKey[] ClusterKeys { get; set; }
		
		/// <summary>
		/// List of Cassandra table columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public Column[] Columns { get; set; }
		
		/// <summary>
		/// List of partition key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKeys")]
		public CassandraPartitionKey[] PartitionKeys { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB Cassandra table cluster key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterKey
	{
		
		/// <summary>
		/// Name of the Cosmos DB Cassandra table cluster key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public string OrderBy { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB Cassandra table column
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Column
	{
		
		/// <summary>
		/// Name of the Cosmos DB Cassandra table column
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the Cosmos DB Cassandra table column
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB Cassandra table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraTableCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB Cassandra table.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CassandraTableCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB Cassandra table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraTableCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB Cassandra table resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public CassandraTableResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB Cassandra table resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraTableResource
	{
		
		/// <summary>
		/// Time to live of the Cosmos DB Cassandra table
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTtl")]
		public System.Nullable<System.Int32> DefaultTtl { get; set; }
		
		/// <summary>
		/// Name of the Cosmos DB Cassandra table
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Cosmos DB Cassandra table schema
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public CassandraSchema Schema { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB Cassandra table
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraTableGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public CassandraTableResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB Cassandra table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraTableGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB Cassandra table
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CassandraTableGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the Cassandra tables and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CassandraTableListResult
	{
		
		/// <summary>
		/// List of Cassandra tables and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CassandraTableGetResults[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CompositePath
	{
		
		/// <summary>
		/// Sort order for composite paths.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<CompositePathOrder> Order { get; set; }
		
		/// <summary>
		/// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CompositePathOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Descending = 1,
	}
	
	/// <summary>
	/// The conflict resolution policy for the container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConflictResolutionPolicy
	{
		
		/// <summary>
		/// The conflict resolution path in the case of LastWriterWins mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionPath")]
		public string ConflictResolutionPath { get; set; }
		
		/// <summary>
		/// The procedure to resolve conflicts in the case of custom mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionProcedure")]
		public string ConflictResolutionProcedure { get; set; }
		
		/// <summary>
		/// Indicates the conflict resolution mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<ConflictResolutionPolicyMode> Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConflictResolutionPolicyMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastWriterWins = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 1,
	}
	
	/// <summary>
	/// The cassandra connector offer type for the Cosmos DB C* database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConnectorOffer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Small = 0,
	}
	
	/// <summary>
	/// The consistency policy for the Cosmos DB database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsistencyPolicy
	{
		
		/// <summary>
		/// The default consistency level and configuration settings of the Cosmos DB account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultConsistencyLevel")]
		public ConsistencyPolicyDefaultConsistencyLevel DefaultConsistencyLevel { get; set; }
		
		/// <summary>
		/// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
		/// Minimum: 5
		/// Maximum: 86400
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxIntervalInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(5, 86400)]
		public System.Nullable<System.Int32> MaxIntervalInSeconds { get; set; }
		
		/// <summary>
		/// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxStalenessPrefix")]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int64> MaxStalenessPrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ConsistencyPolicyDefaultConsistencyLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Eventual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BoundedStaleness = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Strong = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConsistentPrefix = 4,
	}
	
	/// <summary>
	/// The configuration of the partition key to be used for partitioning data into multiple partitions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerPartitionKey
	{
		
		/// <summary>
		/// Indicates the kind of algorithm used for partitioning
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<ContainerPartitionKeyKind> Kind { get; set; }
		
		/// <summary>
		/// List of paths using which data within the container can be partitioned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
		
		/// <summary>
		/// Indicates the version of the partition key definition
		/// Minimum: 1
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.Range(1, 2)]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerPartitionKeyKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hash = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Range = 1,
	}
	
	/// <summary>
	/// Connection string for the Cosmos DB account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountConnectionString
	{
		
		/// <summary>
		/// Value of the connection string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// Description of the connection string
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB database accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountCreateUpdateParameters
	{
		
		/// <summary>
		/// Indicates the type of database account. This can only be set at database account creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<DatabaseAccountCreateUpdateParametersKind> Kind { get; set; }
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB database accounts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatabaseAccountCreateUpdateProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabaseAccountCreateUpdateParametersKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GlobalDocumentDB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MongoDB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parse = 2,
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB database accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountCreateUpdateProperties
	{
		
		/// <summary>
		/// List of Cosmos DB capabilities for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public Capability[] Capabilities { get; set; }
		
		/// <summary>
		/// The cassandra connector offer type for the Cosmos DB C* database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorOffer")]
		public ConnectorOffer ConnectorOffer { get; set; }
		
		/// <summary>
		/// The consistency policy for the Cosmos DB database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consistencyPolicy")]
		public ConsistencyPolicy ConsistencyPolicy { get; set; }
		
		/// <summary>
		/// The offer type for the Cosmos DB database account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseAccountOfferType")]
		public DatabaseAccountCreateUpdatePropertiesDatabaseAccountOfferType DatabaseAccountOfferType { get; set; }
		
		/// <summary>
		/// Disable write operations on metadata resources (databases, containers, throughput) via account keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableKeyBasedMetadataWriteAccess")]
		public System.Nullable<System.Boolean> DisableKeyBasedMetadataWriteAccess { get; set; }
		
		/// <summary>
		/// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutomaticFailover")]
		public System.Nullable<System.Boolean> EnableAutomaticFailover { get; set; }
		
		/// <summary>
		/// Enables the cassandra connector on the Cosmos DB C* account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCassandraConnector")]
		public System.Nullable<System.Boolean> EnableCassandraConnector { get; set; }
		
		/// <summary>
		/// Enables the account to write in multiple locations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMultipleWriteLocations")]
		public System.Nullable<System.Boolean> EnableMultipleWriteLocations { get; set; }
		
		/// <summary>
		/// Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipRangeFilter")]
		public string IpRangeFilter { get; set; }
		
		/// <summary>
		/// Flag to indicate whether to enable/disable Virtual Network ACL rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVirtualNetworkFilterEnabled")]
		public System.Nullable<System.Boolean> IsVirtualNetworkFilterEnabled { get; set; }
		
		/// <summary>
		/// The URI of the key vault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultKeyUri")]
		public string KeyVaultKeyUri { get; set; }
		
		/// <summary>
		/// An array that contains the georeplication locations enabled for the Cosmos DB account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// List of Virtual Network ACL rules configured for the Cosmos DB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkRules")]
		public VirtualNetworkRule[] VirtualNetworkRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabaseAccountCreateUpdatePropertiesDatabaseAccountOfferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
	}
	
	/// <summary>
	/// A region in which the Azure Cosmos DB database account is deployed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Location
	{
		
		/// <summary>
		/// The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentEndpoint")]
		public string DocumentEndpoint { get; set; }
		
		/// <summary>
		/// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverPriority")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FailoverPriority { get; set; }
		
		/// <summary>
		/// The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Flag to indicate whether or not this region is an AvailabilityZone region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isZoneRedundant")]
		public System.Nullable<System.Boolean> IsZoneRedundant { get; set; }
		
		/// <summary>
		/// The name of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
		
		/// <summary>
		/// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Virtual Network ACL Rule object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRule
	{
		
		/// <summary>
		/// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Create firewall rule before the virtual network has vnet service endpoint enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreMissingVNetServiceEndpoint")]
		public System.Nullable<System.Boolean> IgnoreMissingVNetServiceEndpoint { get; set; }
	}
	
	/// <summary>
	/// Properties for the database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountGetProperties
	{
		
		/// <summary>
		/// List of Cosmos DB capabilities for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public Capability[] Capabilities { get; set; }
		
		/// <summary>
		/// The cassandra connector offer type for the Cosmos DB C* database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorOffer")]
		public ConnectorOffer ConnectorOffer { get; set; }
		
		/// <summary>
		/// The consistency policy for the Cosmos DB database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consistencyPolicy")]
		public ConsistencyPolicy ConsistencyPolicy { get; set; }
		
		/// <summary>
		/// The offer type for the Cosmos DB database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseAccountOfferType")]
		public DatabaseAccountCreateUpdatePropertiesDatabaseAccountOfferType DatabaseAccountOfferType { get; set; }
		
		/// <summary>
		/// Disable write operations on metadata resources (databases, containers, throughput) via account keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableKeyBasedMetadataWriteAccess")]
		public System.Nullable<System.Boolean> DisableKeyBasedMetadataWriteAccess { get; set; }
		
		/// <summary>
		/// The connection endpoint for the Cosmos DB database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentEndpoint")]
		public string DocumentEndpoint { get; set; }
		
		/// <summary>
		/// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutomaticFailover")]
		public System.Nullable<System.Boolean> EnableAutomaticFailover { get; set; }
		
		/// <summary>
		/// Enables the cassandra connector on the Cosmos DB C* account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCassandraConnector")]
		public System.Nullable<System.Boolean> EnableCassandraConnector { get; set; }
		
		/// <summary>
		/// Enables the account to write in multiple locations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMultipleWriteLocations")]
		public System.Nullable<System.Boolean> EnableMultipleWriteLocations { get; set; }
		
		/// <summary>
		/// An array that contains the regions ordered by their failover priorities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverPolicies")]
		public FailoverPolicy[] FailoverPolicies { get; set; }
		
		/// <summary>
		/// Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipRangeFilter")]
		public string IpRangeFilter { get; set; }
		
		/// <summary>
		/// Flag to indicate whether to enable/disable Virtual Network ACL rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVirtualNetworkFilterEnabled")]
		public System.Nullable<System.Boolean> IsVirtualNetworkFilterEnabled { get; set; }
		
		/// <summary>
		/// The URI of the key vault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultKeyUri")]
		public string KeyVaultKeyUri { get; set; }
		
		/// <summary>
		/// An array that contains all of the locations enabled for the Cosmos DB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// An array that contains of the read locations enabled for the Cosmos DB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readLocations")]
		public Location[] ReadLocations { get; set; }
		
		/// <summary>
		/// List of Virtual Network ACL rules configured for the Cosmos DB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkRules")]
		public VirtualNetworkRule[] VirtualNetworkRules { get; set; }
		
		/// <summary>
		/// An array that contains the write location for the Cosmos DB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeLocations")]
		public Location[] WriteLocations { get; set; }
	}
	
	/// <summary>
	/// The failover policy for a given region of a database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FailoverPolicy
	{
		
		/// <summary>
		/// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverPriority")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FailoverPriority { get; set; }
		
		/// <summary>
		/// The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the region in which the database account exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountGetResults
	{
		
		/// <summary>
		/// Indicates the type of database account. This can only be set at database account creation.
		/// </summary>
		[System.ComponentModel.DefaultValue(DatabaseAccountCreateUpdateParametersKind.GlobalDocumentDB)]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DatabaseAccountCreateUpdateParametersKind Kind { get; set; } = DatabaseAccountCreateUpdateParametersKind.GlobalDocumentDB;
		
		/// <summary>
		/// Properties for the database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatabaseAccountGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The connection strings for the given database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountListConnectionStringsResult
	{
		
		/// <summary>
		/// An array that contains the connection strings for the Cosmos DB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionStrings")]
		public DatabaseAccountConnectionString[] ConnectionStrings { get; set; }
	}
	
	/// <summary>
	/// The access keys for the given database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountListKeysResult : DatabaseAccountListReadOnlyKeysResult
	{
		
		/// <summary>
		/// Base 64 encoded value of the primary read-write key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryMasterKey")]
		public string PrimaryMasterKey { get; set; }
		
		/// <summary>
		/// Base 64 encoded value of the secondary read-write key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryMasterKey")]
		public string SecondaryMasterKey { get; set; }
	}
	
	/// <summary>
	/// The read-only access keys for the given database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountListReadOnlyKeysResult
	{
		
		/// <summary>
		/// Base 64 encoded value of the primary read-only key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryReadonlyMasterKey")]
		public string PrimaryReadonlyMasterKey { get; set; }
		
		/// <summary>
		/// Base 64 encoded value of the secondary read-only key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryReadonlyMasterKey")]
		public string SecondaryReadonlyMasterKey { get; set; }
	}
	
	/// <summary>
	/// The offer type for the Cosmos DB database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabaseAccountOfferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
	}
	
	/// <summary>
	/// Parameters to regenerate the keys within the database account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountRegenerateKeyParameters
	{
		
		/// <summary>
		/// The access key to regenerate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyKind")]
		public DatabaseAccountRegenerateKeyParametersKeyKind KeyKind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DatabaseAccountRegenerateKeyParametersKeyKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secondary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primaryReadonly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secondaryReadonly = 3,
	}
	
	/// <summary>
	/// Parameters for patching Azure Cosmos DB database account properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountUpdateParameters
	{
		
		/// <summary>
		/// The location of the resource group to which the resource belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Properties to update Azure Cosmos DB database accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DatabaseAccountUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Properties to update Azure Cosmos DB database accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountUpdateProperties
	{
		
		/// <summary>
		/// List of Cosmos DB capabilities for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public Capability[] Capabilities { get; set; }
		
		/// <summary>
		/// The cassandra connector offer type for the Cosmos DB C* database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorOffer")]
		public ConnectorOffer ConnectorOffer { get; set; }
		
		/// <summary>
		/// The consistency policy for the Cosmos DB database account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consistencyPolicy")]
		public ConsistencyPolicy ConsistencyPolicy { get; set; }
		
		/// <summary>
		/// Disable write operations on metadata resources (databases, containers, throughput) via account keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableKeyBasedMetadataWriteAccess")]
		public System.Nullable<System.Boolean> DisableKeyBasedMetadataWriteAccess { get; set; }
		
		/// <summary>
		/// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutomaticFailover")]
		public System.Nullable<System.Boolean> EnableAutomaticFailover { get; set; }
		
		/// <summary>
		/// Enables the cassandra connector on the Cosmos DB C* account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCassandraConnector")]
		public System.Nullable<System.Boolean> EnableCassandraConnector { get; set; }
		
		/// <summary>
		/// Enables the account to write in multiple locations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableMultipleWriteLocations")]
		public System.Nullable<System.Boolean> EnableMultipleWriteLocations { get; set; }
		
		/// <summary>
		/// Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipRangeFilter")]
		public string IpRangeFilter { get; set; }
		
		/// <summary>
		/// Flag to indicate whether to enable/disable Virtual Network ACL rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVirtualNetworkFilterEnabled")]
		public System.Nullable<System.Boolean> IsVirtualNetworkFilterEnabled { get; set; }
		
		/// <summary>
		/// The URI of the key vault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultKeyUri")]
		public string KeyVaultKeyUri { get; set; }
		
		/// <summary>
		/// An array that contains the georeplication locations enabled for the Cosmos DB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// List of Virtual Network ACL rules configured for the Cosmos DB account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkRules")]
		public VirtualNetworkRule[] VirtualNetworkRules { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the database accounts and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DatabaseAccountsListResult
	{
		
		/// <summary>
		/// List of database account and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DatabaseAccountGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Error Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExcludedPath
	{
		
		/// <summary>
		/// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtendedResourceProperties
	{
		
		/// <summary>
		/// A system generated property representing the resource etag required for optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _etag { get; set; }
		
		/// <summary>
		/// A system generated property. A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _rid { get; set; }
		
		/// <summary>
		/// A system generated property that denotes the last updated timestamp of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public object _ts { get; set; }
	}
	
	/// <summary>
	/// The list of new failover policies for the failover priority change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FailoverPolicies
	{
		
		/// <summary>
		/// List of failover policies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failoverPolicies")]
		public FailoverPolicy[] FailoverPolicies1 { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB Gremlin database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinDatabaseCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB Gremlin database.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GremlinDatabaseCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB Gremlin database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinDatabaseCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB Gremlin database resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public GremlinDatabaseResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB Gremlin database resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinDatabaseResource
	{
		
		/// <summary>
		/// Name of the Cosmos DB Gremlin database
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB SQL database
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinDatabaseGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public GremlinDatabaseResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB Gremlin database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinDatabaseGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB SQL database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GremlinDatabaseGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the Gremlin databases and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinDatabaseListResult
	{
		
		/// <summary>
		/// List of Gremlin databases and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GremlinDatabaseGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB Gremlin graph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinGraphCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB Gremlin graph.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GremlinGraphCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB Gremlin graph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinGraphCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB Gremlin graph resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public GremlinGraphResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB Gremlin graph resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinGraphResource
	{
		
		/// <summary>
		/// The conflict resolution policy for the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionPolicy")]
		public ConflictResolutionPolicy ConflictResolutionPolicy { get; set; }
		
		/// <summary>
		/// Default time to live
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTtl")]
		public System.Nullable<System.Int32> DefaultTtl { get; set; }
		
		/// <summary>
		/// Name of the Cosmos DB Gremlin graph
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Cosmos DB indexing policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexingPolicy")]
		public IndexingPolicy IndexingPolicy { get; set; }
		
		/// <summary>
		/// The configuration of the partition key to be used for partitioning data into multiple partitions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKey")]
		public ContainerPartitionKey PartitionKey { get; set; }
		
		/// <summary>
		/// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueKeyPolicy")]
		public UniqueKeyPolicy UniqueKeyPolicy { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB indexing policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IndexingPolicy
	{
		
		/// <summary>
		/// Indicates if the indexing policy is automatic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automatic")]
		public System.Nullable<System.Boolean> Automatic { get; set; }
		
		/// <summary>
		/// List of composite path list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compositeIndexes")]
		public CompositePath[][] CompositeIndexes { get; set; }
		
		/// <summary>
		/// List of paths to exclude from indexing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedPaths")]
		public ExcludedPath[] ExcludedPaths { get; set; }
		
		/// <summary>
		/// List of paths to include in the indexing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedPaths")]
		public IncludedPath[] IncludedPaths { get; set; }
		
		/// <summary>
		/// Indicates the indexing mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexingMode")]
		public System.Nullable<IndexingPolicyIndexingMode> IndexingMode { get; set; }
		
		/// <summary>
		/// List of spatial specifics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spatialIndexes")]
		public SpatialSpec[] SpatialIndexes { get; set; }
	}
	
	/// <summary>
	/// The paths that are included in indexing
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IncludedPath
	{
		
		/// <summary>
		/// List of indexes for this path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexes")]
		public Indexes[] Indexes { get; set; }
		
		/// <summary>
		/// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// The indexes for the path.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Indexes
	{
		
		/// <summary>
		/// The datatype for which the indexing behavior is applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public System.Nullable<IndexesDataType> DataType { get; set; }
		
		/// <summary>
		/// Indicates the type of index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<IndexesKind> Kind { get; set; }
		
		/// <summary>
		/// The precision of the index. -1 is maximum precision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IndexesDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Point = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Polygon = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LineString = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MultiPolygon = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IndexesKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hash = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Range = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Spatial = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IndexingPolicyIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Consistent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lazy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SpatialSpec
	{
		
		/// <summary>
		/// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// List of path's spatial type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public SpatialType[] Types { get; set; }
	}
	
	/// <summary>
	/// Indicates the spatial type of index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SpatialType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Point = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LineString = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Polygon = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MultiPolygon = 3,
	}
	
	/// <summary>
	/// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UniqueKeyPolicy
	{
		
		/// <summary>
		/// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueKeys")]
		public UniqueKey[] UniqueKeys { get; set; }
	}
	
	/// <summary>
	/// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UniqueKey
	{
		
		/// <summary>
		/// List of paths must be unique for each document in the Azure Cosmos DB service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB Gremlin graph
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinGraphGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public GremlinGraphResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB Gremlin graph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinGraphGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB Gremlin graph
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GremlinGraphGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the graphs and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GremlinGraphListResult
	{
		
		/// <summary>
		/// List of graphs and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GremlinGraphGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Metric data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Metric
	{
		
		/// <summary>
		/// The end time for the metric (ISO-8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The metric values for the specified time window and timestep.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValues")]
		public MetricValue[] MetricValues { get; set; }
		
		/// <summary>
		/// A metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public MetricName Name { get; set; }
		
		/// <summary>
		/// The start time for the metric (ISO-8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The time grain to be used to summarize the metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
		
		/// <summary>
		/// The unit of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<MetricUnit> Unit { get; set; }
	}
	
	/// <summary>
	/// Represents metrics values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricValue
	{
		
		/// <summary>
		/// The number of values for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _count { get; set; }
		
		/// <summary>
		/// The average value of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Double> Average { get; set; }
		
		/// <summary>
		/// The max value of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Double> Maximum { get; set; }
		
		/// <summary>
		/// The min value of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Double> Minimum { get; set; }
		
		/// <summary>
		/// The metric timestamp (ISO-8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// The total value of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 6,
	}
	
	/// <summary>
	/// The availability of the metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAvailability
	{
		
		/// <summary>
		/// The retention for the metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retention")]
		public string Retention { get; set; }
		
		/// <summary>
		/// The time grain to be used to summarize the metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
	}
	
	/// <summary>
	/// The definition of a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricDefinition
	{
		
		/// <summary>
		/// The list of metric availabilities for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricAvailabilities")]
		public MetricAvailability[] MetricAvailabilities { get; set; }
		
		/// <summary>
		/// A metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public MetricName Name { get; set; }
		
		/// <summary>
		/// The primary aggregation type of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryAggregationType")]
		public System.Nullable<MetricDefinitionPrimaryAggregationType> PrimaryAggregationType { get; set; }
		
		/// <summary>
		/// The resource uri of the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// The unit of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricDefinitionPrimaryAggregationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last = 5,
	}
	
	/// <summary>
	/// The response to a list metric definitions request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricDefinitionsListResult
	{
		
		/// <summary>
		/// The list of metric definitions for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MetricDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The response to a list metrics request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricListResult
	{
		
		/// <summary>
		/// The list of metrics for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Metric[] Value { get; set; }
	}
	
	/// <summary>
	/// A metric name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricName
	{
		
		/// <summary>
		/// The friendly name of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// The name of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB MongoDB collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBCollectionCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB MongoDB collection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MongoDBCollectionCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB MongoDB collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBCollectionCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB MongoDB collection resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public MongoDBCollectionResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB MongoDB collection resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBCollectionResource
	{
		
		/// <summary>
		/// Name of the Cosmos DB MongoDB collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List of index keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexes")]
		public MongoIndex[] Indexes { get; set; }
		
		/// <summary>
		/// The shard key and partition kind pair, only support "Hash" partition kind
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shardKey")]
		public ShardKeys ShardKey { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB MongoDB collection index key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoIndex
	{
		
		/// <summary>
		/// Cosmos DB MongoDB collection resource object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public MongoIndexKeys Key { get; set; }
		
		/// <summary>
		/// Cosmos DB MongoDB collection index options
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public MongoIndexOptions Options { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB MongoDB collection resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoIndexKeys
	{
		
		/// <summary>
		/// List of keys for each MongoDB collection in the Azure Cosmos DB service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public string[] Keys { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB MongoDB collection index options
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoIndexOptions
	{
		
		/// <summary>
		/// Expire after seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAfterSeconds")]
		public System.Nullable<System.Int32> ExpireAfterSeconds { get; set; }
		
		/// <summary>
		/// Is unique or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique")]
		public System.Nullable<System.Boolean> Unique { get; set; }
	}
	
	/// <summary>
	/// The shard key and partition kind pair, only support "Hash" partition kind
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShardKeys
	{
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB MongoDB collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBCollectionGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public MongoDBCollectionResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB MongoDB collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBCollectionGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB MongoDB collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MongoDBCollectionGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the MongoDB collections and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBCollectionListResult
	{
		
		/// <summary>
		/// List of MongoDB collections and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MongoDBCollectionGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB MongoDB database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBDatabaseCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB MongoDB database.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MongoDBDatabaseCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB MongoDB database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBDatabaseCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB MongoDB database resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public MongoDBDatabaseResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB MongoDB database resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBDatabaseResource
	{
		
		/// <summary>
		/// Name of the Cosmos DB MongoDB database
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB MongoDB database
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBDatabaseGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public MongoDBDatabaseResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB MongoDB database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBDatabaseGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB MongoDB database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MongoDBDatabaseGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the MongoDB databases and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MongoDBDatabaseListResult
	{
		
		/// <summary>
		/// List of MongoDB databases and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MongoDBDatabaseGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of operations supported by the Resource Provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The metric values for a single partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartitionMetric : Metric
	{
		
		/// <summary>
		/// The partition id (GUID identifier) of the metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionId")]
		public string PartitionId { get; set; }
		
		/// <summary>
		/// The partition key range id (integer identifier) of the metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKeyRangeId")]
		public string PartitionKeyRangeId { get; set; }
	}
	
	/// <summary>
	/// The response to a list partition metrics request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartitionMetricListResult
	{
		
		/// <summary>
		/// The list of partition-level metrics for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PartitionMetric[] Value { get; set; }
	}
	
	/// <summary>
	/// The partition level usage data for a usage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartitionUsage : Usage
	{
		
		/// <summary>
		/// The partition id (GUID identifier) of the usages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionId")]
		public string PartitionId { get; set; }
		
		/// <summary>
		/// The partition key range id (integer identifier) of the usages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKeyRangeId")]
		public string PartitionKeyRangeId { get; set; }
	}
	
	/// <summary>
	/// The response to a list partition level usage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartitionUsagesResult
	{
		
		/// <summary>
		/// The list of partition-level usages for the database. A usage is a point in time metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PartitionUsage[] Value { get; set; }
	}
	
	/// <summary>
	/// Percentile Metric data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PercentileMetric
	{
		
		/// <summary>
		/// The end time for the metric (ISO-8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The percentile metric values for the specified time window and timestep.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValues")]
		public PercentileMetricValue[] MetricValues { get; set; }
		
		/// <summary>
		/// A metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public MetricName Name { get; set; }
		
		/// <summary>
		/// The start time for the metric (ISO-8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The time grain to be used to summarize the metric values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
		
		/// <summary>
		/// The unit of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
	}
	
	/// <summary>
	/// Represents percentile metrics values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PercentileMetricValue : MetricValue
	{
		
		/// <summary>
		/// The 10th percentile value for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P10 { get; set; }
		
		/// <summary>
		/// The 25th percentile value for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P25 { get; set; }
		
		/// <summary>
		/// The 50th percentile value for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P50 { get; set; }
		
		/// <summary>
		/// The 75th percentile value for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P75 { get; set; }
		
		/// <summary>
		/// The 90th percentile value for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P90 { get; set; }
		
		/// <summary>
		/// The 95th percentile value for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P95 { get; set; }
		
		/// <summary>
		/// The 99th percentile value for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P99 { get; set; }
	}
	
	/// <summary>
	/// The response to a list percentile metrics request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PercentileMetricListResult
	{
		
		/// <summary>
		/// The list of percentile metrics for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PercentileMetric[] Value { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB region to online or offline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegionForOnlineOffline
	{
		
		/// <summary>
		/// Cosmos DB region, with spaces between words and each word capitalized.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlContainerCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlContainerCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlContainerCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB SQL container resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlContainerResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB SQL container resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlContainerResource
	{
		
		/// <summary>
		/// The conflict resolution policy for the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionPolicy")]
		public ConflictResolutionPolicy ConflictResolutionPolicy { get; set; }
		
		/// <summary>
		/// Default time to live
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultTtl")]
		public System.Nullable<System.Int32> DefaultTtl { get; set; }
		
		/// <summary>
		/// Name of the Cosmos DB SQL container
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Cosmos DB indexing policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexingPolicy")]
		public IndexingPolicy IndexingPolicy { get; set; }
		
		/// <summary>
		/// The configuration of the partition key to be used for partitioning data into multiple partitions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKey")]
		public ContainerPartitionKey PartitionKey { get; set; }
		
		/// <summary>
		/// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueKeyPolicy")]
		public UniqueKeyPolicy UniqueKeyPolicy { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB container
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlContainerGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlContainerResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlContainerGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlContainerGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the containers and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlContainerListResult
	{
		
		/// <summary>
		/// List of containers and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SqlContainerGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB SQL database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDatabaseCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB SQL database.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlDatabaseCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB SQL database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDatabaseCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB SQL database resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlDatabaseResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB SQL database resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDatabaseResource
	{
		
		/// <summary>
		/// Name of the Cosmos DB SQL database
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB SQL database
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDatabaseGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlDatabaseResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB SQL database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDatabaseGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB SQL database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlDatabaseGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the SQL databases and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDatabaseListResult
	{
		
		/// <summary>
		/// List of SQL databases and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SqlDatabaseGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB storedProcedure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlStoredProcedureCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB storedProcedure.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlStoredProcedureCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB storedProcedure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlStoredProcedureCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB SQL storedProcedure resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlStoredProcedureResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB SQL storedProcedure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlStoredProcedureResource
	{
		
		/// <summary>
		/// Body of the Stored Procedure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Name of the Cosmos DB SQL storedProcedure
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB StoredProcedure
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlStoredProcedureGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlStoredProcedureResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB storedProcedure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlStoredProcedureGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB StoredProcedure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlStoredProcedureGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the storedProcedures and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlStoredProcedureListResult
	{
		
		/// <summary>
		/// List of storedProcedures and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SqlStoredProcedureGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlTriggerCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB trigger.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlTriggerCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlTriggerCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB SQL trigger resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlTriggerResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB SQL trigger resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlTriggerResource
	{
		
		/// <summary>
		/// Body of the Trigger
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Name of the Cosmos DB SQL trigger
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The operation the trigger is associated with
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerOperation")]
		public System.Nullable<SqlTriggerResourceTriggerOperation> TriggerOperation { get; set; }
		
		/// <summary>
		/// Type of the Trigger
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public System.Nullable<SqlTriggerResourceTriggerType> TriggerType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlTriggerResourceTriggerOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Create = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Update = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Replace = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlTriggerResourceTriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pre = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Post = 1,
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB trigger
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlTriggerGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlTriggerResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlTriggerGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB trigger
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlTriggerGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the triggers and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlTriggerListResult
	{
		
		/// <summary>
		/// List of triggers and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SqlTriggerGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB userDefinedFunction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlUserDefinedFunctionCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB userDefinedFunction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlUserDefinedFunctionCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB userDefinedFunction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlUserDefinedFunctionCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB SQL userDefinedFunction resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlUserDefinedFunctionResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB SQL userDefinedFunction resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlUserDefinedFunctionResource
	{
		
		/// <summary>
		/// Body of the User Defined Function
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Name of the Cosmos DB SQL userDefinedFunction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB userDefinedFunction
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlUserDefinedFunctionGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public SqlUserDefinedFunctionResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB userDefinedFunction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlUserDefinedFunctionGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB userDefinedFunction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlUserDefinedFunctionGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the userDefinedFunctions and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlUserDefinedFunctionListResult
	{
		
		/// <summary>
		/// List of userDefinedFunctions and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SqlUserDefinedFunctionGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters to create and update Cosmos DB Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TableCreateUpdateParameters
	{
		
		/// <summary>
		/// Properties to create and update Azure Cosmos DB Table.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TableCreateUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to create and update Azure Cosmos DB Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TableCreateUpdateProperties
	{
		
		/// <summary>
		/// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CreateUpdateOptions Options { get; set; }
		
		/// <summary>
		/// Cosmos DB table resource object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public TableResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB table resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TableResource
	{
		
		/// <summary>
		/// Name of the Cosmos DB table
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos Table
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TableGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public TableResource Resource { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TableGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos Table
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TableGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The List operation response, that contains the Table and their properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TableListResult
	{
		
		/// <summary>
		/// List of Table and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TableGetResults[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of an Azure Cosmos DB resource throughput
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ThroughputSettingsGetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public ThroughputSettingsResource Resource { get; set; }
	}
	
	/// <summary>
	/// Cosmos DB resource throughput object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ThroughputSettingsResource
	{
		
		/// <summary>
		/// The minimum throughput of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumThroughput")]
		public string MinimumThroughput { get; set; }
		
		/// <summary>
		/// The throughput replace is pending
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerReplacePending")]
		public string OfferReplacePending { get; set; }
		
		/// <summary>
		/// Value of the Cosmos DB resource throughput
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public int Throughput { get; set; }
	}
	
	/// <summary>
	/// An Azure Cosmos DB resource throughput.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ThroughputSettingsGetResults
	{
		
		/// <summary>
		/// The properties of an Azure Cosmos DB resource throughput
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ThroughputSettingsGetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Parameters to update Cosmos DB resource throughput.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ThroughputSettingsUpdateParameters
	{
		
		/// <summary>
		/// Properties to update Azure Cosmos DB resource throughput.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ThroughputSettingsUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties to update Azure Cosmos DB resource throughput.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ThroughputSettingsUpdateProperties
	{
		
		/// <summary>
		/// Cosmos DB resource throughput object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public ThroughputSettingsResource Resource { get; set; }
	}
	
	/// <summary>
	/// The unit of the metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UnitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 6,
	}
	
	/// <summary>
	/// The usage data for a usage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Usage
	{
		
		/// <summary>
		/// Current value for this metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int64> CurrentValue { get; set; }
		
		/// <summary>
		/// Maximum value for this metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// A metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public MetricName Name { get; set; }
		
		/// <summary>
		/// The quota period used to summarize the usage values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaPeriod")]
		public string QuotaPeriod { get; set; }
		
		/// <summary>
		/// The unit of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
	}
	
	/// <summary>
	/// The response to a list usage request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsagesResult
	{
		
		/// <summary>
		/// The list of usages for the database. A usage is a point in time metric
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Usage[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Cosmos DB Resource Provider operations.
		/// Operations_List providers/Microsoft.DocumentDB/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>OK</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DocumentDB/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the Azure Cosmos DB database accounts available under the subscription.
		/// DatabaseAccounts_List subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<DatabaseAccountsListResult> DatabaseAccounts_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DocumentDB/databaseAccounts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseAccountsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the Azure Cosmos DB database accounts available under the given resource group.
		/// DatabaseAccounts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts
		/// </summary>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<DatabaseAccountsListResult> DatabaseAccounts_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseAccountsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the properties of an existing Azure Cosmos DB database account.
		/// DatabaseAccounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The database account properties were retrieved successfully.</returns>
		public async Task<DatabaseAccountGetResults> DatabaseAccounts_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseAccountGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates an Azure Cosmos DB database account. The "Update" method is preferred when performing updates on an account.
		/// DatabaseAccounts_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current database account.</param>
		/// <returns>The database account create or update operation will complete asynchronously.</returns>
		public async Task<DatabaseAccountGetResults> DatabaseAccounts_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, DatabaseAccountCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseAccountGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB database account.
		/// DatabaseAccounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task DatabaseAccounts_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the properties of an existing Azure Cosmos DB database account.
		/// DatabaseAccounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current database account.</param>
		/// <returns>The database account update operation will complete asynchronously.</returns>
		public async Task<DatabaseAccountGetResults> DatabaseAccounts_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, DatabaseAccountUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseAccountGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
		/// CassandraResources_ListCassandraKeyspaces subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Cassandra keyspace properties were retrieved successfully.</returns>
		public async Task<CassandraKeyspaceListResult> CassandraResources_ListCassandraKeyspacesAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CassandraKeyspaceListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name.
		/// CassandraResources_GetCassandraKeyspace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Cassandra keyspace property was retrieved successfully.</returns>
		public async Task<CassandraKeyspaceGetResults> CassandraResources_GetCassandraKeyspaceAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CassandraKeyspaceGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB Cassandra keyspace
		/// CassandraResources_CreateUpdateCassandraKeyspace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current Cassandra keyspace.</param>
		/// <returns>The Cassandra keyspace create or update operation was completed successfully.</returns>
		public async Task<CassandraKeyspaceGetResults> CassandraResources_CreateUpdateCassandraKeyspaceAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string api_version, CassandraKeyspaceCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CassandraKeyspaceGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB Cassandra keyspace.
		/// CassandraResources_DeleteCassandraKeyspace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task CassandraResources_DeleteCassandraKeyspaceAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the Cassandra table under an existing Azure Cosmos DB database account.
		/// CassandraResources_ListCassandraTables subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Cassandra table properties were retrieved successfully.</returns>
		public async Task<CassandraTableListResult> CassandraResources_ListCassandraTablesAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"/tables&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CassandraTableListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the Cassandra table under an existing Azure Cosmos DB database account.
		/// CassandraResources_GetCassandraTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Cassandra table property was retrieved successfully.</returns>
		public async Task<CassandraTableGetResults> CassandraResources_GetCassandraTableAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string tableName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CassandraTableGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB Cassandra Table
		/// CassandraResources_CreateUpdateCassandraTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current Cassandra Table.</param>
		/// <returns>The Cassandra Table create or update operation was completed successfully.</returns>
		public async Task<CassandraTableGetResults> CassandraResources_CreateUpdateCassandraTableAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string tableName, string api_version, CassandraTableCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CassandraTableGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB Cassandra table.
		/// CassandraResources_DeleteCassandraTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task CassandraResources_DeleteCassandraTableAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string tableName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name.
		/// CassandraResources_GetCassandraTableThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The RUs per second of the Cassandra table was retrieved successfully.</returns>
		public async Task<ThroughputSettingsGetResults> CassandraResources_GetCassandraTableThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string tableName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update RUs per second of an Azure Cosmos DB Cassandra table
		/// CassandraResources_UpdateCassandraTableThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The RUs per second of the parameters to provide for the current Cassandra table.</param>
		/// <returns>The RUs per second of the Cassandra table update operation was completed successfully.</returns>
		public async Task<ThroughputSettingsGetResults> CassandraResources_UpdateCassandraTableThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string tableName, string api_version, ThroughputSettingsUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name.
		/// CassandraResources_GetCassandraKeyspaceThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The RUs per second of the Cassandra Keyspace was retrieved successfully.</returns>
		public async Task<ThroughputSettingsGetResults> CassandraResources_GetCassandraKeyspaceThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
		/// CassandraResources_UpdateCassandraKeyspaceThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="keyspaceName">Cosmos DB keyspace name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The RUs per second of the parameters to provide for the current Cassandra Keyspace.</param>
		/// <returns>The RUs per second of the Cassandra Keyspace update operation was completed successfully.</returns>
		public async Task<ThroughputSettingsGetResults> CassandraResources_UpdateCassandraKeyspaceThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string keyspaceName, string api_version, ThroughputSettingsUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/cassandraKeyspaces/"+ (keyspaceName==null? "" : System.Uri.EscapeDataString(keyspaceName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves metric definitions for the given collection.
		/// Collection_ListMetricDefinitions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metricDefinitions
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="collectionRid">Cosmos DB collection rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The metric definitions for the collection were retrieved successfully.</returns>
		public async Task<MetricDefinitionsListResult> Collection_ListMetricDefinitionsAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseRid, string collectionRid, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/collections/"+ (collectionRid==null? "" : System.Uri.EscapeDataString(collectionRid))+"/metricDefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MetricDefinitionsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given database account and collection.
		/// Collection_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="collectionRid">Cosmos DB collection rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The metrics for the database account were retrieved successfully.</returns>
		public async Task<MetricListResult> Collection_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseRid, string collectionRid, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/collections/"+ (collectionRid==null? "" : System.Uri.EscapeDataString(collectionRid))+"/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given partition key range id.
		/// PartitionKeyRangeId_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="collectionRid">Cosmos DB collection rid.</param>
		/// <param name="partitionKeyRangeId">Partition Key Range Id for which to get data.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The partition-level metrics for the partition key range id were retrieved successfully.</returns>
		public async Task<PartitionMetricListResult> PartitionKeyRangeId_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseRid, string collectionRid, string partitionKeyRangeId, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/collections/"+ (collectionRid==null? "" : System.Uri.EscapeDataString(collectionRid))+"/partitionKeyRangeId/"+ (partitionKeyRangeId==null? "" : System.Uri.EscapeDataString(partitionKeyRangeId))+"/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PartitionMetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given collection, split by partition.
		/// CollectionPartition_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="collectionRid">Cosmos DB collection rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The partition-level metrics for the collection were retrieved successfully.</returns>
		public async Task<PartitionMetricListResult> CollectionPartition_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseRid, string collectionRid, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/collections/"+ (collectionRid==null? "" : System.Uri.EscapeDataString(collectionRid))+"/partitions/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PartitionMetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the usages (most recent storage data) for the given collection, split by partition.
		/// CollectionPartition_ListUsages subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/partitions/usages
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="collectionRid">Cosmos DB collection rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).</param>
		/// <returns>The usages for the collection, per partition were retrieved successfully.</returns>
		public async Task<PartitionUsagesResult> CollectionPartition_ListUsagesAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseRid, string collectionRid, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/collections/"+ (collectionRid==null? "" : System.Uri.EscapeDataString(collectionRid))+"/partitions/usages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PartitionUsagesResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the usages (most recent storage data) for the given collection.
		/// Collection_ListUsages subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/collections/{collectionRid}/usages
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="collectionRid">Cosmos DB collection rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).</param>
		/// <returns>The usages for the collection were retrieved successfully.</returns>
		public async Task<UsagesResult> Collection_ListUsagesAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseRid, string collectionRid, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/collections/"+ (collectionRid==null? "" : System.Uri.EscapeDataString(collectionRid))+"/usages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UsagesResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves metric definitions for the given database.
		/// Database_ListMetricDefinitions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metricDefinitions
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The metric definitions for the database were retrieved successfully.</returns>
		public async Task<MetricDefinitionsListResult> Database_ListMetricDefinitionsAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseRid, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/metricDefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MetricDefinitionsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given database account and database.
		/// Database_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The metrics for the database account were retrieved successfully.</returns>
		public async Task<MetricListResult> Database_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseRid, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the usages (most recent data) for the given database.
		/// Database_ListUsages subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/databases/{databaseRid}/usages
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).</param>
		/// <returns>The usages for the database were retrieved successfully.</returns>
		public async Task<UsagesResult> Database_ListUsagesAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseRid, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/usages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UsagesResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
		/// DatabaseAccounts_FailoverPriorityChange subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/failoverPriorityChange
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The new failover policies for the database account.</param>
		public async Task DatabaseAccounts_FailoverPriorityChangeAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, FailoverPolicies requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/failoverPriorityChange&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the Gremlin databases under an existing Azure Cosmos DB database account.
		/// GremlinResources_ListGremlinDatabases subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Gremlin database properties were retrieved successfully.</returns>
		public async Task<GremlinDatabaseListResult> GremlinResources_ListGremlinDatabasesAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GremlinDatabaseListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name.
		/// GremlinResources_GetGremlinDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Gremlin database property was retrieved successfully.</returns>
		public async Task<GremlinDatabaseGetResults> GremlinResources_GetGremlinDatabaseAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GremlinDatabaseGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB Gremlin database
		/// GremlinResources_CreateUpdateGremlinDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current Gremlin database.</param>
		/// <returns>The Gremlin database create or update operation was completed successfully.</returns>
		public async Task<GremlinDatabaseGetResults> GremlinResources_CreateUpdateGremlinDatabaseAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version, GremlinDatabaseCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GremlinDatabaseGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB Gremlin database.
		/// GremlinResources_DeleteGremlinDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task GremlinResources_DeleteGremlinDatabaseAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the Gremlin graph under an existing Azure Cosmos DB database account.
		/// GremlinResources_ListGremlinGraphs subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Gremlin graph properties were retrieved successfully.</returns>
		public async Task<GremlinGraphListResult> GremlinResources_ListGremlinGraphsAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/graphs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GremlinGraphListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the Gremlin graph under an existing Azure Cosmos DB database account.
		/// GremlinResources_GetGremlinGraph subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="graphName">Cosmos DB graph name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Gremlin graph property was retrieved successfully.</returns>
		public async Task<GremlinGraphGetResults> GremlinResources_GetGremlinGraphAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string graphName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/graphs/"+ (graphName==null? "" : System.Uri.EscapeDataString(graphName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GremlinGraphGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB Gremlin graph
		/// GremlinResources_CreateUpdateGremlinGraph subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="graphName">Cosmos DB graph name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current Gremlin graph.</param>
		/// <returns>The Gremlin graph create or update operation was completed successfully.</returns>
		public async Task<GremlinGraphGetResults> GremlinResources_CreateUpdateGremlinGraphAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string graphName, string api_version, GremlinGraphCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/graphs/"+ (graphName==null? "" : System.Uri.EscapeDataString(graphName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GremlinGraphGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB Gremlin graph.
		/// GremlinResources_DeleteGremlinGraph subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="graphName">Cosmos DB graph name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task GremlinResources_DeleteGremlinGraphAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string graphName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/graphs/"+ (graphName==null? "" : System.Uri.EscapeDataString(graphName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name.
		/// GremlinResources_GetGremlinGraphThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="graphName">Cosmos DB graph name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The RUs per second of the Gremlin graph was retrieved successfully.</returns>
		public async Task<ThroughputSettingsGetResults> GremlinResources_GetGremlinGraphThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string graphName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/graphs/"+ (graphName==null? "" : System.Uri.EscapeDataString(graphName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update RUs per second of an Azure Cosmos DB Gremlin graph
		/// GremlinResources_UpdateGremlinGraphThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/graphs/{graphName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="graphName">Cosmos DB graph name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The RUs per second of the parameters to provide for the current Gremlin graph.</param>
		/// <returns>The RUs per second of the Gremlin graph update operation was completed successfully.</returns>
		public async Task<ThroughputSettingsGetResults> GremlinResources_UpdateGremlinGraphThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string graphName, string api_version, ThroughputSettingsUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/graphs/"+ (graphName==null? "" : System.Uri.EscapeDataString(graphName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name.
		/// GremlinResources_GetGremlinDatabaseThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The RUs per second of the Gremlin database was retrieved successfully.</returns>
		public async Task<ThroughputSettingsGetResults> GremlinResources_GetGremlinDatabaseThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update RUs per second of an Azure Cosmos DB Gremlin database
		/// GremlinResources_UpdateGremlinDatabaseThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/gremlinDatabases/{databaseName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The RUs per second of the parameters to provide for the current Gremlin database.</param>
		/// <returns>The RUs per second of the Gremlin database update operation was completed successfully.</returns>
		public async Task<ThroughputSettingsGetResults> GremlinResources_UpdateGremlinDatabaseThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version, ThroughputSettingsUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/gremlinDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the connection strings for the specified Azure Cosmos DB database account.
		/// DatabaseAccounts_ListConnectionStrings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listConnectionStrings
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<DatabaseAccountListConnectionStringsResult> DatabaseAccounts_ListConnectionStringsAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/listConnectionStrings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseAccountListConnectionStringsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the access keys for the specified Azure Cosmos DB database account.
		/// DatabaseAccounts_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/listKeys
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<DatabaseAccountListKeysResult> DatabaseAccounts_ListKeysAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseAccountListKeysResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves metric definitions for the given database account.
		/// DatabaseAccounts_ListMetricDefinitions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metricDefinitions
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The metric definitions for the database account were retrieved successfully.</returns>
		public async Task<MetricDefinitionsListResult> DatabaseAccounts_ListMetricDefinitionsAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/metricDefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MetricDefinitionsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given database account.
		/// DatabaseAccounts_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The metrics for the database account were retrieved successfully.</returns>
		public async Task<MetricListResult> DatabaseAccounts_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the MongoDB databases under an existing Azure Cosmos DB database account.
		/// MongoDBResources_ListMongoDBDatabases subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The MongoDB database properties were retrieved successfully.</returns>
		public async Task<MongoDBDatabaseListResult> MongoDBResources_ListMongoDBDatabasesAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MongoDBDatabaseListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name.
		/// MongoDBResources_GetMongoDBDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The MongoDB database property was retrieved successfully.</returns>
		public async Task<MongoDBDatabaseGetResults> MongoDBResources_GetMongoDBDatabaseAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MongoDBDatabaseGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or updates Azure Cosmos DB MongoDB database
		/// MongoDBResources_CreateUpdateMongoDBDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current MongoDB database.</param>
		/// <returns>The MongoDB database create or update operation was completed successfully.</returns>
		public async Task<MongoDBDatabaseGetResults> MongoDBResources_CreateUpdateMongoDBDatabaseAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version, MongoDBDatabaseCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MongoDBDatabaseGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB MongoDB database.
		/// MongoDBResources_DeleteMongoDBDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task MongoDBResources_DeleteMongoDBDatabaseAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the MongoDB collection under an existing Azure Cosmos DB database account.
		/// MongoDBResources_ListMongoDBCollections subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The MongoDB collection properties were retrieved successfully.</returns>
		public async Task<MongoDBCollectionListResult> MongoDBResources_ListMongoDBCollectionsAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/collections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MongoDBCollectionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the MongoDB collection under an existing Azure Cosmos DB database account.
		/// MongoDBResources_GetMongoDBCollection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="collectionName">Cosmos DB collection name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The MongoDB collection property was retrieved successfully.</returns>
		public async Task<MongoDBCollectionGetResults> MongoDBResources_GetMongoDBCollectionAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string collectionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/collections/"+ (collectionName==null? "" : System.Uri.EscapeDataString(collectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MongoDBCollectionGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB MongoDB Collection
		/// MongoDBResources_CreateUpdateMongoDBCollection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="collectionName">Cosmos DB collection name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current MongoDB Collection.</param>
		/// <returns>The MongoDB Collection create or update operation was completed successfully.</returns>
		public async Task<MongoDBCollectionGetResults> MongoDBResources_CreateUpdateMongoDBCollectionAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string collectionName, string api_version, MongoDBCollectionCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/collections/"+ (collectionName==null? "" : System.Uri.EscapeDataString(collectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MongoDBCollectionGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB MongoDB Collection.
		/// MongoDBResources_DeleteMongoDBCollection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="collectionName">Cosmos DB collection name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task MongoDBResources_DeleteMongoDBCollectionAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string collectionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/collections/"+ (collectionName==null? "" : System.Uri.EscapeDataString(collectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name.
		/// MongoDBResources_GetMongoDBCollectionThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="collectionName">Cosmos DB collection name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The RUs per second of the MongoDB collection was retrieved successfully.</returns>
		public async Task<ThroughputSettingsGetResults> MongoDBResources_GetMongoDBCollectionThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string collectionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/collections/"+ (collectionName==null? "" : System.Uri.EscapeDataString(collectionName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the RUs per second of an Azure Cosmos DB MongoDB collection
		/// MongoDBResources_UpdateMongoDBCollectionThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="collectionName">Cosmos DB collection name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The RUs per second of the parameters to provide for the current MongoDB collection.</param>
		/// <returns>The RUs per second of the MongoDB collection update operation was completed successfully.</returns>
		public async Task<ThroughputSettingsGetResults> MongoDBResources_UpdateMongoDBCollectionThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string collectionName, string api_version, ThroughputSettingsUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/collections/"+ (collectionName==null? "" : System.Uri.EscapeDataString(collectionName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name.
		/// MongoDBResources_GetMongoDBDatabaseThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The RUs per second of the MongoDB database was retrieved successfully.</returns>
		public async Task<ThroughputSettingsGetResults> MongoDBResources_GetMongoDBDatabaseThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update RUs per second of the an Azure Cosmos DB MongoDB database
		/// MongoDBResources_UpdateMongoDBDatabaseThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The RUs per second of the parameters to provide for the current MongoDB database.</param>
		/// <returns>The RUs per second of the MongoDB database update operation was completed successfully.</returns>
		public async Task<ThroughputSettingsGetResults> MongoDBResources_UpdateMongoDBDatabaseThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version, ThroughputSettingsUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/mongodbDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Offline the specified region for the specified Azure Cosmos DB database account.
		/// DatabaseAccounts_OfflineRegion subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/offlineRegion
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">Cosmos DB region to offline for the database account.</param>
		/// <returns>The offline region operation is completed successfully.</returns>
		public async Task DatabaseAccounts_OfflineRegionAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, RegionForOnlineOffline requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/offlineRegion&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Online the specified region for the specified Azure Cosmos DB database account.
		/// DatabaseAccounts_OnlineRegion subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/onlineRegion
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">Cosmos DB region to online for the database account.</param>
		/// <returns>The online region operation is completed successfully.</returns>
		public async Task DatabaseAccounts_OnlineRegionAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, RegionForOnlineOffline requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/onlineRegion&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data
		/// Percentile_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The percentile metrics for the account were retrieved successfully.</returns>
		public async Task<PercentileMetricListResult> Percentile_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/percentile/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PercentileMetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the read-only access keys for the specified Azure Cosmos DB database account.
		/// DatabaseAccounts_GetReadOnlyKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<DatabaseAccountListReadOnlyKeysResult> DatabaseAccounts_GetReadOnlyKeysAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/readonlykeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseAccountListReadOnlyKeysResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the read-only access keys for the specified Azure Cosmos DB database account.
		/// DatabaseAccounts_ListReadOnlyKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/readonlykeys
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The operation completed successfully.</returns>
		public async Task<DatabaseAccountListReadOnlyKeysResult> DatabaseAccounts_ListReadOnlyKeysAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/readonlykeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseAccountListReadOnlyKeysResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerates an access key for the specified Azure Cosmos DB database account.
		/// DatabaseAccounts_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/regenerateKey
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The name of the key to regenerate.</param>
		/// <returns>OK</returns>
		public async Task DatabaseAccounts_RegenerateKeyAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, DatabaseAccountRegenerateKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/regenerateKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given database account, collection and region.
		/// CollectionRegion_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="region">Cosmos DB region, with spaces between words and each word capitalized.</param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="collectionRid">Cosmos DB collection rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The metrics for the database account were retrieved successfully.</returns>
		public async Task<MetricListResult> CollectionRegion_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string region, string databaseRid, string collectionRid, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/region/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/collections/"+ (collectionRid==null? "" : System.Uri.EscapeDataString(collectionRid))+"/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given partition key range id and region.
		/// PartitionKeyRangeIdRegion_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitionKeyRangeId/{partitionKeyRangeId}/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="region">Cosmos DB region, with spaces between words and each word capitalized.</param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="collectionRid">Cosmos DB collection rid.</param>
		/// <param name="partitionKeyRangeId">Partition Key Range Id for which to get data.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The partition-level metrics for the partition key range id and region were retrieved successfully.</returns>
		public async Task<PartitionMetricListResult> PartitionKeyRangeIdRegion_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string region, string databaseRid, string collectionRid, string partitionKeyRangeId, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/region/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/collections/"+ (collectionRid==null? "" : System.Uri.EscapeDataString(collectionRid))+"/partitionKeyRangeId/"+ (partitionKeyRangeId==null? "" : System.Uri.EscapeDataString(partitionKeyRangeId))+"/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PartitionMetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given collection and region, split by partition.
		/// CollectionPartitionRegion_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/databases/{databaseRid}/collections/{collectionRid}/partitions/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="region">Cosmos DB region, with spaces between words and each word capitalized.</param>
		/// <param name="databaseRid">Cosmos DB database rid.</param>
		/// <param name="collectionRid">Cosmos DB collection rid.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The partition-level metrics for the collection and region were retrieved successfully.</returns>
		public async Task<PartitionMetricListResult> CollectionPartitionRegion_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string region, string databaseRid, string collectionRid, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/region/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/databases/"+ (databaseRid==null? "" : System.Uri.EscapeDataString(databaseRid))+"/collections/"+ (collectionRid==null? "" : System.Uri.EscapeDataString(collectionRid))+"/partitions/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PartitionMetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given database account and region.
		/// DatabaseAccountRegion_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/region/{region}/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="region">Cosmos DB region, with spaces between words and each word capitalized.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The metrics for the database account were retrieved successfully.</returns>
		public async Task<MetricListResult> DatabaseAccountRegion_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string region, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/region/"+ (region==null? "" : System.Uri.EscapeDataString(region))+"/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data
		/// PercentileSourceTarget_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sourceRegion/{sourceRegion}/targetRegion/{targetRegion}/percentile/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="sourceRegion">Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.</param>
		/// <param name="targetRegion">Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The percentile metrics for the account, source and target regions were retrieved successfully.</returns>
		public async Task<PercentileMetricListResult> PercentileSourceTarget_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string sourceRegion, string targetRegion, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sourceRegion/"+ (sourceRegion==null? "" : System.Uri.EscapeDataString(sourceRegion))+"/targetRegion/"+ (targetRegion==null? "" : System.Uri.EscapeDataString(targetRegion))+"/percentile/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PercentileMetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the SQL databases under an existing Azure Cosmos DB database account.
		/// SqlResources_ListSqlDatabases subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL database properties were retrieved successfully.</returns>
		public async Task<SqlDatabaseListResult> SqlResources_ListSqlDatabasesAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlDatabaseListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
		/// SqlResources_GetSqlDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL database property was retrieved successfully.</returns>
		public async Task<SqlDatabaseGetResults> SqlResources_GetSqlDatabaseAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlDatabaseGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB SQL database
		/// SqlResources_CreateUpdateSqlDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current SQL database.</param>
		/// <returns>The SQL database create or update operation was completed successfully.</returns>
		public async Task<SqlDatabaseGetResults> SqlResources_CreateUpdateSqlDatabaseAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version, SqlDatabaseCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlDatabaseGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB SQL database.
		/// SqlResources_DeleteSqlDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task SqlResources_DeleteSqlDatabaseAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the SQL container under an existing Azure Cosmos DB database account.
		/// SqlResources_ListSqlContainers subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL container properties were retrieved successfully.</returns>
		public async Task<SqlContainerListResult> SqlResources_ListSqlContainersAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlContainerListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the SQL container under an existing Azure Cosmos DB database account.
		/// SqlResources_GetSqlContainer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL container property was retrieved successfully.</returns>
		public async Task<SqlContainerGetResults> SqlResources_GetSqlContainerAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlContainerGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB SQL container
		/// SqlResources_CreateUpdateSqlContainer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current SQL container.</param>
		/// <returns>The SQL container create or update operation was completed successfully.</returns>
		public async Task<SqlContainerGetResults> SqlResources_CreateUpdateSqlContainerAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string api_version, SqlContainerCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlContainerGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB SQL container.
		/// SqlResources_DeleteSqlContainer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task SqlResources_DeleteSqlContainerAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
		/// SqlResources_ListSqlStoredProcedures subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL stored procedure properties were retrieved successfully.</returns>
		public async Task<SqlStoredProcedureListResult> SqlResources_ListSqlStoredProceduresAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/storedProcedures&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlStoredProcedureListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
		/// SqlResources_GetSqlStoredProcedure subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="storedProcedureName">Cosmos DB storedProcedure name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL storedProcedure property was retrieved successfully.</returns>
		public async Task<SqlStoredProcedureGetResults> SqlResources_GetSqlStoredProcedureAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/storedProcedures/"+ (storedProcedureName==null? "" : System.Uri.EscapeDataString(storedProcedureName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlStoredProcedureGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB SQL storedProcedure
		/// SqlResources_CreateUpdateSqlStoredProcedure subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="storedProcedureName">Cosmos DB storedProcedure name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current SQL storedProcedure.</param>
		/// <returns>The SQL storedProcedure create or update operation was completed successfully.</returns>
		public async Task<SqlStoredProcedureGetResults> SqlResources_CreateUpdateSqlStoredProcedureAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, string api_version, SqlStoredProcedureCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/storedProcedures/"+ (storedProcedureName==null? "" : System.Uri.EscapeDataString(storedProcedureName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlStoredProcedureGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB SQL storedProcedure.
		/// SqlResources_DeleteSqlStoredProcedure subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/storedProcedures/{storedProcedureName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="storedProcedureName">Cosmos DB storedProcedure name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task SqlResources_DeleteSqlStoredProcedureAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/storedProcedures/"+ (storedProcedureName==null? "" : System.Uri.EscapeDataString(storedProcedureName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
		/// SqlResources_GetSqlContainerThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The RUs per second of the SQL container was retrieved successfully.</returns>
		public async Task<ThroughputSettingsGetResults> SqlResources_GetSqlContainerThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update RUs per second of an Azure Cosmos DB SQL container
		/// SqlResources_UpdateSqlContainerThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the RUs per second of the current SQL container.</param>
		/// <returns>The RUs per second of the SQL container update operation was completed successfully.</returns>
		public async Task<ThroughputSettingsGetResults> SqlResources_UpdateSqlContainerThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string api_version, ThroughputSettingsUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the SQL trigger under an existing Azure Cosmos DB database account.
		/// SqlResources_ListSqlTriggers subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL trigger properties were retrieved successfully.</returns>
		public async Task<SqlTriggerListResult> SqlResources_ListSqlTriggersAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/triggers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlTriggerListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the SQL trigger under an existing Azure Cosmos DB database account.
		/// SqlResources_GetSqlTrigger subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="triggerName">Cosmos DB trigger name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL trigger property was retrieved successfully.</returns>
		public async Task<SqlTriggerGetResults> SqlResources_GetSqlTriggerAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlTriggerGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB SQL trigger
		/// SqlResources_CreateUpdateSqlTrigger subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="triggerName">Cosmos DB trigger name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current SQL trigger.</param>
		/// <returns>The SQL trigger create or update operation was completed successfully.</returns>
		public async Task<SqlTriggerGetResults> SqlResources_CreateUpdateSqlTriggerAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, string api_version, SqlTriggerCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlTriggerGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB SQL trigger.
		/// SqlResources_DeleteSqlTrigger subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/triggers/{triggerName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="triggerName">Cosmos DB trigger name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task SqlResources_DeleteSqlTriggerAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/triggers/"+ (triggerName==null? "" : System.Uri.EscapeDataString(triggerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
		/// SqlResources_ListSqlUserDefinedFunctions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL userDefinedFunction properties were retrieved successfully.</returns>
		public async Task<SqlUserDefinedFunctionListResult> SqlResources_ListSqlUserDefinedFunctionsAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/userDefinedFunctions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlUserDefinedFunctionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
		/// SqlResources_GetSqlUserDefinedFunction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="userDefinedFunctionName">Cosmos DB userDefinedFunction name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The SQL userDefinedFunction property was retrieved successfully.</returns>
		public async Task<SqlUserDefinedFunctionGetResults> SqlResources_GetSqlUserDefinedFunctionAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/userDefinedFunctions/"+ (userDefinedFunctionName==null? "" : System.Uri.EscapeDataString(userDefinedFunctionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlUserDefinedFunctionGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB SQL userDefinedFunction
		/// SqlResources_CreateUpdateSqlUserDefinedFunction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="userDefinedFunctionName">Cosmos DB userDefinedFunction name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current SQL userDefinedFunction.</param>
		/// <returns>The SQL userDefinedFunction create or update operation was completed successfully.</returns>
		public async Task<SqlUserDefinedFunctionGetResults> SqlResources_CreateUpdateSqlUserDefinedFunctionAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, string api_version, SqlUserDefinedFunctionCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/userDefinedFunctions/"+ (userDefinedFunctionName==null? "" : System.Uri.EscapeDataString(userDefinedFunctionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlUserDefinedFunctionGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
		/// SqlResources_DeleteSqlUserDefinedFunction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}/userDefinedFunctions/{userDefinedFunctionName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="containerName">Cosmos DB container name.</param>
		/// <param name="userDefinedFunctionName">Cosmos DB userDefinedFunction name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task SqlResources_DeleteSqlUserDefinedFunctionAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/userDefinedFunctions/"+ (userDefinedFunctionName==null? "" : System.Uri.EscapeDataString(userDefinedFunctionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name.
		/// SqlResources_GetSqlDatabaseThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The RUs per second of the SQL database was retrieved successfully.</returns>
		public async Task<ThroughputSettingsGetResults> SqlResources_GetSqlDatabaseThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update RUs per second of an Azure Cosmos DB SQL database
		/// SqlResources_UpdateSqlDatabaseThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="databaseName">Cosmos DB database name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the RUs per second of the current SQL database.</param>
		/// <returns>The RUs per second of the SQL database update operation was completed successfully.</returns>
		public async Task<ThroughputSettingsGetResults> SqlResources_UpdateSqlDatabaseThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string databaseName, string api_version, ThroughputSettingsUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/sqlDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the Tables under an existing Azure Cosmos DB database account.
		/// TableResources_ListTables subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Table properties were retrieved successfully.</returns>
		public async Task<TableListResult> TableResources_ListTablesAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/tables&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TableListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
		/// TableResources_GetTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The Table property was retrieved successfully.</returns>
		public async Task<TableGetResults> TableResources_GetTableAsync(string subscriptionId, string resourceGroupName, string accountName, string tableName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TableGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update an Azure Cosmos DB Table
		/// TableResources_CreateUpdateTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the current Table.</param>
		/// <returns>The Table create or update operation was completed successfully.</returns>
		public async Task<TableGetResults> TableResources_CreateUpdateTableAsync(string subscriptionId, string resourceGroupName, string accountName, string tableName, string api_version, TableCreateUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TableGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing Azure Cosmos DB Table.
		/// TableResources_DeleteTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		public async Task TableResources_DeleteTableAsync(string subscriptionId, string resourceGroupName, string accountName, string tableName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name.
		/// TableResources_GetTableThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <returns>The RUs per second of the Table was retrieved successfully.</returns>
		public async Task<ThroughputSettingsGetResults> TableResources_GetTableThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string tableName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update RUs per second of an Azure Cosmos DB Table
		/// TableResources_UpdateTableThroughput subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/tables/{tableName}/throughputSettings/default
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="tableName">Cosmos DB table name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="requestBody">The parameters to provide for the RUs per second of the current Table.</param>
		/// <returns>The RUs per second of the Table update operation was completed successfully.</returns>
		public async Task<ThroughputSettingsGetResults> TableResources_UpdateTableThroughputAsync(string subscriptionId, string resourceGroupName, string accountName, string tableName, string api_version, ThroughputSettingsUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/tables/"+ (tableName==null? "" : System.Uri.EscapeDataString(tableName))+"/throughputSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ThroughputSettingsGetResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data
		/// PercentileTarget_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/targetRegion/{targetRegion}/percentile/metrics
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="targetRegion">Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.</param>
		/// <returns>The percentile metrics for the account and target regions were retrieved successfully.</returns>
		public async Task<PercentileMetricListResult> PercentileTarget_ListMetricsAsync(string subscriptionId, string resourceGroupName, string accountName, string targetRegion, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/targetRegion/"+ (targetRegion==null? "" : System.Uri.EscapeDataString(targetRegion))+"/percentile/metrics&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PercentileMetricListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the usages (most recent data) for the given database account.
		/// DatabaseAccounts_ListUsages subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/usages
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID.</param>
		/// <param name="resourceGroupName">Name of an Azure resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">Cosmos DB database account name.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-08-01.</param>
		/// <param name="filter">An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).</param>
		/// <returns>The usages for the database account were retrieved successfully.</returns>
		public async Task<UsagesResult> DatabaseAccounts_ListUsagesAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/usages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UsagesResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
