//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Regulatory compliance assessment details and state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegulatoryComplianceAssessment
	{
		
		/// <summary>
		/// Regulatory compliance assessment data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RegulatoryComplianceAssessmentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Regulatory compliance assessment data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegulatoryComplianceAssessmentProperties
	{
		
		/// <summary>
		/// Link to more detailed assessment results data. The response type will be according to the assessmentType field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentDetailsLink")]
		public string AssessmentDetailsLink { get; set; }
		
		/// <summary>
		/// The expected type of assessment contained in the AssessmentDetailsLink
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentType")]
		public string AssessmentType { get; set; }
		
		/// <summary>
		/// The description of the regulatory compliance assessment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The given assessment's related resources count with failed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedResources")]
		public System.Nullable<System.Int32> FailedResources { get; set; }
		
		/// <summary>
		/// The given assessment's related resources count with passed state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passedResources")]
		public System.Nullable<System.Int32> PassedResources { get; set; }
		
		/// <summary>
		/// The given assessment's related resources count with skipped state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedResources")]
		public System.Nullable<System.Int32> SkippedResources { get; set; }
		
		/// <summary>
		/// Aggregative state based on the assessment's scanned resources states
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<RegulatoryComplianceAssessmentPropertiesState> State { get; set; }
		
		/// <summary>
		/// The given assessment's related resources count with unsupported state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsupportedResources")]
		public System.Nullable<System.Int32> UnsupportedResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegulatoryComplianceAssessmentPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Passed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unsupported = 3,
	}
	
	/// <summary>
	/// List of regulatory compliance assessment response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegulatoryComplianceAssessmentList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RegulatoryComplianceAssessment[] Value { get; set; }
	}
	
	/// <summary>
	/// Regulatory compliance control details and state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegulatoryComplianceControl
	{
		
		/// <summary>
		/// Regulatory compliance control data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RegulatoryComplianceControlProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Regulatory compliance control data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegulatoryComplianceControlProperties
	{
		
		/// <summary>
		/// The description of the regulatory compliance control
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The number of supported regulatory compliance assessments of the given control with a failed state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedAssessments")]
		public System.Nullable<System.Int32> FailedAssessments { get; set; }
		
		/// <summary>
		/// The number of supported regulatory compliance assessments of the given control with a passed state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passedAssessments")]
		public System.Nullable<System.Int32> PassedAssessments { get; set; }
		
		/// <summary>
		/// The number of supported regulatory compliance assessments of the given control with a skipped state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedAssessments")]
		public System.Nullable<System.Int32> SkippedAssessments { get; set; }
		
		/// <summary>
		/// Aggregative state based on the control's supported assessments states
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public RegulatoryComplianceAssessmentPropertiesState State { get; set; }
	}
	
	/// <summary>
	/// List of regulatory compliance controls response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegulatoryComplianceControlList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of regulatory compliance controls
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RegulatoryComplianceControl[] Value { get; set; }
	}
	
	/// <summary>
	/// Regulatory compliance standard details and state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegulatoryComplianceStandard
	{
		
		/// <summary>
		/// Regulatory compliance standard data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RegulatoryComplianceStandardProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Regulatory compliance standard data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegulatoryComplianceStandardProperties
	{
		
		/// <summary>
		/// The number of supported regulatory compliance controls of the given standard with a failed state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedControls")]
		public System.Nullable<System.Int32> FailedControls { get; set; }
		
		/// <summary>
		/// The number of supported regulatory compliance controls of the given standard with a passed state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passedControls")]
		public System.Nullable<System.Int32> PassedControls { get; set; }
		
		/// <summary>
		/// The number of supported regulatory compliance controls of the given standard with a skipped state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedControls")]
		public System.Nullable<System.Int32> SkippedControls { get; set; }
		
		/// <summary>
		/// Aggregative state based on the standard's supported controls states
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public RegulatoryComplianceAssessmentPropertiesState State { get; set; }
		
		/// <summary>
		/// The number of regulatory compliance controls of the given standard which are unsupported by automated assessments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsupportedControls")]
		public System.Nullable<System.Int32> UnsupportedControls { get; set; }
	}
	
	/// <summary>
	/// List of regulatory compliance standards response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegulatoryComplianceStandardList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RegulatoryComplianceStandard[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Supported regulatory compliance standards details and state
		/// RegulatoryComplianceStandards_List subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <returns>OK</returns>
		public async Task<RegulatoryComplianceStandardList> RegulatoryComplianceStandards_ListAsync(string api_version, string subscriptionId, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/regulatoryComplianceStandards?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegulatoryComplianceStandardList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Supported regulatory compliance details state for selected standard
		/// RegulatoryComplianceStandards_Get subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="regulatoryComplianceStandardName">Name of the regulatory compliance standard object</param>
		/// <returns>OK</returns>
		public async Task<RegulatoryComplianceStandard> RegulatoryComplianceStandards_GetAsync(string api_version, string subscriptionId, string regulatoryComplianceStandardName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/regulatoryComplianceStandards/"+ (regulatoryComplianceStandardName==null? "" : System.Uri.EscapeDataString(regulatoryComplianceStandardName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegulatoryComplianceStandard>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// All supported regulatory compliance controls details and state for selected standard
		/// RegulatoryComplianceControls_List subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="regulatoryComplianceStandardName">Name of the regulatory compliance standard object</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <returns>OK</returns>
		public async Task<RegulatoryComplianceControlList> RegulatoryComplianceControls_ListAsync(string api_version, string subscriptionId, string regulatoryComplianceStandardName, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/regulatoryComplianceStandards/"+ (regulatoryComplianceStandardName==null? "" : System.Uri.EscapeDataString(regulatoryComplianceStandardName))+"/regulatoryComplianceControls?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegulatoryComplianceControlList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Selected regulatory compliance control details and state
		/// RegulatoryComplianceControls_Get subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls/{regulatoryComplianceControlName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="regulatoryComplianceStandardName">Name of the regulatory compliance standard object</param>
		/// <param name="regulatoryComplianceControlName">Name of the regulatory compliance control object</param>
		/// <returns>OK</returns>
		public async Task<RegulatoryComplianceControl> RegulatoryComplianceControls_GetAsync(string api_version, string subscriptionId, string regulatoryComplianceStandardName, string regulatoryComplianceControlName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/regulatoryComplianceStandards/"+ (regulatoryComplianceStandardName==null? "" : System.Uri.EscapeDataString(regulatoryComplianceStandardName))+"/regulatoryComplianceControls/"+ (regulatoryComplianceControlName==null? "" : System.Uri.EscapeDataString(regulatoryComplianceControlName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegulatoryComplianceControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Details and state of assessments mapped to selected regulatory compliance control
		/// RegulatoryComplianceAssessments_List subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls/{regulatoryComplianceControlName}/regulatoryComplianceAssessments
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="regulatoryComplianceStandardName">Name of the regulatory compliance standard object</param>
		/// <param name="regulatoryComplianceControlName">Name of the regulatory compliance control object</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <returns>OK</returns>
		public async Task<RegulatoryComplianceAssessmentList> RegulatoryComplianceAssessments_ListAsync(string api_version, string subscriptionId, string regulatoryComplianceStandardName, string regulatoryComplianceControlName, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/regulatoryComplianceStandards/"+ (regulatoryComplianceStandardName==null? "" : System.Uri.EscapeDataString(regulatoryComplianceStandardName))+"/regulatoryComplianceControls/"+ (regulatoryComplianceControlName==null? "" : System.Uri.EscapeDataString(regulatoryComplianceControlName))+"/regulatoryComplianceAssessments?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegulatoryComplianceAssessmentList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Supported regulatory compliance details and state for selected assessment
		/// RegulatoryComplianceAssessments_Get subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls/{regulatoryComplianceControlName}/regulatoryComplianceAssessments/{regulatoryComplianceAssessmentName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="regulatoryComplianceStandardName">Name of the regulatory compliance standard object</param>
		/// <param name="regulatoryComplianceControlName">Name of the regulatory compliance control object</param>
		/// <param name="regulatoryComplianceAssessmentName">Name of the regulatory compliance assessment object</param>
		/// <returns>OK</returns>
		public async Task<RegulatoryComplianceAssessment> RegulatoryComplianceAssessments_GetAsync(string api_version, string subscriptionId, string regulatoryComplianceStandardName, string regulatoryComplianceControlName, string regulatoryComplianceAssessmentName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/regulatoryComplianceStandards/"+ (regulatoryComplianceStandardName==null? "" : System.Uri.EscapeDataString(regulatoryComplianceStandardName))+"/regulatoryComplianceControls/"+ (regulatoryComplianceControlName==null? "" : System.Uri.EscapeDataString(regulatoryComplianceControlName))+"/regulatoryComplianceAssessments/"+ (regulatoryComplianceAssessmentName==null? "" : System.Uri.EscapeDataString(regulatoryComplianceAssessmentName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegulatoryComplianceAssessment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
