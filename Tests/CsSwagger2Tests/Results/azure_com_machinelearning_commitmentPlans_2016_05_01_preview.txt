//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Details of a commitment plan SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogSku
	{
		
		/// <summary>
		/// The capability information for the specified SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public SkuCapability[] Capabilities { get; set; }
		
		/// <summary>
		/// Describes scaling information of a SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public SkuCapacity Capacity { get; set; }
		
		/// <summary>
		/// The cost information for the specified SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costs")]
		public SkuCost[] Costs { get; set; }
		
		/// <summary>
		/// Regions where the SKU is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// SKU name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Restrictions which would prevent a SKU from being used. This is empty if there are no restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public SkuRestrictions[] Restrictions { get; set; }
		
		/// <summary>
		/// SKU tier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// Describes The SKU capabilities object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuCapability
	{
		
		/// <summary>
		/// The capability name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The capability value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes scaling information of a SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuCapacity
	{
		
		/// <summary>
		/// The default capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int64> Default { get; set; }
		
		/// <summary>
		/// The maximum capacity that can be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int64> Maximum { get; set; }
		
		/// <summary>
		/// The minimum capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int64> Minimum { get; set; }
		
		/// <summary>
		/// The scale type applicable to the sku.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public System.Nullable<SkuCapacityScaleType> ScaleType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuCapacityScaleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automatic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Manual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// Describes metadata for SKU cost info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuCost
	{
		
		/// <summary>
		/// The overall duration represented by the quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedUnit")]
		public string ExtendedUnit { get; set; }
		
		/// <summary>
		/// The meter used for this part of a SKU's cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meterID")]
		public string MeterID { get; set; }
		
		/// <summary>
		/// The multiplier for the meter ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int64> Quantity { get; set; }
	}
	
	/// <summary>
	/// Describes restrictions which would prevent a SKU from being used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuRestrictions
	{
		
		/// <summary>
		/// The reason for restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public System.Nullable<SkuRestrictionsReasonCode> ReasonCode { get; set; }
		
		/// <summary>
		/// The type of restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SkuRestrictionsType> Type { get; set; }
		
		/// <summary>
		/// The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuRestrictionsReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QuotaId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAvailableForSubscription = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuRestrictionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		location = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zone = 1,
	}
	
	/// <summary>
	/// Represents the association between a commitment plan and some other resource, such as a Machine Learning web service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommitmentAssociation
	{
		
		/// <summary>
		/// An entity tag used to enforce optimistic concurrency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Properties of an Azure ML commitment association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CommitmentAssociationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an Azure ML commitment association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommitmentAssociationProperties
	{
		
		/// <summary>
		/// The ID of the resource this association points to, such as the ARM ID of an Azure ML web service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedResourceId")]
		public string AssociatedResourceId { get; set; }
		
		/// <summary>
		/// The ARM ID of the parent Azure ML commitment plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitmentPlanId")]
		public string CommitmentPlanId { get; set; }
		
		/// <summary>
		/// The date at which this commitment association was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	/// <summary>
	/// A page of commitment association resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommitmentAssociationListResult
	{
		
		/// <summary>
		/// A URI to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The set of results for this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CommitmentAssociation[] Value { get; set; }
	}
	
	/// <summary>
	/// An Azure ML commitment plan resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommitmentPlan
	{
		
		/// <summary>
		/// An entity tag used to enforce optimistic concurrency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Properties of an Azure ML commitment plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CommitmentPlanProperties Properties { get; set; }
		
		/// <summary>
		/// The SKU of a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ResourceSku Sku { get; set; }
	}
	
	/// <summary>
	/// Properties of an Azure ML commitment plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommitmentPlanProperties
	{
		
		/// <summary>
		/// Indicates whether usage beyond the commitment plan's included quantities will be charged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeForOverage")]
		public System.Nullable<System.Boolean> ChargeForOverage { get; set; }
		
		/// <summary>
		/// Indicates whether the commitment plan will incur a charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeForPlan")]
		public System.Nullable<System.Boolean> ChargeForPlan { get; set; }
		
		/// <summary>
		/// The date at which this commitment plan was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The included resource quantities this plan gives you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedQuantities")]
		public System.Collections.Generic.Dictionary<string, PlanQuantity> IncludedQuantities { get; set; }
		
		/// <summary>
		/// The maximum number of commitment associations that can be children of this commitment plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAssociationLimit")]
		public System.Nullable<System.Int32> MaxAssociationLimit { get; set; }
		
		/// <summary>
		/// The maximum scale-out capacity for this commitment plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxCapacityLimit")]
		public System.Nullable<System.Int32> MaxCapacityLimit { get; set; }
		
		/// <summary>
		/// The minimum scale-out capacity for this commitment plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCapacityLimit")]
		public System.Nullable<System.Int32> MinCapacityLimit { get; set; }
		
		/// <summary>
		/// The Azure meter which will be used to charge for this commitment plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planMeter")]
		public string PlanMeter { get; set; }
		
		/// <summary>
		/// The frequency at which this commitment plan's included quantities are refilled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refillFrequencyInDays")]
		public System.Nullable<System.Int32> RefillFrequencyInDays { get; set; }
		
		/// <summary>
		/// Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan's included quantities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suspendPlanOnOverage")]
		public System.Nullable<System.Boolean> SuspendPlanOnOverage { get; set; }
	}
	
	/// <summary>
	/// Represents the quantity a commitment plan provides of a metered resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PlanQuantity
	{
		
		/// <summary>
		/// The quantity added to the commitment plan at an interval specified by its allowance frequency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowance")]
		public System.Nullable<System.Double> Allowance { get; set; }
		
		/// <summary>
		/// The quantity available to the plan the last time usage was calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The Azure meter for usage against included quantities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedQuantityMeter")]
		public string IncludedQuantityMeter { get; set; }
		
		/// <summary>
		/// The Azure meter for usage which exceeds included quantities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overageMeter")]
		public string OverageMeter { get; set; }
	}
	
	/// <summary>
	/// The SKU of a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceSku
	{
		
		/// <summary>
		/// The scale-out capacity of the resource. 1 is 1x, 2 is 2x, etc. This impacts the quantities and cost of any commitment plan resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// The SKU name. Along with tier, uniquely identifies the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The SKU tier. Along with name, uniquely identifies the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// A page of commitment plan resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommitmentPlanListResult
	{
		
		/// <summary>
		/// A URI to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The set of results for this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CommitmentPlan[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a commitment plan which may be updated via PATCH.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CommitmentPlanPatchPayload
	{
		
		/// <summary>
		/// The SKU of a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ResourceSku Sku { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Resource tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Tags
	{
	}
	
	/// <summary>
	/// Specifies the destination Azure ML commitment plan for a move operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MoveCommitmentAssociationRequest
	{
		
		/// <summary>
		/// The ARM ID of the commitment plan to re-parent the commitment association to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationPlanId")]
		public string DestinationPlanId { get; set; }
	}
	
	/// <summary>
	/// The API operation info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplayInfo
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The action that users can perform, based on their permission level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The service provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// An API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntity
	{
		
		/// <summary>
		/// The API operation info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplayInfo Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The list of REST API operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntityListResult
	{
		
		/// <summary>
		/// The list of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationEntity[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents historical information about usage of the Azure resources associated with a commitment plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PlanUsageHistory
	{
		
		/// <summary>
		/// Overage incurred as a result of deleting a commitment plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planDeletionOverage")]
		public System.Collections.Generic.Dictionary<string, double> PlanDeletionOverage { get; set; }
		
		/// <summary>
		/// Overage incurred as a result of migrating a commitment plan from one SKU to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planMigrationOverage")]
		public System.Collections.Generic.Dictionary<string, double> PlanMigrationOverage { get; set; }
		
		/// <summary>
		/// Included quantities remaining after usage against the commitment plan's associated resources was calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planQuantitiesAfterUsage")]
		public System.Collections.Generic.Dictionary<string, double> PlanQuantitiesAfterUsage { get; set; }
		
		/// <summary>
		/// Included quantities remaining before usage against the commitment plan's associated resources was calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planQuantitiesBeforeUsage")]
		public System.Collections.Generic.Dictionary<string, double> PlanQuantitiesBeforeUsage { get; set; }
		
		/// <summary>
		/// Usage against the commitment plan's associated resources which was not covered by included quantities and is therefore overage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planUsageOverage")]
		public System.Collections.Generic.Dictionary<string, double> PlanUsageOverage { get; set; }
		
		/// <summary>
		/// Usage against the commitment plan's associated resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Collections.Generic.Dictionary<string, double> Usage { get; set; }
		
		/// <summary>
		/// The date of usage, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageDate")]
		public System.Nullable<System.DateTimeOffset> UsageDate { get; set; }
	}
	
	/// <summary>
	/// A page of usage history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PlanUsageHistoryListResult
	{
		
		/// <summary>
		/// A URI to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The set of results for this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PlanUsageHistory[] Value { get; set; }
	}
	
	/// <summary>
	/// Common properties of an ARM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The list of commitment plan SKUs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CatalogSku[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Azure Machine Learning Studio Commitment Plan RP REST API operations.
		/// Operations_List providers/Microsoft.MachineLearning/operations
		/// </summary>
		/// <param name="api_version">The version of the Microsoft.MachineLearning resource provider API to use.</param>
		/// <returns>OK.</returns>
		public async Task<OperationEntityListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.MachineLearning/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationEntityListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve all Azure ML commitment plans in a subscription.
		/// CommitmentPlans_List subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/commitmentPlans
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="skipToken">Continuation token for pagination.</param>
		/// <param name="api_version">The version of the Microsoft.MachineLearning resource provider API to use.</param>
		/// <returns>OK</returns>
		public async Task<CommitmentPlanListResult> CommitmentPlans_ListAsync(string subscriptionId, string skipToken, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MachineLearning/commitmentPlans&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommitmentPlanListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the available commitment plan SKUs.
		/// Skus_List subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/skus
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">The version of the Microsoft.MachineLearning resource provider API to use.</param>
		/// <returns>OK</returns>
		public async Task<SkuListResult> Skus_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MachineLearning/skus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SkuListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve all Azure ML commitment plans in a resource group.
		/// CommitmentPlans_ListInResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="skipToken">Continuation token for pagination.</param>
		/// <param name="api_version">The version of the Microsoft.MachineLearning resource provider API to use.</param>
		/// <returns>OK</returns>
		public async Task<CommitmentPlanListResult> CommitmentPlans_ListInResourceGroupAsync(string subscriptionId, string resourceGroupName, string skipToken, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/commitmentPlans&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommitmentPlanListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve an Azure ML commitment plan by its subscription, resource group and name.
		/// CommitmentPlans_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CommitmentPlan> CommitmentPlans_GetAsync()
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommitmentPlan>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new Azure ML commitment plan resource or updates an existing one.
		/// CommitmentPlans_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}
		/// </summary>
		/// <param name="requestBody">The payload to create or update the Azure ML commitment plan.</param>
		/// <returns>OK</returns>
		public async Task<CommitmentPlan> CommitmentPlans_CreateOrUpdateAsync(CommitmentPlan requestBody)
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommitmentPlan>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove an existing Azure ML commitment plan.
		/// CommitmentPlans_Remove subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}
		/// </summary>
		/// <returns>OK</returns>
		public async Task CommitmentPlans_RemoveAsync()
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Patch an existing Azure ML commitment plan resource.
		/// CommitmentPlans_Patch subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}
		/// </summary>
		/// <param name="requestBody">The payload to use to patch the Azure ML commitment plan. Only tags and SKU may be modified on an existing commitment plan.</param>
		/// <returns>OK</returns>
		public async Task<CommitmentPlan> CommitmentPlans_PatchAsync(CommitmentPlanPatchPayload requestBody)
		{
			var requestUri = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommitmentPlan>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all commitment associations for a parent commitment plan.
		/// CommitmentAssociations_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="commitmentPlanName">The Azure ML commitment plan name.</param>
		/// <param name="skipToken">Continuation token for pagination.</param>
		/// <param name="api_version">The version of the Microsoft.MachineLearning resource provider API to use.</param>
		/// <returns>OK</returns>
		public async Task<CommitmentAssociationListResult> CommitmentAssociations_ListAsync(string subscriptionId, string resourceGroupName, string commitmentPlanName, string skipToken, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/commitmentPlans/"+ (commitmentPlanName==null? "" : System.Uri.EscapeDataString(commitmentPlanName))+"/commitmentAssociations&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommitmentAssociationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a commitment association.
		/// CommitmentAssociations_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations/{commitmentAssociationName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="commitmentPlanName">The Azure ML commitment plan name.</param>
		/// <param name="commitmentAssociationName">The commitment association name.</param>
		/// <param name="api_version">The version of the Microsoft.MachineLearning resource provider API to use.</param>
		/// <returns>OK</returns>
		public async Task<CommitmentAssociation> CommitmentAssociations_GetAsync(string subscriptionId, string resourceGroupName, string commitmentPlanName, string commitmentAssociationName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/commitmentPlans/"+ (commitmentPlanName==null? "" : System.Uri.EscapeDataString(commitmentPlanName))+"/commitmentAssociations/"+ (commitmentAssociationName==null? "" : System.Uri.EscapeDataString(commitmentAssociationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommitmentAssociation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Re-parent a commitment association from one commitment plan to another.
		/// CommitmentAssociations_Move subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations/{commitmentAssociationName}/move
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="commitmentPlanName">The Azure ML commitment plan name.</param>
		/// <param name="commitmentAssociationName">The commitment association name.</param>
		/// <param name="api_version">The version of the Microsoft.MachineLearning resource provider API to use.</param>
		/// <param name="requestBody">The move request payload.</param>
		/// <returns>OK</returns>
		public async Task<CommitmentAssociation> CommitmentAssociations_MoveAsync(string subscriptionId, string resourceGroupName, string commitmentPlanName, string commitmentAssociationName, string api_version, MoveCommitmentAssociationRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/commitmentPlans/"+ (commitmentPlanName==null? "" : System.Uri.EscapeDataString(commitmentPlanName))+"/commitmentAssociations/"+ (commitmentAssociationName==null? "" : System.Uri.EscapeDataString(commitmentAssociationName))+"/move&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommitmentAssociation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the usage history for an Azure ML commitment plan.
		/// UsageHistory_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/usageHistory
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="commitmentPlanName">The Azure ML commitment plan name.</param>
		/// <param name="skipToken">Continuation token for pagination.</param>
		/// <param name="api_version">The version of the Microsoft.MachineLearning resource provider API to use.</param>
		/// <returns>OK</returns>
		public async Task<PlanUsageHistoryListResult> UsageHistory_ListAsync(string subscriptionId, string resourceGroupName, string commitmentPlanName, string skipToken, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/commitmentPlans/"+ (commitmentPlanName==null? "" : System.Uri.EscapeDataString(commitmentPlanName))+"/usageHistory&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PlanUsageHistoryListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
