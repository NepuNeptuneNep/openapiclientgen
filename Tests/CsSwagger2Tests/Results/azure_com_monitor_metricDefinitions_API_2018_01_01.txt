//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// the aggregation type of the metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AggregationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 5,
	}
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The localizable string class.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocalizableString
	{
		
		/// <summary>
		/// the locale specific value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// the invariant value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that time grain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAvailability
	{
		
		/// <summary>
		/// the retention period for the metric at the specified timegrain.  Expressed as a duration 'PT1M', 'P1D', etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retention")]
		public string Retention { get; set; }
		
		/// <summary>
		/// the time grain specifies the aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D', etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
	}
	
	/// <summary>
	/// Metric definition class specifies the metadata for a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricDefinition
	{
		
		/// <summary>
		/// the name and the display name of the dimension, i.e. it is a localizable string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public LocalizableString[] Dimensions { get; set; }
		
		/// <summary>
		/// the resource identifier of the metric definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Flag to indicate whether the dimension is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDimensionRequired")]
		public System.Nullable<System.Boolean> IsDimensionRequired { get; set; }
		
		/// <summary>
		/// the collection of what aggregation intervals are available to be queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricAvailabilities")]
		public MetricAvailability[] MetricAvailabilities { get; set; }
		
		/// <summary>
		/// The localizable string class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public LocalizableString Name { get; set; }
		
		/// <summary>
		/// the namespace the metric belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// the aggregation type of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryAggregationType")]
		public AggregationType PrimaryAggregationType { get; set; }
		
		/// <summary>
		/// the resource identifier of the resource that emitted the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// the collection of what aggregation types are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedAggregationTypes")]
		public AggregationType[] SupportedAggregationTypes { get; set; }
		
		/// <summary>
		/// the unit of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<MetricDefinitionUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricDefinitionUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountPerSecond = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MilliSeconds = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByteSeconds = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unspecified = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cores = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MilliCores = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NanoCores = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BitsPerSecond = 12,
	}
	
	/// <summary>
	/// Represents collection of metric definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricDefinitionCollection
	{
		
		/// <summary>
		/// the values for the metric definitions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MetricDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// the unit of the metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum Unit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountPerSecond = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MilliSeconds = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ByteSeconds = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unspecified = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cores = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MilliCores = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NanoCores = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BitsPerSecond = 12,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the metric definitions for the resource.
		/// MetricDefinitions_List {resourceUri}/providers/microsoft.insights/metricDefinitions
		/// </summary>
		/// <param name="resourceUri">The identifier of the resource.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="metricnamespace">Metric namespace to query metric definitions for.</param>
		/// <returns>Successful request to get the list of metric definitions</returns>
		public async Task<MetricDefinitionCollection> MetricDefinitions_ListAsync(string resourceUri, string api_version, string metricnamespace)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/microsoft.insights/metricDefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&metricnamespace=" + (metricnamespace==null? "" : System.Uri.EscapeDataString(metricnamespace));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MetricDefinitionCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
