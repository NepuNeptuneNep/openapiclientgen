//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Response containing the primary and secondary admin API keys for a given Azure Cognitive Search service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AdminKeyResult
	{
		
		/// <summary>
		/// The primary admin API key of the Search service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// The secondary admin API key of the Search service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryKey")]
		public string SecondaryKey { get; set; }
	}
	
	/// <summary>
	/// Input of check name availability API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityInput
	{
		
		/// <summary>
		/// The Search service name to validate. Search service names must only contain lowercase letters, digits or dashes, cannot use dash as the first two or last one characters, cannot contain consecutive dashes, and must be between 2 and 60 characters in length.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource whose name is to be validated. This value must always be 'searchServices'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameAvailabilityInputType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		searchServices = 0,
	}
	
	/// <summary>
	/// Output of check name availability API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityOutput
	{
		
		/// <summary>
		/// A message that explains why the name is invalid and provides resource naming requirements. Available only if 'Invalid' is returned in the 'reason' property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A value indicating whether the name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason why the name is not available. 'Invalid' indicates the name provided does not match the naming requirements (incorrect length, unsupported characters, etc.). 'AlreadyExists' indicates that the name is already in use and is therefore unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameAvailabilityOutputReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityOutputReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// Contains information about an API error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// Describes a particular API error with an error code and a message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// Describes a particular API error with an error code and a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An error code that describes the error condition more precisely than an HTTP status code. Can be used to programmatically handle specific error cases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Contains nested errors that are related to this error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message that describes the error in detail and provides debugging information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error (for example, the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Identity for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identity
	{
		
		/// <summary>
		/// The principal ID of resource identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant ID of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IdentityType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 1,
	}
	
	/// <summary>
	/// The IP restriction rule of the Azure Cognitive Search service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IpRule
	{
		
		/// <summary>
		/// Value corresponding to a single IPv4 address (eg., 123.1.2.3) or an IP range in CIDR format (eg., 123.1.2.3/24) to be allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Response containing the query API keys for a given Azure Cognitive Search service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListQueryKeysResult
	{
		
		/// <summary>
		/// The query keys for the Azure Cognitive Search service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public QueryKey[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes an API key for a given Azure Cognitive Search service that has permissions for query operations only.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryKey
	{
		
		/// <summary>
		/// The value of the query API key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The name of the query API key; may be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Network specific rules that determine how the Azure Cognitive Search service may be reached.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkRuleSet
	{
		
		/// <summary>
		/// The level of access to the search service endpoint. Public, the search service endpoint is reachable from the internet. Private, the search service endpoint can only be accessed via private endpoints. Default is Public.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointAccess")]
		public System.Nullable<NetworkRuleSetEndpointAccess> EndpointAccess { get; set; }
		
		/// <summary>
		/// A list of IP restriction rules that defines the inbound network access to the search service endpoint. These restriction rules are applied only when the EndpointAccess of the search service is Public.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipRules")]
		public IpRule[] IpRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkRuleSetEndpointAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Private = 1,
	}
	
	/// <summary>
	/// Describes a REST API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that describes the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// The name of the operation. This name is of the form {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The result of the request to list REST API operations. It contains a list of operations and a URL  to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The URL to get the next set of operation list results, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of operations supported by the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes an existing Private Endpoint connection to the Azure Cognitive Search service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointConnection
	{
		
		/// <summary>
		/// The ID of the private endpoint connection. This can be used with the Azure Resource Manager to link resources together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the private endpoint connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Describes the properties of an existing Private Endpoint connection to the Azure Cognitive Search service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PrivateEndpointConnectionProperties Properties { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of an existing Private Endpoint connection to the Azure Cognitive Search service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointConnectionProperties
	{
		
		/// <summary>
		/// The private endpoint resource from Microsoft.Network provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateEndpoint")]
		public object PrivateEndpoint { get; set; }
		
		/// <summary>
		/// Describes the current state of an existing Private Link Service connection to the Azure Private Endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateLinkServiceConnectionState")]
		public PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState PrivateLinkServiceConnectionState { get; set; }
	}
	
	public class PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState
	{
		
		/// <summary>
		/// A description of any extra actions that may be required.
		/// </summary>
		[System.ComponentModel.DefaultValue("None")]
		[System.Runtime.Serialization.DataMember(Name="actionsRequired")]
		public string ActionsRequired { get; set; } = "None";
		
		/// <summary>
		/// The description for the private link service connection state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Status of the the private link service connection. Can be Pending, Approved, Rejected, or Disconnected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionStateStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionStateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disconnected = 3,
	}
	
	/// <summary>
	/// Base type for all Azure resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The ID of the resource. This can be used with the Azure Resource Manager to link resources together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public Identity Identity { get; set; }
		
		/// <summary>
		/// The geographic location of the resource. This must be one of the supported and registered Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth). This property is required when creating a new resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tags to help categorize the resource in the Azure portal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Describes an Azure Cognitive Search service and its current state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SearchService : Resource
	{
		
		/// <summary>
		/// Properties of the Search service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SearchServiceProperties Properties { get; set; }
		
		/// <summary>
		/// Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// Response containing a list of Azure Cognitive Search services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SearchServiceListResult
	{
		
		/// <summary>
		/// The list of Search services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SearchService[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the Search service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SearchServiceProperties
	{
		
		/// <summary>
		/// Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostingMode")]
		public System.Nullable<SearchServicePropertiesHostingMode> HostingMode { get; set; }
		
		/// <summary>
		/// Network specific rules that determine how the Azure Cognitive Search service may be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkRuleSet")]
		public NetworkRuleSet NetworkRuleSet { get; set; }
		
		/// <summary>
		/// The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3.
		/// Minimum: 1
		/// Maximum: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionCount")]
		[System.ComponentModel.DataAnnotations.Range(1, 12)]
		public System.Nullable<System.Int32> PartitionCount { get; set; }
		
		/// <summary>
		/// The list of private endpoint connections to the Azure Cognitive Search service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateEndpointConnections")]
		public PrivateEndpointConnection[] PrivateEndpointConnections { get; set; }
		
		/// <summary>
		/// The state of the last provisioning operation performed on the Search service. Provisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as 'succeeded' directly in the call to Create Search service. This is because the free service uses capacity that is already set up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<SearchServicePropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The number of replicas in the Search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.
		/// Minimum: 1
		/// Maximum: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaCount")]
		[System.ComponentModel.DataAnnotations.Range(1, 12)]
		public System.Nullable<System.Int32> ReplicaCount { get; set; }
		
		/// <summary>
		/// The status of the Search service. Possible values include: 'running': The Search service is running and no provisioning operations are underway. 'provisioning': The Search service is being provisioned or scaled up or down. 'deleting': The Search service is being deleted. 'degraded': The Search service is degraded. This can occur when the underlying search units are not healthy. The Search service is most likely operational, but performance might be slow and some requests might be dropped. 'disabled': The Search service is disabled. In this state, the service will reject all API requests. 'error': The Search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Cognitive Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<SearchServicePropertiesStatus> Status { get; set; }
		
		/// <summary>
		/// The details of the Search service status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public string StatusDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SearchServicePropertiesHostingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		highDensity = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SearchServicePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SearchServicePropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		degraded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 5,
	}
	
	/// <summary>
	/// Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<SkuName> Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		basic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		storage_optimized_l1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		storage_optimized_l2 = 6,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available REST API operations of the Microsoft.Search provider.
		/// Operations_List providers/Microsoft.Search/operations
		/// </summary>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <returns>Success. The response describes the list of operations.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Search/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether or not the given Search service name is available for use. Search service names must be globally unique since they are part of the service URI (https://<name>.search.windows.net).
		/// Services_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Search/checkNameAvailability
		/// </summary>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">The resource name and type to check.</param>
		/// <returns>The name check completed. The response contains details of whether the name is valid and available. If the name is invalid, the response also contains a message explaining why not.</returns>
		public async Task<CheckNameAvailabilityOutput> Services_CheckNameAvailabilityAsync(string api_version, string subscriptionId, CheckNameAvailabilityInput requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Search/checkNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all Search services in the given subscription.
		/// Services_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Search/searchServices
		/// </summary>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The operation succeeded. The response contains the list of all Search service definitions for the given subscription.</returns>
		public async Task<SearchServiceListResult> Services_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Search/searchServices?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchServiceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all Search services in the given resource group.
		/// Services_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The operation succeeded. The response contains the list of all Search service definitions for the given resource group.</returns>
		public async Task<SearchServiceListResult> Services_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchServiceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Search service with the given name in the given resource group.
		/// Services_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The Search service definition was successfully retrieved and is in the response. If you are polling for the completion of a provisioning or scale operation, you can check its status via the provisioningState property.</returns>
		public async Task<SearchService> Services_GetAsync(string resourceGroupName, string searchServiceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchService>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a Search service in the given resource group. If the Search service already exists, all properties will be updated with the given values.
		/// Services_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service to create or update. Search service names must only contain lowercase letters, digits or dashes, cannot use dash as the first two or last one characters, cannot contain consecutive dashes, and must be between 2 and 60 characters in length. Search service names must be globally unique since they are part of the service URI (https://<name>.search.windows.net). You cannot change the service name after the service is created.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">The definition of the Search service to create or update.</param>
		/// <returns>The existing service definition was successfully updated. If you changed the number of replicas or partitions, the scale operation will happen asynchronously. You can periodically get your service definition and monitor progress via the provisioningState property.</returns>
		public async Task<SearchService> Services_CreateOrUpdateAsync(string resourceGroupName, string searchServiceName, string api_version, string subscriptionId, SearchService requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchService>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Search service in the given resource group, along with its associated resources.
		/// Services_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The Search service was successfully deleted.</returns>
		public async Task Services_DeleteAsync(string resourceGroupName, string searchServiceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Search service in the given resource group.
		/// Services_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service to update.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">The definition of the Search service to update.</param>
		/// <returns>The existing service definition was successfully updated. If you changed the number of replicas or partitions, the scale operation will happen asynchronously. You can periodically get your service definition and monitor progress via the provisioningState property.</returns>
		public async Task<SearchService> Services_UpdateAsync(string resourceGroupName, string searchServiceName, string api_version, string subscriptionId, SearchService requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchService>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a new query key for the specified Search service. You can create up to 50 query keys per service.
		/// QueryKeys_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/createQueryKey/{name}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="name">The name of the new query API key.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The query key was successfully created and is in the response. You can use the query key as the value of the 'api-key' parameter in the Azure Cognitive Search Service REST API or SDK to perform read-only operations on your Search indexes such as querying and looking up documents by ID.</returns>
		public async Task<QueryKey> QueryKeys_CreateAsync(string resourceGroupName, string searchServiceName, string name, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"/createQueryKey/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryKey>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified query key. Unlike admin keys, query keys are not regenerated. The process for regenerating a query key is to delete and then recreate it.
		/// QueryKeys_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/deleteQueryKey/{key}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="key">The query key to be deleted. Query keys are identified by value, not by name.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The query key was successfully deleted.</returns>
		public async Task QueryKeys_DeleteAsync(string resourceGroupName, string searchServiceName, string key, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"/deleteQueryKey/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the primary and secondary admin API keys for the specified Azure Cognitive Search service.
		/// AdminKeys_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/listAdminKeys
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The admin keys were successfully retrieved and are in the response. You can use either the primary or secondary key as the value of the 'api-key' parameter in the Azure Cognitive Search Service REST API or SDK to perform any operations on your Search service, including privileged operations. Privileged operations include managing resources like indexes and data sources as well as uploading, modifying, or deleting data in your indexes.</returns>
		public async Task<AdminKeyResult> AdminKeys_GetAsync(string resourceGroupName, string searchServiceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"/listAdminKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdminKeyResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of query API keys for the given Azure Cognitive Search service.
		/// QueryKeys_ListBySearchService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/listQueryKeys
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>All query keys for the given Search service were successfully retrieved and are in the response. You can use any of the query keys as the value of the 'api-key' parameter in the Azure Cognitive Search Service REST API or SDK to perform read-only operations on your Search indexes such as querying and looking up documents by ID.</returns>
		public async Task<ListQueryKeysResult> QueryKeys_ListBySearchServiceAsync(string resourceGroupName, string searchServiceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"/listQueryKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListQueryKeysResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details of the private endpoint connection to the Search service in the given resource group.
		/// PrivateEndpointConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection to the Azure Cognitive Search service with the specified resource group.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The definition of the private endpoint connection was successfully retrieved and is in the response.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_GetAsync(string resourceGroupName, string searchServiceName, string privateEndpointConnectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateEndpointConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Private Endpoint connection to the Search service in the given resource group.
		/// PrivateEndpointConnections_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection to the Azure Cognitive Search service with the specified resource group.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">The definition of the private endpoint connection to update.</param>
		/// <returns>The existing private endpoint connection definition was successfully updated.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_UpdateAsync(string resourceGroupName, string searchServiceName, string privateEndpointConnectionName, string api_version, string subscriptionId, PrivateEndpointConnection requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateEndpointConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disconnects the private endpoint connection and deletes it from the Search service.
		/// PrivateEndpointConnections_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection to the Azure Cognitive Search service with the specified resource group.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The private endpoint connection was successfully disconnected and removed from the search service. The response will contain the updated definition of the private endpoint connection.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_DeleteAsync(string resourceGroupName, string searchServiceName, string privateEndpointConnectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateEndpointConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates either the primary or secondary admin API key. You can only regenerate one key at a time.
		/// AdminKeys_Regenerate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/regenerateAdminKey/{keyKind}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="searchServiceName">The name of the Azure Cognitive Search service associated with the specified resource group.</param>
		/// <param name="keyKind">Specifies which key to regenerate. Valid values include 'primary' and 'secondary'.</param>
		/// <param name="api_version">The API version to use for each request. The current version is 2019-10-01-Preview.</param>
		/// <param name="subscriptionId">The unique identifier for a Microsoft Azure subscription. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>The specified admin key was successfully regenerated. Both admin keys are included in the response, including the newly-regenerated key.</returns>
		public async Task<AdminKeyResult> AdminKeys_RegenerateAsync(string resourceGroupName, string searchServiceName, AdminKeys_RegenerateKeyKind keyKind, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Search/searchServices/"+ (searchServiceName==null? "" : System.Uri.EscapeDataString(searchServiceName))+"/regenerateAdminKey/"+keyKind+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdminKeyResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum AdminKeys_RegenerateKeyKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secondary = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
