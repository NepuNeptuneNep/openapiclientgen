//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The resource definition of this association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Association
	{
		
		/// <summary>
		/// The association id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The association name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties of the association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AssociationProperties Properties { get; set; }
		
		/// <summary>
		/// The association type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class AssociationProperties
	{
		
		/// <summary>
		/// The provisioning state of the association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<AssociationPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The REST resource instance of the target resource for this association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceId")]
		public string TargetResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssociationPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	/// <summary>
	/// List of associations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssociationsList
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The array of associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Association[] Value { get; set; }
	}
	
	/// <summary>
	/// The route definition for an action implemented by the custom resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomRPActionRouteDefinition : CustomRPRouteDefinition
	{
		
		/// <summary>
		/// The routing types that are supported for action requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingType")]
		public System.Nullable<CustomRPActionRouteDefinitionRoutingType> RoutingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomRPActionRouteDefinitionRoutingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Proxy = 0,
	}
	
	/// <summary>
	/// A manifest file that defines the custom resource provider resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomRPManifest : Resource
	{
		
		/// <summary>
		/// The manifest for the custom resource provider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CustomRPManifestProperties Properties { get; set; }
	}
	
	public class CustomRPManifestProperties
	{
		
		/// <summary>
		/// A list of actions that the custom resource provider implements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public CustomRPActionRouteDefinition[] Actions { get; set; }
		
		/// <summary>
		/// The provisioning state of the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public AssociationPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// A list of resource types that the custom resource provider implements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTypes")]
		public CustomRPResourceTypeRouteDefinition[] ResourceTypes { get; set; }
		
		/// <summary>
		/// A list of validations to run on the custom resource provider's requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validations")]
		public CustomRPValidations[] Validations { get; set; }
	}
	
	/// <summary>
	/// The route definition for a resource implemented by the custom resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomRPResourceTypeRouteDefinition : CustomRPRouteDefinition
	{
		
		/// <summary>
		/// The routing types that are supported for resource requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingType")]
		public System.Nullable<CustomRPResourceTypeRouteDefinitionRoutingType> RoutingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomRPResourceTypeRouteDefinitionRoutingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Proxy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Proxy,Cache")]
		ProxyCache = 1,
	}
	
	/// <summary>
	/// A validation to apply on custom resource provider requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomRPValidations
	{
		
		/// <summary>
		/// A link to the validation specification. The specification must be hosted on raw.githubusercontent.com.
		/// Required
		/// Pattern: ^https://raw.githubusercontent.com/.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specification")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^https://raw.githubusercontent.com/.+")]
		public string Specification { get; set; }
		
		/// <summary>
		/// The type of validation to run against a matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationType")]
		public System.Nullable<CustomRPValidationsValidationType> ValidationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomRPValidationsValidationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Swagger = 0,
	}
	
	/// <summary>
	/// A route definition that defines an action or resource that can be interacted with through the custom resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomRPRouteDefinition
	{
		
		/// <summary>
		/// The route definition endpoint URI that the custom resource provider will proxy requests to. This can be in the form of a flat URI (e.g. 'https://testendpoint/') or can specify to route via a path (e.g. 'https://testendpoint/{requestPath}')
		/// Required
		/// Pattern: ^https://.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^https://.+")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The name of the route definition. This becomes the name for the ARM extension (e.g. '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}/{name}')
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Error definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDefinition
	{
		
		/// <summary>
		/// Service specific error code which serves as the substatus for the HTTP error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Internal error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDefinition[] Details { get; set; }
		
		/// <summary>
		/// Description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDefinition Error { get; set; }
	}
	
	/// <summary>
	/// List of custom resource providers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListByCustomRPManifest
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The array of custom resource provider manifests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CustomRPManifest[] Value { get; set; }
	}
	
	/// <summary>
	/// The resource definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Supported operations of this resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProviderOperation
	{
		
		/// <summary>
		/// Display metadata associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name, in format of {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Results of the request to list operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProviderOperationList
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of operations supported by this resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ResourceProviderOperation[] Value { get; set; }
	}
	
	/// <summary>
	/// custom resource provider update information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProvidersUpdate
	{
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// The list of operations provided by Microsoft CustomProviders.
		/// Operations_List providers/Microsoft.CustomProviders/operations
		/// </summary>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <returns>Describe the result of a successful operation.</returns>
		public async Task<ResourceProviderOperationList> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.CustomProviders/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceProviderOperationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the custom resource providers within a subscription.
		/// CustomResourceProvider_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.CustomProviders/resourceProviders
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <returns>OK - Returns an array of custom resource providers.</returns>
		public async Task<ListByCustomRPManifest> CustomResourceProvider_ListBySubscriptionAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.CustomProviders/resourceProviders&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListByCustomRPManifest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the custom resource providers within a resource group.
		/// CustomResourceProvider_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <returns>OK - Returns an array of custom resource providers.</returns>
		public async Task<ListByCustomRPManifest> CustomResourceProvider_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomProviders/resourceProviders&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListByCustomRPManifest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the custom resource provider manifest.
		/// CustomResourceProvider_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="resourceProviderName">The name of the resource provider.
		/// Min length: 3
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <returns>OK response definition with the existing resource.</returns>
		public async Task<CustomRPManifest> CustomResourceProvider_GetAsync(string subscriptionId, string resourceGroupName, string resourceProviderName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomProviders/resourceProviders/"+ (resourceProviderName==null? "" : System.Uri.EscapeDataString(resourceProviderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomRPManifest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the custom resource provider.
		/// CustomResourceProvider_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="resourceProviderName">The name of the resource provider.
		/// Min length: 3
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="requestBody">The parameters required to create or update a custom resource provider definition.</param>
		/// <returns>OK response definition. Resource already exists and the changes have been accepted</returns>
		public async Task<CustomRPManifest> CustomResourceProvider_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string resourceProviderName, string api_version, CustomRPManifest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomProviders/resourceProviders/"+ (resourceProviderName==null? "" : System.Uri.EscapeDataString(resourceProviderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomRPManifest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the custom resource provider.
		/// CustomResourceProvider_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="resourceProviderName">The name of the resource provider.
		/// Min length: 3
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <returns>OK resource deleted</returns>
		public async Task CustomResourceProvider_DeleteAsync(string subscriptionId, string resourceGroupName, string resourceProviderName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomProviders/resourceProviders/"+ (resourceProviderName==null? "" : System.Uri.EscapeDataString(resourceProviderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing custom resource provider. The only value that can be updated via PATCH currently is the tags.
		/// CustomResourceProvider_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="resourceProviderName">The name of the resource provider.
		/// Min length: 3
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="requestBody">The updatable fields of a custom resource provider.</param>
		/// <returns>OK response. The resource has been updated.</returns>
		public async Task<CustomRPManifest> CustomResourceProvider_UpdateAsync(string subscriptionId, string resourceGroupName, string resourceProviderName, string api_version, ResourceProvidersUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.CustomProviders/resourceProviders/"+ (resourceProviderName==null? "" : System.Uri.EscapeDataString(resourceProviderName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomRPManifest>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all association for the given scope.
		/// Associations_ListAll {scope}/providers/Microsoft.CustomProviders/associations
		/// </summary>
		/// <param name="scope">The scope of the association.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <returns>OK. Returns all associations for the given scope.</returns>
		public async Task<AssociationsList> Associations_ListAllAsync(string scope, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CustomProviders/associations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssociationsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an association.
		/// Associations_Get {scope}/providers/Microsoft.CustomProviders/associations/{associationName}
		/// </summary>
		/// <param name="scope">The scope of the association.</param>
		/// <param name="associationName">The name of the association.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <returns>OK. Returns association.</returns>
		public async Task<Association> Associations_GetAsync(string scope, string associationName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CustomProviders/associations/"+ (associationName==null? "" : System.Uri.EscapeDataString(associationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Association>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update an association.
		/// Associations_CreateOrUpdate {scope}/providers/Microsoft.CustomProviders/associations/{associationName}
		/// </summary>
		/// <param name="scope">The scope of the association. The scope can be any valid REST resource instance. For example, use '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}' for a virtual machine resource.</param>
		/// <param name="associationName">The name of the association.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="requestBody">The parameters required to create or update an association.</param>
		/// <returns>OK. Association already exists and the changes have been accepted.</returns>
		public async Task<Association> Associations_CreateOrUpdateAsync(string scope, string associationName, string api_version, Association requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CustomProviders/associations/"+ (associationName==null? "" : System.Uri.EscapeDataString(associationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Association>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an association.
		/// Associations_Delete {scope}/providers/Microsoft.CustomProviders/associations/{associationName}
		/// </summary>
		/// <param name="scope">The scope of the association.</param>
		/// <param name="associationName">The name of the association.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <returns>OK. Association deleted.</returns>
		public async Task Associations_DeleteAsync(string scope, string associationName, string api_version)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.CustomProviders/associations/"+ (associationName==null? "" : System.Uri.EscapeDataString(associationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
