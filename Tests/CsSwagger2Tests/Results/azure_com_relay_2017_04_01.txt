//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Namespace/Relay Connection String
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccessKeys
	{
		
		/// <summary>
		/// A string that describes the authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Primary connection string of the created namespace authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryConnectionString")]
		public string PrimaryConnectionString { get; set; }
		
		/// <summary>
		/// A base64-encoded 256-bit primary key for signing and validating the SAS token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// Secondary connection string of the created namespace authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryConnectionString")]
		public string SecondaryConnectionString { get; set; }
		
		/// <summary>
		/// A base64-encoded 256-bit secondary key for signing and validating the SAS token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryKey")]
		public string SecondaryKey { get; set; }
	}
	
	/// <summary>
	/// Description of a namespace authorization rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthorizationRule : Resource
	{
		
		/// <summary>
		/// Authorization rule properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// The response from the list namespace operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthorizationRuleListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if value contains incomplete list of authorization rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the list authorization rules operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AuthorizationRule[] Value { get; set; }
	}
	
	/// <summary>
	/// Description of the check name availability request properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailability
	{
		
		/// <summary>
		/// The namespace name to check for availability. The namespace name can contain only letters, numbers, and hyphens. The namespace must start with a letter, and it must end with a letter or number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Description of the check name availability request properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityResult
	{
		
		/// <summary>
		/// The detailed info regarding the reason associated with the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Value indicating namespace is available. Returns true if the namespace is available; otherwise, false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Specifies the reason for the unavailability of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameAvailabilityResultReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityResultReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidName = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubscriptionIsDisabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NameInUse = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NameInLockdown = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TooManyNamespaceInCurrentSubscription = 5,
	}
	
	/// <summary>
	/// Error reponse indicates Relay service is not able to process the incoming request. The reason is provided in the error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Description of hybrid connection resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HybridConnection : Resource
	{
		
		/// <summary>
		/// Properties of the HybridConnection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// The response of the list hybrid connection operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HybridConnectionListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if value contains incomplete list hybrid connection operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the list hybrid connections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public HybridConnection[] Value { get; set; }
	}
	
	/// <summary>
	/// A Relay REST API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Relay operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Relay operations supported by resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters supplied to the regenerate authorization rule operation, specifies which key neeeds to be reset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateAccessKeyParameters
	{
		
		/// <summary>
		/// Optional. If the key value is provided, this is set to key type, or autogenerated key value set for key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The access key to regenerate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public RegenerateAccessKeyParametersKeyType KeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegenerateAccessKeyParametersKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrimaryKey = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecondaryKey = 1,
	}
	
	/// <summary>
	/// Description of a namespace resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelayNamespace : TrackedResource
	{
		
		/// <summary>
		/// Properties of the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RelayNamespaceProperties Properties { get; set; }
		
		/// <summary>
		/// SKU of the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// SKU of the namespace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// Name of this SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public SkuName Name { get; set; }
		
		/// <summary>
		/// The tier of this SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public SkuName Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
	}
	
	/// <summary>
	/// The response from the list namespace operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelayNamespaceListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if value contains incomplete list of namespaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the list namespace operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RelayNamespace[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the namespace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelayNamespaceProperties
	{
		
		/// <summary>
		/// The time the namespace was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Identifier for Azure Insights metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricId")]
		public string MetricId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<RelayNamespacePropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Endpoint you can use to perform Service Bus operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceBusEndpoint")]
		public string ServiceBusEndpoint { get; set; }
		
		/// <summary>
		/// The time the namespace was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RelayNamespacePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
	}
	
	/// <summary>
	/// Description of a namespace resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RelayUpdateParameters : ResourceNamespacePatch
	{
		
		/// <summary>
		/// Properties of the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RelayNamespaceProperties Properties { get; set; }
		
		/// <summary>
		/// SKU of the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// The resource definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Definition of resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceNamespacePatch : Resource
	{
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Definition of resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource : Resource
	{
		
		/// <summary>
		/// Resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Specifies the reason for the unavailability of the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UnavailableReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidName = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubscriptionIsDisabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NameInUse = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NameInLockdown = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TooManyNamespaceInCurrentSubscription = 5,
	}
	
	/// <summary>
	/// Description of the WCF relay resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WcfRelay : Resource
	{
		
		/// <summary>
		/// Properties of the WCF relay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// The response of the list WCF relay operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WcfRelaysListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if value contains incomplete list of WCF relays.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the list WCF relay operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WcfRelay[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all available Relay REST API operations.
		/// Operations_List providers/Microsoft.Relay/operations
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Relay/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Check the specified namespace name availability.
		/// Namespaces_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Relay/checkNameAvailability
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters to check availability of the specified namespace name.</param>
		/// <returns>Check availability returned successfully.</returns>
		public async Task<CheckNameAvailabilityResult> Namespaces_CheckNameAvailabilityAsync(string api_version, string subscriptionId, CheckNameAvailability requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Relay/checkNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the available namespaces within the subscription regardless of the resourceGroups.
		/// Namespaces_List subscriptions/{subscriptionId}/providers/Microsoft.Relay/namespaces
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespaces returned successfully</returns>
		public async Task<RelayNamespaceListResult> Namespaces_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Relay/namespaces?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RelayNamespaceListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the available namespaces within the ResourceGroup.
		/// Namespaces_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespaces by resource group returned successfully</returns>
		public async Task<RelayNamespaceListResult> Namespaces_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RelayNamespaceListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the description for the specified namespace.
		/// Namespaces_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace description returned successfully.</returns>
		public async Task<RelayNamespace> Namespaces_GetAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RelayNamespace>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Azure Relay namespace.
		/// Namespaces_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to create a namespace resource.</param>
		/// <returns>Namespace create request succeeded.</returns>
		public async Task<RelayNamespace> Namespaces_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, RelayNamespace requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RelayNamespace>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an existing namespace. This operation also removes all associated resources under the namespace.
		/// Namespaces_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace delete request succeeded.</returns>
		public async Task Namespaces_DeleteAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
		/// Namespaces_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters for updating a namespace resource.</param>
		/// <returns>Namespace successfuly updated.</returns>
		public async Task<RelayNamespace> Namespaces_UpdateAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, RelayUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RelayNamespace>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Authorization rules for a namespace.
		/// Namespaces_ListAuthorizationRules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace authorization rule returned successfully.</returns>
		public async Task<AuthorizationRuleListResult> Namespaces_ListAuthorizationRulesAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/authorizationRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthorizationRuleListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Authorization rule for a namespace by name.
		/// Namespaces_GetAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace Authorization rule returned successfully.</returns>
		public async Task<AuthorizationRule> Namespaces_GetAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthorizationRule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates an authorization rule for a namespace.
		/// Namespaces_CreateOrUpdateAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The authorization rule parameters.</param>
		/// <returns>Request to create namespace authorization rule succeeded.</returns>
		public async Task<AuthorizationRule> Namespaces_CreateOrUpdateAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId, AuthorizationRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthorizationRule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a namespace authorization rule.
		/// Namespaces_DeleteAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request to delete namespace authorization rule succeeded.</returns>
		public async Task Namespaces_DeleteAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Primary and secondary connection strings to the namespace.
		/// Namespaces_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/listKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successful.</returns>
		public async Task<AccessKeys> Namespaces_ListKeysAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccessKeys>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerates the primary or secondary connection strings to the namespace.
		/// Namespaces_RegenerateKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/regenerateKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to regenerate authorization rule.</param>
		/// <returns>Successful.</returns>
		public async Task<AccessKeys> Namespaces_RegenerateKeysAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, string api_version, string subscriptionId, RegenerateAccessKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/regenerateKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccessKeys>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the hybrid connection within the namespace.
		/// HybridConnections_ListByNamespace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request to retrieve hybrid connections by namespace succeeded.</returns>
		public async Task<HybridConnectionListResult> HybridConnections_ListByNamespaceAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HybridConnectionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the description for the specified hybrid connection.
		/// HybridConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="hybridConnectionName">The hybrid connection name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully retrieved description for the hybrid connection.</returns>
		public async Task<HybridConnection> HybridConnections_GetAsync(string resourceGroupName, string namespaceName, string hybridConnectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections/"+ (hybridConnectionName==null? "" : System.Uri.EscapeDataString(hybridConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HybridConnection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a service hybrid connection. This operation is idempotent.
		/// HybridConnections_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="hybridConnectionName">The hybrid connection name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to create a hybrid connection.</param>
		/// <returns>Request to create hybrid connections succeeded.</returns>
		public async Task<HybridConnection> HybridConnections_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string hybridConnectionName, string api_version, string subscriptionId, HybridConnection requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections/"+ (hybridConnectionName==null? "" : System.Uri.EscapeDataString(hybridConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HybridConnection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a hybrid connection.
		/// HybridConnections_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="hybridConnectionName">The hybrid connection name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request to delete hybrid connection succeeded.</returns>
		public async Task HybridConnections_DeleteAsync(string resourceGroupName, string namespaceName, string hybridConnectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections/"+ (hybridConnectionName==null? "" : System.Uri.EscapeDataString(hybridConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Authorization rules for a hybrid connection.
		/// HybridConnections_ListAuthorizationRules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="hybridConnectionName">The hybrid connection name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Authorization rules successfully returned.</returns>
		public async Task<AuthorizationRuleListResult> HybridConnections_ListAuthorizationRulesAsync(string resourceGroupName, string namespaceName, string hybridConnectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections/"+ (hybridConnectionName==null? "" : System.Uri.EscapeDataString(hybridConnectionName))+"/authorizationRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthorizationRuleListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Hybrid connection authorization rule for a hybrid connection by name.
		/// HybridConnections_GetAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="hybridConnectionName">The hybrid connection name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Hybrid connection authorization rule returned successfully.</returns>
		public async Task<AuthorizationRule> HybridConnections_GetAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string hybridConnectionName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections/"+ (hybridConnectionName==null? "" : System.Uri.EscapeDataString(hybridConnectionName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthorizationRule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates an authorization rule for a hybrid connection.
		/// HybridConnections_CreateOrUpdateAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="hybridConnectionName">The hybrid connection name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The authorization rule parameters.</param>
		/// <returns>Hybrid connection authorization rule created.</returns>
		public async Task<AuthorizationRule> HybridConnections_CreateOrUpdateAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string hybridConnectionName, string authorizationRuleName, string api_version, string subscriptionId, AuthorizationRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections/"+ (hybridConnectionName==null? "" : System.Uri.EscapeDataString(hybridConnectionName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthorizationRule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a hybrid connection authorization rule.
		/// HybridConnections_DeleteAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="hybridConnectionName">The hybrid connection name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Hybrid connection authorization rule deleted.</returns>
		public async Task HybridConnections_DeleteAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string hybridConnectionName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections/"+ (hybridConnectionName==null? "" : System.Uri.EscapeDataString(hybridConnectionName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Primary and secondary connection strings to the hybrid connection.
		/// HybridConnections_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}/listKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="hybridConnectionName">The hybrid connection name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request to retirve connection strings to the hybrid connection succeeded.</returns>
		public async Task<AccessKeys> HybridConnections_ListKeysAsync(string resourceGroupName, string namespaceName, string hybridConnectionName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections/"+ (hybridConnectionName==null? "" : System.Uri.EscapeDataString(hybridConnectionName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccessKeys>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerates the primary or secondary connection strings to the hybrid connection.
		/// HybridConnections_RegenerateKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}/regenerateKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="hybridConnectionName">The hybrid connection name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to regenerate authorization rule.</param>
		/// <returns>Request to regenerate connection strings to hybrid connection succeeded.</returns>
		public async Task<AccessKeys> HybridConnections_RegenerateKeysAsync(string resourceGroupName, string namespaceName, string hybridConnectionName, string authorizationRuleName, string api_version, string subscriptionId, RegenerateAccessKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/hybridConnections/"+ (hybridConnectionName==null? "" : System.Uri.EscapeDataString(hybridConnectionName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/regenerateKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccessKeys>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the WCF relays within the namespace.
		/// WCFRelays_ListByNamespace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>WCF relays returned successfully.</returns>
		public async Task<WcfRelaysListResult> WCFRelays_ListByNamespaceAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WcfRelaysListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the description for the specified WCF relay.
		/// WCFRelays_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="relayName">The relay name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully retrieved WCF relay description.</returns>
		public async Task<WcfRelay> WCFRelays_GetAsync(string resourceGroupName, string namespaceName, string relayName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WcfRelay>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a WCF relay. This operation is idempotent.
		/// WCFRelays_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="relayName">The relay name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to create a WCF relay.</param>
		/// <returns>Request to create WCF relay succeeded.</returns>
		public async Task<WcfRelay> WCFRelays_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string relayName, string api_version, string subscriptionId, WcfRelay requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WcfRelay>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a WCF relay.
		/// WCFRelays_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="relayName">The relay name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>WCF relay deleted.</returns>
		public async Task WCFRelays_DeleteAsync(string resourceGroupName, string namespaceName, string relayName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Authorization rules for a WCF relay.
		/// WCFRelays_ListAuthorizationRules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="relayName">The relay name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Authorization rules successfully returned.</returns>
		public async Task<AuthorizationRuleListResult> WCFRelays_ListAuthorizationRulesAsync(string resourceGroupName, string namespaceName, string relayName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"/authorizationRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthorizationRuleListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get authorizationRule for a WCF relay by name.
		/// WCFRelays_GetAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="relayName">The relay name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request for WCF relay authorization rule succeeded.</returns>
		public async Task<AuthorizationRule> WCFRelays_GetAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string relayName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthorizationRule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates an authorization rule for a WCF relay.
		/// WCFRelays_CreateOrUpdateAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="relayName">The relay name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The authorization rule parameters.</param>
		/// <returns>WCF relay authorization rule created.</returns>
		public async Task<AuthorizationRule> WCFRelays_CreateOrUpdateAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string relayName, string authorizationRuleName, string api_version, string subscriptionId, AuthorizationRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AuthorizationRule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a WCF relay authorization rule.
		/// WCFRelays_DeleteAuthorizationRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="relayName">The relay name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request to delete WCF relay authorization rule succeeded.</returns>
		public async Task WCFRelays_DeleteAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string relayName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Primary and secondary connection strings to the WCF relay.
		/// WCFRelays_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}/listKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="relayName">The relay name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successful.</returns>
		public async Task<AccessKeys> WCFRelays_ListKeysAsync(string resourceGroupName, string namespaceName, string relayName, string authorizationRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccessKeys>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerates the primary or secondary connection strings to the WCF relay.
		/// WCFRelays_RegenerateKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}/regenerateKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the Resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="relayName">The relay name.
		/// Min length: 1
		// </param>
		/// <param name="authorizationRuleName">The authorization rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to regenerate authorization rule.</param>
		/// <returns>Successful.</returns>
		public async Task<AccessKeys> WCFRelays_RegenerateKeysAsync(string resourceGroupName, string namespaceName, string relayName, string authorizationRuleName, string api_version, string subscriptionId, RegenerateAccessKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Relay/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/wcfRelays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"/authorizationRules/"+ (authorizationRuleName==null? "" : System.Uri.EscapeDataString(authorizationRuleName))+"/regenerateKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccessKeys>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
