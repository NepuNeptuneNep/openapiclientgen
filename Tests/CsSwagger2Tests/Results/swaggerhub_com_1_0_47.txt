//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApisJson
	{
		
		[System.Runtime.Serialization.DataMember(Name="apis")]
		public ApisJsonApi[] Apis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.DateTimeOffset> Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="specificationVersion")]
		public string SpecificationVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int64> TotalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApisJsonApi
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApisJsonProperty[] Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// an API property
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApisJsonProperty
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClosableComment : Comment
	{
		
		/// <summary>
		/// The line number (zero-based) the comment is associated with. For example, if the comment is on line 7 in the editor, `position`=6.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// A list of replies to this comment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public Comment[] Replies { get; set; }
		
		/// <summary>
		/// Comment status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ClosableCommentStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Comment
	{
		
		/// <summary>
		/// Markdown contents of the comment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The UTC date and time when the comment was added
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		/// <summary>
		/// The unique ID of the comment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The UTC date and time the when the comment was last edited
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.DateTimeOffset> Modified { get; set; }
		
		/// <summary>
		/// The user who added a comment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	/// <summary>
	/// The user who added a comment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class User
	{
		
		/// <summary>
		/// `true` means an existing user, `false` means the user is inactive (for example, deleted)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// User name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClosableCommentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOLVED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Collaboration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hint")]
		public CollaborationHint Hint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public CollaborationMembership[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public string[] Owners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingMembers")]
		public CollaborationMembership[] PendingMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teams")]
		public CollaborationTeamMembership[] Teams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CollaborationHint
	{
		
		/// <summary>
		/// type identifier of the managed entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CollaborationMembership : CollaborationMember
	{
		
		[System.Runtime.Serialization.DataMember(Name="blocked")]
		public System.Nullable<System.Boolean> Blocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="donotdisturb")]
		public System.Nullable<System.Boolean> Donotdisturb { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CollaborationTeamMembership : CollaborationMembership
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public CollaborationMember[] Members { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CollaborationMember
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a list of currently defined APIs in APIs.json format.
		/// SearchApis apis
		/// </summary>
		/// <param name="query">Free text query to match</param>
		/// <param name="state">Matches against published state of the spec:
		///* UNPUBLISHED - spec is a draft, a work in progress
		///* PUBLISHED - spec is a stable version ready for consuming from client applications
		///* ANY - either PUBLISHED or UNPUBLISHED
		///</param>
		/// <param name="tag">Matches against tags associated with an API</param>
		/// <param name="page">Page to return</param>
		/// <param name="limit">Number of results per page</param>
		/// <param name="sort">Sort criteria or result set:
		///* NAME
		///* UPATED
		///* CREATED
		///* OWNER
		///</param>
		/// <param name="order">Sort order</param>
		public async Task SearchApisAsync(string query, SearchApisState state, string[] tag, int page, int limit, SearchApisSort sort, SearchApisOrder order)
		{
			var requestUri = "apis?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&state=" + state+"&"+string.Join("&", tag.Select(z => $"tag={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&limit="+limit+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an APIs.json listing of all APIs defined for this owner
		/// GetOwnerApis apis/{owner}
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="page">Page to return</param>
		/// <param name="limit">Number of results per page</param>
		/// <param name="sort">Sort criteria or result set:
		///* NAME
		///* UPATED
		///* CREATED
		///* OWNER
		///</param>
		/// <param name="order">Sort order</param>
		/// <returns>A list of APIs in APIs.json format</returns>
		public async Task<ApisJson> GetOwnerApisAsync(string owner, int page, int limit, SearchApisSort sort, SearchApisOrder order)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"&page="+page+"&limit="+limit+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApisJson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an APIs.json listing for all API versions for this owner and API
		/// GetApiVersions apis/{owner}/{api}
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		/// <returns>A list of API versions in APIs.json format</returns>
		public async Task<ApisJson> GetApiVersionsAsync(string owner, string api)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApisJson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Saves the provided Swagger definition
		/// Saves the provided Swagger definition; the owner must match the token owner. The version will be extracted from the Swagger definition itself.
		/// SaveDefinition apis/{owner}/{api}
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		/// <param name="isPrivate">Defines whether the API has to be private</param>
		/// <param name="version">API version</param>
		/// <param name="oas">The OpenApi Specification (OAS)
		///  version.
		///* 2.0 - For OAS2 (aka 'Swagger 2.0')
		///* 3.0.X - For OAS3
		///</param>
		/// <param name="force">Force update</param>
		/// <param name="requestBody">The Swagger definition of this API</param>
		/// <returns>The API was successfully saved</returns>
		public async Task SaveDefinitionAsync(string owner, string api, bool isPrivate, string version, SaveDefinitionOas oas, bool force, string requestBody)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"&isPrivate="+isPrivate+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version))+"&oas=" + oas+"&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified API
		/// DeleteApi apis/{owner}/{api}
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		/// <returns>The API was successfully deleted</returns>
		public async Task DeleteApiAsync(string owner, string api)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets API's collaboration
		/// GetCollaboration apis/{owner}/{api}/.collaboration
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		/// <returns>The existing collaboration on an API</returns>
		public async Task<Collaboration> GetCollaborationAsync(string owner, string api, bool expandTeams)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/.collaboration&expandTeams="+expandTeams;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Collaboration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates API's collaboration
		/// UpdateCollaboration apis/{owner}/{api}/.collaboration
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		public async Task UpdateCollaborationAsync(string owner, string api, Collaboration requestBody)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/.collaboration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes API's collaboration
		/// DeleteCollaboration apis/{owner}/{api}/.collaboration
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		public async Task DeleteCollaborationAsync(string owner, string api)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/.collaboration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the Swagger definition for the specified API and version
		/// GetDefinition apis/{owner}/{api}/{version}
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <returns>The Swagger API in requested format</returns>
		public async Task<string> GetDefinitionAsync(string owner, string api, string version)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a particular version of the specified API
		/// DeleteApiVersion apis/{owner}/{api}/{version}
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <returns>The API version was successfully deleted</returns>
		public async Task DeleteApiVersionAsync(string owner, string api, string version)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns comments for the specified API version
		/// Returns all the comments and replies added by collaborators in the specified API version.
		/// 
		/// GetApiComments apis/{owner}/{api}/{version}/.comment
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <returns>A list of comments for the specified API version</returns>
		public async Task<ClosableComment[]> GetApiCommentsAsync(string owner, string api, string version)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/.comment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClosableComment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the Swagger definition for the specified API and version in JSON format
		/// GetJsonDefinition apis/{owner}/{api}/{version}/swagger.json
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <returns>The Swagger API in JSON format</returns>
		public async Task<string> GetJsonDefinitionAsync(string owner, string api, string version)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/swagger.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the Swagger definition for the specified API and version in YAML format
		/// GetYamlDefinition apis/{owner}/{api}/{version}/swagger.yaml
		/// </summary>
		/// <param name="owner">API owner (user or organization, case-sensitive)</param>
		/// <param name="api">API name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <returns>The Swagger API in YAML format</returns>
		public async Task GetYamlDefinitionAsync(string owner, string api, string version)
		{
			var requestUri = "apis/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (api==null? "" : System.Uri.EscapeDataString(api))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/swagger.yaml";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of currently defined domains in APIs.json format
		/// SearchDomains domains
		/// </summary>
		/// <param name="query">Free text query to match</param>
		/// <param name="state">Matches against published state of the spec:
		///* UNPUBLISHED - spec is a draft, a work in progress
		///* PUBLISHED - spec is a stable version ready for consuming from client applications
		///* ANY - either PUBLISHED or UNPUBLISHED
		///</param>
		/// <param name="tag">Matches against tags associated with a domain</param>
		/// <param name="page">Page to return</param>
		/// <param name="limit">Number of results per page</param>
		/// <param name="sort">Sort criteria or result set:
		///* NAME
		///* UPATED
		///* CREATED
		///* OWNER
		///</param>
		/// <param name="order">Sort order</param>
		public async Task SearchDomainsAsync(string query, SearchApisState state, string[] tag, int page, int limit, SearchApisSort sort, SearchApisOrder order)
		{
			var requestUri = "domains?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&state=" + state+"&"+string.Join("&", tag.Select(z => $"tag={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&limit="+limit+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an APIs.json listing of all domains defined for this owner
		/// GetOwnerDomains domains/{owner}
		/// </summary>
		/// <param name="owner">Domain owner (user or organization, case-sensitive)</param>
		/// <param name="page">Page to return</param>
		/// <param name="limit">Number of results per page</param>
		/// <param name="sort">Sort criteria or result set:
		///* NAME
		///* UPATED
		///* CREATED
		///* OWNER
		///</param>
		/// <param name="order">Sort order</param>
		/// <returns>A list of domains in APIs.json format</returns>
		public async Task<ApisJson> GetOwnerDomainsAsync(string owner, int page, int limit, SearchApisSort sort, SearchApisOrder order)
		{
			var requestUri = "domains/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"&page="+page+"&limit="+limit+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApisJson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an APIs.json listing for all domain versions for this owner and domain
		/// GetDomainVersions domains/{owner}/{domain}
		/// </summary>
		/// <param name="owner">Domain owner (user or organization, case-sensitive)</param>
		/// <param name="domain">Domain name (case-sensitive)</param>
		/// <returns>A list of domain versions in APIs.json format</returns>
		public async Task<ApisJson> GetDomainVersionsAsync(string owner, string domain)
		{
			var requestUri = "domains/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (domain==null? "" : System.Uri.EscapeDataString(domain));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApisJson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Saves the provided Swagger definition of a domain
		/// SaveDomainDefinition domains/{owner}/{domain}
		/// </summary>
		/// <param name="owner">Domain owner (user or organization, case-sensitive)</param>
		/// <param name="domain">Domain name (case-sensitive)</param>
		/// <param name="isPrivate">Specifies whether the domain has to be private</param>
		/// <param name="version">Domain version</param>
		/// <param name="force">Force update</param>
		/// <param name="requestBody">The Swagger definition of this domain</param>
		/// <returns>The domain was successfully saved</returns>
		public async Task SaveDomainDefinitionAsync(string owner, string domain, bool isPrivate, string version, bool force, string requestBody)
		{
			var requestUri = "domains/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (domain==null? "" : System.Uri.EscapeDataString(domain))+"&isPrivate="+isPrivate+"&version=" + (version==null? "" : System.Uri.EscapeDataString(version))+"&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified domain
		/// DeleteDomain domains/{owner}/{domain}
		/// </summary>
		/// <param name="owner">Domain owner (user or organization, case-sensitive)</param>
		/// <param name="domain">Domain name (case-sensitive)</param>
		/// <param name="force">Force update</param>
		/// <returns>The domain was successfully deleted</returns>
		public async Task DeleteDomainAsync(string owner, string domain, bool force)
		{
			var requestUri = "domains/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (domain==null? "" : System.Uri.EscapeDataString(domain))+"&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the Swagger definition for the specified domain and version
		/// GetDomainDefinition domains/{owner}/{domain}/{version}
		/// </summary>
		/// <param name="owner">Domain owner (user or organization, case-sensitive)</param>
		/// <param name="domain">Domain name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <returns>The Swagger domain in requested format</returns>
		public async Task<string> GetDomainDefinitionAsync(string owner, string domain, string version)
		{
			var requestUri = "domains/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (domain==null? "" : System.Uri.EscapeDataString(domain))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a particular version of the specified domain
		/// DeleteDomainVersion domains/{owner}/{domain}/{version}
		/// </summary>
		/// <param name="owner">Domain owner (user or organization, case-sensitive)</param>
		/// <param name="domain">Domain name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <param name="force">Force update</param>
		/// <returns>The domain version was successfully deleted</returns>
		public async Task DeleteDomainVersionAsync(string owner, string domain, string version, bool force)
		{
			var requestUri = "domains/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (domain==null? "" : System.Uri.EscapeDataString(domain))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns comments for the specified domain version
		/// Returns all the comments and replies added by collaborators in the specified domain version.
		/// 
		/// GetDomainComments domains/{owner}/{domain}/{version}/.comment
		/// </summary>
		/// <param name="owner">Domain owner (user or organization, case-sensitive)</param>
		/// <param name="domain">Domain name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <returns>Comments for the specified domain</returns>
		public async Task<ClosableComment[]> GetDomainCommentsAsync(string owner, string domain, string version)
		{
			var requestUri = "domains/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (domain==null? "" : System.Uri.EscapeDataString(domain))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/.comment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClosableComment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the definition for the specified domain and version in JSON format
		/// GetDomainJsonDefinition domains/{owner}/{domain}/{version}/domain.json
		/// </summary>
		/// <param name="owner">Domain owner (user or organization, case-sensitive)</param>
		/// <param name="domain">Domain name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <returns>Definition in JSON format</returns>
		public async Task<string> GetDomainJsonDefinitionAsync(string owner, string domain, string version)
		{
			var requestUri = "domains/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (domain==null? "" : System.Uri.EscapeDataString(domain))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/domain.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the definition for the specified domain and version in YAML format
		/// GetDomainYamlDefinition domains/{owner}/{domain}/{version}/domain.yaml
		/// </summary>
		/// <param name="owner">Domain owner (user or organization, case-sensitive)</param>
		/// <param name="domain">Domain name (case-sensitive)</param>
		/// <param name="version">Version identifier (case-sensitive)</param>
		/// <returns>Definition in YAML format</returns>
		public async Task GetDomainYamlDefinitionAsync(string owner, string domain, string version)
		{
			var requestUri = "domains/"+ (owner==null? "" : System.Uri.EscapeDataString(owner))+"/"+ (domain==null? "" : System.Uri.EscapeDataString(domain))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version))+"/domain.yaml";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of currently defined APIs and Domains in APIs.json format
		/// SearchApisAndDomains specs
		/// </summary>
		/// <param name="specType">Type of Swagger specs to search:
		///* API - APIs only
		///* DOMAIN - Domains only
		///* ANY - Both APIs and Domains
		///</param>
		/// <param name="visibility">The visibility of a spec in SwaggerHub:
		///* PUBLIC - can be viewed by anyone
		///* PRIVATE - can only be viewed by you or your Org and those that you are collaborating with or have shared it with
		///* ANY - either PUBLIC or PRIVATE
		///</param>
		/// <param name="state">Matches against published state of the spec:
		///* UNPUBLISHED - spec is a draft, a work in progress
		///* PUBLISHED - spec is a stable version ready for consuming from client applications
		///* ANY - either PUBLISHED or UNPUBLISHED
		///</param>
		/// <param name="owner">API or Domain owner identifier. Can be username or organization name</param>
		/// <param name="query">Free text query to match</param>
		/// <param name="page">Page to return</param>
		/// <param name="limit">Number of results per page</param>
		/// <param name="sort">Sort criteria or result set:
		///* NAME
		///* UPATED
		///* CREATED
		///* OWNER
		///</param>
		/// <param name="order">Sort order</param>
		/// <returns>A list of APIs and Domains in APIs.json format</returns>
		public async Task<ApisJson> SearchApisAndDomainsAsync(SearchApisAndDomainsSpecType specType, SearchApisAndDomainsVisibility visibility, SearchApisState state, string owner, string query, int page, int limit, SearchApisSort sort, SearchApisOrder order)
		{
			var requestUri = "specs?specType=" + specType+"&visibility=" + visibility+"&state=" + state+"&owner=" + (owner==null? "" : System.Uri.EscapeDataString(owner))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&page="+page+"&limit="+limit+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApisJson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum SearchApisState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNPUBLISHED = 2,
	}
	
	public enum SearchApisSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNER = 3,
	}
	
	public enum SearchApisOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	public enum SaveDefinitionOas
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2.0")]
		_2_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3.0.0")]
		_3_0_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3.0.1")]
		_3_0_1 = 2,
	}
	
	public enum SearchApisAndDomainsSpecType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 2,
	}
	
	public enum SearchApisAndDomainsVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
