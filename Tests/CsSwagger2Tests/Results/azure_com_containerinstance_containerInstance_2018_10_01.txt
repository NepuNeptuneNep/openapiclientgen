//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The properties of the Azure File volume. Azure File shares are mounted as volumes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureFileVolume
	{
		
		/// <summary>
		/// The flag indicating whether the Azure File shared mounted as a volume is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The name of the Azure File share to be mounted as a volume.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shareName")]
		public string ShareName { get; set; }
		
		/// <summary>
		/// The storage account access key used to access the Azure File share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountKey")]
		public string StorageAccountKey { get; set; }
		
		/// <summary>
		/// The name of the storage account that contains the Azure File share.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountName")]
		public string StorageAccountName { get; set; }
	}
	
	/// <summary>
	/// The response containing cached images.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CachedImagesListResult
	{
		
		/// <summary>
		/// The URI to fetch the next page of cached images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of cached images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CachedImages[] Value { get; set; }
	}
	
	/// <summary>
	/// The cached image and OS type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CachedImages
	{
		
		/// <summary>
		/// The resource Id of the cached image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cached image name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// The OS type of the cached image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
	}
	
	/// <summary>
	/// The regional capabilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Capabilities
	{
		
		/// <summary>
		/// The supported capabilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public CapabilitiesCapabilities1 Capabilities1 { get; set; }
		
		/// <summary>
		/// The GPU sku that this capability describes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpu")]
		public string Gpu { get; set; }
		
		/// <summary>
		/// The ip address type that this capability describes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public string IpAddressType { get; set; }
		
		/// <summary>
		/// The resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The OS type that this capability describes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// The resource type that this capability describes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	public class CapabilitiesCapabilities1
	{
		
		/// <summary>
		/// The maximum allowed CPU request in cores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxCpu")]
		public System.Nullable<System.Double> MaxCpu { get; set; }
		
		/// <summary>
		/// The maximum allowed GPU count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxGpuCount")]
		public System.Nullable<System.Double> MaxGpuCount { get; set; }
		
		/// <summary>
		/// The maximum allowed memory request in GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxMemoryInGB")]
		public System.Nullable<System.Double> MaxMemoryInGB { get; set; }
	}
	
	/// <summary>
	/// The response containing list of capabilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CapabilitiesListResult
	{
		
		/// <summary>
		/// The URI to fetch the next page of capabilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of capabilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Capabilities[] Value { get; set; }
	}
	
	/// <summary>
	/// An error response from the Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from the Batch service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from the Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// A container instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Container
	{
		
		/// <summary>
		/// The user-provided name of the container instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The container instance properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ContainerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The container instance properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerProperties
	{
		
		/// <summary>
		/// The commands to execute within the container instance in exec form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string[] Command { get; set; }
		
		/// <summary>
		/// The environment variables to set in the container instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariable[] EnvironmentVariables { get; set; }
		
		/// <summary>
		/// The name of the image used to create the container instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// The instance view of the container instance. Only valid in response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceView")]
		public ContainerPropertiesInstanceView InstanceView { get; set; }
		
		/// <summary>
		/// The container probe, for liveness or readiness
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livenessProbe")]
		public ContainerProbe LivenessProbe { get; set; }
		
		/// <summary>
		/// The exposed ports on the container instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ports")]
		public ContainerPort[] Ports { get; set; }
		
		/// <summary>
		/// The container probe, for liveness or readiness
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readinessProbe")]
		public ContainerProbe ReadinessProbe { get; set; }
		
		/// <summary>
		/// The resource requirements.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ResourceRequirements Resources { get; set; }
		
		/// <summary>
		/// The volume mounts available to the container instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeMounts")]
		public VolumeMount[] VolumeMounts { get; set; }
	}
	
	/// <summary>
	/// The environment variable to set within the container instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentVariable
	{
		
		/// <summary>
		/// The name of the environment variable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the secure environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secureValue")]
		public string SecureValue { get; set; }
		
		/// <summary>
		/// The value of the environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ContainerPropertiesInstanceView
	{
		
		/// <summary>
		/// The container instance state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentState")]
		public ContainerState CurrentState { get; set; }
		
		/// <summary>
		/// The events of the container instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// The container instance state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousState")]
		public ContainerState PreviousState { get; set; }
		
		/// <summary>
		/// The number of times that the container instance has been restarted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restartCount")]
		public System.Nullable<System.Int32> RestartCount { get; set; }
	}
	
	/// <summary>
	/// The container instance state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerState
	{
		
		/// <summary>
		/// The human-readable status of the container instance state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailStatus")]
		public string DetailStatus { get; set; }
		
		/// <summary>
		/// The container instance exit codes correspond to those from the `docker run` command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// The date-time when the container instance state finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		/// <summary>
		/// The date-time when the container instance state started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The state of the container instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// A container group or container instance event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Event
	{
		
		/// <summary>
		/// The count of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The date-time of the earliest logged event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstTimestamp")]
		public System.Nullable<System.DateTimeOffset> FirstTimestamp { get; set; }
		
		/// <summary>
		/// The date-time of the latest logged event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastTimestamp")]
		public System.Nullable<System.DateTimeOffset> LastTimestamp { get; set; }
		
		/// <summary>
		/// The event message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The event name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The container probe, for liveness or readiness
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerProbe
	{
		
		/// <summary>
		/// The container execution command, for liveness or readiness probe
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exec")]
		public ContainerExec Exec { get; set; }
		
		/// <summary>
		/// The failure threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureThreshold")]
		public System.Nullable<System.Int32> FailureThreshold { get; set; }
		
		/// <summary>
		/// The container Http Get settings, for liveness or readiness probe
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpGet")]
		public ContainerHttpGet HttpGet { get; set; }
		
		/// <summary>
		/// The initial delay seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialDelaySeconds")]
		public System.Nullable<System.Int32> InitialDelaySeconds { get; set; }
		
		/// <summary>
		/// The period seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodSeconds")]
		public System.Nullable<System.Int32> PeriodSeconds { get; set; }
		
		/// <summary>
		/// The success threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successThreshold")]
		public System.Nullable<System.Int32> SuccessThreshold { get; set; }
		
		/// <summary>
		/// The timeout seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	/// <summary>
	/// The container execution command, for liveness or readiness probe
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerExec
	{
		
		/// <summary>
		/// The commands to execute within the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string[] Command { get; set; }
	}
	
	/// <summary>
	/// The container Http Get settings, for liveness or readiness probe
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerHttpGet
	{
		
		/// <summary>
		/// The path to probe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The port number to probe.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="port")]
		public int Port { get; set; }
		
		/// <summary>
		/// The scheme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheme")]
		public System.Nullable<ContainerHttpGetScheme> Scheme { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerHttpGetScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		https = 1,
	}
	
	/// <summary>
	/// The port exposed on the container instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerPort
	{
		
		/// <summary>
		/// The port number exposed within the container group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="port")]
		public int Port { get; set; }
		
		/// <summary>
		/// The protocol associated with the port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<ContainerPortProtocol> Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerPortProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 1,
	}
	
	/// <summary>
	/// The resource requirements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceRequirements
	{
		
		/// <summary>
		/// The resource limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limits")]
		public ResourceLimits Limits { get; set; }
		
		/// <summary>
		/// The resource requests.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public ResourceRequests Requests { get; set; }
	}
	
	/// <summary>
	/// The resource limits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceLimits
	{
		
		/// <summary>
		/// The CPU limit of this container instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public System.Nullable<System.Double> Cpu { get; set; }
		
		/// <summary>
		/// The GPU resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpu")]
		public GpuResource Gpu { get; set; }
		
		/// <summary>
		/// The memory limit in GB of this container instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryInGB")]
		public System.Nullable<System.Double> MemoryInGB { get; set; }
	}
	
	/// <summary>
	/// The GPU resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GpuResource
	{
		
		/// <summary>
		/// The count of the GPU resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// The SKU of the GPU resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public GpuResourceSku Sku { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GpuResourceSku
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		K80 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P100 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V100 = 2,
	}
	
	/// <summary>
	/// The resource requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceRequests
	{
		
		/// <summary>
		/// The CPU request of this container instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public double Cpu { get; set; }
		
		/// <summary>
		/// The GPU resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpu")]
		public GpuResource Gpu { get; set; }
		
		/// <summary>
		/// The memory request in GB of this container instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="memoryInGB")]
		public double MemoryInGB { get; set; }
	}
	
	/// <summary>
	/// The properties of the volume mount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VolumeMount
	{
		
		/// <summary>
		/// The path within the container where the volume should be mounted. Must not contain colon (:).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mountPath")]
		public string MountPath { get; set; }
		
		/// <summary>
		/// The name of the volume mount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The flag indicating whether the volume mount is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
	}
	
	/// <summary>
	/// The container exec request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerExecRequest
	{
		
		/// <summary>
		/// The command to be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string Command { get; set; }
		
		/// <summary>
		/// The size of the terminal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminalSize")]
		public ContainerExecRequestTerminalSize TerminalSize { get; set; }
	}
	
	public class ContainerExecRequestTerminalSize
	{
		
		/// <summary>
		/// The column size of the terminal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cols")]
		public System.Nullable<System.Int32> Cols { get; set; }
		
		/// <summary>
		/// The row size of the terminal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public System.Nullable<System.Int32> Rows { get; set; }
	}
	
	/// <summary>
	/// The information for the container exec command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerExecResponse
	{
		
		/// <summary>
		/// The password to start the exec command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The uri for the exec websocket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webSocketUri")]
		public string WebSocketUri { get; set; }
	}
	
	/// <summary>
	/// A container group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerGroup : Resource
	{
		
		/// <summary>
		/// Identity for the container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ContainerGroupIdentity Identity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ContainerGroupProperties Properties { get; set; }
	}
	
	public class ContainerGroupProperties
	{
		
		/// <summary>
		/// The containers within the container group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public Container[] Containers { get; set; }
		
		/// <summary>
		/// Container group diagnostic information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diagnostics")]
		public ContainerGroupDiagnostics Diagnostics { get; set; }
		
		/// <summary>
		/// DNS configuration for the container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsConfig")]
		public DnsConfiguration DnsConfig { get; set; }
		
		/// <summary>
		/// The image registry credentials by which the container group is created from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageRegistryCredentials")]
		public ImageRegistryCredential[] ImageRegistryCredentials { get; set; }
		
		/// <summary>
		/// The instance view of the container group. Only valid in response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceView")]
		public ContainerGroupPropertiesInstanceView InstanceView { get; set; }
		
		/// <summary>
		/// IP address for the container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public IpAddress IpAddress { get; set; }
		
		/// <summary>
		/// Container group network profile information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkProfile")]
		public ContainerGroupNetworkProfile NetworkProfile { get; set; }
		
		/// <summary>
		/// The operating system type required by the containers in the container group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public ContainerGroupPropertiesOsType OsType { get; set; }
		
		/// <summary>
		/// The provisioning state of the container group. This only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Restart policy for all containers within the container group. 
		///- `Always` Always restart
		///- `OnFailure` Restart on failure
		///- `Never` Never restart
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restartPolicy")]
		public System.Nullable<ContainerGroupPropertiesRestartPolicy> RestartPolicy { get; set; }
		
		/// <summary>
		/// The list of volumes that can be mounted by containers in this container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
	}
	
	/// <summary>
	/// Container group diagnostic information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerGroupDiagnostics
	{
		
		/// <summary>
		/// Container group log analytics information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logAnalytics")]
		public LogAnalytics LogAnalytics { get; set; }
	}
	
	/// <summary>
	/// Container group log analytics information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LogAnalytics
	{
		
		/// <summary>
		/// The log type to be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<LogAnalyticsLogType> LogType { get; set; }
		
		/// <summary>
		/// Metadata for log analytics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The workspace id for log analytics
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// The workspace key for log analytics
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workspaceKey")]
		public string WorkspaceKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LogAnalyticsLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContainerInsights = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContainerInstanceLogs = 1,
	}
	
	/// <summary>
	/// DNS configuration for the container group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DnsConfiguration
	{
		
		/// <summary>
		/// The DNS servers for the container group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameServers")]
		public string[] NameServers { get; set; }
		
		/// <summary>
		/// The DNS options for the container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string Options { get; set; }
		
		/// <summary>
		/// The DNS search domains for hostname lookup in the container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchDomains")]
		public string SearchDomains { get; set; }
	}
	
	/// <summary>
	/// Image registry credential.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageRegistryCredential
	{
		
		/// <summary>
		/// The password for the private registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The Docker image registry server without a protocol such as "http" and "https".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		/// <summary>
		/// The username for the private registry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class ContainerGroupPropertiesInstanceView
	{
		
		/// <summary>
		/// The events of this container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// The state of the container group. Only valid in response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// IP address for the container group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IpAddress
	{
		
		/// <summary>
		/// The Dns name label for the IP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsNameLabel")]
		public string DnsNameLabel { get; set; }
		
		/// <summary>
		/// The FQDN for the IP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		/// <summary>
		/// The IP exposed to the public internet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// The list of ports exposed on the container group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ports")]
		public Port[] Ports { get; set; }
		
		/// <summary>
		/// Specifies if the IP is exposed to the public internet or private VNET.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IpAddressType Type { get; set; }
	}
	
	/// <summary>
	/// The port exposed on the container group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Port
	{
		
		/// <summary>
		/// The port number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="port")]
		public int Port1 { get; set; }
		
		/// <summary>
		/// The protocol associated with the port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ContainerPortProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IpAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Private = 1,
	}
	
	/// <summary>
	/// Container group network profile information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerGroupNetworkProfile
	{
		
		/// <summary>
		/// The identifier for a network profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerGroupPropertiesOsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerGroupPropertiesRestartPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Always = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnFailure = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Never = 2,
	}
	
	/// <summary>
	/// The properties of the volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Volume
	{
		
		/// <summary>
		/// The properties of the Azure File volume. Azure File shares are mounted as volumes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFile")]
		public AzureFileVolume AzureFile { get; set; }
		
		/// <summary>
		/// The empty directory volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emptyDir")]
		public EmptyDirVolume EmptyDir { get; set; }
		
		/// <summary>
		/// Represents a volume that is populated with the contents of a git repository
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitRepo")]
		public GitRepoVolume GitRepo { get; set; }
		
		/// <summary>
		/// The name of the volume.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The secret volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public SecretVolume Secret { get; set; }
	}
	
	/// <summary>
	/// The empty directory volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmptyDirVolume
	{
	}
	
	/// <summary>
	/// The secret volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretVolume
	{
	}
	
	/// <summary>
	/// Identity for the container group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerGroupIdentity
	{
		
		/// <summary>
		/// The principal id of the container group identity. This property will only be provided for a system assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ContainerGroupIdentityType> Type { get; set; }
		
		/// <summary>
		/// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, ContainerGroupIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerGroupIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SystemAssigned, UserAssigned")]
		SystemAssigned_UserAssigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 3,
	}
	
	public class ContainerGroupIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// The client id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The principal id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// The container group list response that contains the container group properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerGroupListResult
	{
		
		/// <summary>
		/// The URI to fetch the next page of container groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of container groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ContainerGroup[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents a volume that is populated with the contents of a git repository
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GitRepoVolume
	{
		
		/// <summary>
		/// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directory")]
		public string Directory { get; set; }
		
		/// <summary>
		/// Repository URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// Commit hash for the specified revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
	}
	
	/// <summary>
	/// The logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Logs
	{
		
		/// <summary>
		/// The content of the log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	/// <summary>
	/// An operation for Azure Container Instance service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The display information of the operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// The name of the operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The intended executor of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public System.Nullable<OperationOrigin> Origin { get; set; }
		
		/// <summary>
		/// The additional properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	public class OperationDisplay
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The friendly name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The name of the provider of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The name of the resource type of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="System")]
		_System = 1,
	}
	
	/// <summary>
	/// The operation list response that contains all operations for Azure Container Instance service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The URI to fetch the next page of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A single usage result
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Usage
	{
		
		/// <summary>
		/// The current usage of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int32> CurrentValue { get; set; }
		
		/// <summary>
		/// The maximum permitted usage of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The name object of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public UsageName Name { get; set; }
		
		/// <summary>
		/// Unit of the usage result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	public class UsageName
	{
		
		/// <summary>
		/// The localized name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// The name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The response containing the usage data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Usage[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List the operations for Azure Container Instance service.
		/// Operations_List providers/Microsoft.ContainerInstance/operations
		/// </summary>
		/// <param name="api_version">Client API version</param>
		/// <returns>OK</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.ContainerInstance/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of container groups in the specified subscription.
		/// Get a list of container groups in the specified subscription. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
		/// ContainerGroups_List subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroups
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <returns>OK</returns>
		public async Task<ContainerGroupListResult> ContainerGroups_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ContainerInstance/containerGroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerGroupListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of cached images.
		/// Get the list of cached images on specific OS type for a subscription in a region.
		/// ListCachedImages subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/cachedImages
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The identifier for the physical azure location.</param>
		/// <param name="api_version">Client API version</param>
		/// <returns>OK</returns>
		public async Task<CachedImagesListResult> ListCachedImagesAsync(string subscriptionId, string location, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ContainerInstance/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/cachedImages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CachedImagesListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of capabilities of the location.
		/// Get the list of CPU/memory/GPU capabilities of a region.
		/// ListCapabilities subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/capabilities
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The identifier for the physical azure location.</param>
		/// <param name="api_version">Client API version</param>
		/// <returns>OK</returns>
		public async Task<CapabilitiesListResult> ListCapabilitiesAsync(string subscriptionId, string location, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ContainerInstance/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/capabilities&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CapabilitiesListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the usage for a subscription
		/// ContainerGroupUsage_List subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/usages
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The identifier for the physical azure location.</param>
		/// <param name="api_version">Client API version</param>
		/// <returns>OK</returns>
		public async Task<UsageListResult> ContainerGroupUsage_ListAsync(string subscriptionId, string location, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ContainerInstance/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/usages&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UsageListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of container groups in the specified subscription and resource group.
		/// Get a list of container groups in a specified subscription and resource group. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
		/// ContainerGroups_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <returns>OK</returns>
		public async Task<ContainerGroupListResult> ContainerGroups_ListByResourceGroupAsync(string subscriptionId, string api_version, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerGroupListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the properties of the specified container group.
		/// Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
		/// ContainerGroups_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="containerGroupName">The name of the container group.</param>
		/// <returns>OK</returns>
		public async Task<ContainerGroup> ContainerGroups_GetAsync(string subscriptionId, string api_version, string resourceGroupName, string containerGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups/"+ (containerGroupName==null? "" : System.Uri.EscapeDataString(containerGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update container groups.
		/// Create or update container groups with specified configurations.
		/// ContainerGroups_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="containerGroupName">The name of the container group.</param>
		/// <param name="requestBody">The properties of the container group to be created or updated.</param>
		/// <returns>OK</returns>
		public async Task<ContainerGroup> ContainerGroups_CreateOrUpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string containerGroupName, ContainerGroup requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups/"+ (containerGroupName==null? "" : System.Uri.EscapeDataString(containerGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the specified container group.
		/// Delete the specified container group in the specified subscription and resource group. The operation does not delete other resources provided by the user, such as volumes.
		/// ContainerGroups_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="containerGroupName">The name of the container group.</param>
		/// <returns>OK</returns>
		public async Task<ContainerGroup> ContainerGroups_DeleteAsync(string subscriptionId, string api_version, string resourceGroupName, string containerGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups/"+ (containerGroupName==null? "" : System.Uri.EscapeDataString(containerGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update container groups.
		/// Updates container group tags with specified values.
		/// ContainerGroups_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="containerGroupName">The name of the container group.</param>
		/// <param name="requestBody">The container group resource with just the tags to be updated.</param>
		/// <returns>OK</returns>
		public async Task<ContainerGroup> ContainerGroups_UpdateAsync(string subscriptionId, string api_version, string resourceGroupName, string containerGroupName, Resource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups/"+ (containerGroupName==null? "" : System.Uri.EscapeDataString(containerGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Executes a command in a specific container instance.
		/// Executes a command for a specific container instance in a specified resource group and container group.
		/// Container_ExecuteCommand subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/exec
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="containerGroupName">The name of the container group.</param>
		/// <param name="containerName">The name of the container instance.</param>
		/// <param name="requestBody">The request for the exec command.</param>
		/// <returns>OK</returns>
		public async Task<ContainerExecResponse> Container_ExecuteCommandAsync(string subscriptionId, string api_version, string resourceGroupName, string containerGroupName, string containerName, ContainerExecRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups/"+ (containerGroupName==null? "" : System.Uri.EscapeDataString(containerGroupName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/exec&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerExecResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the logs for a specified container instance.
		/// Get the logs for a specified container instance in a specified resource group and container group.
		/// Container_ListLogs subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/logs
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="containerGroupName">The name of the container group.</param>
		/// <param name="containerName">The name of the container instance.</param>
		/// <param name="tail">The number of lines to show from the tail of the container instance log. If not provided, all available logs are shown up to 4mb.</param>
		/// <returns>OK</returns>
		public async Task<Logs> Container_ListLogsAsync(string subscriptionId, string api_version, string resourceGroupName, string containerGroupName, string containerName, int tail)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups/"+ (containerGroupName==null? "" : System.Uri.EscapeDataString(containerGroupName))+"/containers/"+ (containerName==null? "" : System.Uri.EscapeDataString(containerName))+"/logs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&tail="+tail;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Logs>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restarts all containers in a container group.
		/// Restarts all containers in a container group in place. If container image has updates, new image will be downloaded.
		/// ContainerGroups_Restart subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/restart
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="containerGroupName">The name of the container group.</param>
		public async Task ContainerGroups_RestartAsync(string subscriptionId, string api_version, string resourceGroupName, string containerGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups/"+ (containerGroupName==null? "" : System.Uri.EscapeDataString(containerGroupName))+"/restart&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts all containers in a container group.
		/// Starts all containers in a container group.
		/// ContainerGroups_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/start
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="containerGroupName">The name of the container group.</param>
		public async Task ContainerGroups_StartAsync(string subscriptionId, string api_version, string resourceGroupName, string containerGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups/"+ (containerGroupName==null? "" : System.Uri.EscapeDataString(containerGroupName))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops all containers in a container group.
		/// Stops all containers in a container group. Compute resources will be deallocated and billing will stop.
		/// ContainerGroups_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/stop
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="containerGroupName">The name of the container group.</param>
		public async Task ContainerGroups_StopAsync(string subscriptionId, string api_version, string resourceGroupName, string containerGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerInstance/containerGroups/"+ (containerGroupName==null? "" : System.Uri.EscapeDataString(containerGroupName))+"/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the container instance service association link for the subnet.
		/// Delete the container instance service association link for the subnet. This operation unblocks user from deleting subnet.
		/// ServiceAssociationLink_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}/providers/Microsoft.ContainerInstance/serviceAssociationLinks/default
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="virtualNetworkName">The name of the virtual network.</param>
		/// <param name="subnetName">The name of the subnet.</param>
		/// <returns>OK</returns>
		public async Task ServiceAssociationLink_DeleteAsync(string subscriptionId, string api_version, string resourceGroupName, string virtualNetworkName, string subnetName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/virtualNetworks/"+ (virtualNetworkName==null? "" : System.Uri.EscapeDataString(virtualNetworkName))+"/subnets/"+ (subnetName==null? "" : System.Uri.EscapeDataString(subnetName))+"/providers/Microsoft.ContainerInstance/serviceAssociationLinks/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
