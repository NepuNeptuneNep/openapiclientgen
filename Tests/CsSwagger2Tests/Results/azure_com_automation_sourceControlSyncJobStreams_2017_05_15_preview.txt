//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Definition of the source control sync job stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlSyncJobStream
	{
		
		/// <summary>
		/// Resource id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Definition of source control sync job stream properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SourceControlSyncJobStreamProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Definition of the source control sync job stream by id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlSyncJobStreamById
	{
		
		/// <summary>
		/// Resource id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Definition of source control sync job stream by id properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SourceControlSyncJobStreamByIdProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Definition of source control sync job stream by id properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlSyncJobStreamByIdProperties
	{
		
		/// <summary>
		/// The sync job stream id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceControlSyncJobStreamId")]
		public string SourceControlSyncJobStreamId { get; set; }
		
		/// <summary>
		/// The text of the sync job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamText")]
		public string StreamText { get; set; }
		
		/// <summary>
		/// The type of the sync job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamType")]
		public System.Nullable<SourceControlSyncJobStreamByIdPropertiesStreamType> StreamType { get; set; }
		
		/// <summary>
		/// The summary of the sync job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// The time of the sync job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
		
		/// <summary>
		/// The values of the job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Collections.Generic.Dictionary<string, object> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SourceControlSyncJobStreamByIdPropertiesStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Output = 1,
	}
	
	/// <summary>
	/// Definition of source control sync job stream properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlSyncJobStreamProperties
	{
		
		/// <summary>
		/// The sync job stream id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceControlSyncJobStreamId")]
		public string SourceControlSyncJobStreamId { get; set; }
		
		/// <summary>
		/// The type of the sync job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamType")]
		public SourceControlSyncJobStreamByIdPropertiesStreamType StreamType { get; set; }
		
		/// <summary>
		/// The summary of the sync job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// The time of the sync job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	/// <summary>
	/// The response model for the list source control sync job streams operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlSyncJobStreamsListBySyncJob
	{
		
		/// <summary>
		/// The next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of source control sync job streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SourceControlSyncJobStream[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve a list of sync job streams identified by sync job id.
		/// SourceControlSyncJobStreams_ListBySyncJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}/streams
		/// </summary>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="sourceControlName">The source control name.</param>
		/// <param name="sourceControlSyncJobId">The source control sync job id.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<SourceControlSyncJobStreamsListBySyncJob> SourceControlSyncJobStreams_ListBySyncJobAsync(string resourceGroupName, string automationAccountName, string sourceControlName, string sourceControlSyncJobId, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/sourceControls/"+ (sourceControlName==null? "" : System.Uri.EscapeDataString(sourceControlName))+"/sourceControlSyncJobs/"+ (sourceControlSyncJobId==null? "" : System.Uri.EscapeDataString(sourceControlSyncJobId))+"/streams&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceControlSyncJobStreamsListBySyncJob>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a sync job stream identified by stream id.
		/// SourceControlSyncJobStreams_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}/streams/{streamId}
		/// </summary>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="sourceControlName">The source control name.</param>
		/// <param name="sourceControlSyncJobId">The source control sync job id.</param>
		/// <param name="streamId">The id of the sync job stream.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<SourceControlSyncJobStreamById> SourceControlSyncJobStreams_GetAsync(string resourceGroupName, string automationAccountName, string sourceControlName, string sourceControlSyncJobId, string streamId, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/sourceControls/"+ (sourceControlName==null? "" : System.Uri.EscapeDataString(sourceControlName))+"/sourceControlSyncJobs/"+ (sourceControlSyncJobId==null? "" : System.Uri.EscapeDataString(sourceControlSyncJobId))+"/streams/"+ (streamId==null? "" : System.Uri.EscapeDataString(streamId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceControlSyncJobStreamById>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
