//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An error response from a policy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// The resource management error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public object Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
	}
	
	/// <summary>
	/// The parameter definitions for parameters used in the policy. The keys are the parameter names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterDefinitions
	{
	}
	
	/// <summary>
	/// The definition of a parameter that can be provided to the policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ParameterDefinitionsValue
	{
		
		/// <summary>
		/// The allowed values for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public string[] AllowedValues { get; set; }
		
		/// <summary>
		/// The default value for the parameter if no value is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// General metadata for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ParameterDefinitionsValueMetadata Metadata { get; set; }
		
		/// <summary>
		/// The data type of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ParameterDefinitionsValueType> Type { get; set; }
	}
	
	public class ParameterDefinitionsValueMetadata
	{
		
		/// <summary>
		/// The description of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ParameterDefinitionsValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Array = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Object = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Integer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Float = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DateTime = 6,
	}
	
	/// <summary>
	/// The policy definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyDefinition
	{
		
		/// <summary>
		/// The ID of the policy definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the policy definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The policy definition properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PolicyDefinitionProperties Properties { get; set; }
		
		/// <summary>
		/// The type of the resource (Microsoft.Authorization/policyDefinitions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of policy definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyDefinitionListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of policy definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PolicyDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The policy definition properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PolicyDefinitionProperties
	{
		
		/// <summary>
		/// The policy definition description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The display name of the policy definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		/// <summary>
		/// The parameter definitions for parameters used in the policy. The keys are the parameter names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ParameterDefinitions Parameters { get; set; }
		
		/// <summary>
		/// The policy rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyRule")]
		public string PolicyRule { get; set; }
		
		/// <summary>
		/// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyType")]
		public System.Nullable<PolicyDefinitionPropertiesPolicyType> PolicyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PolicyDefinitionPropertiesPolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BuiltIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Static = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve built-in policy definitions
		/// This operation retrieves a list of all the built-in policy definitions.
		/// PolicyDefinitions_ListBuiltIn providers/Microsoft.Authorization/policyDefinitions
		/// </summary>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <returns>OK - Returns an array of built-in policy definitions.</returns>
		public async Task<PolicyDefinitionListResult> PolicyDefinitions_ListBuiltInAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Authorization/policyDefinitions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PolicyDefinitionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a built-in policy definition.
		/// This operation retrieves the built-in policy definition with the given name.
		/// PolicyDefinitions_GetBuiltIn providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}
		/// </summary>
		/// <param name="policyDefinitionName">The name of the built-in policy definition to get.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <returns>OK - Returns information about the built-in policy definition.</returns>
		public async Task<PolicyDefinition> PolicyDefinitions_GetBuiltInAsync(string policyDefinitionName, string api_version)
		{
			var requestUri = "providers/Microsoft.Authorization/policyDefinitions/"+ (policyDefinitionName==null? "" : System.Uri.EscapeDataString(policyDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PolicyDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve policy definitions in a management group
		/// This operation retrieves a list of all the policy definitions in a given management group.
		/// PolicyDefinitions_ListByManagementGroup providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions
		/// </summary>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="managementGroupId">The ID of the management group.</param>
		/// <returns>OK - Returns an array of policy definitions.</returns>
		public async Task<PolicyDefinitionListResult> PolicyDefinitions_ListByManagementGroupAsync(string api_version, string managementGroupId)
		{
			var requestUri = "providers/Microsoft.Management/managementgroups/"+ (managementGroupId==null? "" : System.Uri.EscapeDataString(managementGroupId))+"/providers/Microsoft.Authorization/policyDefinitions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PolicyDefinitionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a policy definition in a management group.
		/// This operation retrieves the policy definition in the given management group with the given name.
		/// PolicyDefinitions_GetAtManagementGroup providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}
		/// </summary>
		/// <param name="policyDefinitionName">The name of the policy definition to get.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="managementGroupId">The ID of the management group.</param>
		/// <returns>OK - Returns information about the policy definition.</returns>
		public async Task<PolicyDefinition> PolicyDefinitions_GetAtManagementGroupAsync(string policyDefinitionName, string api_version, string managementGroupId)
		{
			var requestUri = "providers/Microsoft.Management/managementgroups/"+ (managementGroupId==null? "" : System.Uri.EscapeDataString(managementGroupId))+"/providers/Microsoft.Authorization/policyDefinitions/"+ (policyDefinitionName==null? "" : System.Uri.EscapeDataString(policyDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PolicyDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a policy definition in a management group.
		/// This operation creates or updates a policy definition in the given management group with the given name.
		/// PolicyDefinitions_CreateOrUpdateAtManagementGroup providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}
		/// </summary>
		/// <param name="policyDefinitionName">The name of the policy definition to create.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="managementGroupId">The ID of the management group.</param>
		/// <param name="requestBody">The policy definition properties.</param>
		public async Task PolicyDefinitions_CreateOrUpdateAtManagementGroupAsync(string policyDefinitionName, string api_version, string managementGroupId, PolicyDefinition requestBody)
		{
			var requestUri = "providers/Microsoft.Management/managementgroups/"+ (managementGroupId==null? "" : System.Uri.EscapeDataString(managementGroupId))+"/providers/Microsoft.Authorization/policyDefinitions/"+ (policyDefinitionName==null? "" : System.Uri.EscapeDataString(policyDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a policy definition in a management group.
		/// This operation deletes the policy definition in the given management group with the given name.
		/// PolicyDefinitions_DeleteAtManagementGroup providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}
		/// </summary>
		/// <param name="policyDefinitionName">The name of the policy definition to delete.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="managementGroupId">The ID of the management group.</param>
		/// <returns>OK</returns>
		public async Task PolicyDefinitions_DeleteAtManagementGroupAsync(string policyDefinitionName, string api_version, string managementGroupId)
		{
			var requestUri = "providers/Microsoft.Management/managementgroups/"+ (managementGroupId==null? "" : System.Uri.EscapeDataString(managementGroupId))+"/providers/Microsoft.Authorization/policyDefinitions/"+ (policyDefinitionName==null? "" : System.Uri.EscapeDataString(policyDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves policy definitions in a subscription
		/// This operation retrieves a list of all the policy definitions in a given subscription.
		/// PolicyDefinitions_List subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions
		/// </summary>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of policy definitions.</returns>
		public async Task<PolicyDefinitionListResult> PolicyDefinitions_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Authorization/policyDefinitions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PolicyDefinitionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a policy definition in a subscription.
		/// This operation retrieves the policy definition in the given subscription with the given name.
		/// PolicyDefinitions_Get subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}
		/// </summary>
		/// <param name="policyDefinitionName">The name of the policy definition to get.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns information about the policy definition.</returns>
		public async Task<PolicyDefinition> PolicyDefinitions_GetAsync(string policyDefinitionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Authorization/policyDefinitions/"+ (policyDefinitionName==null? "" : System.Uri.EscapeDataString(policyDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PolicyDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a policy definition in a subscription.
		/// This operation creates or updates a policy definition in the given subscription with the given name.
		/// PolicyDefinitions_CreateOrUpdate subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}
		/// </summary>
		/// <param name="policyDefinitionName">The name of the policy definition to create.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">The policy definition properties.</param>
		public async Task PolicyDefinitions_CreateOrUpdateAsync(string policyDefinitionName, string api_version, string subscriptionId, PolicyDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Authorization/policyDefinitions/"+ (policyDefinitionName==null? "" : System.Uri.EscapeDataString(policyDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a policy definition in a subscription.
		/// This operation deletes the policy definition in the given subscription with the given name.
		/// PolicyDefinitions_Delete subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}
		/// </summary>
		/// <param name="policyDefinitionName">The name of the policy definition to delete.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK</returns>
		public async Task PolicyDefinitions_DeleteAsync(string policyDefinitionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Authorization/policyDefinitions/"+ (policyDefinitionName==null? "" : System.Uri.EscapeDataString(policyDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
