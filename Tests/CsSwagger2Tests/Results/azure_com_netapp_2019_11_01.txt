//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Dimension of blobs, possibly be blob type or access tier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Dimension
	{
		
		/// <summary>
		/// Display name of dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Display name of dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Metric specification of operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricSpecification
	{
		
		/// <summary>
		/// Aggregation type could be Average.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public string AggregationType { get; set; }
		
		/// <summary>
		/// The category this metric specification belong to, could be Capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Dimensions of blobs, including blob type and access tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Display description of metric specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDescription")]
		public string DisplayDescription { get; set; }
		
		/// <summary>
		/// Display name of metric specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The property to decide fill gap with zero or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fillGapWithZero")]
		public System.Nullable<System.Boolean> FillGapWithZero { get; set; }
		
		/// <summary>
		/// Name of metric specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Account Resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceIdDimensionNameOverride")]
		public string ResourceIdDimensionNameOverride { get; set; }
		
		/// <summary>
		/// Unit could be Bytes or Count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Microsoft.NetApp REST API operation definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Display metadata associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Properties of operation, include metric specifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OperationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Cloud Volume operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// List of Storage operations supported by the Storage resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of operation, include metric specifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationProperties
	{
		
		/// <summary>
		/// One property of operation, include metric specifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceSpecification")]
		public ServiceSpecification ServiceSpecification { get; set; }
	}
	
	/// <summary>
	/// Information regarding availability of a resource name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceNameAvailability
	{
		
		/// <summary>
		/// <code>true</code> indicates name is valid and available. <code>false</code> indicates the name is invalid, unavailable, or both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAvailable")]
		public System.Nullable<System.Boolean> IsAvailable { get; set; }
		
		/// <summary>
		/// If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// <code>Invalid</code> indicates the name provided does not match Azure App Service naming requirements. <code>AlreadyExists</code> indicates that the name is already in use and is therefore unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<ResourceNameAvailabilityReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceNameAvailabilityReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// Resource name availability request content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceNameAvailabilityRequest
	{
		
		/// <summary>
		/// Resource name to verify.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource group name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Resource type used for verification.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ResourceNameAvailabilityRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceNameAvailabilityRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.NetApp/netAppAccounts")]
		Microsoft_NetApp_netAppAccounts = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.NetApp/netAppAccounts/capacityPools")]
		Microsoft_NetApp_netAppAccounts_capacityPools = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.NetApp/netAppAccounts/capacityPools/volumes")]
		Microsoft_NetApp_netAppAccounts_capacityPools_volumes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots")]
		Microsoft_NetApp_netAppAccounts_capacityPools_volumes_snapshots = 3,
	}
	
	/// <summary>
	/// One property of operation, include metric specifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceSpecification
	{
		
		/// <summary>
		/// Metric specifications of operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricSpecifications")]
		public MetricSpecification[] MetricSpecifications { get; set; }
	}
	
	/// <summary>
	/// NetApp account properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountProperties
	{
		
		/// <summary>
		/// Active Directories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeDirectories")]
		public ActiveDirectory[] ActiveDirectories { get; set; }
		
		/// <summary>
		/// Azure lifecycle management
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Active Directory
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActiveDirectory
	{
		
		/// <summary>
		/// Id of the Active Directory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeDirectoryId")]
		public string ActiveDirectoryId { get; set; }
		
		/// <summary>
		/// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dns")]
		public string Dns { get; set; }
		
		/// <summary>
		/// Name of the Active Directory domain
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The Organizational Unit (OU) within the Windows Active Directory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationalUnit")]
		public string OrganizationalUnit { get; set; }
		
		/// <summary>
		/// Plain text password of Active Directory domain administrator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The Active Directory site the service will limit Domain Controller discovery to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="site")]
		public string Site { get; set; }
		
		/// <summary>
		/// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smbServerName")]
		public string SmbServerName { get; set; }
		
		/// <summary>
		/// Status of the Active Directory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Username of Active Directory domain administrator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Authorize request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthorizeRequest
	{
		
		/// <summary>
		/// Resource id of the remote volume
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteVolumeResourceId")]
		public string RemoteVolumeResourceId { get; set; }
	}
	
	/// <summary>
	/// Capacity pool resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CapacityPool
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pool properties
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PoolProperties Properties { get; set; }
		
		/// <summary>
		/// Tags are a list of key-value pairs that describe the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTags Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Pool properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolProperties
	{
		
		/// <summary>
		/// UUID v4 used to identify the Pool
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")]
		public string PoolId { get; set; }
		
		/// <summary>
		/// Azure lifecycle management
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The service level of the file system
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(PoolPropertiesServiceLevel.Premium)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceLevel")]
		public PoolPropertiesServiceLevel ServiceLevel { get; set; } = PoolPropertiesServiceLevel.Premium;
		
		/// <summary>
		/// Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
		/// Required
		/// Minimum: 4398046511104
		/// Maximum: 549755813888000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		[System.ComponentModel.DataAnnotations.Range(4398046511104, 549755813888000)]
		public long Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PoolPropertiesServiceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ultra = 2,
	}
	
	/// <summary>
	/// Tags are a list of key-value pairs that describe the resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceTags
	{
	}
	
	/// <summary>
	/// List of capacity pool resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CapacityPoolList
	{
		
		/// <summary>
		/// List of Capacity pools
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CapacityPool[] Value { get; set; }
	}
	
	/// <summary>
	/// Capacity pool patch resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CapacityPoolPatch
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Patchable pool properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PoolPatchProperties Properties { get; set; }
		
		/// <summary>
		/// Tags are a list of key-value pairs that describe the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTags Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Patchable pool properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolPatchProperties
	{
		
		/// <summary>
		/// The service level of the file system
		/// </summary>
		[System.ComponentModel.DefaultValue(PoolPropertiesServiceLevel.Premium)]
		[System.Runtime.Serialization.DataMember(Name="serviceLevel")]
		public PoolPropertiesServiceLevel ServiceLevel { get; set; } = PoolPropertiesServiceLevel.Premium;
		
		/// <summary>
		/// Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
		/// Minimum: 4398046511104
		/// Maximum: 549755813888000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		[System.ComponentModel.DataAnnotations.Range(4398046511104, 549755813888000)]
		public System.Nullable<System.Int64> Size { get; set; }
	}
	
	/// <summary>
	/// Volume Export Policy Rule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExportPolicyRule
	{
		
		/// <summary>
		/// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedClients")]
		public string AllowedClients { get; set; }
		
		/// <summary>
		/// Allows CIFS protocol
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cifs")]
		public System.Nullable<System.Boolean> Cifs { get; set; }
		
		/// <summary>
		/// Allows NFSv3 protocol
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfsv3")]
		public System.Nullable<System.Boolean> Nfsv3 { get; set; }
		
		/// <summary>
		/// Allows NFSv4.1 protocol
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfsv41")]
		public System.Nullable<System.Boolean> Nfsv41 { get; set; }
		
		/// <summary>
		/// Order index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleIndex")]
		public System.Nullable<System.Int32> RuleIndex { get; set; }
		
		/// <summary>
		/// Read only access
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unixReadOnly")]
		public System.Nullable<System.Boolean> UnixReadOnly { get; set; }
		
		/// <summary>
		/// Read and write access
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unixReadWrite")]
		public System.Nullable<System.Boolean> UnixReadWrite { get; set; }
	}
	
	/// <summary>
	/// Mount Target
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MountTarget
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Mount target properties
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MountTargetProperties Properties { get; set; }
		
		/// <summary>
		/// Tags are a list of key-value pairs that describe the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTags Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Mount target properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MountTargetProperties
	{
		
		/// <summary>
		/// UUID v4 used to identify the MountTarget
		/// Required
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSystemId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")]
		public string FileSystemId { get; set; }
		
		/// <summary>
		/// The mount target's IPv4 address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// UUID v4 used to identify the MountTarget
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountTargetId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")]
		public string MountTargetId { get; set; }
		
		/// <summary>
		/// The SMB server's Fully Qualified Domain Name, FQDN
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smbServerFqdn")]
		public string SmbServerFqdn { get; set; }
	}
	
	/// <summary>
	/// List of Mount Targets
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MountTargetList
	{
		
		/// <summary>
		/// A list of Mount targets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MountTarget[] Value { get; set; }
	}
	
	/// <summary>
	/// NetApp account resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetAppAccount
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// NetApp account properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AccountProperties Properties { get; set; }
		
		/// <summary>
		/// Tags are a list of key-value pairs that describe the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTags Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of NetApp account resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetAppAccountList
	{
		
		/// <summary>
		/// Multiple NetApp accounts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NetAppAccount[] Value { get; set; }
	}
	
	/// <summary>
	/// NetApp account patch resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetAppAccountPatch
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// NetApp account properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AccountProperties Properties { get; set; }
		
		/// <summary>
		/// Tags are a list of key-value pairs that describe the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTags Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Replication properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReplicationObject
	{
		
		/// <summary>
		/// Indicates whether the local volume is the source or destination for the Volume Replication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointType")]
		public System.Nullable<ReplicationObjectEndpointType> EndpointType { get; set; }
		
		/// <summary>
		/// The remote region for the other end of the Volume Replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteVolumeRegion")]
		public string RemoteVolumeRegion { get; set; }
		
		/// <summary>
		/// The resource ID of the remote volume.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteVolumeResourceId")]
		public string RemoteVolumeResourceId { get; set; }
		
		/// <summary>
		/// Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationId")]
		public string ReplicationId { get; set; }
		
		/// <summary>
		/// Schedule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationSchedule")]
		public ReplicationObjectReplicationSchedule ReplicationSchedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ReplicationObjectEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		src = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dst = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ReplicationObjectReplicationSchedule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10minutely = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hourly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		daily = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		weekly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monthly = 4,
	}
	
	/// <summary>
	/// Replication status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReplicationStatus
	{
		
		/// <summary>
		/// Displays error message if the replication is in an error state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Replication health check
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthy")]
		public System.Nullable<System.Boolean> Healthy { get; set; }
		
		/// <summary>
		/// The status of the replication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mirrorState")]
		public System.Nullable<ReplicationStatusMirrorState> MirrorState { get; set; }
		
		/// <summary>
		/// Status of the mirror relationship
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipStatus")]
		public System.Nullable<ReplicationStatusRelationshipStatus> RelationshipStatus { get; set; }
		
		/// <summary>
		/// The progress of the replication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalProgress")]
		public string TotalProgress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ReplicationStatusMirrorState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Uninitialized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mirrored = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Broken = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ReplicationStatusRelationshipStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Idle = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Transferring = 1,
	}
	
	/// <summary>
	/// Snapshot of a Volume
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Snapshot
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Snapshot properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SnapshotProperties Properties { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Snapshot properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotProperties
	{
		
		/// <summary>
		/// The creation date of the snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// UUID v4 used to identify the FileSystem
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSystemId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")]
		public string FileSystemId { get; set; }
		
		/// <summary>
		/// Azure lifecycle management
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// UUID v4 used to identify the Snapshot
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")]
		public string SnapshotId { get; set; }
	}
	
	/// <summary>
	/// Snapshot patch
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotPatch
	{
	}
	
	/// <summary>
	/// List of Snapshots
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SnapshotsList
	{
		
		/// <summary>
		/// A list of Snapshots
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Snapshot[] Value { get; set; }
	}
	
	/// <summary>
	/// Volume resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Volume
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Volume properties
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VolumeProperties Properties { get; set; }
		
		/// <summary>
		/// Tags are a list of key-value pairs that describe the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTags Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Volume properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VolumeProperties
	{
		
		/// <summary>
		/// Unique Baremetal Tenant Identifier.
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baremetalTenantId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")]
		public string BaremetalTenantId { get; set; }
		
		/// <summary>
		/// A unique file path for the volume. Used when creating mount targets
		/// Required
		/// Max length: 80
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9\-]{0,79}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(80)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z][a-zA-Z0-9\-]{0,79}$")]
		public string CreationToken { get; set; }
		
		/// <summary>
		/// DataProtection type volumes include an object containing details of the replication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataProtection")]
		public object DataProtection { get; set; }
		
		/// <summary>
		/// Set of export policy rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportPolicy")]
		public object ExportPolicy { get; set; }
		
		/// <summary>
		/// Unique FileSystem Identifier.
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSystemId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")]
		public string FileSystemId { get; set; }
		
		/// <summary>
		/// Restoring
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRestoring")]
		public System.Nullable<System.Boolean> IsRestoring { get; set; }
		
		/// <summary>
		/// List of mount targets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountTargets")]
		public object MountTargets { get; set; }
		
		/// <summary>
		/// Set of protocol types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocolTypes")]
		public string[] ProtocolTypes { get; set; }
		
		/// <summary>
		/// Azure lifecycle management
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The service level of the file system
		/// </summary>
		[System.ComponentModel.DefaultValue(PoolPropertiesServiceLevel.Premium)]
		[System.Runtime.Serialization.DataMember(Name="serviceLevel")]
		public PoolPropertiesServiceLevel ServiceLevel { get; set; } = PoolPropertiesServiceLevel.Premium;
		
		/// <summary>
		/// UUID v4 or resource identifier used to identify the Snapshot.
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\?([^\/]*[\/])*)([^\/]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotId")]
		[System.ComponentModel.DataAnnotations.MinLength(36)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\?([^\/]*[\/])*)([^\/]+)$")]
		public string SnapshotId { get; set; }
		
		/// <summary>
		/// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
		/// Required
		/// Minimum: 107374182400
		/// Maximum: 109951162777600
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usageThreshold")]
		[System.ComponentModel.DataAnnotations.Range(107374182400, 109951162777600)]
		public long UsageThreshold { get; set; }
		
		/// <summary>
		/// What type of volume is this
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeType")]
		public string VolumeType { get; set; }
	}
	
	/// <summary>
	/// List of volume resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VolumeList
	{
		
		/// <summary>
		/// List of volumes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Volume[] Value { get; set; }
	}
	
	/// <summary>
	/// Volume patch resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VolumePatch
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Patchable volume properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VolumePatchProperties Properties { get; set; }
		
		/// <summary>
		/// Tags are a list of key-value pairs that describe the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTags Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Patchable volume properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VolumePatchProperties
	{
		
		/// <summary>
		/// Set of export policy rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportPolicy")]
		public object ExportPolicy { get; set; }
		
		/// <summary>
		/// The service level of the file system
		/// </summary>
		[System.ComponentModel.DefaultValue(PoolPropertiesServiceLevel.Premium)]
		[System.Runtime.Serialization.DataMember(Name="serviceLevel")]
		public PoolPropertiesServiceLevel ServiceLevel { get; set; } = PoolPropertiesServiceLevel.Premium;
		
		/// <summary>
		/// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
		/// Minimum: 107374182400
		/// Maximum: 109951162777600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageThreshold")]
		[System.ComponentModel.DataAnnotations.Range(107374182400, 109951162777600)]
		public System.Nullable<System.Int64> UsageThreshold { get; set; }
	}
	
	/// <summary>
	/// revert a volume to the snapshot
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VolumeRevert
	{
		
		/// <summary>
		/// Resource id of the snapshot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotId")]
		public string SnapshotId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Describes the Resource Provider
		/// Lists all of the available Microsoft.NetApp Rest API operations
		/// Operations_List providers/Microsoft.NetApp/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.NetApp/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check file path availability
		/// Check if a file path is available.
		/// NetAppResource_CheckFilePathAvailability subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkFilePathAvailability
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The location</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">File path availability request.</param>
		/// <returns>OK</returns>
		public async Task<ResourceNameAvailability> NetAppResource_CheckFilePathAvailabilityAsync(string subscriptionId, string location, string api_version, ResourceNameAvailabilityRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.NetApp/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/checkFilePathAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceNameAvailability>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Check resource name availability
		/// Check if a resource name is available.
		/// NetAppResource_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.NetApp/locations/{location}/checkNameAvailability
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The location</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Name availability request.</param>
		/// <returns>OK</returns>
		public async Task<ResourceNameAvailability> NetAppResource_CheckNameAvailabilityAsync(string subscriptionId, string location, string api_version, ResourceNameAvailabilityRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.NetApp/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceNameAvailability>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describe all NetApp Accounts in a resource group
		/// List and describe all NetApp accounts in the resource group.
		/// Accounts_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<NetAppAccountList> Accounts_ListAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NetAppAccountList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe a NetApp Account
		/// Get the NetApp account
		/// Accounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<NetAppAccount> Accounts_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NetAppAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a NetApp account
		/// Create or update the specified NetApp account within the resource group
		/// Accounts_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">NetApp Account object supplied in the body of the operation.</param>
		/// <returns>OK - account updated</returns>
		public async Task<NetAppAccount> Accounts_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, NetAppAccount requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NetAppAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a NetApp account
		/// Delete the specified NetApp account
		/// Accounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		public async Task Accounts_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a NetApp account
		/// Patch the specified NetApp account
		/// Accounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">NetApp Account object supplied in the body of the operation.</param>
		/// <returns>OK - account updated</returns>
		public async Task<NetAppAccount> Accounts_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, NetAppAccountPatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NetAppAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describe all Capacity Pools
		/// List all capacity pools in the NetApp Account
		/// Pools_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<CapacityPoolList> Pools_ListAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CapacityPoolList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe a Capacity Pool
		/// Get details of the specified capacity pool
		/// Pools_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<CapacityPool> Pools_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CapacityPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or Update the specified capacity pool within the resource group
		/// Create or Update a capacity pool
		/// Pools_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Capacity pool object supplied in the body of the operation.</param>
		/// <returns>OK - pool updated</returns>
		public async Task<CapacityPool> Pools_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string api_version, CapacityPool requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CapacityPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a capacity pool
		/// Delete the specified capacity pool
		/// Pools_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		public async Task Pools_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a capacity pool
		/// Patch the specified capacity pool
		/// Pools_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Capacity pool object supplied in the body of the operation.</param>
		/// <returns>OK</returns>
		public async Task<CapacityPool> Pools_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string api_version, CapacityPoolPatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CapacityPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describe all volumes
		/// List all volumes within the capacity pool
		/// Volumes_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<VolumeList> Volumes_ListAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VolumeList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe a volume
		/// Get the details of the specified volume
		/// Volumes_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<Volume> Volumes_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Volume>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or Update a volume
		/// Create or update the specified volume within the capacity pool
		/// Volumes_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Volume object supplied in the body of the operation.</param>
		/// <returns>Ok - volume updated</returns>
		public async Task<Volume> Volumes_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version, Volume requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Volume>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a volume
		/// Delete the specified volume
		/// Volumes_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		public async Task Volumes_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a volume
		/// Patch the specified volume
		/// Volumes_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Volume object supplied in the body of the operation.</param>
		/// <returns>OK</returns>
		public async Task<Volume> Volumes_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version, VolumePatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Volume>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authorize source volume replication
		/// Authorize the replication connection on the source volume
		/// Volumes_AuthorizeReplication subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/authorizeReplication
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Authorize request object supplied in the body of the operation.</param>
		/// <returns>OK - terminal state</returns>
		public async Task Volumes_AuthorizeReplicationAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version, AuthorizeRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/authorizeReplication&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Break volume replication
		/// Break the replication connection on the destination volume
		/// Volumes_BreakReplication subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/breakReplication
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK - terminal state</returns>
		public async Task Volumes_BreakReplicationAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/breakReplication&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete volume replication
		/// Delete the replication connection on the destination volume, and send release to the source replication
		/// Volumes_DeleteReplication subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/deleteReplication
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK - terminal state</returns>
		public async Task Volumes_DeleteReplicationAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/deleteReplication&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get volume replication status
		/// Get the status of the replication
		/// Volumes_ReplicationStatus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/replicationStatus
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<ReplicationStatus> Volumes_ReplicationStatusAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/replicationStatus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReplicationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resync volume replication
		/// Resync the connection on the destination volume. If the operation is ran on the source volume it will reverse-resync the connection and sync from source to destination.
		/// Volumes_ResyncReplication subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/resyncReplication
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK - terminal state</returns>
		public async Task Volumes_ResyncReplicationAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/resyncReplication&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revert a volume to one of its snapshots
		/// Revert a volume to the snapshot specified in the body
		/// Volumes_Revert subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/revert
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Object for snapshot to revert supplied in the body of the operation.</param>
		/// <returns>OK - terminal state</returns>
		public async Task Volumes_RevertAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version, VolumeRevert requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/revert&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describe all snapshots
		/// List all snapshots associated with the volume
		/// Snapshots_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<SnapshotsList> Snapshots_ListAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/snapshots&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SnapshotsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe a snapshot
		/// Get details of the specified snapshot
		/// Snapshots_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="snapshotName">The name of the mount target</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task<Snapshot> Snapshots_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string snapshotName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Snapshot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a snapshot
		/// Create the specified snapshot within the given volume
		/// Snapshots_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="snapshotName">The name of the mount target</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Snapshot object supplied in the body of the operation.</param>
		public async Task Snapshots_CreateAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string snapshotName, string api_version, Snapshot requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a snapshot
		/// Delete snapshot
		/// Snapshots_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="snapshotName">The name of the mount target</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <returns>OK</returns>
		public async Task Snapshots_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string snapshotName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a snapshot
		/// Patch a snapshot
		/// Snapshots_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="accountName">The name of the NetApp account</param>
		/// <param name="poolName">The name of the capacity pool</param>
		/// <param name="volumeName">The name of the volume</param>
		/// <param name="snapshotName">The name of the mount target</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="requestBody">Snapshot object supplied in the body of the operation.</param>
		/// <returns>OK</returns>
		public async Task<Snapshot> Snapshots_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string poolName, string volumeName, string snapshotName, string api_version, SnapshotPatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.NetApp/netAppAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/capacityPools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/volumes/"+ (volumeName==null? "" : System.Uri.EscapeDataString(volumeName))+"/snapshots/"+ (snapshotName==null? "" : System.Uri.EscapeDataString(snapshotName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Snapshot>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
