//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// ARM resource for a app service plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppServicePlanPatchResource
	{
		
		/// <summary>
		/// AppServicePlanPatchResource resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of hostname bindings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HybridConnectionCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public HybridConnectionCollectionValue[] HybridConnectionCollectionValue { get; set; }
	}
	
	public class HybridConnectionCollectionValue
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Hybrid Connection key contract. This has the send key name and value for a Hybrid Connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HybridConnectionKey
	{
		
		/// <summary>
		/// HybridConnectionKey resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Hybrid Connection limits contract. This is used to return the plan limits of Hybrid Connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HybridConnectionLimits
	{
		
		/// <summary>
		/// HybridConnectionLimits resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all App Service plans for a subscription.
		/// Description for Get all App Service plans for a subscription.
		/// AppServicePlans_List subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms
		/// </summary>
		/// <param name="detailed">Specify <code>true</code> to return all App Service plan properties. The default is <code>false</code>, which returns a subset of the properties.
		/// Retrieval of all properties may increase the API latency.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_ListReturn> AppServicePlans_ListAsync(bool detailed, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/serverfarms?detailed="+detailed+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_ListReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all App Service plans in a resource group.
		/// Description for Get all App Service plans in a resource group.
		/// AppServicePlans_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_ListByResourceGroupReturn> AppServicePlans_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_ListByResourceGroupReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an App Service plan.
		/// Description for Get an App Service plan.
		/// AppServicePlans_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<AppServicePlans_GetReturn> AppServicePlans_GetAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_GetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an App Service Plan.
		/// Description for Creates or updates an App Service Plan.
		/// AppServicePlans_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of the App Service plan.</param>
		/// <returns>OK.</returns>
		public async Task<AppServicePlans_CreateOrUpdateReturn> AppServicePlans_CreateOrUpdateAsync(string resourceGroupName, string name, string subscriptionId, string api_version, AppServicePlans_CreateOrUpdatePutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_CreateOrUpdateReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an App Service plan.
		/// Description for Delete an App Service plan.
		/// AppServicePlans_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task AppServicePlans_DeleteAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an App Service Plan.
		/// Description for Creates or updates an App Service Plan.
		/// AppServicePlans_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of the App Service plan.</param>
		/// <returns>OK.</returns>
		public async Task<AppServicePlans_UpdateReturn> AppServicePlans_UpdateAsync(string resourceGroupName, string name, string subscriptionId, string api_version, AppServicePlanPatchResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_UpdateReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all capabilities of an App Service plan.
		/// Description for List all capabilities of an App Service plan.
		/// AppServicePlans_ListCapabilities subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/capabilities
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_ListCapabilitiesReturn[]> AppServicePlans_ListCapabilitiesAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/capabilities&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_ListCapabilitiesReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Hybrid Connection in use in an App Service plan.
		/// Description for Retrieve a Hybrid Connection in use in an App Service plan.
		/// AppServicePlans_GetHybridConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="namespaceName">Name of the Service Bus namespace.</param>
		/// <param name="relayName">Name of the Service Bus relay.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_GetHybridConnectionReturn> AppServicePlans_GetHybridConnectionAsync(string resourceGroupName, string name, string namespaceName, string relayName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_GetHybridConnectionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Hybrid Connection in use in an App Service plan.
		/// Description for Delete a Hybrid Connection in use in an App Service plan.
		/// AppServicePlans_DeleteHybridConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="namespaceName">Name of the Service Bus namespace.</param>
		/// <param name="relayName">Name of the Service Bus relay.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted hybrid connection</returns>
		public async Task AppServicePlans_DeleteHybridConnectionAsync(string resourceGroupName, string name, string namespaceName, string relayName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the send key name and value of a Hybrid Connection.
		/// Description for Get the send key name and value of a Hybrid Connection.
		/// AppServicePlans_ListHybridConnectionKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="namespaceName">The name of the Service Bus namespace.</param>
		/// <param name="relayName">The name of the Service Bus relay.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<HybridConnectionKey> AppServicePlans_ListHybridConnectionKeysAsync(string resourceGroupName, string name, string namespaceName, string relayName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HybridConnectionKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all apps that use a Hybrid Connection in an App Service Plan.
		/// Description for Get all apps that use a Hybrid Connection in an App Service Plan.
		/// AppServicePlans_ListWebAppsByHybridConnection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/sites
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="namespaceName">Name of the Hybrid Connection namespace.</param>
		/// <param name="relayName">Name of the Hybrid Connection relay.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<ResourceCollection> AppServicePlans_ListWebAppsByHybridConnectionAsync(string resourceGroupName, string name, string namespaceName, string relayName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionNamespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/relays/"+ (relayName==null? "" : System.Uri.EscapeDataString(relayName))+"/sites&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the maximum number of Hybrid Connections allowed in an App Service plan.
		/// Description for Get the maximum number of Hybrid Connections allowed in an App Service plan.
		/// AppServicePlans_GetHybridConnectionPlanLimit subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionPlanLimits/limit
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<HybridConnectionLimits> AppServicePlans_GetHybridConnectionPlanLimitAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionPlanLimits/limit&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HybridConnectionLimits>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Hybrid Connections in use in an App Service plan.
		/// Description for Retrieve all Hybrid Connections in use in an App Service plan.
		/// AppServicePlans_ListHybridConnections subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionRelays
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<HybridConnectionCollection> AppServicePlans_ListHybridConnectionsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/hybridConnectionRelays&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HybridConnectionCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restart all apps in an App Service plan.
		/// Description for Restart all apps in an App Service plan.
		/// AppServicePlans_RestartWebApps subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="softRestart">Specify <code>true</code> to perform a soft restart, applies the configuration settings and restarts the apps if necessary. The default is <code>false</code>, which always restarts and reprovisions the apps</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task AppServicePlans_RestartWebAppsAsync(string resourceGroupName, string name, bool softRestart, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/restartSites&softRestart="+softRestart+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all apps associated with an App Service plan.
		/// Description for Get all apps associated with an App Service plan.
		/// AppServicePlans_ListWebApps subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="skipToken">Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including) the skipToken. Otherwise, the resulting list contains web apps from the start of the list</param>
		/// <param name="filter">Supported filter: $filter=state eq running. Returns only web apps that are currently running</param>
		/// <param name="top">List page size. If specified, results are paged.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_ListWebAppsReturn> AppServicePlans_ListWebAppsAsync(string resourceGroupName, string name, string skipToken, string filter, string top, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/sites&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top=" + (top==null? "" : System.Uri.EscapeDataString(top))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_ListWebAppsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all selectable SKUs for a given App Service Plan
		/// Description for Gets all selectable SKUs for a given App Service Plan
		/// AppServicePlans_GetServerFarmSkus subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/skus
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of App Service Plan</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<string> AppServicePlans_GetServerFarmSkusAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/skus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets server farm usage information
		/// Description for Gets server farm usage information
		/// AppServicePlans_ListUsages subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/usages
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of App Service Plan</param>
		/// <param name="filter">Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2').</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_ListUsagesReturn> AppServicePlans_ListUsagesAsync(string resourceGroupName, string name, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/usages&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_ListUsagesReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Virtual Networks associated with an App Service plan.
		/// Description for Get all Virtual Networks associated with an App Service plan.
		/// AppServicePlans_ListVnets subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_ListVnetsReturn[]> AppServicePlans_ListVnetsAsync(string resourceGroupName, string name, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_ListVnetsReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Virtual Network associated with an App Service plan.
		/// Description for Get a Virtual Network associated with an App Service plan.
		/// AppServicePlans_GetVnetFromServerFarm subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<AppServicePlans_GetVnetFromServerFarmReturn> AppServicePlans_GetVnetFromServerFarmAsync(string resourceGroupName, string name, string vnetName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_GetVnetFromServerFarmReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Virtual Network gateway.
		/// Description for Get a Virtual Network gateway.
		/// AppServicePlans_GetVnetGateway subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="gatewayName">Name of the gateway. Only the 'primary' gateway is supported.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_GetVnetGatewayReturn> AppServicePlans_GetVnetGatewayAsync(string resourceGroupName, string name, string vnetName, string gatewayName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_GetVnetGatewayReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Virtual Network gateway.
		/// Description for Update a Virtual Network gateway.
		/// AppServicePlans_UpdateVnetGateway subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="gatewayName">Name of the gateway. Only the 'primary' gateway is supported.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Definition of the gateway.</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_UpdateVnetGatewayReturn> AppServicePlans_UpdateVnetGatewayAsync(string resourceGroupName, string name, string vnetName, string gatewayName, string subscriptionId, string api_version, AppServicePlans_UpdateVnetGatewayPutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/gateways/"+ (gatewayName==null? "" : System.Uri.EscapeDataString(gatewayName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_UpdateVnetGatewayReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all routes that are associated with a Virtual Network in an App Service plan.
		/// Description for Get all routes that are associated with a Virtual Network in an App Service plan.
		/// AppServicePlans_ListRoutesForVnet subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<AppServicePlans_ListRoutesForVnetReturn[]> AppServicePlans_ListRoutesForVnetAsync(string resourceGroupName, string name, string vnetName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/routes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_ListRoutesForVnetReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Virtual Network route in an App Service plan.
		/// Description for Get a Virtual Network route in an App Service plan.
		/// AppServicePlans_GetRouteForVnet subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="routeName">Name of the Virtual Network route.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK.</returns>
		public async Task<AppServicePlans_GetRouteForVnetReturn[]> AppServicePlans_GetRouteForVnetAsync(string resourceGroupName, string name, string vnetName, string routeName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/routes/"+ (routeName==null? "" : System.Uri.EscapeDataString(routeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_GetRouteForVnetReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a Virtual Network route in an App Service plan.
		/// Description for Create or update a Virtual Network route in an App Service plan.
		/// AppServicePlans_CreateOrUpdateVnetRoute subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="routeName">Name of the Virtual Network route.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Definition of the Virtual Network route.</param>
		/// <returns>OK.</returns>
		public async Task<AppServicePlans_CreateOrUpdateVnetRouteReturn> AppServicePlans_CreateOrUpdateVnetRouteAsync(string resourceGroupName, string name, string vnetName, string routeName, string subscriptionId, string api_version, AppServicePlans_CreateOrUpdateVnetRoutePutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/routes/"+ (routeName==null? "" : System.Uri.EscapeDataString(routeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_CreateOrUpdateVnetRouteReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Virtual Network route in an App Service plan.
		/// Description for Delete a Virtual Network route in an App Service plan.
		/// AppServicePlans_DeleteVnetRoute subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="routeName">Name of the Virtual Network route.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>Successfully deleted Virtual Network route.</returns>
		public async Task AppServicePlans_DeleteVnetRouteAsync(string resourceGroupName, string name, string vnetName, string routeName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/routes/"+ (routeName==null? "" : System.Uri.EscapeDataString(routeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a Virtual Network route in an App Service plan.
		/// Description for Create or update a Virtual Network route in an App Service plan.
		/// AppServicePlans_UpdateVnetRoute subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="vnetName">Name of the Virtual Network.</param>
		/// <param name="routeName">Name of the Virtual Network route.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Definition of the Virtual Network route.</param>
		/// <returns>OK.</returns>
		public async Task<AppServicePlans_UpdateVnetRouteReturn> AppServicePlans_UpdateVnetRouteAsync(string resourceGroupName, string name, string vnetName, string routeName, string subscriptionId, string api_version, AppServicePlans_UpdateVnetRoutePatchBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/virtualNetworkConnections/"+ (vnetName==null? "" : System.Uri.EscapeDataString(vnetName))+"/routes/"+ (routeName==null? "" : System.Uri.EscapeDataString(routeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppServicePlans_UpdateVnetRouteReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reboot a worker machine in an App Service plan.
		/// Description for Reboot a worker machine in an App Service plan.
		/// AppServicePlans_RebootWorker subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="name">Name of the App Service plan.</param>
		/// <param name="workerName">Name of worker machine, which typically starts with RD.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		public async Task AppServicePlans_RebootWorkerAsync(string resourceGroupName, string name, string workerName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/serverfarms/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/workers/"+ (workerName==null? "" : System.Uri.EscapeDataString(workerName))+"/reboot&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AppServicePlans_ListReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AppServicePlans_ListReturnValue[] AppServicePlans_ListReturnValue { get; set; }
	}
	
	public class AppServicePlans_ListReturnValue
	{
		
		/// <summary>
		/// AppServicePlan resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Description of a SKU for a scalable resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public AppServicePlans_ListReturnValueSku Sku { get; set; }
	}
	
	public class AppServicePlans_ListReturnValueSku
	{
		
		/// <summary>
		/// Capabilities of the SKU, e.g., is traffic manager enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public AppServicePlans_ListReturnValueSkuCapabilities[] AppServicePlans_ListReturnValueSkuCapabilities { get; set; }
		
		/// <summary>
		/// Current number of instances assigned to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Family code of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// Locations of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// Name of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size specifier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Description of the App Service plan scale options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuCapacity")]
		public AppServicePlans_ListReturnValueSkuSkuCapacity SkuCapacity { get; set; }
		
		/// <summary>
		/// Service tier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public class AppServicePlans_ListReturnValueSkuCapabilities
	{
		
		/// <summary>
		/// Name of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Value of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class AppServicePlans_ListReturnValueSkuSkuCapacity
	{
		
		/// <summary>
		/// Default number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int32> Default { get; set; }
		
		/// <summary>
		/// Maximum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int32> Maximum { get; set; }
		
		/// <summary>
		/// Minimum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int32> Minimum { get; set; }
		
		/// <summary>
		/// Available scale configurations for an App Service plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public string ScaleType { get; set; }
	}
	
	public class AppServicePlans_ListByResourceGroupReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AppServicePlans_ListByResourceGroupReturnValue[] AppServicePlans_ListByResourceGroupReturnValue { get; set; }
	}
	
	public class AppServicePlans_ListByResourceGroupReturnValue
	{
		
		/// <summary>
		/// AppServicePlan resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Description of a SKU for a scalable resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public AppServicePlans_ListByResourceGroupReturnValueSku Sku { get; set; }
	}
	
	public class AppServicePlans_ListByResourceGroupReturnValueSku
	{
		
		/// <summary>
		/// Capabilities of the SKU, e.g., is traffic manager enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public AppServicePlans_ListByResourceGroupReturnValueSkuCapabilities[] AppServicePlans_ListByResourceGroupReturnValueSkuCapabilities { get; set; }
		
		/// <summary>
		/// Current number of instances assigned to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Family code of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// Locations of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// Name of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size specifier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Description of the App Service plan scale options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuCapacity")]
		public AppServicePlans_ListByResourceGroupReturnValueSkuSkuCapacity SkuCapacity { get; set; }
		
		/// <summary>
		/// Service tier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public class AppServicePlans_ListByResourceGroupReturnValueSkuCapabilities
	{
		
		/// <summary>
		/// Name of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Value of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class AppServicePlans_ListByResourceGroupReturnValueSkuSkuCapacity
	{
		
		/// <summary>
		/// Default number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int32> Default { get; set; }
		
		/// <summary>
		/// Maximum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int32> Maximum { get; set; }
		
		/// <summary>
		/// Minimum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int32> Minimum { get; set; }
		
		/// <summary>
		/// Available scale configurations for an App Service plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public string ScaleType { get; set; }
	}
	
	public class AppServicePlans_GetReturn
	{
		
		/// <summary>
		/// AppServicePlan resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Description of a SKU for a scalable resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public AppServicePlans_GetReturnSku Sku { get; set; }
	}
	
	public class AppServicePlans_GetReturnSku
	{
		
		/// <summary>
		/// Capabilities of the SKU, e.g., is traffic manager enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public AppServicePlans_GetReturnSkuCapabilities[] AppServicePlans_GetReturnSkuCapabilities { get; set; }
		
		/// <summary>
		/// Current number of instances assigned to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Family code of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// Locations of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// Name of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size specifier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Description of the App Service plan scale options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuCapacity")]
		public AppServicePlans_GetReturnSkuSkuCapacity SkuCapacity { get; set; }
		
		/// <summary>
		/// Service tier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public class AppServicePlans_GetReturnSkuCapabilities
	{
		
		/// <summary>
		/// Name of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Value of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class AppServicePlans_GetReturnSkuSkuCapacity
	{
		
		/// <summary>
		/// Default number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int32> Default { get; set; }
		
		/// <summary>
		/// Maximum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int32> Maximum { get; set; }
		
		/// <summary>
		/// Minimum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int32> Minimum { get; set; }
		
		/// <summary>
		/// Available scale configurations for an App Service plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public string ScaleType { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdatePutBody
	{
		
		/// <summary>
		/// AppServicePlan resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Description of a SKU for a scalable resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public AppServicePlans_CreateOrUpdatePutBodySku Sku { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdatePutBodySku
	{
		
		/// <summary>
		/// Capabilities of the SKU, e.g., is traffic manager enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public AppServicePlans_CreateOrUpdatePutBodySkuCapabilities[] AppServicePlans_CreateOrUpdatePutBodySkuCapabilities { get; set; }
		
		/// <summary>
		/// Current number of instances assigned to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Family code of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// Locations of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// Name of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size specifier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Description of the App Service plan scale options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuCapacity")]
		public AppServicePlans_CreateOrUpdatePutBodySkuSkuCapacity SkuCapacity { get; set; }
		
		/// <summary>
		/// Service tier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdatePutBodySkuCapabilities
	{
		
		/// <summary>
		/// Name of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Value of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdatePutBodySkuSkuCapacity
	{
		
		/// <summary>
		/// Default number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int32> Default { get; set; }
		
		/// <summary>
		/// Maximum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int32> Maximum { get; set; }
		
		/// <summary>
		/// Minimum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int32> Minimum { get; set; }
		
		/// <summary>
		/// Available scale configurations for an App Service plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public string ScaleType { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdateReturn
	{
		
		/// <summary>
		/// AppServicePlan resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Description of a SKU for a scalable resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public AppServicePlans_CreateOrUpdateReturnSku Sku { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdateReturnSku
	{
		
		/// <summary>
		/// Capabilities of the SKU, e.g., is traffic manager enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public AppServicePlans_CreateOrUpdateReturnSkuCapabilities[] AppServicePlans_CreateOrUpdateReturnSkuCapabilities { get; set; }
		
		/// <summary>
		/// Current number of instances assigned to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Family code of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// Locations of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// Name of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size specifier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Description of the App Service plan scale options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuCapacity")]
		public AppServicePlans_CreateOrUpdateReturnSkuSkuCapacity SkuCapacity { get; set; }
		
		/// <summary>
		/// Service tier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdateReturnSkuCapabilities
	{
		
		/// <summary>
		/// Name of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Value of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdateReturnSkuSkuCapacity
	{
		
		/// <summary>
		/// Default number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int32> Default { get; set; }
		
		/// <summary>
		/// Maximum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int32> Maximum { get; set; }
		
		/// <summary>
		/// Minimum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int32> Minimum { get; set; }
		
		/// <summary>
		/// Available scale configurations for an App Service plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public string ScaleType { get; set; }
	}
	
	public class AppServicePlans_UpdateReturn
	{
		
		/// <summary>
		/// AppServicePlan resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Description of a SKU for a scalable resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public AppServicePlans_UpdateReturnSku Sku { get; set; }
	}
	
	public class AppServicePlans_UpdateReturnSku
	{
		
		/// <summary>
		/// Capabilities of the SKU, e.g., is traffic manager enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public AppServicePlans_UpdateReturnSkuCapabilities[] AppServicePlans_UpdateReturnSkuCapabilities { get; set; }
		
		/// <summary>
		/// Current number of instances assigned to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Family code of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// Locations of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// Name of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size specifier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Description of the App Service plan scale options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuCapacity")]
		public AppServicePlans_UpdateReturnSkuSkuCapacity SkuCapacity { get; set; }
		
		/// <summary>
		/// Service tier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public class AppServicePlans_UpdateReturnSkuCapabilities
	{
		
		/// <summary>
		/// Name of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Value of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class AppServicePlans_UpdateReturnSkuSkuCapacity
	{
		
		/// <summary>
		/// Default number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int32> Default { get; set; }
		
		/// <summary>
		/// Maximum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int32> Maximum { get; set; }
		
		/// <summary>
		/// Minimum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int32> Minimum { get; set; }
		
		/// <summary>
		/// Available scale configurations for an App Service plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public string ScaleType { get; set; }
	}
	
	public class AppServicePlans_ListCapabilitiesReturn
	{
		
		/// <summary>
		/// Name of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Value of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class AppServicePlans_GetHybridConnectionReturn
	{
		
		/// <summary>
		/// HybridConnection resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_ListWebAppsReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AppServicePlans_ListWebAppsReturnValue[] AppServicePlans_ListWebAppsReturnValue { get; set; }
	}
	
	public class AppServicePlans_ListWebAppsReturnValue
	{
		
		/// <summary>
		/// Managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public AppServicePlans_ListWebAppsReturnValueIdentity Identity { get; set; }
		
		/// <summary>
		/// Site resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_ListWebAppsReturnValueIdentity
	{
		
		/// <summary>
		/// Principal Id of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// Tenant of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Type of managed service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AppServicePlans_ListWebAppsReturnValueIdentityType> Type { get; set; }
		
		/// <summary>
		/// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, AppServicePlans_ListWebAppsReturnValueIdentityUserAssignedIdentities> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AppServicePlans_ListWebAppsReturnValueIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 2,
	}
	
	public class AppServicePlans_ListWebAppsReturnValueIdentityUserAssignedIdentities
	{
		
		/// <summary>
		/// Client Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Principal Id of user assigned identity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	public class AppServicePlans_ListUsagesReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AppServicePlans_ListUsagesReturnValue[] AppServicePlans_ListUsagesReturnValue { get; set; }
	}
	
	public class AppServicePlans_ListUsagesReturnValue
	{
		
		/// <summary>
		/// The current value of the resource counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int64> CurrentValue { get; set; }
		
		/// <summary>
		/// The resource limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// Localizable string object containing the name and a localized value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AppServicePlans_ListUsagesReturnValueName Name { get; set; }
		
		/// <summary>
		/// Next reset time for the resource counter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextResetTime")]
		public System.Nullable<System.DateTimeOffset> NextResetTime { get; set; }
		
		/// <summary>
		/// Units of measurement for the quota resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	public class AppServicePlans_ListUsagesReturnValueName
	{
		
		/// <summary>
		/// Localized name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// Non-localized name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class AppServicePlans_ListVnetsReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_GetVnetFromServerFarmReturn
	{
		
		/// <summary>
		/// VnetInfo resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_GetVnetGatewayReturn
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_UpdateVnetGatewayPutBody
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_UpdateVnetGatewayReturn
	{
		
		/// <summary>
		/// VnetGateway resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_ListRoutesForVnetReturn
	{
		
		/// <summary>
		/// VnetRoute resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_GetRouteForVnetReturn
	{
		
		/// <summary>
		/// VnetRoute resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdateVnetRoutePutBody
	{
		
		/// <summary>
		/// VnetRoute resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_CreateOrUpdateVnetRouteReturn
	{
		
		/// <summary>
		/// VnetRoute resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_UpdateVnetRoutePatchBody
	{
		
		/// <summary>
		/// VnetRoute resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class AppServicePlans_UpdateVnetRouteReturn
	{
		
		/// <summary>
		/// VnetRoute resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
