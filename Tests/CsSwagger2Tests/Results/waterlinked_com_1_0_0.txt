//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A list of all POI
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CreatePoiPayload
	{
		
		/// <summary>
		/// Depth of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="depth")]
		public double Depth { get; set; }
		
		/// <summary>
		/// Icon of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// Unique POI id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Latitude of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// Longitude of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public double Lng { get; set; }
		
		/// <summary>
		/// Name of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Visibility of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public bool Visible { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ModifyConfigPayload
	{
		
		/// <summary>
		/// Enable use of antenna
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antenna_enabled")]
		public System.Nullable<System.Boolean> Antenna_enabled { get; set; }
		
		/// <summary>
		/// Channel to use
		/// Required
		/// Minimum: 0
		/// Maximum: 6000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		[System.ComponentModel.DataAnnotations.Range(0, 6000)]
		public int Channel { get; set; }
		
		/// <summary>
		/// Compass provider setting
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="compass")]
		public ModifyConfigPayloadCompass Compass { get; set; }
		
		/// <summary>
		/// Environment setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<ModifyConfigPayloadEnvironment> Environment { get; set; }
		
		/// <summary>
		/// Enable external PPS input to master
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_pps_enabled")]
		public System.Nullable<System.Boolean> External_pps_enabled { get; set; }
		
		/// <summary>
		/// GPS provider setting
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gps")]
		public ModifyConfigPayloadGps Gps { get; set; }
		
		/// <summary>
		/// Enable IMU input from vehicle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imu_vehicle_enabled")]
		public System.Nullable<System.Boolean> Imu_vehicle_enabled { get; set; }
		
		/// <summary>
		/// Locator type in use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locator_type")]
		public ModifyConfigPayloadLocator_type Locator_type { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_max_x")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public double Range_max_x { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_max_y")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public double Range_max_y { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_max_z")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public double Range_max_z { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: -100
		/// Maximum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_min_x")]
		[System.ComponentModel.DataAnnotations.Range(-100, 0)]
		public double Range_min_x { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: -100
		/// Maximum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_min_y")]
		[System.ComponentModel.DataAnnotations.Range(-100, 0)]
		public double Range_min_y { get; set; }
		
		/// <summary>
		/// Latitude to use in static mode
		/// Required
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="static_lat")]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public double Static_lat { get; set; }
		
		/// <summary>
		/// Longitude to use in static mode
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="static_lon")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Static_lon { get; set; }
		
		/// <summary>
		/// Orientation/compass reading to use in static mode (degrees)
		/// Required
		/// Minimum: 0
		/// Maximum: 359
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="static_orientation")]
		[System.ComponentModel.DataAnnotations.Range(0, 359)]
		public double Static_orientation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ModifyConfigPayloadCompass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		onboard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="static")]
		_static = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ModifyConfigPayloadEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reflective = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		openwater = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ModifyConfigPayloadGps
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		onboard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="static")]
		_static = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum ModifyConfigPayloadLocator_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		d1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		p1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		u1 = 4,
	}
	
	/// <summary>
	/// Configuration parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ModifyIPConfigPayload
	{
		
		/// <summary>
		/// IP address to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// DNS to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dns")]
		public string Dns { get; set; }
		
		/// <summary>
		/// Gateway to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gateway")]
		public string Gateway { get; set; }
		
		/// <summary>
		/// Prefix to use
		/// Required
		/// Minimum: 1
		/// Maximum: 31
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		[System.ComponentModel.DataAnnotations.Range(1, 31)]
		public int Prefix { get; set; }
	}
	
	/// <summary>
	/// A receiver configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ModifyReceiverConfigPayload
	{
		
		/// <summary>
		/// Unique receiver identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Configured X position relative to master electronics (meter)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="x")]
		public double X { get; set; }
		
		/// <summary>
		/// Configured Y position relative to master electronics (meter)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="y")]
		public double Y { get; set; }
		
		/// <summary>
		/// Configured Z position relative to master electronics (meter)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="z")]
		public double Z { get; set; }
	}
	
	/// <summary>
	/// Current locator depth and temperature
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SetDepthExternalPayload
	{
		
		/// <summary>
		/// Curent depth (meter)
		/// Required
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="depth")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public double Depth { get; set; }
		
		/// <summary>
		/// Current water temperature (C)
		/// Required
		/// Minimum: -10
		/// Maximum: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="temp")]
		[System.ComponentModel.DataAnnotations.Range(-10, 60)]
		public double Temp { get; set; }
	}
	
	/// <summary>
	/// Global master position from external source
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SetMasterExternalPayload
	{
		
		/// <summary>
		/// Course over ground (degrees). -1 means no data.
		/// Minimum: -1
		/// Maximum: 359.999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cog")]
		[System.ComponentModel.DataAnnotations.Range(-1, 359.999)]
		public System.Nullable<System.Double> Cog { get; set; }
		
		/// <summary>
		/// Fix quality. 0 if no data.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fix_quality")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public System.Nullable<System.Double> Fix_quality { get; set; }
		
		/// <summary>
		/// Horizontal dilution of precision. -1 means no data.
		/// Minimum: -1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hdop")]
		[System.ComponentModel.DataAnnotations.Range(-1, System.Double.MaxValue)]
		public System.Nullable<System.Double> Hdop { get; set; }
		
		/// <summary>
		/// Current Latitude
		/// Required
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public double Lat { get; set; }
		
		/// <summary>
		/// Current Longitude
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Lon { get; set; }
		
		/// <summary>
		/// Number of satellites. -1 means no data.
		/// Minimum: -1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numsats")]
		[System.ComponentModel.DataAnnotations.Range(-1, System.Double.MaxValue)]
		public System.Nullable<System.Double> Numsats { get; set; }
		
		/// <summary>
		/// Current orientation/compass heading (degrees)
		/// Required
		/// Minimum: 0
		/// Maximum: 359.999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		[System.ComponentModel.DataAnnotations.Range(0, 359.999)]
		public double Orientation { get; set; }
		
		/// <summary>
		/// Speed over ground (km/h). -1 means no data.
		/// Minimum: -1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sog")]
		[System.ComponentModel.DataAnnotations.Range(-1, System.Double.MaxValue)]
		public System.Nullable<System.Double> Sog { get; set; }
	}
	
	/// <summary>
	/// Set current compass heading of ROV/locator
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SetOrientationExternalPayload
	{
		
		/// <summary>
		/// Current orientation/compass heading (degrees). -1 means no orientation set
		/// Required
		/// Minimum: -1
		/// Maximum: 359.999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		[System.ComponentModel.DataAnnotations.Range(-1, 359.999)]
		public double Orientation { get; set; }
	}
	
	/// <summary>
	/// Set current rotation and acceleration of vehicle
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SetVehicleIMUExternalPayload
	{
		
		/// <summary>
		/// Current pitch of vehicle(degrees).
		/// Required
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pitch")]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public double Pitch { get; set; }
		
		/// <summary>
		/// Current roll of vehicle(degrees).
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roll")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Roll { get; set; }
		
		/// <summary>
		/// Current acceleration in x-axis of vehicle.
		/// Required
		/// Minimum: -20
		/// Maximum: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="x")]
		[System.ComponentModel.DataAnnotations.Range(-20, 20)]
		public double X { get; set; }
		
		/// <summary>
		/// Current acceleration in y-axis of vehicle.
		/// Required
		/// Minimum: -20
		/// Maximum: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="y")]
		[System.ComponentModel.DataAnnotations.Range(-20, 20)]
		public double Y { get; set; }
		
		/// <summary>
		/// Current yaw of vehicle(degrees).
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yaw")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Yaw { get; set; }
		
		/// <summary>
		/// Current acceleration in z-axis of vehicle.
		/// Required
		/// Minimum: -20
		/// Maximum: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="z")]
		[System.ComponentModel.DataAnnotations.Range(-20, 20)]
		public double Z { get; set; }
	}
	
	/// <summary>
	/// A list of all POI
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UpdatePoiPayload
	{
		
		/// <summary>
		/// Depth of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="depth")]
		public double Depth { get; set; }
		
		/// <summary>
		/// Icon of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// Unique POI id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Latitude of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// Longitude of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public double Lng { get; set; }
		
		/// <summary>
		/// Name of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Visibility of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public bool Visible { get; set; }
	}
	
	/// <summary>
	/// About information (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WaterlinkedAbout
	{
		
		/// <summary>
		/// Chip identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chipid")]
		public string Chipid { get; set; }
		
		/// <summary>
		/// Detailed Web Server version string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// Short Web Server version string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version_short")]
		public string Version_short { get; set; }
	}
	
	/// <summary>
	/// Current relative Locator position (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WaterlinkedAccousticPosition
	{
		
		/// <summary>
		/// Current acoustic position accuracy (meter)
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="std")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Std { get; set; }
		
		/// <summary>
		/// Current acoustic temperature (C)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="temp")]
		public double Temp { get; set; }
		
		/// <summary>
		/// Current acoustic x position relative to master electronics (meter)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="x")]
		public double X { get; set; }
		
		/// <summary>
		/// Current acoustic y position relative to master electronics (meter)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="y")]
		public double Y { get; set; }
		
		/// <summary>
		/// Current acoustic z position (depth) relative to master electronics (meter)
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="z")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Z { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WaterlinkedConfiguration
	{
		
		/// <summary>
		/// Enable use of antenna
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antenna_enabled")]
		public System.Nullable<System.Boolean> Antenna_enabled { get; set; }
		
		/// <summary>
		/// Channel to use
		/// Required
		/// Minimum: 0
		/// Maximum: 6000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		[System.ComponentModel.DataAnnotations.Range(0, 6000)]
		public int Channel { get; set; }
		
		/// <summary>
		/// Compass provider setting
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="compass")]
		public WaterlinkedConfigurationCompass Compass { get; set; }
		
		/// <summary>
		/// Environment setting
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public ModifyConfigPayloadEnvironment Environment { get; set; }
		
		/// <summary>
		/// Enable external PPS input to master
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_pps_enabled")]
		public System.Nullable<System.Boolean> External_pps_enabled { get; set; }
		
		/// <summary>
		/// GPS provider setting
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gps")]
		public WaterlinkedConfigurationGps Gps { get; set; }
		
		/// <summary>
		/// Enable IMU input from vehicle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imu_vehicle_enabled")]
		public System.Nullable<System.Boolean> Imu_vehicle_enabled { get; set; }
		
		/// <summary>
		/// Locator type in use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locator_type")]
		public ModifyConfigPayloadLocator_type Locator_type { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_max_x")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public double Range_max_x { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_max_y")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public double Range_max_y { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_max_z")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public double Range_max_z { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: -100
		/// Maximum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_min_x")]
		[System.ComponentModel.DataAnnotations.Range(-100, 0)]
		public double Range_min_x { get; set; }
		
		/// <summary>
		/// Max range (meters)
		/// Required
		/// Minimum: -100
		/// Maximum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range_min_y")]
		[System.ComponentModel.DataAnnotations.Range(-100, 0)]
		public double Range_min_y { get; set; }
		
		/// <summary>
		/// Latitude to use in static mode
		/// Required
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="static_lat")]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public double Static_lat { get; set; }
		
		/// <summary>
		/// Longitude to use in static mode
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="static_lon")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Static_lon { get; set; }
		
		/// <summary>
		/// Orientation/compass reading to use in static mode (degrees)
		/// Required
		/// Minimum: 0
		/// Maximum: 359
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="static_orientation")]
		[System.ComponentModel.DataAnnotations.Range(0, 359)]
		public double Static_orientation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum WaterlinkedConfigurationCompass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		onboard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="static")]
		_static = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public enum WaterlinkedConfigurationGps
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		onboard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="static")]
		_static = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external = 2,
	}
	
	/// <summary>
	/// Configuration parameters (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WaterlinkedIp_config
	{
		
		/// <summary>
		/// IP address to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// DNS to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dns")]
		public string Dns { get; set; }
		
		/// <summary>
		/// Gateway to use
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gateway")]
		public string Gateway { get; set; }
		
		/// <summary>
		/// Prefix to use
		/// Required
		/// Minimum: 1
		/// Maximum: 31
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		[System.ComponentModel.DataAnnotations.Range(1, 31)]
		public int Prefix { get; set; }
	}
	
	/// <summary>
	/// Response from server on operations performed (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WaterlinkedOperation_response
	{
		
		/// <summary>
		/// Error if it occurs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// Status of operation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	/// <summary>
	/// A list of all POI (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WaterlinkedPoi
	{
		
		/// <summary>
		/// Depth of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="depth")]
		public double Depth { get; set; }
		
		/// <summary>
		/// Icon of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// Unique POI id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Latitude of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// Longitude of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public double Lng { get; set; }
		
		/// <summary>
		/// Name of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Visibility of POI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public bool Visible { get; set; }
	}
	
	/// <summary>
	/// A receiver configuration (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WaterlinkedReceiver
	{
		
		/// <summary>
		/// Unique receiver identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Configured X position relative to master electronics (meter)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="x")]
		public double X { get; set; }
		
		/// <summary>
		/// Configured Y position relative to master electronics (meter)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="y")]
		public double Y { get; set; }
		
		/// <summary>
		/// Configured Z position relative to master electronics (meter)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="z")]
		public double Z { get; set; }
	}
	
	/// <summary>
	/// Status information (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WaterlinkedStatus
	{
		
		/// <summary>
		/// Locator battery level in percent. -1 if not available or applicable
		/// Required
		/// Minimum: -1
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="battery")]
		[System.ComponentModel.DataAnnotations.Range(-1, 100)]
		public int Battery { get; set; }
		
		/// <summary>
		/// GPS lock status
		/// Required
		/// Minimum: 0
		/// Maximum: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gps")]
		[System.ComponentModel.DataAnnotations.Range(0, 3)]
		public int Gps { get; set; }
		
		/// <summary>
		/// IMU calibration status
		/// Required
		/// Minimum: 0
		/// Maximum: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imu")]
		[System.ComponentModel.DataAnnotations.Range(0, 3)]
		public int Imu { get; set; }
	}
	
	/// <summary>
	/// Temperature information (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WaterlinkedTemperature
	{
		
		/// <summary>
		/// Board temperature (C)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="board")]
		public double Board { get; set; }
		
		/// <summary>
		/// Water temperature (C)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="water")]
		public double Water { get; set; }
	}
	
	/// <summary>
	/// Set current compass heading of ROV/locator (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WlExternalLocatorOrientation
	{
		
		/// <summary>
		/// Current orientation/compass heading (degrees). -1 means no orientation set
		/// Required
		/// Minimum: -1
		/// Maximum: 359.999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		[System.ComponentModel.DataAnnotations.Range(-1, 359.999)]
		public double Orientation { get; set; }
	}
	
	/// <summary>
	/// Set current rotation and acceleration of vehicle (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WlExternalVehicleImu
	{
		
		/// <summary>
		/// Current pitch of vehicle(degrees).
		/// Required
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pitch")]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public double Pitch { get; set; }
		
		/// <summary>
		/// Current roll of vehicle(degrees).
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roll")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Roll { get; set; }
		
		/// <summary>
		/// Current acceleration in x-axis of vehicle.
		/// Required
		/// Minimum: -20
		/// Maximum: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="x")]
		[System.ComponentModel.DataAnnotations.Range(-20, 20)]
		public double X { get; set; }
		
		/// <summary>
		/// Current acceleration in y-axis of vehicle.
		/// Required
		/// Minimum: -20
		/// Maximum: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="y")]
		[System.ComponentModel.DataAnnotations.Range(-20, 20)]
		public double Y { get; set; }
		
		/// <summary>
		/// Current yaw of vehicle(degrees).
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yaw")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Yaw { get; set; }
		
		/// <summary>
		/// Current acceleration in z-axis of vehicle.
		/// Required
		/// Minimum: -20
		/// Maximum: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="z")]
		[System.ComponentModel.DataAnnotations.Range(-20, 20)]
		public double Z { get; set; }
	}
	
	/// <summary>
	/// GPS and IMU position (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WlSatellitePosition
	{
		
		/// <summary>
		/// Course over ground (degrees). -1 means no data.
		/// Required
		/// Minimum: -1
		/// Maximum: 359.999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cog")]
		[System.ComponentModel.DataAnnotations.Range(-1, 359.999)]
		public double Cog { get; set; }
		
		/// <summary>
		/// Fix quality. 0 if no data.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fix_quality")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Fix_quality { get; set; }
		
		/// <summary>
		/// Horizontal dilution of precision. -1 means no data.
		/// Required
		/// Minimum: -1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hdop")]
		[System.ComponentModel.DataAnnotations.Range(-1, System.Double.MaxValue)]
		public double Hdop { get; set; }
		
		/// <summary>
		/// Current Latitude
		/// Required
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public double Lat { get; set; }
		
		/// <summary>
		/// Current Longitude
		/// Required
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public double Lon { get; set; }
		
		/// <summary>
		/// Number of satellites. -1 means no data.
		/// Required
		/// Minimum: -1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numsats")]
		[System.ComponentModel.DataAnnotations.Range(-1, System.Double.MaxValue)]
		public double Numsats { get; set; }
		
		/// <summary>
		/// Current orientation/compass heading (degrees). -1 means no data.
		/// Required
		/// Minimum: -1
		/// Maximum: 359.999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		[System.ComponentModel.DataAnnotations.Range(-1, 359.999)]
		public double Orientation { get; set; }
		
		/// <summary>
		/// Speed over ground (km/h). -1 means no data.
		/// Required
		/// Minimum: -1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sog")]
		[System.ComponentModel.DataAnnotations.Range(-1, System.Double.MaxValue)]
		public double Sog { get; set; }
	}
	
	/// <summary>
	/// Warning message (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WlWarning
	{
		
		/// <summary>
		/// Identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Severity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
	}
	
	/// <summary>
	/// Returns supported api versions (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WupdaterApiversion
	{
		
		/// <summary>
		/// Supported api versions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public string[] Versions { get; set; }
	}
	
	/// <summary>
	/// Error response media type (default view)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// an application-specific error code, expressed as a string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// a human-readable explanation specific to this occurrence of the problem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// a unique identifier for this particular occurrence of the problem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public string Meta { get; set; }
		
		/// <summary>
		/// the HTTP status code applicable to this problem, expressed as a string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ApiVersion about
		/// ApiGet api/
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get about
		/// Get about information
		/// ApiV1AboutGet api/v1/about
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1AboutGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/about";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Status about
		/// Get current IMU and GPS status
		/// ApiV1AboutStatusGet api/v1/about/status
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1AboutStatusGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/about/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Temperature about
		/// Get board temperature
		/// ApiV1AboutTemperatureGet api/v1/about/temperature
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1AboutTemperatureGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/about/temperature";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get config
		/// Get generic configuration
		/// ApiV1ConfigGenericGet api/v1/config/generic
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1ConfigGenericGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/config/generic";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify config
		/// Modify generic configuration
		/// ApiV1ConfigGenericPut api/v1/config/generic
		/// </summary>
		/// <param name="requestBody">Configuration parameters</param>
		/// <returns>OK</returns>
		public async Task ApiV1ConfigGenericPutAsync(ModifyConfigPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/config/generic";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetIP config
		/// Get IP configuration
		/// ApiV1ConfigIpGet api/v1/config/ip
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1ConfigIpGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/config/ip";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ModifyIP config
		/// Modify IP configuration
		/// ApiV1ConfigIpPut api/v1/config/ip
		/// </summary>
		/// <param name="requestBody">Configuration parameters</param>
		/// <returns>OK</returns>
		public async Task ApiV1ConfigIpPutAsync(ModifyIPConfigPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/config/ip";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListReceiver config
		/// (Re)Load current receiver settings and return them
		/// ApiV1ConfigReceiversGet api/v1/config/receivers/
		/// </summary>
		/// <returns>Returned list of receivers</returns>
		public async Task ApiV1ConfigReceiversGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/config/receivers/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ShowReceiver config
		/// Get receiver configuration by id
		/// ApiV1ConfigReceivers_IDGet api/v1/config/receivers/{ID}
		/// </summary>
		/// <param name="ID">Identifier</param>
		/// <returns>OK</returns>
		public async Task ApiV1ConfigReceivers_IDGetAsync(int ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/config/receivers/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ModifyReceiver config
		/// Modify receiver configuration, does not apply the change until generic modify is called. Calling list will discard changes
		/// ApiV1ConfigReceivers_IDPut api/v1/config/receivers/{ID}
		/// </summary>
		/// <param name="ID">Identifier</param>
		/// <param name="requestBody">A receiver configuration</param>
		public async Task ApiV1ConfigReceivers_IDPutAsync(int ID, ModifyReceiverConfigPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/config/receivers/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SetDepth external
		/// Set depth from external source. If Locator A1 is used, this is required to get a position
		/// ApiV1ExternalDepthPut api/v1/external/depth
		/// </summary>
		/// <param name="requestBody">Current locator depth and temperature</param>
		/// <returns>OK</returns>
		public async Task ApiV1ExternalDepthPutAsync(SetDepthExternalPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/external/depth";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetVehicleIMU external
		/// Get rotation and acceleration of vehicle Locator is mounted on which was previously set
		/// ApiV1ExternalImuGet api/v1/external/imu
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1ExternalImuGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/external/imu";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SetVehicleIMU external
		/// Set rotation and acceleration of vehicle Locator is mounted on. This is used to improve positioning of vehicle
		/// ApiV1ExternalImuPut api/v1/external/imu
		/// </summary>
		/// <param name="requestBody">Set current rotation and acceleration of vehicle</param>
		/// <returns>OK</returns>
		public async Task ApiV1ExternalImuPutAsync(SetVehicleIMUExternalPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/external/imu";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SetMaster external
		/// Set current global position of master electronics from external source. Values are only used if GPS mode is set to use external GPS
		/// ApiV1ExternalMasterPut api/v1/external/master
		/// </summary>
		/// <param name="requestBody">Global master position from external source</param>
		/// <returns>OK</returns>
		public async Task ApiV1ExternalMasterPutAsync(SetMasterExternalPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/external/master";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetOrientation external
		/// Get orientation of Vehicle/ROV/Locator set by SetOrientation
		/// ApiV1ExternalOrientationGet api/v1/external/orientation
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1ExternalOrientationGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/external/orientation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SetOrientation external
		/// Set orientation/compass heading of Vehicle/ROV/Locator. This is used only for visualization in GUI
		/// ApiV1ExternalOrientationPut api/v1/external/orientation
		/// </summary>
		/// <param name="requestBody">Set current compass heading of ROV/locator</param>
		/// <returns>OK</returns>
		public async Task ApiV1ExternalOrientationPutAsync(SetOrientationExternalPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/external/orientation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create poi
		/// Create a new POI
		/// ApiV1PoiPost api/v1/poi
		/// </summary>
		/// <param name="requestBody">A list of all POI</param>
		public async Task ApiV1PoiPostAsync(CreatePoiPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/poi";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List poi
		/// List all points of interest
		/// ApiV1PoiGet api/v1/poi/
		/// </summary>
		/// <returns>Return list of all POIs</returns>
		public async Task ApiV1PoiGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/poi/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show poi
		/// Get a POI
		/// ApiV1Poi_IDGet api/v1/poi/{ID}
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1Poi_IDGetAsync(int ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/poi/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete poi
		/// ApiV1Poi_IDDelete api/v1/poi/{ID}
		/// </summary>
		public async Task ApiV1Poi_IDDeleteAsync(int ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/poi/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update poi
		/// ApiV1Poi_IDPatch api/v1/poi/{ID}
		/// </summary>
		/// <param name="requestBody">A list of all POI</param>
		public async Task ApiV1Poi_IDPatchAsync(int ID, UpdatePoiPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/poi/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AcousticFiltered position
		/// Get current Kalman filtered acoustic position relative to master acoustics. Expected update frequency: 4 Hz
		/// ApiV1PositionAcousticFilteredGet api/v1/position/acoustic/filtered
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1PositionAcousticFilteredGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/position/acoustic/filtered";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AcousticRaw position
		/// Get current unfiltered acoustic position relative to master acoustics. Expected update frequency: 4 Hz
		/// ApiV1PositionAcousticRawGet api/v1/position/acoustic/raw
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1PositionAcousticRawGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/position/acoustic/raw";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get position
		/// Get current global position of locator. Locator position is calculated from the current acoustic position and the global position of the master electronics. Expected update frequency: 4 Hz
		/// ApiV1PositionGlobalGet api/v1/position/global
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1PositionGlobalGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/position/global";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetMaster position
		/// Get current global position of master electronics. Expected update frequency: 1 Hz
		/// ApiV1PositionMasterGet api/v1/position/master
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1PositionMasterGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/position/master";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get warnings
		/// Get current list of messages
		/// ApiV1WarningsGet api/v1/warnings/
		/// </summary>
		/// <returns>OK</returns>
		public async Task ApiV1WarningsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/warnings/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
