//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The result returned from a database check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameRequest
	{
		
		/// <summary>
		/// Resource name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of resource, for instance Microsoft.DigitalTwins/digitalTwinsInstances.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.DigitalTwins/digitalTwinsInstances")]
		Microsoft_DigitalTwins_digitalTwinsInstances = 0,
	}
	
	/// <summary>
	/// The result returned from a check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameResult
	{
		
		/// <summary>
		/// Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The name that was checked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies a Boolean value that indicates if the name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Message providing the reason why the given name is invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameResultReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameResultReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// The description of the DigitalTwins service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsDescription
	{
		
		/// <summary>
		/// The properties of a DigitalTwinsInstance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DigitalTwinsProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a DigitalTwinsInstance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsProperties
	{
		
		/// <summary>
		/// Time when DigitalTwinsInstance was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Api endpoint to work with DigitalTwinsInstance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostName")]
		public string HostName { get; set; }
		
		/// <summary>
		/// Time when DigitalTwinsInstance was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		/// <summary>
		/// The provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<DigitalTwinsPropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DigitalTwinsPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 4,
	}
	
	/// <summary>
	/// A list of DigitalTwins description objects with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsDescriptionListResult
	{
		
		/// <summary>
		/// The link used to get the next page of DigitalTwins description objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of DigitalTwins description objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DigitalTwinsDescription[] Value { get; set; }
	}
	
	/// <summary>
	/// DigitalTwinsInstance endpoint resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsEndpointResource : ExternalResource
	{
		
		/// <summary>
		/// Properties related to Digital Twins Endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DigitalTwinsEndpointResourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// A list of DigitalTwinsInstance Endpoints with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsEndpointResourceListResult
	{
		
		/// <summary>
		/// The link used to get the next page of DigitalTwinsInstance Endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of DigitalTwinsInstance Endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DigitalTwinsEndpointResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties related to Digital Twins Endpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsEndpointResourceProperties
	{
		
		/// <summary>
		/// Time when the Endpoint was added to DigitalTwinsInstance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// The type of Digital Twins endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointType")]
		public DigitalTwinsEndpointResourcePropertiesEndpointType EndpointType { get; set; }
		
		/// <summary>
		/// The provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public DigitalTwinsPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DigitalTwinsEndpointResourcePropertiesEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventHub = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventGrid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceBus = 2,
	}
	
	/// <summary>
	/// A list of DigitalTwinsInstance IoTHubs with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsIntegrationResourceListResult
	{
		
		/// <summary>
		/// The link used to get the next page of DigitalTwinsInstance IoTHubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of DigitalTwinsInstance IoTHubs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IntegrationResource[] Value { get; set; }
	}
	
	/// <summary>
	/// IoTHub integration resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationResource
	{
		
		/// <summary>
		/// Properties related to the IoTHub DigitalTwinsInstance Integration Resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationResourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties related to the IoTHub DigitalTwinsInstance Integration Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationResourceProperties
	{
		
		/// <summary>
		/// Time when the IoTHub was added to DigitalTwinsInstance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Fully qualified resource identifier of the DigitalTwins Azure resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// The description of the DigitalTwins service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsPatchDescription
	{
		
		/// <summary>
		/// Instance tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The common properties of a DigitalTwinsInstance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsResource
	{
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The resource name.
		/// Pattern: ^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Information about the SKU of the DigitalTwinsInstance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public DigitalTwinsSkuInfo Sku { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Information about the SKU of the DigitalTwinsInstance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DigitalTwinsSkuInfo
	{
		
		/// <summary>
		/// The name of the SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public DigitalTwinsSkuInfoName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DigitalTwinsSkuInfoName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F1 = 0,
	}
	
	/// <summary>
	/// Error definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDefinition
	{
		
		/// <summary>
		/// Service specific error code which serves as the substatus for the HTTP error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Internal error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDefinition[] Details { get; set; }
		
		/// <summary>
		/// Description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDefinition Error { get; set; }
	}
	
	/// <summary>
	/// properties related to eventgrid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventGrid : DigitalTwinsEndpointResourceProperties
	{
		
		/// <summary>
		/// EventGrid Topic Endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TopicEndpoint { get; set; }
		
		/// <summary>
		/// EventGrid secondary accesskey. Will be obfuscated during read
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessKey1")]
		public string AccessKey1 { get; set; }
		
		/// <summary>
		/// EventGrid secondary accesskey. Will be obfuscated during read
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessKey2")]
		public string AccessKey2 { get; set; }
	}
	
	public class EventHub
	{
	}
	
	/// <summary>
	/// Definition of a Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExternalResource
	{
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Extension resource name.
		/// Pattern: ^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties related to the IoTHub DigitalTwinsInstance Integration Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationResourceState
	{
		
		/// <summary>
		/// DigitalTwinsInstance - IoTHub link state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public DigitalTwinsPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// IoTHub integration resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationResourceUpdateInfo
	{
		
		/// <summary>
		/// Updatable properties related to the IoTHub DigitalTwinsInstance Integration Resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationResourceUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Updatable properties related to the IoTHub DigitalTwinsInstance Integration Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationResourceUpdateProperties
	{
	}
	
	/// <summary>
	/// DigitalTwins service REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{read | write | action | delete}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The object that represents the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// Friendly description for the operation,
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Microsoft DigitalTwins
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource Type: DigitalTwinsInstances
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// A list of DigitalTwins service operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The link used to get the next page of DigitalTwins description objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of DigitalTwins operations supported by the Microsoft.DigitalTwins resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// properties related to servicebus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBus : DigitalTwinsEndpointResourceProperties
	{
		
		/// <summary>
		/// PrimaryConnectionString of the endpoint. Will be obfuscated during read
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryConnectionString")]
		public string PrimaryConnectionString { get; set; }
		
		/// <summary>
		/// SecondaryConnectionString of the endpoint. Will be obfuscated during read
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryConnectionString")]
		public string SecondaryConnectionString { get; set; }
	}
	
	/// <summary>
	/// IoTHub integration resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IntegrationResourceInfo
	{
		
		/// <summary>
		/// Properties related to the IoTHub DigitalTwinsInstance Integration Resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IntegrationResourceProperties Properties { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available DigitalTwins service REST API operations.
		/// Operations_List providers/Microsoft.DigitalTwins/operations
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(Operations_ListApi_version api_version)
		{
			var requestUri = "providers/Microsoft.DigitalTwins/operations?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the DigitalTwinsInstances in a subscription.
		/// DigitalTwins_List subscriptions/{subscriptionId}/providers/Microsoft.DigitalTwins/digitalTwinsInstances
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the DigitalTwinsInstances in the subscription.</returns>
		public async Task<DigitalTwinsDescriptionListResult> DigitalTwins_ListAsync(DigitalTwins_ListApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DigitalTwinsDescriptionListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if a DigitalTwinsInstance name is available.
		/// DigitalTwins_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.DigitalTwins/locations/{location}/checkNameAvailability
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="location">Location of DigitalTwinsInstance.
		/// Min length: 3
		// </param>
		/// <param name="requestBody">Set the name parameter in the DigitalTwinsInstanceCheckName structure to the name of the DigitalTwinsInstance to check.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the DigitalTwins service name is available. If the name is not available, the body contains the reason.</returns>
		public async Task<CheckNameResult> DigitalTwins_CheckNameAvailabilityAsync(DigitalTwins_CheckNameAvailabilityApi_version api_version, string subscriptionId, string location, CheckNameRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DigitalTwins/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/checkNameAvailability?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the DigitalTwinsInstances in a resource group.
		/// DigitalTwins_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the DigitalTwinsInstances in the resource group.</returns>
		public async Task<DigitalTwinsDescriptionListResult> DigitalTwins_ListByResourceGroupAsync(DigitalTwins_ListByResourceGroupApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DigitalTwinsDescriptionListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get DigitalTwinsInstances resource.
		/// DigitalTwins_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>The body contains all the non-security properties of the DigitalTwinsInstance. Security-related properties are set to null.</returns>
		public async Task<DigitalTwinsDescription> DigitalTwins_GetAsync(DigitalTwins_GetApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DigitalTwinsDescription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified values in a new body to update the DigitalTwinsInstance.
		/// DigitalTwins_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="requestBody">The DigitalTwinsInstance and security metadata.</param>
		/// <returns>This is returned as a response to the status polling request for the create or update operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task<DigitalTwinsDescription> DigitalTwins_CreateOrUpdateAsync(DigitalTwins_CreateOrUpdateApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName, DigitalTwinsDescription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DigitalTwinsDescription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a DigitalTwinsInstance.
		/// DigitalTwins_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task DigitalTwins_DeleteAsync(DigitalTwins_DeleteApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update metadata of DigitalTwinsInstance.
		/// DigitalTwins_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="requestBody">The DigitalTwinsInstance and security metadata.</param>
		/// <returns>This is returned as a response to the status polling request for the create or update operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task<DigitalTwinsDescription> DigitalTwins_UpdateAsync(DigitalTwins_UpdateApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName, DigitalTwinsPatchDescription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DigitalTwinsDescription>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get DigitalTwinsInstance Endpoints.
		/// DigitalTwinsEndpoint_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/endpoints
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>The body contains all the non-security properties of the DigitalTwinsInstance. Security-related properties are set to null.</returns>
		public async Task<DigitalTwinsEndpointResourceListResult> DigitalTwinsEndpoint_ListAsync(DigitalTwinsEndpoint_ListApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/endpoints?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DigitalTwinsEndpointResourceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get DigitalTwinsInstances Endpoint.
		/// DigitalTwinsEndpoint_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/endpoints/{endpointName}
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="endpointName">Name of Endpoint Resource.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>The body contains all the non-security properties of the DigitalTwinsInstance. Security-related properties are set to null.</returns>
		public async Task<DigitalTwinsEndpointResource> DigitalTwinsEndpoint_GetAsync(DigitalTwinsEndpoint_GetApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName, string endpointName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/endpoints/"+ (endpointName==null? "" : System.Uri.EscapeDataString(endpointName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DigitalTwinsEndpointResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update DigitalTwinsInstance endpoint.
		/// DigitalTwinsEndpoint_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/endpoints/{endpointName}
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="endpointName">Name of Endpoint Resource.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="requestBody">The DigitalTwinsInstance endpoint metadata and security metadata.</param>
		/// <returns>This is returned as a response to the status polling request for the create or update operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task<DigitalTwinsEndpointResource> DigitalTwinsEndpoint_CreateOrUpdateAsync(DigitalTwinsEndpoint_CreateOrUpdateApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName, string endpointName, DigitalTwinsEndpointResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/endpoints/"+ (endpointName==null? "" : System.Uri.EscapeDataString(endpointName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DigitalTwinsEndpointResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a DigitalTwinsInstance endpoint.
		/// DigitalTwinsEndpoint_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/endpoints/{endpointName}
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="endpointName">Name of Endpoint Resource.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state.</returns>
		public async Task DigitalTwinsEndpoint_DeleteAsync(DigitalTwinsEndpoint_DeleteApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName, string endpointName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/endpoints/"+ (endpointName==null? "" : System.Uri.EscapeDataString(endpointName))+"?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get DigitalTwinsInstance IoTHubs.
		/// DigitalTwinsIoTHubs_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/integrationResources
		/// </summary>
		/// <param name="api_version">Version of the DigitalTwinsInstance Management API.
		/// Min length: 10
		// </param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="resourceName">The name of the DigitalTwinsInstance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>The body contains all the non-security properties of the DigitalTwinsInstance. Security-related properties are set to null.</returns>
		public async Task<DigitalTwinsIntegrationResourceListResult> DigitalTwinsIoTHubs_ListAsync(DigitalTwinsIoTHubs_ListApi_version api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DigitalTwins/digitalTwinsInstances/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/integrationResources?api-version=" + api_version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DigitalTwinsIntegrationResourceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets properties of an IoTHub Integration.
		/// IoTHub_Get {scope}/providers/Microsoft.DigitalTwins/integrationResources/{integrationResourceName}
		/// </summary>
		/// <param name="scope">The scope of the Digital Twins Integration. The scope has to be an IoTHub resource. For example, /{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IoTHubs/{resourceName}.</param>
		/// <param name="integrationResourceName">Name of IoTHub and DigitalTwinsInstance integration instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>This is a synchronous operation. The body contains metadata about IoTHub and DigitalTwinsInstance Integration.</returns>
		public async Task<IntegrationResource> IoTHub_GetAsync(string scope, string integrationResourceName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.DigitalTwins/integrationResources/"+ (integrationResourceName==null? "" : System.Uri.EscapeDataString(integrationResourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IntegrationResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or Updates an IoTHub Integration with DigitalTwinsInstances.
		/// IoTHub_CreateOrUpdate {scope}/providers/Microsoft.DigitalTwins/integrationResources/{integrationResourceName}
		/// </summary>
		/// <param name="scope">The scope of the Digital Twins Integration. The scope has to be an IoTHub resource. For example, /{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IoTHubs/{resourceName}.</param>
		/// <param name="integrationResourceName">Name of IoTHub and DigitalTwinsInstance integration instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="requestBody">The IoTHub metadata.</param>
		public async Task IoTHub_CreateOrUpdateAsync(string scope, string integrationResourceName, IntegrationResource requestBody)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.DigitalTwins/integrationResources/"+ (integrationResourceName==null? "" : System.Uri.EscapeDataString(integrationResourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a DigitalTwinsInstance link with IoTHub.
		/// IoTHub_Delete {scope}/providers/Microsoft.DigitalTwins/integrationResources/{integrationResourceName}
		/// </summary>
		/// <param name="scope">The scope of the Digital Twins Integration. The scope has to be an IoTHub resource. For example, /{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IoTHubs/{resourceName}.</param>
		/// <param name="integrationResourceName">Name of IoTHub and DigitalTwinsInstance integration instance.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>OK. DigitalTwinsInstance IoTHub link has been Deleted.</returns>
		public async Task IoTHub_DeleteAsync(string scope, string integrationResourceName)
		{
			var requestUri = ""+ (scope==null? "" : System.Uri.EscapeDataString(scope))+"/providers/Microsoft.DigitalTwins/integrationResources/"+ (integrationResourceName==null? "" : System.Uri.EscapeDataString(integrationResourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Operations_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwins_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwins_CheckNameAvailabilityApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwins_ListByResourceGroupApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwins_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwins_CreateOrUpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwins_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwins_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwinsEndpoint_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwinsEndpoint_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwinsEndpoint_CreateOrUpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwinsEndpoint_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
	
	public enum DigitalTwinsIoTHubs_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020-03-01-preview")]
		_2020Minus03Minus01Minuspreview = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
