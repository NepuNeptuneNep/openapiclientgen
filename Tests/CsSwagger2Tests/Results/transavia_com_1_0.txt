//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AirportDetailsDto
	{
		
		/// <summary>
		/// City where the airport is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public Country Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public GeoCoordinates GeoCoordinates { get; set; }
		
		/// <summary>
		/// Unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inboundRoutes")]
		public Link InboundRoutes { get; set; }
		
		/// <summary>
		/// Name of the airport.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outboundRoutes")]
		public Link OutboundRoutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Country
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class GeoCoordinates
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Link
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AirportDto
	{
		
		/// <summary>
		/// City where the airport is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public Country Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public GeoCoordinates GeoCoordinates { get; set; }
		
		/// <summary>
		/// Unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the airport.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public Link Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BadRequestResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessages")]
		public string[] ErrorMessages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class InternalServerErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public string ReferenceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NearestAirportDto
	{
		
		/// <summary>
		/// City where the airport is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public Country Country { get; set; }
		
		/// <summary>
		/// Distance in kilometers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distanceInKm")]
		public System.Nullable<System.Int32> DistanceInKm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geoCoordinates")]
		public GeoCoordinates GeoCoordinates { get; set; }
		
		/// <summary>
		/// Unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the airport.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public Link Self { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// All airports
		/// Retrieve all airports.
		/// Get 
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AirportDto[]> GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AirportDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Airport(s) by country code.
		/// Retrieve airports by country code.
		/// Countrycode_countryCodeGet countrycode/{countryCode}
		/// </summary>
		/// <param name="countryCode">Comma-separated list of country codes (2-character ISO 3166-1). More than 3 country codes is not allowed.</param>
		/// <returns>OK</returns>
		public async Task<AirportDto[]> Countrycode_countryCodeGetAsync(string countryCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "countrycode/"+ (countryCode==null? "" : System.Uri.EscapeDataString(countryCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AirportDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Nearest airport(s) by geo coordinates.
		/// Retrieve nearest airports by geo coordinates (latitude/longitude).
		/// NearestGetByLatitudeAndLongitudeAndMaxDistanceInKmAndLimit nearest
		/// </summary>
		/// <param name="latitude">Latitude in decimals, lower than -90.0 and higher than 90.0 is not allowed.</param>
		/// <param name="longitude">Longitude in decimals, lower than -180.0 and higher than 180.0 is not allowed.</param>
		/// <param name="maxDistanceInKm">Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied.</param>
		/// <param name="limit">Limits the result, lower than 0 is not allowed. If not set, the result is not limited.</param>
		/// <returns>OK</returns>
		public async Task<NearestAirportDto[]> NearestGetByLatitudeAndLongitudeAndMaxDistanceInKmAndLimitAsync(string latitude, string longitude, string maxDistanceInKm, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nearest?latitude=" + (latitude==null? "" : System.Uri.EscapeDataString(latitude))+"&longitude=" + (longitude==null? "" : System.Uri.EscapeDataString(longitude))+"&maxDistanceInKm=" + (maxDistanceInKm==null? "" : System.Uri.EscapeDataString(maxDistanceInKm))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NearestAirportDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Nearest airport(s) by airport id.
		/// Retrieve nearest airports by station id.
		/// Nearest_idGetByMaxDistanceInKmAndLimit nearest/{id}
		/// </summary>
		/// <param name="id">Airport (IATA code) to search nearest airports for.</param>
		/// <param name="maxDistanceInKm">Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied.</param>
		/// <param name="limit">Limits the result, lower than 0 is not allowed. If not set, the result is not limited.</param>
		/// <returns>OK</returns>
		public async Task<NearestAirportDto[]> Nearest_idGetByMaxDistanceInKmAndLimitAsync(string id, string maxDistanceInKm, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nearest/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&maxDistanceInKm=" + (maxDistanceInKm==null? "" : System.Uri.EscapeDataString(maxDistanceInKm))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NearestAirportDto[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Airport by id.
		/// Retrieve airport by id.
		/// _idGet {id}
		/// </summary>
		/// <param name="id">Airport code (3-character IATA code).</param>
		/// <returns>OK</returns>
		public async Task<AirportDetailsDto> _idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AirportDetailsDto>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
