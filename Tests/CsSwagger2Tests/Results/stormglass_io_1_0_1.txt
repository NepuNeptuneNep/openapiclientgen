//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Forecast
	{
		
		/// <summary>
		/// Every hour with forecast data is represented with an object in this array
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public ForecastHours[] ForecastHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ForecastMeta Meta { get; set; }
	}
	
	public class ForecastHours
	{
		
		[System.Runtime.Serialization.DataMember(Name="airTemperature")]
		public ForecastHoursAirTemperature[] ForecastHoursAirTemperature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swellDirection")]
		public ForecastHoursSwellDirection[] ForecastHoursSwellDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swellHeight")]
		public ForecastHoursSwellHeight[] ForecastHoursSwellHeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swellPeriod")]
		public ForecastHoursSwellPeriod[] ForecastHoursSwellPeriod { get; set; }
		
		/// <summary>
		/// Timestamp in utc for the hour represented
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waterTemperature")]
		public ForecastHoursWaterTemperature[] ForecastHoursWaterTemperature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveDirection")]
		public ForecastHoursWaveDirection[] ForecastHoursWaveDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waveHeight")]
		public ForecastHoursWaveHeight[] ForecastHoursWaveHeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wavePeriod")]
		public ForecastHoursWavePeriod[] ForecastHoursWavePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windDirection")]
		public ForecastHoursWindDirection[] ForecastHoursWindDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windSpeed")]
		public ForecastHoursWindSpeed[] ForecastHoursWindSpeed { get; set; }
	}
	
	public class ForecastHoursAirTemperature
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ForecastHoursSwellDirection
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ForecastHoursSwellHeight
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ForecastHoursSwellPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ForecastHoursWaterTemperature
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ForecastHoursWaveDirection
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class ForecastHoursWaveHeight
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ForecastHoursWavePeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ForecastHoursWindDirection
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ForecastHoursWindSpeed
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ForecastMeta
	{
		
		/// <summary>
		/// The number of successful requests you can do on one day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyQuota")]
		public System.Nullable<System.Int32> DailyQuota { get; set; }
		
		/// <summary>
		/// The latitude the response is showing forecast data for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// The longitude the response is showing forecast data for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public System.Nullable<System.Double> Lng { get; set; }
		
		/// <summary>
		/// The number of successful requests made this day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestCount")]
		public System.Nullable<System.Int32> RequestCount { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get hourly forecasts by coordinates
		/// Get forecast info for the given coordinates. For every hour and property, you will get a list of weather sources and their values.
		/// GetForecast forecast
		/// </summary>
		/// <param name="lat">The latitude for a location. Valid input is a number between -90 and 90.</param>
		/// <param name="lng">The longitude for a location. Valid input is a number between -180 and 180.</param>
		/// <returns>Successful request</returns>
		public async Task<Forecast> GetForecastAsync(double lat, double lng)
		{
			var requestUri = "forecast?lat="+lat+"&lng="+lng;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Forecast>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
