//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Pre-provisioned and readily available Event Hubs Cluster count per region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableCluster
	{
		
		/// <summary>
		/// Location fo the Available Cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	/// <summary>
	/// The response of the List Available Clusters operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableClustersList
	{
		
		/// <summary>
		/// The count of readily available and pre-provisioned Event Hubs Clusters per region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AvailableCluster[] Value { get; set; }
	}
	
	/// <summary>
	/// Single Event Hubs Cluster resource in List or Get operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Cluster : TrackedResource
	{
		
		/// <summary>
		/// Event Hubs Cluster properties supplied in responses in List or Get operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// SKU parameters particular to a cluster instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public ClusterSku Sku { get; set; }
	}
	
	/// <summary>
	/// SKU parameters particular to a cluster instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterSku
	{
		
		/// <summary>
		/// The quantity of Event Hubs Cluster Capacity Units contained in this cluster.
		/// Minimum: 1
		/// Maximum: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		[System.ComponentModel.DataAnnotations.Range(1, 32)]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Name of this SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public ClusterSkuName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterSkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dedicated = 0,
	}
	
	/// <summary>
	/// The response of the List Event Hubs Clusters operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Empty unless the value parameter contains an incomplete list of Event Hubs Clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The Event Hubs Clusters present in the List Event Hubs operation results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Cluster[] Value { get; set; }
	}
	
	/// <summary>
	/// Contains all settings for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterQuotaConfigurationProperties
	{
		
		/// <summary>
		/// All possible Cluster settings - a collection of key/value paired settings which apply to quotas and configurations imposed on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public System.Collections.Generic.Dictionary<string, string> Settings { get; set; }
	}
	
	/// <summary>
	/// Single Namespace item in List or Get Operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EHNamespace : TrackedResource
	{
		
		/// <summary>
		/// Namespace properties supplied for create namespace operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// SKU parameters supplied to the create namespace operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// SKU parameters supplied to the create namespace operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The Event Hubs throughput units, value should be 0 to 20 throughput units.
		/// Minimum: 0
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		[System.ComponentModel.DataAnnotations.Range(0, 20)]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Name of this SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public SkuName Name { get; set; }
		
		/// <summary>
		/// The billing tier of this particular SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public SkuName Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
	}
	
	/// <summary>
	/// The full ARM ID of an Event Hubs Namespace
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EHNamespaceIdContainer
	{
		
		/// <summary>
		/// id parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The response of the List Namespace IDs operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EHNamespaceIdListResult
	{
		
		/// <summary>
		/// Result of the List Namespace IDs operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EHNamespaceIdContainer[] Value { get; set; }
	}
	
	/// <summary>
	/// The response of the List Namespace operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EHNamespaceListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains incomplete list of namespaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List Namespace operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EHNamespace[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties to configure Encryption
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Encryption
	{
		
		/// <summary>
		/// Enumerates the possible value of keySource for Encryption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keySource")]
		public System.Nullable<EncryptionKeySource> KeySource { get; set; }
		
		/// <summary>
		/// Properties to configure keyVault Properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultProperties")]
		public KeyVaultProperties KeyVaultProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EncryptionKeySource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.KeyVault")]
		Microsoft_KeyVault = 0,
	}
	
	/// <summary>
	/// Error response that indicates the service is not able to process the incoming request. The reason is provided in the error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Properties to configure Identity for Bring your Own Keys
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identity
	{
		
		/// <summary>
		/// ObjectId from the KeyVault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// TenantId from the KeyVault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Enumerates the possible value Identity type, which currently supports only 'SystemAssigned'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<IdentityType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
	}
	
	/// <summary>
	/// Single item in a List or Get IpFilterRules operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IpFilterRule : Resource
	{
		
		/// <summary>
		/// Properties supplied to create or update IpFilterRules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// The response from the List namespace operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IpFilterRuleListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains an incomplete list of IpFilter Rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List IpFilter Rules operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public IpFilterRule[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties to configure keyVault Properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultProperties
	{
		
		/// <summary>
		/// Name of the Key from KeyVault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Uri of KeyVault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultUri")]
		public string KeyVaultUri { get; set; }
	}
	
	/// <summary>
	/// The response from the List namespace operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NWRuleSetIpRules
	{
		
		/// <summary>
		/// The IP Filter Action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<NWRuleSetIpRulesAction> Action { get; set; }
		
		/// <summary>
		/// IP Mask
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipMask")]
		public string IpMask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NWRuleSetIpRulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
	}
	
	/// <summary>
	/// The response from the List namespace operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NWRuleSetVirtualNetworkRules
	{
		
		/// <summary>
		/// Value that indicates whether to ignore missing Vnet Service Endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreMissingVnetServiceEndpoint")]
		public System.Nullable<System.Boolean> IgnoreMissingVnetServiceEndpoint { get; set; }
		
		/// <summary>
		/// Properties supplied for Subnet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public Subnet Subnet { get; set; }
	}
	
	/// <summary>
	/// Description of topic resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkRuleSet : Resource
	{
		
		/// <summary>
		/// NetworkRuleSet properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// A Event Hub REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Event Hub operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Event Hub operations supported by the Microsoft.EventHub resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The Resource definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties supplied for Subnet
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Subnet
	{
		
		/// <summary>
		/// Resource ID of Virtual Network Subnet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Definition of an Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource : Resource
	{
		
		/// <summary>
		/// Resource location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Single item in a List or Get VirtualNetworkRules operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRule : Resource
	{
		
		/// <summary>
		/// Properties supplied to create or update VirtualNetworkRules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// The response from the List namespace operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRuleListResult
	{
		
		/// <summary>
		/// Link to the next set of results. Not empty if Value contains an incomplete list of VirtualNetwork Rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Result of the List VirtualNetwork Rules operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VirtualNetworkRule[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Event Hub REST API operations.
		/// Operations_List providers/Microsoft.EventHub/operations
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.EventHub/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the quantity of available pre-provisioned Event Hubs Clusters, indexed by Azure region.
		/// Clusters_ListAvailableClusters subscriptions/{subscriptionId}/providers/Microsoft.EventHub/availableClusterRegions
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>Available clusters listed successfully.</returns>
		public async Task<AvailableClustersList> Clusters_ListAvailableClustersAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EventHub/availableClusterRegions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailableClustersList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the available Namespaces within a subscription, irrespective of the resource groups.
		/// Namespaces_List subscriptions/{subscriptionId}/providers/Microsoft.EventHub/namespaces
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespaces returned successfully.</returns>
		public async Task<EHNamespaceListResult> Namespaces_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EventHub/namespaces?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EHNamespaceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the available Event Hubs Clusters within an ARM resource group.
		/// Clusters_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>Clusters returned successfully.</returns>
		public async Task<ClusterListResult> Clusters_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/clusters&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClusterListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the resource description of the specified Event Hubs Cluster.
		/// Clusters_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="clusterName">The name of the Event Hubs Cluster.
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>Event Hubs Cluster resource description returned successfully.</returns>
		public async Task<Cluster> Clusters_GetAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cluster>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an instance of an Event Hubs Cluster.
		/// Clusters_Put subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="clusterName">The name of the Event Hubs Cluster.
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>Event Hubs Cluster successfully created or updated.</returns>
		public async Task<Cluster> Clusters_PutAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cluster>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing Event Hubs Cluster. This operation is idempotent.
		/// Clusters_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="clusterName">The name of the Event Hubs Cluster.
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>Event Hubs Cluster successfully deleted.</returns>
		public async Task Clusters_DeleteAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies mutable properties on the Event Hubs Cluster. This operation is idempotent.
		/// Clusters_Patch subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="clusterName">The name of the Event Hubs Cluster.
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">The properties of the Event Hubs Cluster which should be updated.</param>
		/// <returns>Event Hubs Cluster successfully created.</returns>
		public async Task<Cluster> Clusters_PatchAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version, Cluster requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cluster>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all Event Hubs Namespace IDs in an Event Hubs Dedicated Cluster.
		/// Clusters_ListNamespaces subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/namespaces
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="clusterName">The name of the Event Hubs Cluster.
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>List of Namespace IDs in Cluster successfully delivered.</returns>
		public async Task<EHNamespaceIdListResult> Clusters_ListNamespacesAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/namespaces&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EHNamespaceIdListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Event Hubs Cluster settings - a collection of key/value pairs which represent the quotas and settings imposed on the cluster.
		/// Configuration_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/quotaConfiguration/default
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="clusterName">The name of the Event Hubs Cluster.
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>Event Hubs Cluster settings configuration returned.</returns>
		public async Task<ClusterQuotaConfigurationProperties> Configuration_GetAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/quotaConfiguration/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClusterQuotaConfigurationProperties>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves the settings not specified in the request body unmodified.
		/// Configuration_Patch subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/quotaConfiguration/default
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="clusterName">The name of the Event Hubs Cluster.
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Parameters for creating an Event Hubs Cluster resource.</param>
		/// <returns>Event Hubs Cluster settings configuration returned.</returns>
		public async Task<ClusterQuotaConfigurationProperties> Configuration_PatchAsync(string subscriptionId, string resourceGroupName, string clusterName, string api_version, ClusterQuotaConfigurationProperties requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/quotaConfiguration/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClusterQuotaConfigurationProperties>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the available Namespaces within a resource group.
		/// Namespaces_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespaces returned successfully.</returns>
		public async Task<EHNamespaceListResult> Namespaces_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EHNamespaceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the description of the specified namespace.
		/// Namespaces_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace returned successfully.</returns>
		public async Task<EHNamespace> Namespaces_GetAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EHNamespace>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
		/// Namespaces_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters for creating a namespace resource.</param>
		/// <returns>Namespace successfully created.</returns>
		public async Task<EHNamespace> Namespaces_CreateOrUpdateAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, EHNamespace requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EHNamespace>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing namespace. This operation also removes all associated resources under the namespace.
		/// Namespaces_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace successfully deleted.</returns>
		public async Task Namespaces_DeleteAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
		/// Namespaces_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters for updating a namespace resource.</param>
		/// <returns>Namespace successfully updated.</returns>
		public async Task<EHNamespace> Namespaces_UpdateAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, EHNamespace requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EHNamespace>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of IP Filter rules for a Namespace.
		/// Namespaces_ListIPFilterRules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/ipfilterrules
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace IpFilterRule successfully returned.</returns>
		public async Task<IpFilterRuleListResult> Namespaces_ListIPFilterRulesAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/ipfilterrules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IpFilterRuleListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an IpFilterRule for a Namespace by rule name.
		/// Namespaces_GetIpFilterRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/ipfilterrules/{ipFilterRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="ipFilterRuleName">The IP Filter Rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace IpFilterRule returned successfully.</returns>
		public async Task<IpFilterRule> Namespaces_GetIpFilterRuleAsync(string resourceGroupName, string namespaceName, string ipFilterRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/ipfilterrules/"+ (ipFilterRuleName==null? "" : System.Uri.EscapeDataString(ipFilterRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IpFilterRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an IpFilterRule for a Namespace.
		/// Namespaces_CreateOrUpdateIpFilterRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/ipfilterrules/{ipFilterRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="ipFilterRuleName">The IP Filter Rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The Namespace IpFilterRule.</param>
		/// <returns>Namespace IpFilterRule created</returns>
		public async Task<IpFilterRule> Namespaces_CreateOrUpdateIpFilterRuleAsync(string resourceGroupName, string namespaceName, string ipFilterRuleName, string api_version, string subscriptionId, IpFilterRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/ipfilterrules/"+ (ipFilterRuleName==null? "" : System.Uri.EscapeDataString(ipFilterRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IpFilterRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an IpFilterRule for a Namespace.
		/// Namespaces_DeleteIpFilterRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/ipfilterrules/{ipFilterRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="ipFilterRuleName">The IP Filter Rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace IpFilterRule successfully deleted.</returns>
		public async Task Namespaces_DeleteIpFilterRuleAsync(string resourceGroupName, string namespaceName, string ipFilterRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/ipfilterrules/"+ (ipFilterRuleName==null? "" : System.Uri.EscapeDataString(ipFilterRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets NetworkRuleSet for a Namespace.
		/// Namespaces_GetNetworkRuleSet subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkRuleSets/default
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace NetworkRuleSet successfully returned.</returns>
		public async Task<NetworkRuleSet> Namespaces_GetNetworkRuleSetAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/networkRuleSets/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NetworkRuleSet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update NetworkRuleSet for a Namespace.
		/// Namespaces_CreateOrUpdateNetworkRuleSet subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkRuleSets/default
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The Namespace IpFilterRule.</param>
		/// <returns>Namespace NetworkRuleSet successfully returned.</returns>
		public async Task<NetworkRuleSet> Namespaces_CreateOrUpdateNetworkRuleSetAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId, NetworkRuleSet requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/networkRuleSets/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NetworkRuleSet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of VirtualNetwork rules for a Namespace.
		/// Namespaces_ListVirtualNetworkRules subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/virtualnetworkrules
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace VirtualNetworkRule successfully returned.</returns>
		public async Task<VirtualNetworkRuleListResult> Namespaces_ListVirtualNetworkRulesAsync(string resourceGroupName, string namespaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/virtualnetworkrules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualNetworkRuleListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an VirtualNetworkRule for a Namespace by rule name.
		/// Namespaces_GetVirtualNetworkRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/virtualnetworkrules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="virtualNetworkRuleName">The Virtual Network Rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace VirtualNetworkRule returned successfully.</returns>
		public async Task<VirtualNetworkRule> Namespaces_GetVirtualNetworkRuleAsync(string resourceGroupName, string namespaceName, string virtualNetworkRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/virtualnetworkrules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualNetworkRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an VirtualNetworkRule for a Namespace.
		/// Namespaces_CreateOrUpdateVirtualNetworkRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/virtualnetworkrules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="virtualNetworkRuleName">The Virtual Network Rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The Namespace VirtualNetworkRule.</param>
		/// <returns>Namespace VirtualNetworkRule created</returns>
		public async Task<VirtualNetworkRule> Namespaces_CreateOrUpdateVirtualNetworkRuleAsync(string resourceGroupName, string namespaceName, string virtualNetworkRuleName, string api_version, string subscriptionId, VirtualNetworkRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/virtualnetworkrules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualNetworkRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an VirtualNetworkRule for a Namespace.
		/// Namespaces_DeleteVirtualNetworkRule subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/virtualnetworkrules/{virtualNetworkRuleName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="namespaceName">The Namespace name
		/// Min length: 6
		/// Max length: 50
		// </param>
		/// <param name="virtualNetworkRuleName">The Virtual Network Rule name.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Namespace VirtualNetworkRule successfully deleted.</returns>
		public async Task Namespaces_DeleteVirtualNetworkRuleAsync(string resourceGroupName, string namespaceName, string virtualNetworkRuleName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EventHub/namespaces/"+ (namespaceName==null? "" : System.Uri.EscapeDataString(namespaceName))+"/virtualnetworkrules/"+ (virtualNetworkRuleName==null? "" : System.Uri.EscapeDataString(virtualNetworkRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
