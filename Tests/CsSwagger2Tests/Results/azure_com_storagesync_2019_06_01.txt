//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Backup request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BackupRequest
	{
		
		/// <summary>
		/// Azure File Share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFileShare")]
		public string AzureFileShare { get; set; }
	}
	
	/// <summary>
	/// Parameters for a check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityParameters
	{
		
		/// <summary>
		/// The name to check for availability
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type. Must be set to Microsoft.StorageSync/storageSyncServices
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameAvailabilityParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.StorageSync/storageSyncServices")]
		Microsoft_StorageSync_storageSyncServices = 0,
	}
	
	/// <summary>
	/// The CheckNameAvailability operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityResult
	{
		
		/// <summary>
		/// Gets an error message explaining the Reason value in more detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or invalid and cannot be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Gets the reason that a Storage Sync Service name could not be used. The Reason element is only returned if NameAvailable is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameAvailabilityResultReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityResultReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// Cloud Endpoint object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudEndpoint
	{
		
		/// <summary>
		/// CloudEndpoint Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CloudEndpointProperties Properties { get; set; }
	}
	
	/// <summary>
	/// CloudEndpoint Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudEndpointProperties
	{
		
		/// <summary>
		/// Azure file share name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFileShareName")]
		public string AzureFileShareName { get; set; }
		
		/// <summary>
		/// Backup Enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupEnabled")]
		public string BackupEnabled { get; set; }
		
		/// <summary>
		/// Friendly Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Resource Last Operation Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastOperationName")]
		public string LastOperationName { get; set; }
		
		/// <summary>
		/// CloudEndpoint lastWorkflowId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastWorkflowId")]
		public string LastWorkflowId { get; set; }
		
		/// <summary>
		/// Partnership Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnershipId")]
		public string PartnershipId { get; set; }
		
		/// <summary>
		/// CloudEndpoint Provisioning State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Storage Account Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountResourceId")]
		public string StorageAccountResourceId { get; set; }
		
		/// <summary>
		/// Storage Account Tenant Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountTenantId")]
		public string StorageAccountTenantId { get; set; }
	}
	
	/// <summary>
	/// Array of CloudEndpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudEndpointArray
	{
		
		/// <summary>
		/// Collection of CloudEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CloudEndpoint[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters used when creating a cloud endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudEndpointCreateParameters
	{
		
		/// <summary>
		/// CloudEndpoint Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CloudEndpointCreateParametersProperties Properties { get; set; }
	}
	
	/// <summary>
	/// CloudEndpoint Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudEndpointCreateParametersProperties
	{
		
		/// <summary>
		/// Azure file share name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFileShareName")]
		public string AzureFileShareName { get; set; }
		
		/// <summary>
		/// Friendly Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Storage Account Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountResourceId")]
		public string StorageAccountResourceId { get; set; }
		
		/// <summary>
		/// Storage Account Tenant Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountTenantId")]
		public string StorageAccountTenantId { get; set; }
	}
	
	/// <summary>
	/// Type of the Feature Status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum FeatureStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		on = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		off = 1,
	}
	
	/// <summary>
	/// Type of the Operation Direction
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="do")]
		_do = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		undo = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancel = 2,
	}
	
	/// <summary>
	/// The operation supported by storage sync.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplayInfo
	{
		
		/// <summary>
		/// The description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The action that users can perform, based on their permission level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Microsoft StorageSync.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Operation Display Resource object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplayResource
	{
		
		/// <summary>
		/// Operation Display Resource Description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Operation Display Resource Operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Operation Display Resource Provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Operation Display Resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The operation supported by storage sync.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntity
	{
		
		/// <summary>
		/// The operation supported by storage sync.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplayInfo Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	/// <summary>
	/// The list of storage sync operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationEntityListResult
	{
		
		/// <summary>
		/// The link used to get the next page of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationEntity[] Value { get; set; }
	}
	
	/// <summary>
	/// Operation status object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationStatus
	{
		
		/// <summary>
		/// End time of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public StorageSyncApiError Error { get; set; }
		
		/// <summary>
		/// Operation Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start time of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Operation status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Error type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSyncApiError
	{
		
		/// <summary>
		/// Error code of the given entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error Details object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public StorageSyncErrorDetails Details { get; set; }
		
		/// <summary>
		/// Error message of the given entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Target of the given error entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Error Details object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSyncErrorDetails
	{
		
		/// <summary>
		/// Error code of the given entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message of the given entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Target of the given entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Post Backup Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PostBackupResponse
	{
		
		/// <summary>
		/// Post Backup Response Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupMetadata")]
		public PostBackupResponseProperties BackupMetadata { get; set; }
	}
	
	/// <summary>
	/// Post Backup Response Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PostBackupResponseProperties
	{
		
		/// <summary>
		/// cloud endpoint Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudEndpointName")]
		public string CloudEndpointName { get; set; }
	}
	
	/// <summary>
	/// Post Restore Request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PostRestoreRequest
	{
		
		/// <summary>
		/// Post Restore Azure file share uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFileShareUri")]
		public string AzureFileShareUri { get; set; }
		
		/// <summary>
		/// Post Restore Azure failed file list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedFileList")]
		public string FailedFileList { get; set; }
		
		/// <summary>
		/// Post Restore partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// Post Restore replica group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaGroup")]
		public string ReplicaGroup { get; set; }
		
		/// <summary>
		/// Post Restore request id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Post Restore restore file spec array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restoreFileSpec")]
		public RestoreFileSpec[] RestoreFileSpec { get; set; }
		
		/// <summary>
		/// Post Restore Azure source azure file share uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAzureFileShareUri")]
		public string SourceAzureFileShareUri { get; set; }
		
		/// <summary>
		/// Post Restore Azure status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Restore file spec.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestoreFileSpec
	{
		
		/// <summary>
		/// Restore file spec isdir
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isdir")]
		public System.Nullable<System.Boolean> Isdir { get; set; }
		
		/// <summary>
		/// Restore file spec path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Pre Restore request object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PreRestoreRequest
	{
		
		/// <summary>
		/// Pre Restore Azure file share uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFileShareUri")]
		public string AzureFileShareUri { get; set; }
		
		/// <summary>
		/// Pre Restore backup metadata property bag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupMetadataPropertyBag")]
		public string BackupMetadataPropertyBag { get; set; }
		
		/// <summary>
		/// Pre Restore partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partition")]
		public string Partition { get; set; }
		
		/// <summary>
		/// Pre Restore pause wait for sync drain time period in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pauseWaitForSyncDrainTimePeriodInSeconds")]
		public System.Nullable<System.Int32> PauseWaitForSyncDrainTimePeriodInSeconds { get; set; }
		
		/// <summary>
		/// Pre Restore replica group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaGroup")]
		public string ReplicaGroup { get; set; }
		
		/// <summary>
		/// Pre Restore request id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Pre Restore restore file spec array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restoreFileSpec")]
		public RestoreFileSpec[] RestoreFileSpec { get; set; }
		
		/// <summary>
		/// Pre Restore Azure source azure file share uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAzureFileShareUri")]
		public string SourceAzureFileShareUri { get; set; }
		
		/// <summary>
		/// Pre Restore Azure status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Type of the ProgressType
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProgressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initialize = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		download = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upload = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		recall = 4,
	}
	
	/// <summary>
	/// The parameters used when calling recall action on server endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecallActionParameters
	{
		
		/// <summary>
		/// Pattern of the files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		/// <summary>
		/// Recall path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recallPath")]
		public string RecallPath { get; set; }
	}
	
	/// <summary>
	/// Registered Server resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegisteredServer
	{
		
		/// <summary>
		/// RegisteredServer Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RegisteredServerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// RegisteredServer Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegisteredServerProperties
	{
		
		/// <summary>
		/// Registered Server Agent Version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentVersion")]
		public string AgentVersion { get; set; }
		
		/// <summary>
		/// Registered Server clusterId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Registered Server clusterName
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Resource discoveryEndpointUri
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discoveryEndpointUri")]
		public string DiscoveryEndpointUri { get; set; }
		
		/// <summary>
		/// Friendly Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Registered Server last heart beat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastHeartBeat")]
		public string LastHeartBeat { get; set; }
		
		/// <summary>
		/// Resource Last Operation Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastOperationName")]
		public string LastOperationName { get; set; }
		
		/// <summary>
		/// Registered Server lastWorkflowId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastWorkflowId")]
		public string LastWorkflowId { get; set; }
		
		/// <summary>
		/// Management Endpoint Uri
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementEndpointUri")]
		public string ManagementEndpointUri { get; set; }
		
		/// <summary>
		/// Monitoring Configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoringConfiguration")]
		public string MonitoringConfiguration { get; set; }
		
		/// <summary>
		/// Registered Server Provisioning State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Resource Location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLocation")]
		public string ResourceLocation { get; set; }
		
		/// <summary>
		/// Registered Server Certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCertificate")]
		public string ServerCertificate { get; set; }
		
		/// <summary>
		/// Registered Server serverId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverId")]
		public string ServerId { get; set; }
		
		/// <summary>
		/// Registered Server Management Error Code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverManagementErrorCode")]
		public System.Nullable<System.Int32> ServerManagementErrorCode { get; set; }
		
		/// <summary>
		/// Registered Server OS Version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverOSVersion")]
		public string ServerOSVersion { get; set; }
		
		/// <summary>
		/// Registered Server serverRole
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverRole")]
		public string ServerRole { get; set; }
		
		/// <summary>
		/// Service Location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceLocation")]
		public string ServiceLocation { get; set; }
		
		/// <summary>
		/// Registered Server storageSyncServiceUid
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageSyncServiceUid")]
		public string StorageSyncServiceUid { get; set; }
	}
	
	/// <summary>
	/// Array of RegisteredServer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegisteredServerArray
	{
		
		/// <summary>
		/// Collection of Registered Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RegisteredServer[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters used when creating a registered server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegisteredServerCreateParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RegisteredServerCreateParametersProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegisteredServerCreateParametersProperties
	{
		
		/// <summary>
		/// Registered Server Agent Version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentVersion")]
		public string AgentVersion { get; set; }
		
		/// <summary>
		/// Registered Server clusterId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Registered Server clusterName
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Friendly Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Registered Server last heart beat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastHeartBeat")]
		public string LastHeartBeat { get; set; }
		
		/// <summary>
		/// Registered Server Certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCertificate")]
		public string ServerCertificate { get; set; }
		
		/// <summary>
		/// Registered Server serverId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverId")]
		public string ServerId { get; set; }
		
		/// <summary>
		/// Registered Server OS Version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverOSVersion")]
		public string ServerOSVersion { get; set; }
		
		/// <summary>
		/// Registered Server serverRole
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverRole")]
		public string ServerRole { get; set; }
	}
	
	/// <summary>
	/// Resource Move Info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourcesMoveInfo
	{
		
		/// <summary>
		/// Collection of Resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public string[] Resources { get; set; }
		
		/// <summary>
		/// Target resource group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceGroup")]
		public string TargetResourceGroup { get; set; }
	}
	
	/// <summary>
	/// Server Endpoint object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpoint
	{
		
		/// <summary>
		/// ServerEndpoint Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServerEndpointProperties Properties { get; set; }
	}
	
	/// <summary>
	/// ServerEndpoint Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointProperties
	{
		
		/// <summary>
		/// Type of the Feature Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudTiering")]
		public FeatureStatus CloudTiering { get; set; }
		
		/// <summary>
		/// Server endpoint cloud tiering status object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudTieringStatus")]
		public ServerEndpointCloudTieringStatus CloudTieringStatus { get; set; }
		
		/// <summary>
		/// Friendly Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Resource Last Operation Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastOperationName")]
		public string LastOperationName { get; set; }
		
		/// <summary>
		/// ServerEndpoint lastWorkflowId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastWorkflowId")]
		public string LastWorkflowId { get; set; }
		
		/// <summary>
		/// Type of the Feature Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineDataTransfer")]
		public FeatureStatus OfflineDataTransfer { get; set; }
		
		/// <summary>
		/// Offline data transfer share name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineDataTransferShareName")]
		public string OfflineDataTransferShareName { get; set; }
		
		/// <summary>
		/// Offline data transfer storage account resource ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineDataTransferStorageAccountResourceId")]
		public string OfflineDataTransferStorageAccountResourceId { get; set; }
		
		/// <summary>
		/// Offline data transfer storage account tenant ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineDataTransferStorageAccountTenantId")]
		public string OfflineDataTransferStorageAccountTenantId { get; set; }
		
		/// <summary>
		/// ServerEndpoint Provisioning State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Server endpoint recall status object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recallStatus")]
		public ServerEndpointRecallStatus RecallStatus { get; set; }
		
		/// <summary>
		/// Server folder used for data synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverLocalPath")]
		public string ServerLocalPath { get; set; }
		
		/// <summary>
		/// Arm resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverResourceId")]
		public string ServerResourceId { get; set; }
		
		/// <summary>
		/// Server Endpoint sync status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncStatus")]
		public ServerEndpointSyncStatus SyncStatus { get; set; }
		
		/// <summary>
		/// Tier files older than days.
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierFilesOlderThanDays")]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> TierFilesOlderThanDays { get; set; }
		
		/// <summary>
		/// Level of free space to be maintained by Cloud Tiering if it is enabled.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeFreeSpacePercent")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> VolumeFreeSpacePercent { get; set; }
	}
	
	/// <summary>
	/// Server endpoint cloud tiering status object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointCloudTieringStatus
	{
		
		/// <summary>
		/// Type of the cloud tiering health state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="health")]
		public System.Nullable<ServerEndpointCloudTieringStatusHealth> Health { get; set; }
		
		/// <summary>
		/// Last cloud tiering result (HResult)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCloudTieringResult")]
		public System.Nullable<System.Int32> LastCloudTieringResult { get; set; }
		
		/// <summary>
		/// Last cloud tiering success timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSuccessTimestamp")]
		public System.Nullable<System.DateTimeOffset> LastSuccessTimestamp { get; set; }
		
		/// <summary>
		/// Last updated timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerEndpointCloudTieringStatusHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Healthy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 1,
	}
	
	/// <summary>
	/// Server endpoint recall status object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointRecallStatus
	{
		
		/// <summary>
		/// Last updated timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTimestamp { get; set; }
		
		/// <summary>
		/// Array of recall errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recallErrors")]
		public ServerEndpointRecallError[] RecallErrors { get; set; }
		
		/// <summary>
		/// Total count of recall errors.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRecallErrorsCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> TotalRecallErrorsCount { get; set; }
	}
	
	/// <summary>
	/// Server endpoint recall error object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointRecallError
	{
		
		/// <summary>
		/// Count of occurences of the error
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> Count { get; set; }
		
		/// <summary>
		/// Error code (HResult)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
	}
	
	/// <summary>
	/// Server Endpoint sync status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointSyncStatus
	{
		
		/// <summary>
		/// Type of the sync health state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="combinedHealth")]
		public System.Nullable<ServerEndpointSyncStatusCombinedHealth> CombinedHealth { get; set; }
		
		/// <summary>
		/// Sync Session status object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadActivity")]
		public ServerEndpointSyncActivityStatus DownloadActivity { get; set; }
		
		/// <summary>
		/// Type of the sync health state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadHealth")]
		public ServerEndpointSyncStatusCombinedHealth DownloadHealth { get; set; }
		
		/// <summary>
		/// Sync Session status object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadStatus")]
		public ServerEndpointSyncSessionStatus DownloadStatus { get; set; }
		
		/// <summary>
		/// Last Updated Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTimestamp { get; set; }
		
		/// <summary>
		/// Type of the Health state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineDataTransferStatus")]
		public System.Nullable<ServerEndpointSyncStatusOfflineDataTransferStatus> OfflineDataTransferStatus { get; set; }
		
		/// <summary>
		/// Type of the sync activity state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncActivity")]
		public System.Nullable<ServerEndpointSyncStatusSyncActivity> SyncActivity { get; set; }
		
		/// <summary>
		/// Total count of persistent files not syncing (combined upload + download).
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPersistentFilesNotSyncingCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> TotalPersistentFilesNotSyncingCount { get; set; }
		
		/// <summary>
		/// Sync Session status object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadActivity")]
		public ServerEndpointSyncActivityStatus UploadActivity { get; set; }
		
		/// <summary>
		/// Type of the sync health state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadHealth")]
		public ServerEndpointSyncStatusCombinedHealth UploadHealth { get; set; }
		
		/// <summary>
		/// Sync Session status object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadStatus")]
		public ServerEndpointSyncSessionStatus UploadStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerEndpointSyncStatusCombinedHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Healthy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SyncBlockedForRestore = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SyncBlockedForChangeDetectionPostRestore = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoActivity = 4,
	}
	
	/// <summary>
	/// Sync Session status object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointSyncActivityStatus
	{
		
		/// <summary>
		/// Applied bytes
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appliedBytes")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> AppliedBytes { get; set; }
		
		/// <summary>
		/// Applied item count.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appliedItemCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> AppliedItemCount { get; set; }
		
		/// <summary>
		/// Per item error count
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perItemErrorCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> PerItemErrorCount { get; set; }
		
		/// <summary>
		/// Timestamp when properties were updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// Total bytes (if available)
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytes")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> TotalBytes { get; set; }
		
		/// <summary>
		/// Total item count (if available)
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItemCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> TotalItemCount { get; set; }
	}
	
	/// <summary>
	/// Sync Session status object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointSyncSessionStatus
	{
		
		/// <summary>
		/// Array of per-item errors coming from the last sync session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesNotSyncingErrors")]
		public ServerEndpointFilesNotSyncingError[] FilesNotSyncingErrors { get; set; }
		
		/// <summary>
		/// Last sync per item error count.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSyncPerItemErrorCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> LastSyncPerItemErrorCount { get; set; }
		
		/// <summary>
		/// Last sync result (HResult)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSyncResult")]
		public System.Nullable<System.Int32> LastSyncResult { get; set; }
		
		/// <summary>
		/// Last sync success timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSyncSuccessTimestamp")]
		public System.Nullable<System.DateTimeOffset> LastSyncSuccessTimestamp { get; set; }
		
		/// <summary>
		/// Last sync timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSyncTimestamp")]
		public System.Nullable<System.DateTimeOffset> LastSyncTimestamp { get; set; }
		
		/// <summary>
		/// Count of persistent files not syncing.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistentFilesNotSyncingCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> PersistentFilesNotSyncingCount { get; set; }
		
		/// <summary>
		/// Count of transient files not syncing.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transientFilesNotSyncingCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> TransientFilesNotSyncingCount { get; set; }
	}
	
	/// <summary>
	/// Files not syncing error object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointFilesNotSyncingError
	{
		
		/// <summary>
		/// Error code (HResult)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// Count of persistent files not syncing with the specified error code
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistentCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> PersistentCount { get; set; }
		
		/// <summary>
		/// Count of transient files not syncing with the specified error code
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transientCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> TransientCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerEndpointSyncStatusOfflineDataTransferStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotRunning = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerEndpointSyncStatusSyncActivity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upload = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Download = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadAndDownload = 2,
	}
	
	/// <summary>
	/// Array of ServerEndpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointArray
	{
		
		/// <summary>
		/// Collection of ServerEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ServerEndpoint[] Value { get; set; }
	}
	
	/// <summary>
	/// Type of the cloud tiering health state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerEndpointCloudTieringHealthState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Healthy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 1,
	}
	
	/// <summary>
	/// The parameters used when creating a server endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointCreateParameters
	{
		
		/// <summary>
		/// ServerEndpoint Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServerEndpointCreateParametersProperties Properties { get; set; }
	}
	
	/// <summary>
	/// ServerEndpoint Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointCreateParametersProperties
	{
		
		/// <summary>
		/// Type of the Feature Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudTiering")]
		public FeatureStatus CloudTiering { get; set; }
		
		/// <summary>
		/// Friendly Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// Type of the Feature Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineDataTransfer")]
		public FeatureStatus OfflineDataTransfer { get; set; }
		
		/// <summary>
		/// Offline data transfer share name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineDataTransferShareName")]
		public string OfflineDataTransferShareName { get; set; }
		
		/// <summary>
		/// Server folder used for data synchronization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverLocalPath")]
		public string ServerLocalPath { get; set; }
		
		/// <summary>
		/// Arm resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverResourceId")]
		public string ServerResourceId { get; set; }
		
		/// <summary>
		/// Tier files older than days.
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierFilesOlderThanDays")]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> TierFilesOlderThanDays { get; set; }
		
		/// <summary>
		/// Level of free space to be maintained by Cloud Tiering if it is enabled.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeFreeSpacePercent")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> VolumeFreeSpacePercent { get; set; }
	}
	
	/// <summary>
	/// Type of the Health state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerEndpointOfflineDataTransferState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotRunning = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 3,
	}
	
	/// <summary>
	/// Type of the sync activity state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerEndpointSyncActivityState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upload = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Download = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadAndDownload = 2,
	}
	
	/// <summary>
	/// Type of the sync health state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServerEndpointSyncHealthState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Healthy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SyncBlockedForRestore = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SyncBlockedForChangeDetectionPostRestore = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoActivity = 4,
	}
	
	/// <summary>
	/// Parameters for updating an Server Endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointUpdateParameters
	{
		
		/// <summary>
		/// ServerEndpoint Update Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServerEndpointUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// ServerEndpoint Update Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerEndpointUpdateProperties
	{
		
		/// <summary>
		/// Type of the Feature Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudTiering")]
		public FeatureStatus CloudTiering { get; set; }
		
		/// <summary>
		/// Type of the Feature Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineDataTransfer")]
		public FeatureStatus OfflineDataTransfer { get; set; }
		
		/// <summary>
		/// Offline data transfer share name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offlineDataTransferShareName")]
		public string OfflineDataTransferShareName { get; set; }
		
		/// <summary>
		/// Tier files older than days.
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierFilesOlderThanDays")]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> TierFilesOlderThanDays { get; set; }
		
		/// <summary>
		/// Level of free space to be maintained by Cloud Tiering if it is enabled.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeFreeSpacePercent")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> VolumeFreeSpacePercent { get; set; }
	}
	
	/// <summary>
	/// Error type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSyncError
	{
		
		/// <summary>
		/// Error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public StorageSyncApiError Error { get; set; }
		
		/// <summary>
		/// Error type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innererror")]
		public StorageSyncApiError Innererror { get; set; }
	}
	
	/// <summary>
	/// Storage Sync Service object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSyncService
	{
		
		/// <summary>
		/// Storage Sync Service Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StorageSyncServiceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Storage Sync Service Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSyncServiceProperties
	{
		
		/// <summary>
		/// Storage Sync service status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageSyncServiceStatus")]
		public System.Nullable<System.Int32> StorageSyncServiceStatus { get; set; }
		
		/// <summary>
		/// Storage Sync service Uid
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageSyncServiceUid")]
		public string StorageSyncServiceUid { get; set; }
	}
	
	/// <summary>
	/// Array of StorageSyncServices
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSyncServiceArray
	{
		
		/// <summary>
		/// Collection of StorageSyncServices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public StorageSyncService[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters used when creating a storage sync service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSyncServiceCreateParameters
	{
		
		/// <summary>
		/// Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Parameters for updating an Storage sync service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSyncServiceUpdateParameters
	{
		
		/// <summary>
		/// Storage Sync Service Update Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StorageSyncServiceUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// The user-specified tags associated with the storage sync service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Storage Sync Service Update Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSyncServiceUpdateProperties
	{
	}
	
	/// <summary>
	/// Subscription State object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionState
	{
		
		/// <summary>
		/// Is Transitioning
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="istransitioning")]
		public System.Nullable<System.Boolean> Istransitioning { get; set; }
		
		/// <summary>
		/// Subscription State properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SubscriptionStateProperties Properties { get; set; }
		
		/// <summary>
		/// State of Azure Subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SubscriptionStateState> State { get; set; }
	}
	
	/// <summary>
	/// Subscription State properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionStateProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SubscriptionStateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
	}
	
	/// <summary>
	/// Sync Group object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroup
	{
		
		/// <summary>
		/// SyncGroup Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SyncGroupProperties Properties { get; set; }
	}
	
	/// <summary>
	/// SyncGroup Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupProperties
	{
		
		/// <summary>
		/// Sync group status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncGroupStatus")]
		public string SyncGroupStatus { get; set; }
		
		/// <summary>
		/// Unique Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
	}
	
	/// <summary>
	/// Array of SyncGroup
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupArray
	{
		
		/// <summary>
		/// Collection of SyncGroup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SyncGroup[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters used when creating a sync group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupCreateParameters
	{
		
		/// <summary>
		/// Sync Group Create Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SyncGroupCreateParametersProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Sync Group Create Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupCreateParametersProperties
	{
	}
	
	/// <summary>
	/// Tags object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagsObject
	{
	}
	
	/// <summary>
	/// The parameters used when calling trigger change detection action on cloud endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerChangeDetectionParameters
	{
		
		/// <summary>
		/// Change Detection Mode. Applies to a directory specified in directoryPath parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeDetectionMode")]
		public System.Nullable<TriggerChangeDetectionParametersChangeDetectionMode> ChangeDetectionMode { get; set; }
		
		/// <summary>
		/// Relative path to a directory Azure File share for which change detection is to be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directoryPath")]
		public string DirectoryPath { get; set; }
		
		/// <summary>
		/// Array of relative paths on the Azure File share to be included in the change detection. Can be files and directories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TriggerChangeDetectionParametersChangeDetectionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recursive = 1,
	}
	
	/// <summary>
	/// Trigger Rollover Request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerRolloverRequest
	{
		
		/// <summary>
		/// Certificate Data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCertificate")]
		public string ServerCertificate { get; set; }
	}
	
	/// <summary>
	/// Workflow resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Workflow
	{
		
		/// <summary>
		/// Workflow Properties object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkflowProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Workflow Properties object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowProperties
	{
		
		/// <summary>
		/// workflow last operation identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastOperationId")]
		public string LastOperationId { get; set; }
		
		/// <summary>
		/// last step name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastStepName")]
		public string LastStepName { get; set; }
		
		/// <summary>
		/// Type of the Operation Direction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public System.Nullable<WorkflowPropertiesOperation> Operation { get; set; }
		
		/// <summary>
		/// Type of the Workflow Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<WorkflowPropertiesStatus> Status { get; set; }
		
		/// <summary>
		/// workflow steps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public string Steps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkflowPropertiesOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="do")]
		_do = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		undo = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancel = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkflowPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aborted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
	}
	
	/// <summary>
	/// Array of Workflow
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkflowArray
	{
		
		/// <summary>
		/// Collection of workflow items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Workflow[] Value { get; set; }
	}
	
	/// <summary>
	/// Type of the Workflow Status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkflowStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aborted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Storage Sync Rest API operations.
		/// Operations_List providers/Microsoft.StorageSync/operations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <returns>Array of operations resources in the Resource Provider</returns>
		public async Task<OperationEntityListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.StorageSync/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationEntityListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check the give namespace name availability.
		/// StorageSyncServices_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/locations/{locationName}/checkNameAvailability
		/// </summary>
		/// <param name="locationName">The desired region for the name check.</param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">Parameters to check availability of the given namespace name</param>
		/// <returns>check availability returned successfully.</returns>
		public async Task<CheckNameAvailabilityResult> StorageSyncServices_CheckNameAvailabilityAsync(string locationName, string api_version, string subscriptionId, CheckNameAvailabilityParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.StorageSync/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckNameAvailabilityResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a StorageSyncService list by subscription.
		/// StorageSyncServices_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/storageSyncServices
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <returns>Array of registered Storage Sync Service resources in the subscription.</returns>
		public async Task<StorageSyncServiceArray> StorageSyncServices_ListBySubscriptionAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.StorageSync/storageSyncServices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StorageSyncServiceArray>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Operation status
		/// OperationStatus_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/locations/{locationName}/workflows/{workflowId}/operations/{operationId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="locationName">The desired region to obtain information from.</param>
		/// <param name="workflowId">workflow Id</param>
		/// <param name="operationId">operation Id</param>
		/// <returns>Operation Status</returns>
		public async Task<OperationStatus> OperationStatus_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string locationName, string workflowId, string operationId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/workflows/"+ (workflowId==null? "" : System.Uri.EscapeDataString(workflowId))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a StorageSyncService list by Resource group name.
		/// StorageSyncServices_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <returns>Array of registered Storage Sync Service resources in the Resource Group</returns>
		public async Task<StorageSyncServiceArray> StorageSyncServices_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StorageSyncServiceArray>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a given StorageSyncService.
		/// StorageSyncServices_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <returns>Storage Sync Service object</returns>
		public async Task<StorageSyncService> StorageSyncServices_GetAsync(string subscriptionId, string resourceGroupName, string storageSyncServiceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StorageSyncService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new StorageSyncService.
		/// StorageSyncServices_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="requestBody">Storage Sync Service resource name.</param>
		/// <returns>Storage Sync Service object created/updated</returns>
		public async Task<StorageSyncService> StorageSyncServices_CreateAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, StorageSyncServiceCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StorageSyncService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a given StorageSyncService.
		/// StorageSyncServices_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <returns>Storage Sync Service object was deleted.</returns>
		public async Task StorageSyncServices_DeleteAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch a given StorageSyncService.
		/// StorageSyncServices_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="requestBody">Storage Sync Service resource.</param>
		/// <returns>Storage Sync Service object created/updated</returns>
		public async Task<StorageSyncService> StorageSyncServices_UpdateAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, StorageSyncServiceUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StorageSyncService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a given registered server list.
		/// RegisteredServers_ListByStorageSyncService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <returns>Array of Registered Server resources in Storage Sync Service</returns>
		public async Task<RegisteredServerArray> RegisteredServers_ListByStorageSyncServiceAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/registeredServers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisteredServerArray>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a given registered server.
		/// RegisteredServers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="serverId">GUID identifying the on-premises server.</param>
		/// <returns>Registered Server resources in Sync Group</returns>
		public async Task<RegisteredServer> RegisteredServers_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string serverId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/registeredServers/"+ (serverId==null? "" : System.Uri.EscapeDataString(serverId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisteredServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new registered server.
		/// RegisteredServers_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="serverId">GUID identifying the on-premises server.</param>
		/// <param name="requestBody">Body of Registered Server object.</param>
		/// <returns>Registered Server resources in Sync Group</returns>
		public async Task<RegisteredServer> RegisteredServers_CreateAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string serverId, RegisteredServerCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/registeredServers/"+ (serverId==null? "" : System.Uri.EscapeDataString(serverId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisteredServer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the given registered server.
		/// RegisteredServers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="serverId">GUID identifying the on-premises server.</param>
		/// <returns>Ok</returns>
		public async Task RegisteredServers_DeleteAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string serverId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/registeredServers/"+ (serverId==null? "" : System.Uri.EscapeDataString(serverId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Triggers Server certificate rollover.
		/// RegisteredServers_triggerRollover subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}/triggerRollover
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="serverId">Server Id</param>
		/// <param name="requestBody">Body of Trigger Rollover request.</param>
		/// <returns>Trigger Rollover success status</returns>
		public async Task RegisteredServers_triggerRolloverAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string serverId, TriggerRolloverRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/registeredServers/"+ (serverId==null? "" : System.Uri.EscapeDataString(serverId))+"/triggerRollover&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a SyncGroup List.
		/// SyncGroups_ListByStorageSyncService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <returns>Array of Sync Group resources in Storage Sync Service</returns>
		public async Task<SyncGroupArray> SyncGroups_ListByStorageSyncServiceAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SyncGroupArray>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a given SyncGroup.
		/// SyncGroups_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <returns>Sync Group object</returns>
		public async Task<SyncGroup> SyncGroups_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SyncGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new SyncGroup.
		/// SyncGroups_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="requestBody">Sync Group Body</param>
		/// <returns>Sync Group object</returns>
		public async Task<SyncGroup> SyncGroups_CreateAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, SyncGroupCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SyncGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a given SyncGroup.
		/// SyncGroups_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <returns>Sync Group object was deleted</returns>
		public async Task SyncGroups_DeleteAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a CloudEndpoint List.
		/// CloudEndpoints_ListBySyncGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <returns>Array of Cloud Endpoint resources in Sync Group</returns>
		public async Task<CloudEndpointArray> CloudEndpoints_ListBySyncGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEndpointArray>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a given CloudEndpoint.
		/// CloudEndpoints_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="cloudEndpointName">Name of Cloud Endpoint object.</param>
		/// <returns>Cloud Endpoint object</returns>
		public async Task<CloudEndpoint> CloudEndpoints_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string cloudEndpointName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints/"+ (cloudEndpointName==null? "" : System.Uri.EscapeDataString(cloudEndpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new CloudEndpoint.
		/// CloudEndpoints_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="cloudEndpointName">Name of Cloud Endpoint object.</param>
		/// <param name="requestBody">Body of Cloud Endpoint resource.</param>
		/// <returns>Cloud Endpoint object</returns>
		public async Task<CloudEndpoint> CloudEndpoints_CreateAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string cloudEndpointName, CloudEndpointCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints/"+ (cloudEndpointName==null? "" : System.Uri.EscapeDataString(cloudEndpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a given CloudEndpoint.
		/// CloudEndpoints_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="cloudEndpointName">Name of Cloud Endpoint object.</param>
		/// <returns>Ok</returns>
		public async Task CloudEndpoints_DeleteAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string cloudEndpointName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints/"+ (cloudEndpointName==null? "" : System.Uri.EscapeDataString(cloudEndpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post Backup a given CloudEndpoint.
		/// CloudEndpoints_PostBackup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postbackup
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="cloudEndpointName">Name of Cloud Endpoint object.</param>
		/// <param name="requestBody">Body of Backup request.</param>
		/// <returns>Ok</returns>
		public async Task<PostBackupResponse> CloudEndpoints_PostBackupAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string cloudEndpointName, BackupRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints/"+ (cloudEndpointName==null? "" : System.Uri.EscapeDataString(cloudEndpointName))+"/postbackup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PostBackupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Post Restore a given CloudEndpoint.
		/// CloudEndpoints_PostRestore subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postrestore
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="cloudEndpointName">Name of Cloud Endpoint object.</param>
		/// <param name="requestBody">Body of Cloud Endpoint object.</param>
		/// <returns>Ok</returns>
		public async Task CloudEndpoints_PostRestoreAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string cloudEndpointName, PostRestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints/"+ (cloudEndpointName==null? "" : System.Uri.EscapeDataString(cloudEndpointName))+"/postrestore&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Pre Backup a given CloudEndpoint.
		/// CloudEndpoints_PreBackup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prebackup
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="cloudEndpointName">Name of Cloud Endpoint object.</param>
		/// <param name="requestBody">Body of Backup request.</param>
		/// <returns>Ok</returns>
		public async Task CloudEndpoints_PreBackupAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string cloudEndpointName, BackupRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints/"+ (cloudEndpointName==null? "" : System.Uri.EscapeDataString(cloudEndpointName))+"/prebackup&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Pre Restore a given CloudEndpoint.
		/// CloudEndpoints_PreRestore subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prerestore
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="cloudEndpointName">Name of Cloud Endpoint object.</param>
		/// <param name="requestBody">Body of Cloud Endpoint object.</param>
		/// <returns>Ok</returns>
		public async Task CloudEndpoints_PreRestoreAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string cloudEndpointName, PreRestoreRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints/"+ (cloudEndpointName==null? "" : System.Uri.EscapeDataString(cloudEndpointName))+"/prerestore&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Restore Heartbeat a given CloudEndpoint.
		/// CloudEndpoints_restoreheartbeat subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/restoreheartbeat
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="cloudEndpointName">Name of Cloud Endpoint object.</param>
		/// <returns>Restore Heartbeat Operation has ran successfully.</returns>
		public async Task CloudEndpoints_restoreheartbeatAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string cloudEndpointName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints/"+ (cloudEndpointName==null? "" : System.Uri.EscapeDataString(cloudEndpointName))+"/restoreheartbeat&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud Endpoint.
		/// CloudEndpoints_TriggerChangeDetection subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/triggerChangeDetection
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="cloudEndpointName">Name of Cloud Endpoint object.</param>
		/// <param name="requestBody">Trigger Change Detection Action parameters.</param>
		/// <returns>Ok</returns>
		public async Task CloudEndpoints_TriggerChangeDetectionAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string cloudEndpointName, TriggerChangeDetectionParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cloudEndpoints/"+ (cloudEndpointName==null? "" : System.Uri.EscapeDataString(cloudEndpointName))+"/triggerChangeDetection&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a ServerEndpoint list.
		/// ServerEndpoints_ListBySyncGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <returns>Array of Server Endpoint resources in Sync Group</returns>
		public async Task<ServerEndpointArray> ServerEndpoints_ListBySyncGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/serverEndpoints&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServerEndpointArray>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a ServerEndpoint.
		/// ServerEndpoints_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="serverEndpointName">Name of Server Endpoint object.</param>
		/// <returns>Server Endpoint object</returns>
		public async Task<ServerEndpoint> ServerEndpoints_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string serverEndpointName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/serverEndpoints/"+ (serverEndpointName==null? "" : System.Uri.EscapeDataString(serverEndpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServerEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new ServerEndpoint.
		/// ServerEndpoints_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="serverEndpointName">Name of Server Endpoint object.</param>
		/// <param name="requestBody">Body of Server Endpoint object.</param>
		/// <returns>Server Endpoint object</returns>
		public async Task<ServerEndpoint> ServerEndpoints_CreateAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string serverEndpointName, ServerEndpointCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/serverEndpoints/"+ (serverEndpointName==null? "" : System.Uri.EscapeDataString(serverEndpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServerEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a given ServerEndpoint.
		/// ServerEndpoints_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="serverEndpointName">Name of Server Endpoint object.</param>
		/// <returns>Ok</returns>
		public async Task ServerEndpoints_DeleteAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string serverEndpointName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/serverEndpoints/"+ (serverEndpointName==null? "" : System.Uri.EscapeDataString(serverEndpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch a given ServerEndpoint.
		/// ServerEndpoints_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="serverEndpointName">Name of Server Endpoint object.</param>
		/// <param name="requestBody">Any of the properties applicable in PUT request.</param>
		/// <returns>Server Endpoint object</returns>
		public async Task<ServerEndpoint> ServerEndpoints_UpdateAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string serverEndpointName, ServerEndpointUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/serverEndpoints/"+ (serverEndpointName==null? "" : System.Uri.EscapeDataString(serverEndpointName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServerEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Recall a server endpoint.
		/// ServerEndpoints_recallAction subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}/recallAction
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="syncGroupName">Name of Sync Group resource.</param>
		/// <param name="serverEndpointName">Name of Server Endpoint object.</param>
		/// <param name="requestBody">Body of Recall Action object.</param>
		/// <returns>Server Endpoint object</returns>
		public async Task ServerEndpoints_recallActionAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string syncGroupName, string serverEndpointName, RecallActionParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/serverEndpoints/"+ (serverEndpointName==null? "" : System.Uri.EscapeDataString(serverEndpointName))+"/recallAction&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Workflow List
		/// Workflows_ListByStorageSyncService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <returns>Array of Workflow resources in Storage Sync Service</returns>
		public async Task<WorkflowArray> Workflows_ListByStorageSyncServiceAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/workflows&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkflowArray>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Workflows resource
		/// Workflows_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="workflowId">workflow Id</param>
		/// <returns>Workflow object</returns>
		public async Task<Workflow> Workflows_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string workflowId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/workflows/"+ (workflowId==null? "" : System.Uri.EscapeDataString(workflowId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Workflow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Abort the given workflow.
		/// Workflows_Abort subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}/abort
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="storageSyncServiceName">Name of Storage Sync Service resource.</param>
		/// <param name="workflowId">workflow Id</param>
		/// <returns>success</returns>
		public async Task Workflows_AbortAsync(string subscriptionId, string resourceGroupName, string api_version, string storageSyncServiceName, string workflowId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.StorageSync/storageSyncServices/"+ (storageSyncServiceName==null? "" : System.Uri.EscapeDataString(storageSyncServiceName))+"/workflows/"+ (workflowId==null? "" : System.Uri.EscapeDataString(workflowId))+"/abort&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
