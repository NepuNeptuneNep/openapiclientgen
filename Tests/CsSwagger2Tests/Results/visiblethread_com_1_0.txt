//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class AdverbsElement
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Analysis
	{
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public Stats Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Stats
	{
		
		[System.Runtime.Serialization.DataMember(Name="avgSentenceLength")]
		public System.Nullable<System.Int32> AvgSentenceLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fleschKincaidGradeLevel")]
		public System.Nullable<System.Single> FleschKincaidGradeLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fleschReadingLevel")]
		public System.Nullable<System.Int32> FleschReadingLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longSentenceCount")]
		public System.Nullable<System.Int32> LongSentenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passiveSentenceCount")]
		public System.Nullable<System.Int32> PassiveSentenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentenceCount")]
		public System.Nullable<System.Int32> SentenceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordCount")]
		public System.Nullable<System.Int32> WordCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class DocumentListSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class DocumentResponseDetailed
	{
		
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.DateTimeOffset> Completed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eta")]
		public System.Nullable<System.DateTimeOffset> Eta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paragraphs")]
		public DocumentResponseDetailedParagraphs[] DocumentResponseDetailedParagraphs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scanSettings")]
		public DocumentResponseDetailedScanSettings ScanSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public Stats Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class DocumentResponseDetailedParagraphs
	{
		
		[System.Runtime.Serialization.DataMember(Name="paragraphCounter")]
		public System.Nullable<System.Int32> ParagraphCounter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paragraphIndex")]
		public System.Nullable<System.Int32> ParagraphIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public DocumentResponseDetailedParagraphsStats Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class DocumentResponseDetailedParagraphsStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="adverbs")]
		public AdverbsElement[][] Adverbs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hiddenVerbs")]
		public HiddenVerbsElement[][] HiddenVerbs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longSentences")]
		public LongSentencesElement[][] LongSentences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passives")]
		public PassivesElement[][] Passives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="veryLongSentences")]
		public VeryLongSentencesElement[][] VeryLongSentences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class HiddenVerbsElement
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noun")]
		public string Noun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class LongSentencesElement
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordCount")]
		public System.Nullable<System.Int32> WordCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class PassivesElement
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passivePiece")]
		public string PassivePiece { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class VeryLongSentencesElement
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordCount")]
		public System.Nullable<System.Int32> WordCount { get; set; }
	}
	
	public class DocumentResponseDetailedScanSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="longSentenceWordCount")]
		public System.Nullable<System.Int32> LongSentenceWordCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="veryLongSentenceWordCount")]
		public System.Nullable<System.Int32> VeryLongSentenceWordCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class DocumentResponseNotReady
	{
		
		[System.Runtime.Serialization.DataMember(Name="eta")]
		public System.Nullable<System.DateTimeOffset> Eta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NewDocumentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docId")]
		public long DocId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scanSettings")]
		public NewDocumentResponseScanSettings ScanSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="task")]
		public string Task { get; set; }
	}
	
	public class NewDocumentResponseScanSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="longSentenceWordCount")]
		public System.Nullable<System.Int32> LongSentenceWordCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="veryLongSentenceWordCount")]
		public System.Nullable<System.Int32> VeryLongSentenceWordCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NewScan
	{
		
		[System.Runtime.Serialization.DataMember(Name="scanSettings")]
		public NewScanScanSettings ScanSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webUrls")]
		public NewScanWebUrls[] NewScanWebUrls { get; set; }
	}
	
	public class NewScanScanSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="longSentenceWordCount")]
		public System.Nullable<System.Int32> LongSentenceWordCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="veryLongSentenceWordCount")]
		public System.Nullable<System.Int32> VeryLongSentenceWordCount { get; set; }
	}
	
	public class NewScanWebUrls
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NewScanResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webUrls")]
		public NewScanResponseWebUrls[] NewScanResponseWebUrls { get; set; }
	}
	
	public class NewScanResponseWebUrls
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ScanDetailed
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public Stats Stats { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webUrls")]
		public WebUrl[] WebUrls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebUrl : WebUrlHeader
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="analysis")]
		public Analysis Analysis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ScanResponseDetailed
	{
		
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.DateTimeOffset> Completed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eta")]
		public System.Nullable<System.DateTimeOffset> Eta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scan")]
		public ScanDetailed Scan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ScanResponseSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.DateTimeOffset> Completed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eta")]
		public System.Nullable<System.DateTimeOffset> Eta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scan")]
		public ScanSummary Scan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ScanSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webUrls")]
		public WebUrlHeader[] WebUrls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebUrlHeader
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Search
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dictId")]
		public long DictId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docId")]
		public long DocId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebResponseNotReady
	{
		
		[System.Runtime.Serialization.DataMember(Name="eta")]
		public System.Nullable<System.DateTimeOffset> Eta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class WebUrlDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="paragraphs")]
		public WebUrlDetailParagraphs[] WebUrlDetailParagraphs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public Stats Stats { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class WebUrlDetailParagraphs
	{
		
		[System.Runtime.Serialization.DataMember(Name="paragraphCounter")]
		public System.Nullable<System.Int32> ParagraphCounter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paragraphIndex")]
		public System.Nullable<System.Int32> ParagraphIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public WebUrlDetailParagraphsStats Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class WebUrlDetailParagraphsStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="adverbs")]
		public AdverbsElement[][] Adverbs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hiddenVerbs")]
		public HiddenVerbsElement[][] HiddenVerbs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longSentences")]
		public LongSentencesElement[][] LongSentences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passives")]
		public PassivesElement[][] Passives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="veryLongSentences")]
		public VeryLongSentencesElement[][] VeryLongSentences { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get your list of dictionaries
		/// Get your list of dictionaries
		/// DictionariesGet dictionaries
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task DictionariesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dictionaries";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get your list of documents
		/// Get your list of documents
		/// DocumentsGet documents
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<DocumentListSummary[]> DocumentsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DocumentListSummary[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get data from a previously submitted document
		/// Get data from a previously submitted document identified by ***docId***
		/// Documents_docIdGet documents/{docId}
		/// </summary>
		/// <param name="docId">Id of document to fetch</param>
		/// <returns>document response contained readability details for the document</returns>
		public async Task<DocumentResponseDetailed> Documents_docIdGetAsync(long docId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+docId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DocumentResponseDetailed>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get your list of searches
		/// Get your list of searches
		/// SearchesGet searches
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task SearchesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "searches";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Run a search
		/// Run a search on document **docId** using dictionary **dictId**
		/// SearchesPost searches
		/// </summary>
		/// <param name="requestBody">Run a search on document **docId** using dictionary**dictId**</param>
		/// <returns>Successful response</returns>
		public async Task<string> SearchesPostAsync(Search requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "searches";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets search results for a particular document/dictionary
		/// Get detailed results for a scan/url (readability, long sentence and passive language instances), identified by **scanId** & **urlId**
		/// Searches_docId_dictionaryIdGetByMatchingOnly searches/{docId}/{dictionaryId}
		/// </summary>
		/// <param name="docId">Id of document</param>
		/// <param name="dictionaryId">Id of dictionary</param>
		/// <param name="matchingOnly">Only returning paragraphs containing a match</param>
		/// <returns>scan response</returns>
		public async Task Searches_docId_dictionaryIdGetByMatchingOnlyAsync(long docId, long dictionaryId, bool matchingOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "searches/"+docId+"/"+dictionaryId+"?matchingOnly="+matchingOnly;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get your list of scans
		/// Get your list of scans
		/// WebscansGet webscans
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ScanResponseSummary[]> WebscansGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webscans";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ScanResponseSummary[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Run a new scan
		/// The scan runs in the background but returns immediately with a JSON response containing an "id" that represents your scan.
		/// You can use this id in other requests to retrieve your scan result.
		/// 
		/// Also, an "id" is returned for each url which can be used to retrieve detailed results for individual scan urls.
		/// WebscansPost webscans
		/// </summary>
		/// <param name="requestBody">Scan title and webUrls to analyze</param>
		/// <returns>Successful response</returns>
		public async Task<NewScanResponse> WebscansPostAsync(NewScan requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webscans";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<NewScanResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get data from a previously run scan
		/// Get data from a previously run scan, identified by **scanId**
		/// Webscans_scanIdGet webscans/{scanId}
		/// </summary>
		/// <param name="scanId">Id of scan to fetch</param>
		/// <returns>scan response</returns>
		public async Task<ScanResponseDetailed> Webscans_scanIdGetAsync(long scanId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webscans/"+scanId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ScanResponseDetailed>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets data for a particular scan/webUrl
		/// Get detailed results for a scan/url (readability, long sentence and passive language instances), identified by **scanId** & **urlId**
		/// Webscans_scanIdWebUrls_urlIdGet webscans/{scanId}/webUrls/{urlId}
		/// </summary>
		/// <param name="scanId">Id of scan</param>
		/// <param name="urlId">Id of url to fetch</param>
		/// <returns>scan response</returns>
		public async Task<WebUrlDetail> Webscans_scanIdWebUrls_urlIdGetAsync(long scanId, long urlId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webscans/"+scanId+"/webUrls/"+urlId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WebUrlDetail>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
