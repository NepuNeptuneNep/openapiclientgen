//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all historical GWS
		/// Returns all available GWS
		/// ListHistoricalGWS globalwinescores/
		/// </summary>
		/// <param name="wine_id">The exact `id` of the wine. Can be used multiple times (e.g `?wine_id=114959&wine_id=114952`) <br/> If you need to find the `wine_id` for your wines, use our <a href="https://api.globalwinescore.com/search/" target="_blank">search page</a>
		///</param>
		/// <param name="vintage">The vintage you want to search against.</param>
		/// <param name="color">The lowercase color of the wine.</param>
		/// <param name="is_primeurs">Only show the <a href="See https://en.wikipedia.org/wiki/En_primeur">en primeur</a> GlobalWineScores
		///</param>
		/// <param name="lwin">L-WIN wine identifier (See definition <a href="https://www.liv-ex.com/lwin/" target="_blank">here</a>)
		///</param>
		/// <param name="lwin_11">L-WIN wine/vintage identifier (See definition <a href="https://www.liv-ex.com/lwin/" target="_blank">here</a>)
		///</param>
		/// <param name="limit">Number of results to return per page.
		/// Minimum: 0
		// </param>
		/// <param name="offset">The initial index from which to return the results.
		/// Minimum: 0
		// </param>
		/// <param name="ordering">Which field to use when ordering the results.</param>
		public async Task ListHistoricalGWSAsync(int[] wine_id, string vintage, ListHistoricalGWSColor color, bool is_primeurs, string lwin, string lwin_11, int limit, int offset, ListHistoricalGWSOrdering ordering)
		{
			var requestUri = "globalwinescores/?"+string.Join("&", wine_id.Select(z => $"wine_id={z}"))+"&vintage=" + (vintage==null? "" : System.Uri.EscapeDataString(vintage))+"&color=" + color+"&is_primeurs="+is_primeurs+"&lwin=" + (lwin==null? "" : System.Uri.EscapeDataString(lwin))+"&lwin_11=" + (lwin_11==null? "" : System.Uri.EscapeDataString(lwin_11))+"&limit="+limit+"&offset="+offset+"&ordering=" + ordering;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all latest GWS
		/// Returns the latest GWS available per wine/vintage.
		/// GlobalWineScoreGetByWine_idAndVintageAndColorAndIs_primeursAndLwinAndLwin_11AndLimitAndOffsetAndOrdering globalwinescores/latest/
		/// </summary>
		/// <param name="wine_id">The exact `id` of the wine. Can be used multiple times (e.g `?wine_id=114959&wine_id=114952`) <br/> If you need to find the `wine_id` for your wines, use our <a href="https://api.globalwinescore.com/search/" target="_blank">search page</a>
		///</param>
		/// <param name="vintage">The vintage you want to search against.</param>
		/// <param name="color">The lowercase color of the wine.</param>
		/// <param name="is_primeurs">Only show the <a href="See https://en.wikipedia.org/wiki/En_primeur">en primeur</a> GlobalWineScores
		///</param>
		/// <param name="lwin">L-WIN wine identifier (See definition <a href="https://www.liv-ex.com/lwin/" target="_blank">here</a>)
		///</param>
		/// <param name="lwin_11">L-WIN wine/vintage identifier (See definition <a href="https://www.liv-ex.com/lwin/" target="_blank">here</a>)
		///</param>
		/// <param name="limit">Number of results to return per page.
		/// Minimum: 0
		// </param>
		/// <param name="offset">The initial index from which to return the results.
		/// Minimum: 0
		// </param>
		/// <param name="ordering">Which field to use when ordering the results.</param>
		public async Task GlobalWineScoreGetByWine_idAndVintageAndColorAndIs_primeursAndLwinAndLwin_11AndLimitAndOffsetAndOrderingAsync(int[] wine_id, string vintage, ListHistoricalGWSColor color, bool is_primeurs, string lwin, string lwin_11, int limit, int offset, GlobalWineScoreGetByWine_idAndVintageAndColorAndIs_primeursAndLwinAndLwin_11AndLimitAndOffsetAndOrderingOrdering ordering)
		{
			var requestUri = "globalwinescores/latest/?"+string.Join("&", wine_id.Select(z => $"wine_id={z}"))+"&vintage=" + (vintage==null? "" : System.Uri.EscapeDataString(vintage))+"&color=" + color+"&is_primeurs="+is_primeurs+"&lwin=" + (lwin==null? "" : System.Uri.EscapeDataString(lwin))+"&lwin_11=" + (lwin_11==null? "" : System.Uri.EscapeDataString(lwin_11))+"&limit="+limit+"&offset="+offset+"&ordering=" + ordering;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ListHistoricalGWSColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		red = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		white = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pink = 2,
	}
	
	public enum ListHistoricalGWSOrdering
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-date")]
		Minusdate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		score = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-score")]
		Minusscore = 3,
	}
	
	public enum GlobalWineScoreGetByWine_idAndVintageAndColorAndIs_primeursAndLwinAndLwin_11AndLimitAndOffsetAndOrderingOrdering
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-date")]
		Minusdate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		score = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-score")]
		Minusscore = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
