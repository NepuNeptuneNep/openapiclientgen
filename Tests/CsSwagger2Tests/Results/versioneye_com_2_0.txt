//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// lists your's github repos
		/// 
		/// This endpoint shows all imported repositories from your Github account.
		/// 
		/// This enpoint expects that you have a GitHub account connected and the token
		/// is still valid. If that is not the case please visit **https://www.versioneye.com/settings/connect**.
		/// to update your GitHub credentials.
		/// 
		/// If it shows no or old data, then you can use the `github/sync` endpoint
		/// to update your account with the current meta data from GitHub.
		/// 
		/// GetGithub github
		/// </summary>
		/// <param name="lang">Filter by language</param>
		/// <param name="_private">Filter by visibility</param>
		/// <param name="org_name">Filter by name of organization</param>
		/// <param name="org_type">Filter by type of organization</param>
		/// <param name="page">Number of page</param>
		/// <param name="only_imported">Show only imported repositories</param>
		/// <returns>lists your's github repos</returns>
		public async Task GetGithubAsync(string lang, bool _private, string org_name, string org_type, string page, bool only_imported)
		{
			var requestUri = "github?lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&private="+_private+"&org_name=" + (org_name==null? "" : System.Uri.EscapeDataString(org_name))+"&org_type=" + (org_type==null? "" : System.Uri.EscapeDataString(org_type))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&only_imported="+only_imported;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// github service hook
		/// This endpoint is registered as service hook on GitHub. It triggers a project re-parse on each git push.
		/// PostGithubHookProjectId github/hook/{project_id}
		/// </summary>
		/// <param name="project_id">Project ID</param>
		public async Task PostGithubHookProjectIdAsync(string project_id)
		{
			var requestUri = "github/hook/"+ (project_id==null? "" : System.Uri.EscapeDataString(project_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// re-load github data
		/// 
		/// Reimports ALL GitHub Repositories. This Endpoint fetches meta information to all
		/// repositories in your GitHub account. Meta information such as repo name, branches and
		/// supported project files.
		/// 
		/// This endpoint works asynchronously and returns a status code. The status code is either
		/// **running** or **done**.
		/// 
		/// GetGithubSync github/sync
		/// </summary>
		/// <returns>re-load github data</returns>
		public async Task GetGithubSyncAsync()
		{
			var requestUri = "github/sync";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// shows the detailed information for the repository
		/// 
		/// This Endpoint returns detailed information about a GitHub repository.
		/// 
		/// Due the limits of our current API framework, the repo key has to be
		/// encoded as url-safe string. That means all '/' has to be replaced with
		/// colons ':' and '.' has to be replaced with '~'.
		/// 
		/// For example,  repository with fullname `versioneye/veye` has to transformed
		/// to `versioneye:veye`.
		/// 
		/// GetGithubRepoKey github/{repo_key}
		/// </summary>
		/// <param name="repo_key">encoded repo name with optional branch info.</param>
		/// <returns>shows the detailed information for the repository</returns>
		public async Task GetGithubRepoKeyAsync(string repo_key)
		{
			var requestUri = "github/"+ (repo_key==null? "" : System.Uri.EscapeDataString(repo_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// imports project file from github
		/// 
		/// Use this Endpoint to import a project file from GitHub. This will create a new project on VersionEye.
		/// 
		/// Due the limits of our current API framework, the repo key has to be
		/// encoded as url-safe string. That means all '/' has to be replaced with
		/// colons ':' and '.' has to be replaced with '~'.
		/// 
		/// For example,  repository with fullname `versioneye/veye` has to transformed
		/// to `versioneye:veye`.
		/// 
		/// PostGithubRepoKey github/{repo_key}
		/// </summary>
		/// <param name="repo_key">encoded repo name</param>
		public async Task PostGithubRepoKeyAsync(string repo_key, PostGithubRepoKeyPostBody requestBody)
		{
			var requestUri = "github/"+ (repo_key==null? "" : System.Uri.EscapeDataString(repo_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// remove imported project
		/// 
		/// This Endpoint deletes a project on VersionEye!
		/// 
		/// Due the limits of our current API framework, the repo key has to be
		/// encoded as url-safe string. That means all '/' has to be replaced with
		/// colons ':' and '.' has to be replaced with '~'.
		/// 
		/// For example,  repository with fullname `versioneye/veye` has to transformed
		/// to `versioneye:veye`.
		/// 
		/// DeleteGithubRepoKey github/{repo_key}
		/// </summary>
		/// <param name="repo_key">encoded repo-key</param>
		/// <param name="branch">the name of the branch</param>
		public async Task DeleteGithubRepoKeyAsync(string repo_key, string branch)
		{
			var requestUri = "github/"+ (repo_key==null? "" : System.Uri.EscapeDataString(repo_key))+"&branch=" + (branch==null? "" : System.Uri.EscapeDataString(branch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// shows profile of authorized user
		/// On Swagger, you can create session by adding additional parameter :api_key.
		/// GetMe me
		/// </summary>
		/// <returns>shows profile of authorized user</returns>
		public async Task GetMeAsync()
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// shows comments of authorized user
		/// shows comments of authorized user
		/// GetMeComments me/comments
		/// </summary>
		/// <param name="page">page number for pagination</param>
		/// <returns>shows comments of authorized user</returns>
		public async Task GetMeCommentsAsync(int page)
		{
			var requestUri = "me/comments?page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// shows the packages you are following
		/// shows the packages you are following
		/// GetMeFavorites me/favorites
		/// </summary>
		/// <param name="page">page number for pagination</param>
		/// <returns>shows the packages you are following</returns>
		public async Task GetMeFavoritesAsync(int page)
		{
			var requestUri = "me/favorites?page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// shows unread notifications of authorized user
		/// 
		/// This Endpoint returns the 30 latest notifications.
		/// 
		/// If there are new versions out there for software packages you follow directly on VersionEye, then
		/// each new version is a new **notification** for your account.
		/// 
		/// GetMeNotifications me/notifications
		/// </summary>
		/// <param name="page">Specify page for paging</param>
		/// <returns>shows unread notifications of authorized user</returns>
		public async Task GetMeNotificationsAsync(int page)
		{
			var requestUri = "me/notifications?page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of organisations you have access to
		/// 
		/// This endpoint requires the API key from a user. The result is a set of organisations and their API keys.
		/// 
		/// GetOrganisations organisations
		/// </summary>
		/// <returns>Returns the list of organisations you have access to</returns>
		public async Task GetOrganisationsAsync()
		{
			var requestUri = "organisations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the inventory list of the organisation
		/// 
		/// Find a detailed description here: https://github.com/versioneye/versioneye-api/blob/master/docs/api/v2/organisation.md
		/// 
		/// GetOrganisationsOrgaNameInventory organisations/{orga_name}/inventory
		/// </summary>
		/// <param name="team_name">Filter by team name</param>
		/// <param name="language">Filter by programming language</param>
		/// <param name="project_version">Filter down by project version</param>
		/// <param name="post_filter">Post processing filter. Possible values are 'ALL', 'duplicates_only', 'show_duplicates'</param>
		/// <returns>Returns the inventory list of the organisation</returns>
		public async Task GetOrganisationsOrgaNameInventoryAsync(string team_name, string language, string project_version, string post_filter, int orga_name)
		{
			var requestUri = "organisations/"+orga_name+"/inventory?team_name=" + (team_name==null? "" : System.Uri.EscapeDataString(team_name))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&project_version=" + (project_version==null? "" : System.Uri.EscapeDataString(project_version))+"&post_filter=" + (post_filter==null? "" : System.Uri.EscapeDataString(post_filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the inventory diff object
		/// GetOrganisationsOrgaNameInventoryDiff organisations/{orga_name}/inventory_diff
		/// </summary>
		/// <param name="inventory_diff_id">ID of the inventory diff object</param>
		/// <returns>Returns the inventory diff object</returns>
		public async Task GetOrganisationsOrgaNameInventoryDiffAsync(string inventory_diff_id, int orga_name)
		{
			var requestUri = "organisations/"+orga_name+"/inventory_diff?inventory_diff_id=" + (inventory_diff_id==null? "" : System.Uri.EscapeDataString(inventory_diff_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an inventory diff object
		/// 
		/// This Endpoint takes 2 inventory filters and calculates the difference between them.
		/// The diff object contains wich items have been removed and/or added compared to the inventory1 filter.
		/// The response of this Endpoint is the ID of the diff object, which is calculated async in the background.
		/// 
		/// PostOrganisationsOrgaNameInventoryDiff organisations/{orga_name}/inventory_diff
		/// </summary>
		public async Task PostOrganisationsOrgaNameInventoryDiffAsync(int orga_name, PostOrganisationsOrgaNameInventoryDiffPostBody requestBody)
		{
			var requestUri = "organisations/"+orga_name+"/inventory_diff";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of projects
		/// Returns the list of projects
		/// GetOrganisationsOrgaNameProjects organisations/{orga_name}/projects
		/// </summary>
		/// <returns>Returns the list of projects</returns>
		public async Task GetOrganisationsOrgaNameProjectsAsync(int orga_name)
		{
			var requestUri = "organisations/"+orga_name+"/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of teams
		/// Returns the list of teams
		/// GetOrganisationsOrgaNameTeams organisations/{orga_name}/teams
		/// </summary>
		/// <returns>Returns the list of teams</returns>
		public async Task GetOrganisationsOrgaNameTeamsAsync(int orga_name)
		{
			var requestUri = "organisations/"+orga_name+"/teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// search packages
		/// 
		/// This resource returns same results as our web application. But you get it as JSON objects -
		/// the result is an JSON array of product objects.
		/// 
		/// When there's no match for the query, the result array will be empty.
		/// 
		/// GetProductsSearchQ products/search/{q}
		/// </summary>
		/// <param name="q">Query string. At least 2 characters.</param>
		/// <param name="lang">Filter results by programming languages;
		///                                  For filtering multiple languages submit a comma separated list of language strings.
		///                                </param>
		/// <param name="g">Filter by GroupID. This is Java/Maven specific</param>
		/// <param name="page">Specify page for paging</param>
		/// <returns>search packages</returns>
		public async Task GetProductsSearchQAsync(string q, string lang, string g, int page)
		{
			var requestUri = "products/search/"+ (q==null? "" : System.Uri.EscapeDataString(q))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&g=" + (g==null? "" : System.Uri.EscapeDataString(g))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// search by SHA value
		/// 
		/// This Endpoint expects a SHA value and returns the corresponding product to it, if available.
		/// 
		/// GetProductsShaSha products/sha/{sha}
		/// </summary>
		/// <returns>search by SHA value</returns>
		public async Task GetProductsShaShaAsync(int sha)
		{
			var requestUri = "products/sha/"+sha;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// detailed information for specific package
		/// 
		/// Please replace all slashes `/` through colons `:` and all dots `.` through `~`!
		/// 
		/// Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.
		/// 
		/// #### Notes about status codes
		/// 
		/// * API returns 404, when the product with given product key doesnt exists.
		/// 
		/// * Response 302 means that you didnt encode prod_key correctly.* (Replace all dots & slashes ) *
		/// 
		/// GetProductsLangProdKey products/{lang}/{prod_key}
		/// </summary>
		/// <param name="lang">"Name of programming language"</param>
		/// <param name="prod_key">"Encoded product key, replace all `/` and `.`</param>
		/// <param name="prod_version">"Version string"</param>
		/// <returns>detailed information for specific package</returns>
		public async Task GetProductsLangProdKeyAsync(string lang, string prod_key, string prod_version)
		{
			var requestUri = "products/"+ (lang==null? "" : System.Uri.EscapeDataString(lang))+"/"+ (prod_key==null? "" : System.Uri.EscapeDataString(prod_key))+"&prod_version=" + (prod_version==null? "" : System.Uri.EscapeDataString(prod_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// check your following status
		/// 
		/// Please replace all slashes `/` through colons `:` and all dots `.` through `~`!
		/// 
		/// Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.
		/// 
		/// #### Notes about status codes
		/// 
		/// This resource will returns the status code 404 if there is no product
		/// for the given prod_key.
		/// 
		/// GetProductsLangProdKeyFollow products/{lang}/{prod_key}/follow
		/// </summary>
		/// <param name="lang">"Name of programming language"</param>
		/// <param name="prod_key">Package specifier</param>
		/// <returns>check your following status</returns>
		public async Task GetProductsLangProdKeyFollowAsync(string lang, string prod_key)
		{
			var requestUri = "products/"+ (lang==null? "" : System.Uri.EscapeDataString(lang))+"/"+ (prod_key==null? "" : System.Uri.EscapeDataString(prod_key))+"/follow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// follow your favorite software package
		/// 
		/// Please replace all slashes `/` through colons `:` and all dots `.` through `~`!
		/// 
		/// Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.
		/// 
		/// #### Notes about status codes
		/// 
		/// It will respond 404, when you are using wrong product key or encode it uncorrectly.
		/// 
		/// PostProductsLangProdKeyFollow products/{lang}/{prod_key}/follow
		/// </summary>
		/// <param name="lang">Programming language</param>
		/// <param name="prod_key"> Package product key. </param>
		public async Task PostProductsLangProdKeyFollowAsync(string lang, string prod_key)
		{
			var requestUri = "products/"+ (lang==null? "" : System.Uri.EscapeDataString(lang))+"/"+ (prod_key==null? "" : System.Uri.EscapeDataString(prod_key))+"/follow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// unfollow given software package
		/// 
		/// Please replace all slashes `/` through colons `:` and all dots `.` through `~`!
		/// 
		/// Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.
		/// 
		/// #### Response codes
		/// 
		/// * 400 - bad request; you used wrong product key;
		/// * 401 - unauthorized - please append api_key
		/// * 403 - forbidden; you are not authorized; or just missed api_key;
		/// 
		/// DeleteProductsLangProdKeyFollow products/{lang}/{prod_key}/follow
		/// </summary>
		/// <param name="lang">Programming language</param>
		/// <param name="prod_key">Package specifier</param>
		public async Task DeleteProductsLangProdKeyFollowAsync(string lang, string prod_key)
		{
			var requestUri = "products/"+ (lang==null? "" : System.Uri.EscapeDataString(lang))+"/"+ (prod_key==null? "" : System.Uri.EscapeDataString(prod_key))+"/follow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// references
		/// 
		/// It returns the references of a package.
		/// 
		/// Please replace all slashes `/` through colons `:` and all dots `.` through `~`!
		/// 
		/// Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.
		/// 
		/// #### Notes about status codes
		/// 
		/// This resource will return the status code 404 if there is no product for
		/// the given prod_key or the product has 0 references.
		/// 
		/// GetProductsLangProdKeyReferences products/{lang}/{prod_key}/references
		/// </summary>
		/// <param name="lang">Language</param>
		/// <param name="prod_key">Product Key</param>
		/// <param name="page">Page for paging</param>
		/// <returns>references</returns>
		public async Task GetProductsLangProdKeyReferencesAsync(string lang, string prod_key, int page)
		{
			var requestUri = "products/"+ (lang==null? "" : System.Uri.EscapeDataString(lang))+"/"+ (prod_key==null? "" : System.Uri.EscapeDataString(prod_key))+"/references&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// list versions of a package
		/// 
		/// Please replace all slashes `/` through colons `:` and all dots `.` through `~`!
		/// 
		/// Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.
		/// 
		/// #### Notes about status codes
		/// 
		/// * API returns 404, when the product with given product key doesnt exists.
		/// 
		/// * Response 302 means that you didnt encode prod_key correctly.* (Replace all dots & slashes ) *
		/// 
		/// GetProductsLangProdKeyVersions products/{lang}/{prod_key}/versions
		/// </summary>
		/// <param name="lang">"Name of programming language"</param>
		/// <param name="prod_key">"Encoded product key, replace all `/` and `.`</param>
		/// <returns>list versions of a package</returns>
		public async Task GetProductsLangProdKeyVersionsAsync(string lang, string prod_key)
		{
			var requestUri = "products/"+ (lang==null? "" : System.Uri.EscapeDataString(lang))+"/"+ (prod_key==null? "" : System.Uri.EscapeDataString(prod_key))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// suggest a license for an artifact
		/// With this endpoint users can suggest a license for an artifact.
		/// PostProductsLangProdKeyProdVersionLicense products/{lang}/{prod_key}/{prod_version}/license
		/// </summary>
		/// <param name="lang"> programming language </param>
		/// <param name="prod_key"> product key </param>
		/// <param name="prod_version"> product version </param>
		public async Task PostProductsLangProdKeyProdVersionLicenseAsync(string lang, string prod_key, string prod_version, PostProductsLangProdKeyProdVersionLicensePostBody requestBody)
		{
			var requestUri = "products/"+ (lang==null? "" : System.Uri.EscapeDataString(lang))+"/"+ (prod_key==null? "" : System.Uri.EscapeDataString(prod_key))+"/"+ (prod_version==null? "" : System.Uri.EscapeDataString(prod_version))+"/license";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// upload scm changelogs to an artifact
		/// 
		/// This resource can parse a changelog.xml from the maven-changelog-plugin, assign
		/// it to a specific artifact and display the changelog infos on the product page.
		/// 
		/// Please replace all slashes `/` through colons `:` and all dots `.` through `~`!
		/// 
		/// Example: The clojure package `yummy.json/json` has to be transformed to  `yummy~json:json`.
		/// 
		/// #### Notes about status codes
		/// 
		/// It will respond 404, when you are using wrong product key or encode it uncorrectly.
		/// 
		/// PostProductsLangProdKeyProdVersionScmChanges products/{lang}/{prod_key}/{prod_version}/scm_changes
		/// </summary>
		/// <param name="lang"> programming language </param>
		/// <param name="prod_key"> product key </param>
		/// <param name="prod_version"> product version </param>
		public async Task PostProductsLangProdKeyProdVersionScmChangesAsync(string lang, string prod_key, string prod_version)
		{
			var requestUri = "products/"+ (lang==null? "" : System.Uri.EscapeDataString(lang))+"/"+ (prod_key==null? "" : System.Uri.EscapeDataString(prod_key))+"/"+ (prod_version==null? "" : System.Uri.EscapeDataString(prod_version))+"/scm_changes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// list of projects
		/// 
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// GetProjects projects
		/// </summary>
		/// <param name="orga_name">The name of the organisation the project is assigned to.</param>
		/// <param name="team_name">The name of the team in the organisation this project is assigned to.</param>
		/// <returns>list of projects</returns>
		public async Task GetProjectsAsync(string orga_name, string team_name)
		{
			var requestUri = "projects?orga_name=" + (orga_name==null? "" : System.Uri.EscapeDataString(orga_name))+"&team_name=" + (team_name==null? "" : System.Uri.EscapeDataString(team_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// upload project file and create a new project
		/// 
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// PostProjects projects
		/// </summary>
		public async Task PostProjectsAsync(PostProjectsPostBody requestBody)
		{
			var requestUri = "projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// merge a project into another one
		/// 
		/// This endpoint merges a project (child_id) into another project (group_id/artifact_id).
		/// This endpoint is specially for Maven based projects!
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// GetProjectsGroupIdArtifactIdMergeGaChildId projects/{group_id}/{artifact_id}/merge_ga/{child_id}
		/// </summary>
		/// <param name="group_id">GroupId of the parent project</param>
		/// <param name="artifact_id">ArtifactId of the parent project</param>
		/// <param name="child_id">Project ID of the child</param>
		/// <returns>merge a project into another one</returns>
		public async Task GetProjectsGroupIdArtifactIdMergeGaChildIdAsync(string group_id, string artifact_id, string child_id)
		{
			var requestUri = "projects/"+ (group_id==null? "" : System.Uri.EscapeDataString(group_id))+"/"+ (artifact_id==null? "" : System.Uri.EscapeDataString(artifact_id))+"/merge_ga/"+ (child_id==null? "" : System.Uri.EscapeDataString(child_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// merge a project into another one
		/// 
		/// This endpoint merges a project (child_id) into another project (parent_id).
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// GetProjectsParentIdMergeChildId projects/{parent_id}/merge/{child_id}
		/// </summary>
		/// <param name="parent_id">Project ID of the parent</param>
		/// <param name="child_id">Project ID of the child</param>
		/// <returns>merge a project into another one</returns>
		public async Task GetProjectsParentIdMergeChildIdAsync(string parent_id, string child_id)
		{
			var requestUri = "projects/"+ (parent_id==null? "" : System.Uri.EscapeDataString(parent_id))+"/merge/"+ (child_id==null? "" : System.Uri.EscapeDataString(child_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// unmerge a project
		/// 
		/// This endpoint unmerges a project (child_id) from another project (parent_id). It makes the
		/// chilld again a separate project!
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// GetProjectsParentIdUnmergeChildId projects/{parent_id}/unmerge/{child_id}
		/// </summary>
		/// <param name="parent_id">Project ID of the parent</param>
		/// <param name="child_id">Project ID of the child</param>
		/// <returns>unmerge a project</returns>
		public async Task GetProjectsParentIdUnmergeChildIdAsync(string parent_id, string child_id)
		{
			var requestUri = "projects/"+ (parent_id==null? "" : System.Uri.EscapeDataString(parent_id))+"/unmerge/"+ (child_id==null? "" : System.Uri.EscapeDataString(child_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// shows the project's information
		/// It shows detailed info of your project.
		/// GetProjectsProjectKey projects/{project_key}
		/// </summary>
		/// <param name="project_key">Project ID</param>
		/// <returns>shows the project's information</returns>
		public async Task GetProjectsProjectKeyAsync(string project_key)
		{
			var requestUri = "projects/"+ (project_key==null? "" : System.Uri.EscapeDataString(project_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update project properites
		/// 
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// With this Endpoint an existing project can be updated. This are the fields which
		/// can be updated:
		/// 
		/// ```
		/// {
		/// public: false,
		/// name: "toto",
		/// description: "beschreibung",
		/// license: "Lizenz",
		/// version: "Versionio"
		/// }
		/// ```
		/// 
		/// PutProjectsProjectKey projects/{project_key}
		/// </summary>
		/// <param name="project_key">Project ID</param>
		/// <returns>update project properites</returns>
		public async Task PutProjectsProjectKeyAsync(string project_key)
		{
			var requestUri = "projects/"+ (project_key==null? "" : System.Uri.EscapeDataString(project_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update project with new file
		/// 
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// PostProjectsProjectKey projects/{project_key}
		/// </summary>
		/// <param name="project_key">Project ID</param>
		public async Task PostProjectsProjectKeyAsync(string project_key, PostProjectsProjectKeyPostBody requestBody)
		{
			var requestUri = "projects/"+ (project_key==null? "" : System.Uri.EscapeDataString(project_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// delete given project
		/// 
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// DeleteProjectsProjectKey projects/{project_key}
		/// </summary>
		/// <param name="project_key">Delete project with given project ID.</param>
		public async Task DeleteProjectsProjectKeyAsync(string project_key)
		{
			var requestUri = "projects/"+ (project_key==null? "" : System.Uri.EscapeDataString(project_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get a list of ALL dependencies
		/// 
		/// This Endpoint returns a list of ALL dependencies of the project. This list includes
		/// dependencies of child projects as well.
		/// 
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// GetProjectsProjectKeyDependencies projects/{project_key}/dependencies
		/// </summary>
		/// <param name="project_key">Project ID or project_key</param>
		/// <returns>get a list of ALL dependencies</returns>
		public async Task GetProjectsProjectKeyDependenciesAsync(string project_key)
		{
			var requestUri = "projects/"+ (project_key==null? "" : System.Uri.EscapeDataString(project_key))+"/dependencies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get grouped view of licences for dependencies
		/// 
		/// To use this resource you need either an active session or you have to append
		/// your API Key to the URL as parameter. For example: "?api_key=666_your_api_key_666"
		/// 
		/// GetProjectsProjectKeyLicenses projects/{project_key}/licenses
		/// </summary>
		/// <param name="project_key">Project ID or project_key</param>
		/// <returns>get grouped view of licences for dependencies</returns>
		public async Task GetProjectsProjectKeyLicensesAsync(string project_key)
		{
			var requestUri = "projects/"+ (project_key==null? "" : System.Uri.EscapeDataString(project_key))+"/licenses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Security Vulnerabilities
		/// Security Vulnerabilities
		/// GetSecurity security
		/// </summary>
		/// <param name="language">Filter by programming languages</param>
		/// <param name="prod_key">prod_key of the package</param>
		/// <param name="page">Specify page for paging</param>
		/// <param name="asc_sort">Asc sort by value</param>
		/// <param name="desc_sort">Desc sort by value</param>
		/// <returns>Security Vulnerabilities</returns>
		public async Task GetSecurityAsync(string language, string prod_key, int page, string asc_sort, string desc_sort)
		{
			var requestUri = "security?language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&prod_key=" + (prod_key==null? "" : System.Uri.EscapeDataString(prod_key))+"&page="+page+"&asc_sort=" + (asc_sort==null? "" : System.Uri.EscapeDataString(asc_sort))+"&desc_sort=" + (desc_sort==null? "" : System.Uri.EscapeDataString(desc_sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Answers to request with basic pong.
		/// check is the service up and running
		/// GetServicesPing services/ping
		/// </summary>
		/// <returns>Answers to request with basic pong.</returns>
		public async Task GetServicesPingAsync()
		{
			var requestUri = "services/ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// returns session info for authorized users
		/// 
		/// If current user has active session, then this
		/// method will return 200 with short user profile.
		/// For othercase, it will return error message with status code 401.
		/// 
		/// GetSessions sessions
		/// </summary>
		/// <returns>returns session info for authorized users</returns>
		public async Task GetSessionsAsync()
		{
			var requestUri = "sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates new sessions
		/// You need to append your api_key to request.
		/// PostSessions sessions
		/// </summary>
		public async Task PostSessionsAsync(PostSessionsPostBody requestBody)
		{
			var requestUri = "sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// delete current session aka log out.
		/// Close current session. It's very handy method when you re-generated your current API-key.
		/// DeleteSessions sessions
		/// </summary>
		public async Task DeleteSessionsAsync()
		{
			var requestUri = "sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// creates new sessions
		/// You need to append your api_key to request.
		/// PostSessionsLogin sessions/login
		/// </summary>
		public async Task PostSessionsLoginAsync(PostSessionsLoginPostBody requestBody)
		{
			var requestUri = "sessions/login";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// shows profile of given user_id
		/// shows profile of given user_id
		/// GetUsersUsername users/{username}
		/// </summary>
		/// <param name="username">username</param>
		/// <returns>shows profile of given user_id</returns>
		public async Task GetUsersUsernameAsync(string username)
		{
			var requestUri = "users/"+ (username==null? "" : System.Uri.EscapeDataString(username));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// shows user's comments
		/// shows user's comments
		/// GetUsersUsernameComments users/{username}/comments
		/// </summary>
		/// <param name="username">VersionEye users' nickname</param>
		/// <param name="page">pagination number</param>
		/// <returns>shows user's comments</returns>
		public async Task GetUsersUsernameCommentsAsync(string username, int page)
		{
			var requestUri = "users/"+ (username==null? "" : System.Uri.EscapeDataString(username))+"/comments&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// shows user's favorite packages
		/// shows user's favorite packages
		/// GetUsersUsernameFavorites users/{username}/favorites
		/// </summary>
		/// <param name="username">username</param>
		/// <param name="page">Pagination number</param>
		/// <returns>shows user's favorite packages</returns>
		public async Task GetUsersUsernameFavoritesAsync(string username, int page)
		{
			var requestUri = "users/"+ (username==null? "" : System.Uri.EscapeDataString(username))+"/favorites&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class PostGithubRepoKeyPostBody
	{
		
		/// <summary>
		/// the name of the branch
		/// </summary>
		[System.ComponentModel.DefaultValue("master")]
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; } = "master";
		
		/// <summary>
		/// the project file (default is Gemfile)
		/// </summary>
		[System.ComponentModel.DefaultValue("Gemfile")]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; } = "Gemfile";
	}
	
	public class PostOrganisationsOrgaNameInventoryDiffPostBody
	{
		
		/// <summary>
		/// Inventory1, filter by team name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f1_team_name")]
		public string F1_team_name { get; set; }
		
		/// <summary>
		/// Inventory1, filter by programming language
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f1_language")]
		public string F1_language { get; set; }
		
		/// <summary>
		/// Inventory1, filter down by project version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f1_project_version")]
		public string F1_project_version { get; set; }
		
		/// <summary>
		/// Inventory1, post processing filter. Possible values are 'ALL', 'duplicates_only', 'show_duplicates'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f1_post_filter")]
		public string F1_post_filter { get; set; }
		
		/// <summary>
		/// Inventory2, filter by team name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f2_team_name")]
		public string F2_team_name { get; set; }
		
		/// <summary>
		/// Inventory2, filter by programming language
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f2_language")]
		public string F2_language { get; set; }
		
		/// <summary>
		/// Inventory2, filter down by project version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f2_project_version")]
		public string F2_project_version { get; set; }
		
		/// <summary>
		/// Inventory2, post processing filter. Possible values are 'ALL', 'duplicates_only', 'show_duplicates'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="f2_post_filter")]
		public string F2_post_filter { get; set; }
	}
	
	public class PostProductsLangProdKeyProdVersionLicensePostBody
	{
		
		/// <summary>
		///  name of the license 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="license_name")]
		public string License_name { get; set; }
		
		/// <summary>
		///  source of the license. Where did you find it? 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="license_source")]
		public string License_source { get; set; }
		
		/// <summary>
		///  you wanna say anyting important to this license? 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
	}
	
	public class PostProjectsPostBody
	{
		
		/// <summary>
		/// Project file - [maven.pom, Gemfile ...]
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload")]
		public string Upload { get; set; }
		
		/// <summary>
		/// By default 'public'. If 'public' everybody can see the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public string Visibility { get; set; }
		
		/// <summary>
		/// The name of the VersionEye project. By default it is the filename.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the organisation this project should be assigned to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orga_name")]
		public string Orga_name { get; set; }
		
		/// <summary>
		/// The name of the team in the organisation this project should be assigned to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_name")]
		public string Team_name { get; set; }
		
		/// <summary>
		/// If 'true' this project will not show up in the UI and gets removed later.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temp")]
		public string Temp { get; set; }
	}
	
	public class PostProjectsProjectKeyPostBody
	{
		
		/// <summary>
		/// Project file - [maven.pom, Gemfile ...]
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project_file")]
		public string Project_file { get; set; }
	}
	
	public class PostSessionsPostBody
	{
		
		/// <summary>
		/// your personal token for API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
	}
	
	public class PostSessionsLoginPostBody
	{
		
		/// <summary>
		/// email or username
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
