//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Key-value pairs of instance details in the legacy format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InfoField
	{
		
		/// <summary>
		/// Identifies the name of the instance provisioned by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
	}
	
	/// <summary>
	/// Detailed information about the meter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MeterInfo
	{
		
		/// <summary>
		/// Indicates the date from which the meter rate is effective.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		/// <summary>
		/// The resource quantity that is included in the offer at no cost. Consumption beyond this quantity will be charged.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> IncludedQuantity { get; set; }
		
		/// <summary>
		/// The category of the meter, e.g., 'Cloud services', 'Networking', etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MeterCategory { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MeterId { get; set; }
		
		/// <summary>
		/// The name of the meter, within the given meter category
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MeterName { get; set; }
		
		/// <summary>
		/// The list of key/value pairs for the meter rates, in the format 'key':'value' where key = the meter quantity, and value = the corresponding price
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, float> MeterRates { get; set; }
		
		/// <summary>
		/// The region in which the Azure service is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MeterRegion { get; set; }
		
		/// <summary>
		/// The subcategory of the meter, e.g., 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MeterSubCategory { get; set; }
		
		/// <summary>
		/// Provides additional meter data. 'Third Party' indicates a meter with no discount. Blanks indicate First Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] MeterTags { get; set; }
		
		/// <summary>
		/// The unit in which the meter consumption is charged, e.g., 'Hours', 'GB', etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Indicates that a monetary commitment is required for this offer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MonetaryCommitment : OfferTermInfo
	{
		
		/// <summary>
		/// An array of meter ids that are excluded from the given offer terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] ExcludedMeterIds { get; set; }
		
		/// <summary>
		/// The list of key/value pairs for the tiered meter rates, in the format 'key':'value' where key = price, and value = the corresponding discount percentage. This field is used only by offer terms of type 'Monetary Commitment'.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, decimal> TieredDiscount { get; set; }
	}
	
	/// <summary>
	/// Indicates that this is a monetary credit offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MonetaryCredit : OfferTermInfo
	{
		
		/// <summary>
		/// The amount of credit provided under the terms of the given offer level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Decimal> Credit { get; set; }
		
		/// <summary>
		/// An array of meter ids that are excluded from the given offer terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] ExcludedMeterIds { get; set; }
	}
	
	/// <summary>
	/// Describes the offer term.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OfferTermInfo
	{
		
		/// <summary>
		/// Indicates the date from which the offer term is effective.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		/// <summary>
		/// Name of the offer term
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OfferTermInfoName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OfferTermInfoName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Recurring Charge")]
		Recurring_Charge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Monetary Commitment")]
		Monetary_Commitment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Monetary Credit")]
		Monetary_Credit = 2,
	}
	
	/// <summary>
	/// Parameters that are used in the odata $filter query parameter for providing RateCard information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RateCardQueryParameters
	{
		
		/// <summary>
		/// The currency in which the rates need to be provided.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
		
		/// <summary>
		/// The culture in which the resource metadata needs to be localized.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		/// <summary>
		/// The Offer ID parameter consists of the 'MS-AZR-' prefix, plus the Offer ID number (e.g., MS-AZR-0026P). See https://azure.microsoft.com/en-us/support/legal/offer-details/ for more information on the list of available Offer IDs, country/region availability, and billing currency.
		/// Required
		/// Pattern: ^MS-AZR-\d{4}P(-\d{4}P)*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^MS-AZR-\d{4}P(-\d{4}P)*$")]
		public string OfferDurableId { get; set; }
		
		/// <summary>
		/// 2 letter ISO code where the offer was purchased.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RegionInfo { get; set; }
	}
	
	/// <summary>
	/// Indicates a recurring charge is present for this offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecurringCharge : OfferTermInfo
	{
		
		/// <summary>
		/// The amount of recurring charge as per the offer term.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="RecurringCharge")]
		public System.Nullable<System.Int32> RecurringCharge1 { get; set; }
	}
	
	/// <summary>
	/// Price and Metadata information for resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceRateCardInfo
	{
		
		/// <summary>
		/// The currency in which the rates are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
		
		/// <summary>
		/// All rates are pretax, so this will always be returned as 'false'.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTaxIncluded { get; set; }
		
		/// <summary>
		/// The culture in which the resource information is localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		/// <summary>
		/// A list of meters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MeterInfo[] Meters { get; set; }
		
		/// <summary>
		/// A list of offer terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OfferTermInfo[] OfferTerms { get; set; }
	}
	
	/// <summary>
	/// Describes the usageAggregation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageAggregation
	{
		
		/// <summary>
		/// Unique Id for the usage aggregate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the usage aggregate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Describes a sample of the usageAggregation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UsageSample Properties { get; set; }
		
		/// <summary>
		/// Type of the resource being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The Get UsageAggregates operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageAggregationListResult
	{
		
		/// <summary>
		/// Gets or sets the link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets or sets details for the requested aggregation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public UsageAggregation[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes a sample of the usageAggregation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageSample
	{
		
		/// <summary>
		/// Key-value pairs of instance details in the legacy format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infoFields")]
		public InfoField InfoFields { get; set; }
		
		/// <summary>
		/// Key-value pairs of instance details represented as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceData")]
		public string InstanceData { get; set; }
		
		/// <summary>
		/// Category of the consumed resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meterCategory")]
		public string MeterCategory { get; set; }
		
		/// <summary>
		/// Unique ID for the resource that was consumed (aka ResourceID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meterId")]
		public string MeterId { get; set; }
		
		/// <summary>
		/// Friendly name of the resource being consumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meterName")]
		public string MeterName { get; set; }
		
		/// <summary>
		/// Region of the meterId used for billing purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meterRegion")]
		public string MeterRegion { get; set; }
		
		/// <summary>
		/// Sub-category of the consumed resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meterSubCategory")]
		public string MeterSubCategory { get; set; }
		
		/// <summary>
		/// The amount of the resource consumption that occurred in this time frame.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		/// <summary>
		/// The subscription identifier for the Azure user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// The unit in which the usage for this resource is being counted, e.g. Hours, GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// UTC end time for the usage bucket to which this usage aggregate belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageEndTime")]
		public System.Nullable<System.DateTimeOffset> UsageEndTime { get; set; }
		
		/// <summary>
		/// UTC start time for the usage bucket to which this usage aggregate belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageStartTime")]
		public System.Nullable<System.DateTimeOffset> UsageStartTime { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Enables you to query for the resource/meter metadata and related prices used in a given subscription by Offer ID, Currency, Locale and Region. The metadata associated with the billing meters, including but not limited to service names, types, resources, units of measure, and regions, is subject to change at any time and without notice. If you intend to use this billing data in an automated fashion, please use the billing meter GUID to uniquely identify each billable item. If the billing meter GUID is scheduled to change due to a new billing model, you will be notified in advance of the change.
		/// RateCard_Get subscriptions/{subscriptionId}/providers/Microsoft.Commerce/RateCard
		/// </summary>
		/// <param name="filter">The filter to apply on the operation. It ONLY supports the 'eq' and 'and' logical operators at this time. All the 4 query parameters 'OfferDurableId',  'Currency', 'Locale', 'Region' are required to be a part of the $filter.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">It uniquely identifies Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters.</returns>
		public async Task<ResourceRateCardInfo> RateCard_GetAsync(string filter, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Commerce/RateCard?$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceRateCardInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query aggregated Azure subscription consumption data for a date range.
		/// UsageAggregates_List subscriptions/{subscriptionId}/providers/Microsoft.Commerce/UsageAggregates
		/// </summary>
		/// <param name="reportedStartTime">The start of the time range to retrieve data for.</param>
		/// <param name="reportedEndTime">The end of the time range to retrieve data for.</param>
		/// <param name="showDetails">`True` returns usage data in instance-level detail, `false` causes server-side aggregation with fewer details. For example, if you have 3 website instances, by default you will get 3 line items for website consumption. If you specify showDetails = false, the data will be aggregated as a single line item for website consumption within the time period (for the given subscriptionId, meterId, usageStartTime and usageEndTime).</param>
		/// <param name="aggregationGranularity">`Daily` (default) returns the data in daily granularity, `Hourly` returns the data in hourly granularity.</param>
		/// <param name="continuationToken">Used when a continuation token string is provided in the response body of the previous call, enabling paging through a large result set. If not present, the data is retrieved from the beginning of the day/hour (based on the granularity) passed in. </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">It uniquely identifies Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters.</returns>
		public async Task<UsageAggregationListResult> UsageAggregates_ListAsync(System.DateTimeOffset reportedStartTime, System.DateTimeOffset reportedEndTime, bool showDetails, UsageAggregates_ListAggregationGranularity aggregationGranularity, string continuationToken, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Commerce/UsageAggregates?reportedStartTime=" + reportedStartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&reportedEndTime=" + reportedEndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&showDetails="+showDetails+"&aggregationGranularity=" + aggregationGranularity+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UsageAggregationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum UsageAggregates_ListAggregationGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hourly = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
