//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureDataLake
	{
		
		/// <summary>
		/// The authority URL used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorityUrl")]
		public string AuthorityUrl { get; set; }
		
		/// <summary>
		/// The content of the certificate used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// The Client ID/Application ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The client secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Is it using certificate to authenticate. If false then use client secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCertAuth")]
		public System.Nullable<System.Boolean> IsCertAuth { get; set; }
		
		/// <summary>
		/// Resource Group Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The resource the service principal/app has access to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// The Azure Data Lake store name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
		
		/// <summary>
		/// Subscription Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// The ID of the tenant the service principal/app belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The thumbprint of the certificate above
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzurePostgreSql
	{
		
		/// <summary>
		/// The Azure PostgreSQL database name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// The Azure PostgreSQL server host endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The Azure PostgreSQL port number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portNumber")]
		public string PortNumber { get; set; }
		
		/// <summary>
		/// Resource Group Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The Azure PostgreSQL server name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverName")]
		public string ServerName { get; set; }
		
		/// <summary>
		/// Subscription Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// The Azure PostgreSQL user id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// The Azure PostgreSQL user password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userPassword")]
		public string UserPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureSqlDatabase
	{
		
		/// <summary>
		/// The authority URL used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorityUrl")]
		public string AuthorityUrl { get; set; }
		
		/// <summary>
		/// The content of the certificate used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// The Client ID/Application ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The client secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// The Azure SQL database name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// The server host endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Is it using certificate to authenticate. If false then use client secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCertAuth")]
		public System.Nullable<System.Boolean> IsCertAuth { get; set; }
		
		/// <summary>
		/// Resource Group Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The resource the service principal/app has access to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// The Azure SQL server name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverName")]
		public string ServerName { get; set; }
		
		/// <summary>
		/// Subscription Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// The ID of the tenant the service principal/app belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The thumbprint of the certificate above
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureStorage
	{
		
		/// <summary>
		/// Storage Account Key (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountKey")]
		public string AccountKey { get; set; }
		
		/// <summary>
		/// Storage Account Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Indicate if we are using Workspace ManagedIdentities/MSI token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="areWorkspaceManagedIdentitiesAllowed")]
		public System.Nullable<System.Boolean> AreWorkspaceManagedIdentitiesAllowed { get; set; }
		
		/// <summary>
		/// If this is an Microsoft.MachineLearning.DataStore.Contracts.DataStoreType.AzureBlob, the length of time (in seconds) to cache files locally after they are accessed (downloaded).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobCacheTimeout")]
		public System.Nullable<System.Int32> BlobCacheTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientCredentials")]
		public ClientCredentials ClientCredentials { get; set; }
		
		/// <summary>
		/// The storage container name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// The credential
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credential")]
		public string Credential { get; set; }
		
		/// <summary>
		/// The credential type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialType")]
		public System.Nullable<AzureStorageCredentialType> CredentialType { get; set; }
		
		/// <summary>
		/// The host of the container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Indicate if we are using SAS token or Account Key (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSas")]
		public System.Nullable<System.Boolean> IsSas { get; set; }
		
		/// <summary>
		/// The protocol to use. Defaults to https
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// Resource Group Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// SAS Token for the container (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasToken")]
		public string SasToken { get; set; }
		
		/// <summary>
		/// Subscription Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClientCredentials
	{
		
		/// <summary>
		/// The authority URL used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorityUrl")]
		public string AuthorityUrl { get; set; }
		
		/// <summary>
		/// The content of the certificate used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// The Client ID/Application ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The client secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Is it using certificate to authenticate. If false then use client secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCertAuth")]
		public System.Nullable<System.Boolean> IsCertAuth { get; set; }
		
		/// <summary>
		/// Resource Group Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// The resource the service principal/app has access to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// Subscription Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// The ID of the tenant the service principal/app belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The thumbprint of the certificate above
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureStorageCredentialType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sas = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountKey = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientCredentials = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataStore
	{
		
		[System.Runtime.Serialization.DataMember(Name="azureDataLakeSection")]
		public AzureDataLake AzureDataLakeSection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="azurePostgreSqlSection")]
		public AzurePostgreSql AzurePostgreSqlSection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="azureSqlDatabaseSection")]
		public AzureSqlDatabase AzureSqlDatabaseSection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="azureStorageSection")]
		public AzureStorage AzureStorageSection { get; set; }
		
		/// <summary>
		/// The Azure storage service this datastore points to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataStoreType")]
		public System.Nullable<DataStoreDataStoreType> DataStoreType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="glusterFsSection")]
		public GlusterFs GlusterFsSection { get; set; }
		
		/// <summary>
		/// A read only property that denotes whether the service datastore has been validated with credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasBeenValidated")]
		public System.Nullable<System.Boolean> HasBeenValidated { get; set; }
		
		/// <summary>
		/// Name of the datastore
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tags to datastore
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataStoreDataStoreType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureBlob = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureFile = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureDataLake = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureSqlDatabase = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzurePostgreSql = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DBFS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureDataLakeGen2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GlusterFs = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GlusterFs
	{
		
		/// <summary>
		/// The server address of one of the servers that hosts the GlusterFS. Can be either the IP address
		///or server name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverAddress")]
		public string ServerAddress { get; set; }
		
		/// <summary>
		/// The name of the created GlusterFS volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeName")]
		public string VolumeName { get; set; }
	}
	
	/// <summary>
	/// The error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error (e.g., the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Dictionary containing correlation details for the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlation")]
		public System.Collections.Generic.Dictionary<string, string> Correlation { get; set; }
		
		/// <summary>
		/// The hosting environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		/// <summary>
		/// The root error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public RootError Error { get; set; }
		
		/// <summary>
		/// The Azure region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	/// <summary>
	/// The root error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RootError
	{
		
		/// <summary>
		/// The service-defined error code. Supported error codes: ServiceError, UserError, ValidationError, AzureStorageError, TransientError, RequestThrottled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The related errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDetails[] Details { get; set; }
		
		/// <summary>
		/// A nested structure of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerErrorResponse InnerError { get; set; }
		
		/// <summary>
		/// A human-readable representation of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error (e.g., the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// A nested structure of errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InnerErrorResponse
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A nested structure of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerErrorResponse InnerError { get; set; }
	}
	
	/// <summary>
	/// A paginated list of DataStores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedDataStoreList
	{
		
		/// <summary>
		/// The token used in retrieving the next page.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The link to the next page constructed using the continuationToken.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type DataStore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataStore[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Datastores list.
		/// Get the list of Datastores attached to the workspace.
		/// DataStores_List datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="dataStoreNames">List of Datastore names.</param>
		/// <param name="continuationToken">The Continuation Token.</param>
		/// <param name="count">Count of Datastores to be returned.</param>
		/// <param name="includeSecret">Whether to include the datastore secret in the response.</param>
		/// <returns>The list of Datastores are returned successfully.</returns>
		public async Task<PaginatedDataStoreList> DataStores_ListAsync(string subscriptionId, string resourceGroupName, string workspaceName, string[] dataStoreNames, string continuationToken, int count, bool includeSecret)
		{
			var requestUri = "datastore/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/datastores&"+string.Join("&", dataStoreNames.Select(z => $"dataStoreNames={System.Uri.EscapeDataString(z.ToString())}"))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&count="+count+"&includeSecret="+includeSecret;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaginatedDataStoreList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a Datastore.
		/// Create or update a Datastore in the given workspace.
		/// DataStores_Create datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="createIfNotExists">If set to true, the call will create an Datastore if it doesn't exist.</param>
		/// <param name="skipValidation">If set to true, the call will skip Datastore validation.</param>
		/// <param name="requestBody">The Datastore details.</param>
		/// <returns>The Datastore is created/updated successfully.</returns>
		public async Task DataStores_CreateAsync(string subscriptionId, string resourceGroupName, string workspaceName, bool createIfNotExists, bool skipValidation, DataStore requestBody)
		{
			var requestUri = "datastore/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/datastores&createIfNotExists="+createIfNotExists+"&skipValidation="+skipValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete all Datastores.
		/// Delete all Datastores in the workspace.
		/// DataStores_DeleteAll datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <returns>All the Datastores in the workspace are deleted successfully.</returns>
		public async Task DataStores_DeleteAllAsync(string subscriptionId, string resourceGroupName, string workspaceName)
		{
			var requestUri = "datastore/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/datastores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Datastore details.
		/// Get details of a Datastore with a specific name.
		/// DataStores_Get datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="name">The Datastore name.</param>
		/// <returns>The Datastore details are returned successfully.</returns>
		public async Task<DataStore> DataStores_GetAsync(string subscriptionId, string resourceGroupName, string workspaceName, string name)
		{
			var requestUri = "datastore/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/datastores/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataStore>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update or create a Datastore.
		/// Update or create a Datastore in the given workspace.
		/// DataStores_Update datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="name">The Datastore name.</param>
		/// <param name="createIfNotExists">If set to true, the call will create an Datastore if it doesn't exist.</param>
		/// <param name="skipValidation">If set to true, the call will skip Datastore validation.</param>
		/// <param name="requestBody">The Datastore details.</param>
		/// <returns>The Datastore is created/updated successfully.</returns>
		public async Task DataStores_UpdateAsync(string subscriptionId, string resourceGroupName, string workspaceName, string name, bool createIfNotExists, bool skipValidation, DataStore requestBody)
		{
			var requestUri = "datastore/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/datastores/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&createIfNotExists="+createIfNotExists+"&skipValidation="+skipValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Datastore.
		/// Delete a Datastore with a specific name.
		/// DataStores_Delete datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="name">The Datastore name.</param>
		/// <returns>The Datastore is deleted successfully.</returns>
		public async Task DataStores_DeleteAsync(string subscriptionId, string resourceGroupName, string workspaceName, string name)
		{
			var requestUri = "datastore/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/datastores/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the default Datastore.
		/// Get the default Datastore in the workspace.
		/// DataStores_GetDefault datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/default
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <returns>The default Datastore is returned successfully.</returns>
		public async Task<DataStore> DataStores_GetDefaultAsync(string subscriptionId, string resourceGroupName, string workspaceName)
		{
			var requestUri = "datastore/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/default";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataStore>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set a default Datastore.
		/// Set a default Datastore in the workspace.
		/// DataStores_SetDefault datastore/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/default/{name}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="name">The Datastore name.</param>
		/// <returns>The default Datastore is set successfully.</returns>
		public async Task DataStores_SetDefaultAsync(string subscriptionId, string resourceGroupName, string workspaceName, string name)
		{
			var requestUri = "datastore/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/default/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
