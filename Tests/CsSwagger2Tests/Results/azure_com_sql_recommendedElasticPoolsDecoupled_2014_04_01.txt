//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public class RecommendedElasticPool
	{
	}
	
	/// <summary>
	/// Represents the response to a list recommended elastic pool metrics request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedElasticPoolListMetricsResult
	{
		
		/// <summary>
		/// The list of recommended elastic pools metrics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RecommendedElasticPoolMetric[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents recommended elastic pool metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedElasticPoolMetric
	{
		
		/// <summary>
		/// The time of metric (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTime")]
		public System.Nullable<System.DateTimeOffset> DateTime { get; set; }
		
		/// <summary>
		/// Gets or sets the DTUs (Database Transaction Units). See https://azure.microsoft.com/documentation/articles/sql-database-what-is-a-dtu/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dtu")]
		public System.Nullable<System.Double> Dtu { get; set; }
		
		/// <summary>
		/// Gets or sets size in gigabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGB")]
		public System.Nullable<System.Double> SizeGB { get; set; }
	}
	
	/// <summary>
	/// Represents the response to a list recommended elastic pool request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedElasticPoolListResult
	{
		
		/// <summary>
		/// The list of recommended elastic pools hosted in the server.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RecommendedElasticPool[] Value { get; set; }
	}
	
	/// <summary>
	/// Represents the properties of a recommended elastic pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedElasticPoolProperties
	{
		
		/// <summary>
		/// The maximum DTU for the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseDtuMax")]
		public System.Nullable<System.Double> DatabaseDtuMax { get; set; }
		
		/// <summary>
		/// The minimum DTU for the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseDtuMin")]
		public System.Nullable<System.Double> DatabaseDtuMin { get; set; }
		
		/// <summary>
		/// The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all the valid editions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseEdition")]
		public System.Nullable<RecommendedElasticPoolPropertiesDatabaseEdition> DatabaseEdition { get; set; }
		
		/// <summary>
		/// The list of databases in this pool. Expanded property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databases")]
		public RecommendedElasticPoolPropertiesDatabases[] RecommendedElasticPoolPropertiesDatabases { get; set; }
		
		/// <summary>
		/// The DTU for the recommended elastic pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dtu")]
		public System.Nullable<System.Double> Dtu { get; set; }
		
		/// <summary>
		/// Gets maximum observed DTU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxObservedDtu")]
		public System.Nullable<System.Double> MaxObservedDtu { get; set; }
		
		/// <summary>
		/// Gets maximum observed storage in megabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxObservedStorageMB")]
		public System.Nullable<System.Double> MaxObservedStorageMB { get; set; }
		
		/// <summary>
		/// The list of databases housed in the server. Expanded property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public RecommendedElasticPoolMetric[] Metrics { get; set; }
		
		/// <summary>
		/// The observation period start (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observationPeriodEnd")]
		public System.Nullable<System.DateTimeOffset> ObservationPeriodEnd { get; set; }
		
		/// <summary>
		/// The observation period start (ISO8601 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observationPeriodStart")]
		public System.Nullable<System.DateTimeOffset> ObservationPeriodStart { get; set; }
		
		/// <summary>
		/// Gets storage size in megabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageMB")]
		public System.Nullable<System.Double> StorageMB { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedElasticPoolPropertiesDatabaseEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GeneralPurpose = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCritical = 4,
	}
	
	public class RecommendedElasticPoolPropertiesDatabases
	{
		
		/// <summary>
		/// Resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns recommended elastic pools.
		/// RecommendedElasticPools_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<RecommendedElasticPoolListResult> RecommendedElasticPools_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/recommendedElasticPools?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendedElasticPoolListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a recommended elastic pool.
		/// RecommendedElasticPools_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="recommendedElasticPoolName">The name of the recommended elastic pool to be retrieved.</param>
		/// <returns>OK</returns>
		public async Task<RecommendedElasticPool> RecommendedElasticPools_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string recommendedElasticPoolName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/recommendedElasticPools/"+ (recommendedElasticPoolName==null? "" : System.Uri.EscapeDataString(recommendedElasticPoolName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendedElasticPool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns recommended elastic pool metrics.
		/// RecommendedElasticPools_ListMetrics subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}/metrics
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="recommendedElasticPoolName">The name of the recommended elastic pool to be retrieved.</param>
		/// <returns>OK</returns>
		public async Task<RecommendedElasticPoolListMetricsResult> RecommendedElasticPools_ListMetricsAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string recommendedElasticPoolName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/recommendedElasticPools/"+ (recommendedElasticPoolName==null? "" : System.Uri.EscapeDataString(recommendedElasticPoolName))+"/metrics?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendedElasticPoolListMetricsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
