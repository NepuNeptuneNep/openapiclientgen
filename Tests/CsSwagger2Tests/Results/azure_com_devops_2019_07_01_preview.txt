//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Authorization info used to access a resource (like code repository).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Authorization
	{
		
		/// <summary>
		/// Type of authorization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizationType")]
		public AuthorizationAuthorizationType AuthorizationType { get; set; }
		
		/// <summary>
		/// Authorization parameters corresponding to the authorization type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AuthorizationAuthorizationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personalAccessToken = 0,
	}
	
	/// <summary>
	/// Configuration used to bootstrap a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BootstrapConfiguration
	{
		
		/// <summary>
		/// Repository containing the source code for a pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public CodeRepository Repository { get; set; }
		
		/// <summary>
		/// Template used to bootstrap the pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template")]
		public PipelineTemplate Template { get; set; }
	}
	
	/// <summary>
	/// Repository containing the source code for a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CodeRepository
	{
		
		/// <summary>
		/// Authorization info used to access a resource (like code repository).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public Authorization Authorization { get; set; }
		
		/// <summary>
		/// Default branch used to configure Continuous Integration (CI) in the pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultBranch")]
		public string DefaultBranch { get; set; }
		
		/// <summary>
		/// Unique immutable identifier of the code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Repository-specific properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Type of code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryType")]
		public CodeRepositoryRepositoryType RepositoryType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CodeRepositoryRepositoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gitHub = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vstsGit = 1,
	}
	
	/// <summary>
	/// Template used to bootstrap the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineTemplate
	{
		
		/// <summary>
		/// Unique identifier of the pipeline template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Dictionary of input parameters used in the pipeline template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
	}
	
	/// <summary>
	/// An error response from the Pipelines Resource Provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from the Pipelines Resource Provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from the Pipelines Resource Provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error or the method where the error occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Representation of a pipeline template input parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InputDescriptor
	{
		
		/// <summary>
		/// Description of the input parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Identifier of the input parameter.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List of possible values for the input parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="possibleValues")]
		public InputValue[] PossibleValues { get; set; }
		
		/// <summary>
		/// Data type of the value of the input parameter.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public InputDescriptorType Type { get; set; }
	}
	
	/// <summary>
	/// Representation of a pipeline template input parameter value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InputValue
	{
		
		/// <summary>
		/// Description of the input parameter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayValue")]
		public string DisplayValue { get; set; }
		
		/// <summary>
		/// Value of an input parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InputDescriptorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureString = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bool = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Authorization = 4,
	}
	
	/// <summary>
	/// Properties of an Operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Display information of an operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplayValue Display { get; set; }
		
		/// <summary>
		/// Indicates whether the operation applies to data-plane.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDataAction")]
		public string IsDataAction { get; set; }
		
		/// <summary>
		/// Name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Display information of an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplayValue
	{
		
		/// <summary>
		/// Friendly description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Friendly name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Friendly name of the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Friendly name of the resource type the operation applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Result of a request to list all operations supported by Microsoft.DevOps resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The URL to get the next set of operations, if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of operations supported by Microsoft.DevOps resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Reference to an Azure DevOps Organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrganizationReference
	{
		
		/// <summary>
		/// Unique immutable identifier for the Azure DevOps Organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the Azure DevOps Organization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Azure DevOps Pipeline used to configure Continuous Integration (CI) & Continuous Delivery (CD) for Azure resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Pipeline
	{
		
		/// <summary>
		/// Custom properties of a Pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PipelineProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Custom properties of a Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineProperties
	{
		
		/// <summary>
		/// Configuration used to bootstrap a Pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bootstrapConfiguration")]
		public BootstrapConfiguration BootstrapConfiguration { get; set; }
		
		/// <summary>
		/// Reference to an Azure DevOps Organization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public OrganizationReference Organization { get; set; }
		
		/// <summary>
		/// Unique identifier of the Azure Pipeline within the Azure DevOps Project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public System.Nullable<System.Int32> PipelineId { get; set; }
		
		/// <summary>
		/// Reference to an Azure DevOps Project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectReference Project { get; set; }
	}
	
	/// <summary>
	/// Reference to an Azure DevOps Project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectReference
	{
		
		/// <summary>
		/// Unique immutable identifier of the Azure DevOps Project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the Azure DevOps Project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of a request to list all Azure Pipelines under a given scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineListResult
	{
		
		/// <summary>
		/// URL to get the next set of Pipelines, if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of pipelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Pipeline[] Value { get; set; }
	}
	
	/// <summary>
	/// Definition of a pipeline template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineTemplateDefinition
	{
		
		/// <summary>
		/// Description of the pipeline enabled by the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Unique identifier of the pipeline template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List of input parameters required by the template to create a pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public InputDescriptor[] Inputs { get; set; }
	}
	
	/// <summary>
	/// Result of a request to list all pipeline template definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineTemplateDefinitionListResult
	{
		
		/// <summary>
		/// The URL to get the next set of pipeline template definitions, if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of pipeline template definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PipelineTemplateDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Request payload used to update an existing Azure Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineUpdateParameters
	{
		
		/// <summary>
		/// Dictionary of key-value pairs to be set as tags on the Azure Pipeline. This will overwrite any existing tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// An Azure Resource Manager (ARM) resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource Location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all the operations supported by Microsoft.DevOps resource provider.
		/// Operations_List providers/Microsoft.DevOps/operations
		/// </summary>
		/// <param name="api_version">API version to be used with the HTTP request.</param>
		/// <returns>The list of supported operations has been fetched successfully.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DevOps/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all pipeline templates which can be used to configure an Azure Pipeline.
		/// PipelineTemplateDefinitions_List providers/Microsoft.DevOps/pipelineTemplateDefinitions
		/// </summary>
		/// <param name="api_version">API version to be used with the HTTP request.</param>
		/// <returns>The pipeline template definitions have been fetched successfully.</returns>
		public async Task<PipelineTemplateDefinitionListResult> PipelineTemplateDefinitions_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DevOps/pipelineTemplateDefinitions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PipelineTemplateDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Azure Pipelines under the specified subscription.
		/// Pipelines_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.DevOps/pipelines
		/// </summary>
		/// <param name="subscriptionId">Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API version to be used with the HTTP request.</param>
		/// <returns>The Azure Pipelines have been fetched successfully.</returns>
		public async Task<PipelineListResult> Pipelines_ListBySubscriptionAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DevOps/pipelines&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PipelineListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Azure Pipelines under the specified resource group.
		/// Pipelines_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines
		/// </summary>
		/// <param name="subscriptionId">Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="api_version">API version to be used with the HTTP request.</param>
		/// <returns>The Azure Pipelines have been fetched successfully.</returns>
		public async Task<PipelineListResult> Pipelines_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevOps/pipelines&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PipelineListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an existing Azure Pipeline.
		/// Pipelines_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}
		/// </summary>
		/// <param name="subscriptionId">Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="api_version">API version to be used with the HTTP request.</param>
		/// <param name="pipelineName">The name of the Azure Pipeline resource in ARM.</param>
		/// <returns>The Azure Pipeline has been fetched successfully.</returns>
		public async Task<Pipeline> Pipelines_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string pipelineName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevOps/pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pipeline>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an Azure Pipeline.
		/// Pipelines_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}
		/// </summary>
		/// <param name="subscriptionId">Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="api_version">API version to be used with the HTTP request.</param>
		/// <param name="pipelineName">The name of the Azure Pipeline resource in ARM.</param>
		/// <param name="requestBody">The request payload to create the Azure Pipeline.</param>
		/// <returns>The Azure Pipeline has been configured successfully.</returns>
		public async Task<Pipeline> Pipelines_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string api_version, string pipelineName, Pipeline requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevOps/pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pipeline>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Azure Pipeline.
		/// Pipelines_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}
		/// </summary>
		/// <param name="subscriptionId">Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="api_version">API version to be used with the HTTP request.</param>
		/// <param name="pipelineName">The name of the Azure Pipeline resource.</param>
		/// <returns>The Azure Pipeline has been deleted successfully.</returns>
		public async Task Pipelines_DeleteAsync(string subscriptionId, string resourceGroupName, string api_version, string pipelineName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevOps/pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of an Azure Pipeline. Currently, only tags can be updated.
		/// Pipelines_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOps/pipelines/{pipelineName}
		/// </summary>
		/// <param name="subscriptionId">Unique identifier of the Azure subscription. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="api_version">API version to be used with the HTTP request.</param>
		/// <param name="pipelineName">The name of the Azure Pipeline resource.</param>
		/// <param name="requestBody">The request payload containing the properties to update in the Azure Pipeline.</param>
		/// <returns>The Azure Pipeline has been updated successfully.</returns>
		public async Task<Pipeline> Pipelines_UpdateAsync(string subscriptionId, string resourceGroupName, string api_version, string pipelineName, PipelineUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DevOps/pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Pipeline>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
