//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// availabilityStatus of a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailabilityStatus
	{
		
		/// <summary>
		/// Azure Resource Manager Identity for the availabilityStatuses resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure Resource Manager geo location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// current.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of availability state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AvailabilityStatusProperties Properties { get; set; }
		
		/// <summary>
		/// Microsoft.ResourceHealth/AvailabilityStatuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class AvailabilityStatusProperties
	{
		
		/// <summary>
		/// Availability status of the resource. When it is null, this availabilityStatus object represents an availability impacting event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityState")]
		public System.Nullable<AvailabilityStatusPropertiesAvailabilityState> AvailabilityState { get; set; }
		
		/// <summary>
		/// Details of the availability status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailedStatus")]
		public string DetailedStatus { get; set; }
		
		/// <summary>
		/// In case of an availability impacting event, it describes the category of a PlatformInitiated health impacting event. Examples are Planned, Unplanned etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthEventCategory")]
		public string HealthEventCategory { get; set; }
		
		/// <summary>
		/// In case of an availability impacting event, it describes where the health impacting event was originated. Examples are PlatformInitiated, UserInitiated etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthEventCause")]
		public string HealthEventCause { get; set; }
		
		/// <summary>
		/// It is a unique Id that identifies the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthEventId")]
		public string HealthEventId { get; set; }
		
		/// <summary>
		/// In case of an availability impacting event, it describes when the health impacting event was originated. Examples are Lifecycle, Downtime, Fault Analysis etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthEventType")]
		public string HealthEventType { get; set; }
		
		/// <summary>
		/// Timestamp for when last change in health status occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occuredTime")]
		public System.Nullable<System.DateTimeOffset> OccuredTime { get; set; }
		
		/// <summary>
		/// Chronicity of the availability transition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonChronicity")]
		public System.Nullable<AvailabilityStatusPropertiesReasonChronicity> ReasonChronicity { get; set; }
		
		/// <summary>
		/// When the resource's availabilityState is Unavailable, it describes where the health impacting event was originated. Examples are planned, unplanned, user initiated or an outage etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonType")]
		public string ReasonType { get; set; }
		
		/// <summary>
		/// An annotation describing a change in the availabilityState to Available from Unavailable with a reasonType of type Unplanned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentlyResolvedState")]
		public AvailabilityStatusPropertiesRecentlyResolvedState RecentlyResolvedState { get; set; }
		
		/// <summary>
		/// Lists actions the user can take based on the current availabilityState of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedActions")]
		public RecommendedAction[] RecommendedActions { get; set; }
		
		/// <summary>
		/// Timestamp for when the health was last checked. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportedTime")]
		public System.Nullable<System.DateTimeOffset> ReportedTime { get; set; }
		
		/// <summary>
		/// When the resource's availabilityState is Unavailable and the reasonType is not User Initiated, it provides the date and time for when the issue is expected to be resolved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolutionETA")]
		public System.Nullable<System.DateTimeOffset> ResolutionETA { get; set; }
		
		/// <summary>
		/// When the resource's availabilityState is Unavailable, it provides the Timestamp for when the health impacting event was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootCauseAttributionTime")]
		public System.Nullable<System.DateTimeOffset> RootCauseAttributionTime { get; set; }
		
		/// <summary>
		/// Lists the service impacting events that may be affecting the health of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceImpactingEvents")]
		public ServiceImpactingEvent[] ServiceImpactingEvents { get; set; }
		
		/// <summary>
		/// Summary description of the availability status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AvailabilityStatusPropertiesAvailabilityState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unavailable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AvailabilityStatusPropertiesReasonChronicity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Transient = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Persistent = 1,
	}
	
	public class AvailabilityStatusPropertiesRecentlyResolvedState
	{
		
		/// <summary>
		/// Timestamp when the availabilityState changes to Available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedTime")]
		public System.Nullable<System.DateTimeOffset> ResolvedTime { get; set; }
		
		/// <summary>
		/// Brief description of cause of the resource becoming unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unavailabilitySummary")]
		public string UnavailabilitySummary { get; set; }
		
		/// <summary>
		/// Timestamp for when the availabilityState changed to Unavailable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unavailableOccurredTime")]
		public System.Nullable<System.DateTimeOffset> UnavailableOccurredTime { get; set; }
	}
	
	/// <summary>
	/// Lists actions the user can take based on the current availabilityState of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedAction
	{
		
		/// <summary>
		/// Recommended action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Link to the action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionUrl")]
		public string ActionUrl { get; set; }
		
		/// <summary>
		/// Substring of action, it describes which text should host the action url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionUrlText")]
		public string ActionUrlText { get; set; }
	}
	
	/// <summary>
	/// Lists the service impacting events that may be affecting the health of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceImpactingEvent
	{
		
		/// <summary>
		/// Correlation id for the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// Timestamp for when the event started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventStartTime")]
		public System.Nullable<System.DateTimeOffset> EventStartTime { get; set; }
		
		/// <summary>
		/// Timestamp for when event was submitted/detected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventStatusLastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> EventStatusLastModifiedTime { get; set; }
		
		/// <summary>
		/// Properties of the service impacting event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incidentProperties")]
		public ServiceImpactingEventIncidentProperties IncidentProperties { get; set; }
		
		/// <summary>
		/// Status of the service impacting event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceImpactingEventStatus Status { get; set; }
	}
	
	public class ServiceImpactingEventIncidentProperties
	{
		
		/// <summary>
		/// Type of Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incidentType")]
		public string IncidentType { get; set; }
		
		/// <summary>
		/// Region impacted by the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Service impacted by the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// Title of the incident.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class ServiceImpactingEventStatus
	{
		
		/// <summary>
		/// Current status of the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The List availabilityStatus operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailabilityStatusListResult
	{
		
		/// <summary>
		/// The URI to fetch the next page of availabilityStatuses. Call ListNext() with this URI to fetch the next page of availabilityStatuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of availabilityStatuses.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AvailabilityStatus[] Value { get; set; }
	}
	
	/// <summary>
	/// On-going emerging issue from azure status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmergingIssue
	{
		
		/// <summary>
		/// Timestamp for when last time refreshed for ongoing emerging issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshTimestamp")]
		public System.Nullable<System.DateTimeOffset> RefreshTimestamp { get; set; }
		
		/// <summary>
		/// The list of emerging issues of active event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusActiveEvents")]
		public StatusActiveEvent[] StatusActiveEvents { get; set; }
		
		/// <summary>
		/// The list of emerging issues of banner type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusBanners")]
		public StatusBanner[] StatusBanners { get; set; }
	}
	
	/// <summary>
	/// Active event type of emerging issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StatusActiveEvent
	{
		
		/// <summary>
		/// The cloud type of this active event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloud")]
		public string Cloud { get; set; }
		
		/// <summary>
		/// The details of active event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The list of emerging issues impacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impacts")]
		public EmergingIssueImpact[] Impacts { get; set; }
		
		/// <summary>
		/// The last time modified on this banner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// The boolean value of this active event if published or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public System.Nullable<System.Boolean> Published { get; set; }
		
		/// <summary>
		/// The severity level of this active event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<StatusActiveEventSeverity> Severity { get; set; }
		
		/// <summary>
		/// The stage of this active event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public System.Nullable<StatusActiveEventStage> Stage { get; set; }
		
		/// <summary>
		/// The impact start time on this active event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The active event title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The tracking id of this active event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	/// <summary>
	/// Object of the emerging issue impact on services and regions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmergingIssueImpact
	{
		
		/// <summary>
		/// The impacted service id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The impacted service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of impacted regions for corresponding emerging issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public ImpactedRegion[] Regions { get; set; }
	}
	
	/// <summary>
	/// Object of impacted region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImpactedRegion
	{
		
		/// <summary>
		/// The impacted region id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The impacted region name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StatusActiveEventSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Information = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StatusActiveEventStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resolve = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Archived = 2,
	}
	
	/// <summary>
	/// Banner type of emerging issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StatusBanner
	{
		
		/// <summary>
		/// The cloud type of this banner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloud")]
		public string Cloud { get; set; }
		
		/// <summary>
		/// The last time modified on this banner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// The details of banner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The banner title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The list of emerging issues.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmergingIssueListResult
	{
		
		/// <summary>
		/// The link used to get the next page of emerging issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of emerging issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public EmergingIssuesGetResult[] Value { get; set; }
	}
	
	/// <summary>
	/// The Get EmergingIssues operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmergingIssuesGetResult
	{
		
		/// <summary>
		/// On-going emerging issue from azure status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public EmergingIssue Properties { get; set; }
	}
	
	/// <summary>
	/// Operation available in the resourcehealth resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Properties of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class OperationDisplay
	{
		
		/// <summary>
		/// Description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Provider name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Lists the operations response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// List of operations available in the resourcehealth resource provider.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists Azure services' emerging issues.
		/// EmergingIssues_List providers/Microsoft.ResourceHealth/emergingIssues
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The body contains a list of azure emerging issues.</returns>
		public async Task<EmergingIssueListResult> EmergingIssues_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.ResourceHealth/emergingIssues?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EmergingIssueListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Azure services' emerging issues.
		/// EmergingIssues_Get providers/Microsoft.ResourceHealth/emergingIssues/{issueName}
		/// </summary>
		/// <param name="issueName">The name of the emerging issue.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The body contains properties of azure emerging issues, which includes a list of status banner and status active events.</returns>
		public async Task<EmergingIssuesGetResult> EmergingIssues_GetAsync(EmergingIssues_GetIssueName issueName, string api_version)
		{
			var requestUri = "providers/Microsoft.ResourceHealth/emergingIssues/"+issueName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EmergingIssuesGetResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists available operations for the resourcehealth resource provider
		/// Operations_List providers/Microsoft.ResourceHealth/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The body contains the list of available operations for the resourcehealth resource provider</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.ResourceHealth/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the current availability status for all the resources in the subscription. Use the nextLink property in the response to get the next page of availability statuses.
		/// AvailabilityStatuses_ListBySubscriptionId subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/availabilityStatuses
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="expand">Setting $expand=recommendedactions in url query expands the recommendedactions in the response.</param>
		/// <returns>The body contains the list of the current availability status for all the resources in the subscription</returns>
		public async Task<AvailabilityStatusListResult> AvailabilityStatuses_ListBySubscriptionIdAsync(string api_version, string filter, string subscriptionId, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ResourceHealth/availabilityStatuses?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityStatusListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the current availability status for all the resources in the resource group. Use the nextLink property in the response to get the next page of availability statuses.
		/// AvailabilityStatuses_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ResourceHealth/availabilityStatuses
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN</param>
		/// <param name="expand">Setting $expand=recommendedactions in url query expands the recommendedactions in the response.</param>
		/// <returns>The body contains the list of the current availability status for all the resources in the resource group</returns>
		public async Task<AvailabilityStatusListResult> AvailabilityStatuses_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string filter, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ResourceHealth/availabilityStatuses&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityStatusListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all historical availability transitions and impacting events for a single resource. Use the nextLink property in the response to get the next page of availability status
		/// AvailabilityStatuses_List {resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses
		/// </summary>
		/// <param name="resourceUri">The fully qualified ID of the resource, including the resource name and resource type. Currently the API support not nested and one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name} and /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN</param>
		/// <param name="expand">Setting $expand=recommendedactions in url query expands the recommendedactions in the response.</param>
		/// <returns>The body contains the list of the historical availability statuses for a single resource</returns>
		public async Task<AvailabilityStatusListResult> AvailabilityStatuses_ListAsync(string resourceUri, string api_version, string filter, string expand)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/Microsoft.ResourceHealth/availabilityStatuses&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityStatusListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets current availability status for a single resource
		/// AvailabilityStatuses_GetByResource {resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses/current
		/// </summary>
		/// <param name="resourceUri">The fully qualified ID of the resource, including the resource name and resource type. Currently the API support not nested and one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name} and /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN</param>
		/// <param name="expand">Setting $expand=recommendedactions in url query expands the recommendedactions in the response.</param>
		/// <returns>The body contains the current availability status for a single resource</returns>
		public async Task<AvailabilityStatus> AvailabilityStatuses_GetByResourceAsync(string resourceUri, string api_version, string filter, string expand)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/Microsoft.ResourceHealth/availabilityStatuses/current&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status
		/// ChildAvailabilityStatuses_List {resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses
		/// </summary>
		/// <param name="resourceUri">The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN</param>
		/// <param name="expand">Setting $expand=recommendedactions in url query expands the recommendedactions in the response.</param>
		/// <returns>The body contains the list of the historical availability statuses for a single child resource</returns>
		public async Task<AvailabilityStatusListResult> ChildAvailabilityStatuses_ListAsync(string resourceUri, string api_version, string filter, string expand)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/Microsoft.ResourceHealth/childAvailabilityStatuses&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityStatusListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets current availability status for a single resource
		/// ChildAvailabilityStatuses_GetByResource {resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses/current
		/// </summary>
		/// <param name="resourceUri">The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support one nesting level resource types : /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN</param>
		/// <param name="expand">Setting $expand=recommendedactions in url query expands the recommendedactions in the response.</param>
		/// <returns>The body contains the current availability status for a single resource</returns>
		public async Task<AvailabilityStatus> ChildAvailabilityStatuses_GetByResourceAsync(string resourceUri, string api_version, string filter, string expand)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/Microsoft.ResourceHealth/childAvailabilityStatuses/current&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the all the children and its current health status for a parent resource. Use the nextLink property in the response to get the next page of children current health
		/// ChildResources_List {resourceUri}/providers/Microsoft.ResourceHealth/childResources
		/// </summary>
		/// <param name="resourceUri">The fully qualified ID of the resource, including the resource name and resource type. Currently the API only support not nested parent resource type: /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN</param>
		/// <param name="expand">Setting $expand=recommendedactions in url query expands the recommendedactions in the response.</param>
		/// <returns>The body contains the list of the children's current availability statuses for a single resource which contains children</returns>
		public async Task<AvailabilityStatusListResult> ChildResources_ListAsync(string resourceUri, string api_version, string filter, string expand)
		{
			var requestUri = ""+ (resourceUri==null? "" : System.Uri.EscapeDataString(resourceUri))+"/providers/Microsoft.ResourceHealth/childResources&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityStatusListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum EmergingIssues_GetIssueName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
