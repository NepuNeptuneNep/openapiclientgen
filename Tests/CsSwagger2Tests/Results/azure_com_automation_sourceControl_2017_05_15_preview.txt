//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class SourceControl
	{
	}
	
	/// <summary>
	/// The parameters supplied to the create or update source control operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlCreateOrUpdateParameters
	{
		
		/// <summary>
		/// The properties of the create source control operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SourceControlCreateOrUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of the create source control operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlCreateOrUpdateProperties
	{
		
		/// <summary>
		/// The auto async of the source control. Default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoSync")]
		public System.Nullable<System.Boolean> AutoSync { get; set; }
		
		/// <summary>
		/// The repo branch of the source control. Include branch as empty string for VsoTfvc.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Branch { get; set; }
		
		/// <summary>
		/// The user description of the source control.
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string Description { get; set; }
		
		/// <summary>
		/// The folder path of the source control. Path must be relative.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// The auto publish of the source control. Default is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishRunbook")]
		public System.Nullable<System.Boolean> PublishRunbook { get; set; }
		
		/// <summary>
		/// The repo url of the source control.
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string RepoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityToken")]
		public SourceControlSecurityTokenProperties SecurityToken { get; set; }
		
		/// <summary>
		/// The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public System.Nullable<SourceControlCreateOrUpdatePropertiesSourceType> SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SourceControlCreateOrUpdatePropertiesSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VsoGit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VsoTfvc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 2,
	}
	
	/// <summary>
	/// The response model for the list source controls operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlListResult
	{
		
		/// <summary>
		/// The next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of source controls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SourceControl[] Value { get; set; }
	}
	
	/// <summary>
	/// Definition of the source control properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlProperties
	{
		
		/// <summary>
		/// The auto sync of the source control. Default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoSync")]
		public System.Nullable<System.Boolean> AutoSync { get; set; }
		
		/// <summary>
		/// The repo branch of the source control. Include branch as empty string for VsoTfvc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// The creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The folder path of the source control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// The last modified time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// The auto publish of the source control. Default is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishRunbook")]
		public System.Nullable<System.Boolean> PublishRunbook { get; set; }
		
		/// <summary>
		/// The repo url of the source control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoUrl")]
		public string RepoUrl { get; set; }
		
		/// <summary>
		/// The source type. Must be one of VsoGit, VsoTfvc, GitHub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public SourceControlCreateOrUpdatePropertiesSourceType SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlSecurityTokenProperties
	{
		
		/// <summary>
		/// The access token.
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// The refresh token.
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string RefreshToken { get; set; }
		
		/// <summary>
		/// The token type. Must be either PersonalAccessToken or Oauth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenType")]
		public System.Nullable<SourceControlSecurityTokenPropertiesTokenType> TokenType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SourceControlSecurityTokenPropertiesTokenType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PersonalAccessToken = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Oauth = 1,
	}
	
	/// <summary>
	/// The parameters supplied to the update source control operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlUpdateParameters
	{
		
		/// <summary>
		/// The properties of the update source control
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SourceControlUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of the update source control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlUpdateProperties
	{
		
		/// <summary>
		/// The auto sync of the source control. Default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoSync")]
		public System.Nullable<System.Boolean> AutoSync { get; set; }
		
		/// <summary>
		/// The repo branch of the source control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// The user description of the source control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The folder path of the source control. Path must be relative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		/// <summary>
		/// The auto publish of the source control. Default is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishRunbook")]
		public System.Nullable<System.Boolean> PublishRunbook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityToken")]
		public SourceControlSecurityTokenProperties SecurityToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve a list of source controls.
		/// SourceControl_ListByAutomationAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls
		/// </summary>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<SourceControlListResult> SourceControl_ListByAutomationAccountAsync(string resourceGroupName, string automationAccountName, string filter, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/sourceControls&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceControlListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the source control identified by source control name.
		/// SourceControl_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
		/// </summary>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="sourceControlName">The name of source control.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<SourceControl> SourceControl_GetAsync(string resourceGroupName, string automationAccountName, string sourceControlName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/sourceControls/"+ (sourceControlName==null? "" : System.Uri.EscapeDataString(sourceControlName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceControl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a source control.
		/// SourceControl_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
		/// </summary>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="sourceControlName">The source control name.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters supplied to the create or update source control operation.</param>
		/// <returns>OK</returns>
		public async Task<SourceControl> SourceControl_CreateOrUpdateAsync(string resourceGroupName, string automationAccountName, string sourceControlName, string subscriptionId, string api_version, SourceControlCreateOrUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/sourceControls/"+ (sourceControlName==null? "" : System.Uri.EscapeDataString(sourceControlName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceControl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the source control.
		/// SourceControl_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
		/// </summary>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="sourceControlName">The name of source control.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task SourceControl_DeleteAsync(string resourceGroupName, string automationAccountName, string sourceControlName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/sourceControls/"+ (sourceControlName==null? "" : System.Uri.EscapeDataString(sourceControlName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a source control.
		/// SourceControl_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
		/// </summary>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="sourceControlName">The source control name.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters supplied to the update source control operation.</param>
		/// <returns>OK</returns>
		public async Task<SourceControl> SourceControl_UpdateAsync(string resourceGroupName, string automationAccountName, string sourceControlName, string subscriptionId, string api_version, SourceControlUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/sourceControls/"+ (sourceControlName==null? "" : System.Uri.EscapeDataString(sourceControlName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceControl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
