//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public class QueryStatistic
	{
	}
	
	/// <summary>
	/// The properties of a query statistic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryStatisticProperties
	{
		
		/// <summary>
		/// Aggregation function name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationFunction")]
		public string AggregationFunction { get; set; }
		
		/// <summary>
		/// The list of database names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseNames")]
		public string[] DatabaseNames { get; set; }
		
		/// <summary>
		/// Observation end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Metric display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricDisplayName")]
		public string MetricDisplayName { get; set; }
		
		/// <summary>
		/// Metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Metric value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValue")]
		public System.Nullable<System.Double> MetricValue { get; set; }
		
		/// <summary>
		/// Metric value unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValueUnit")]
		public string MetricValueUnit { get; set; }
		
		/// <summary>
		/// Number of query executions in this time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryExecutionCount")]
		public System.Nullable<System.Int64> QueryExecutionCount { get; set; }
		
		/// <summary>
		/// Database query identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public string QueryId { get; set; }
		
		/// <summary>
		/// Observation start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	public class QueryText
	{
	}
	
	/// <summary>
	/// The properties of a query text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryTextProperties
	{
		
		/// <summary>
		/// Query identifier unique to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public string QueryId { get; set; }
		
		/// <summary>
		/// Query text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryText")]
		public string QueryText { get; set; }
	}
	
	/// <summary>
	/// A list of query texts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryTextsResultList
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of query texts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public QueryText[] Value { get; set; }
	}
	
	/// <summary>
	/// Input to get top query statistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopQueryStatisticsInput
	{
		
		/// <summary>
		/// The properties for input to get top query statistics
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TopQueryStatisticsInputProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties for input to get top query statistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopQueryStatisticsInputProperties
	{
		
		/// <summary>
		/// Aggregation function name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationFunction")]
		public string AggregationFunction { get; set; }
		
		/// <summary>
		/// Aggregation interval type in ISO 8601 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationWindow")]
		public string AggregationWindow { get; set; }
		
		/// <summary>
		/// Max number of top queries to return.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfTopQueries")]
		public int NumberOfTopQueries { get; set; }
		
		/// <summary>
		/// Observation end time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observationEndTime")]
		public System.DateTimeOffset ObservationEndTime { get; set; }
		
		/// <summary>
		/// Observation start time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observationStartTime")]
		public System.DateTimeOffset ObservationStartTime { get; set; }
		
		/// <summary>
		/// Observed metric name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observedMetric")]
		public string ObservedMetric { get; set; }
	}
	
	/// <summary>
	/// A list of query statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopQueryStatisticsResultList
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of top query statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public QueryStatistic[] Value { get; set; }
	}
	
	public class WaitStatistic
	{
	}
	
	/// <summary>
	/// The properties of a wait statistic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStatisticProperties
	{
		
		/// <summary>
		/// Wait event count observed in this time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
		
		/// <summary>
		/// Database Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Observation end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Wait event name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// Wait event type name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTypeName")]
		public string EventTypeName { get; set; }
		
		/// <summary>
		/// Database query identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public System.Nullable<System.Int64> QueryId { get; set; }
		
		/// <summary>
		/// Observation start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Total time of wait in milliseconds in this time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalTimeInMs")]
		public System.Nullable<System.Double> TotalTimeInMs { get; set; }
		
		/// <summary>
		/// Database user identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	/// <summary>
	/// Input to get wait statistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStatisticsInput
	{
		
		/// <summary>
		/// The properties for input to get wait statistics
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WaitStatisticsInputProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties for input to get wait statistics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStatisticsInputProperties
	{
		
		/// <summary>
		/// Aggregation interval type in ISO 8601 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationWindow")]
		public string AggregationWindow { get; set; }
		
		/// <summary>
		/// Observation end time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observationEndTime")]
		public System.DateTimeOffset ObservationEndTime { get; set; }
		
		/// <summary>
		/// Observation start time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="observationStartTime")]
		public System.DateTimeOffset ObservationStartTime { get; set; }
	}
	
	/// <summary>
	/// A list of wait statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WaitStatisticsResultList
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of wait statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public WaitStatistic[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve the Query-Store query texts for specified queryIds.
		/// QueryTexts_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMariaDB/servers/{serverName}/queryTexts
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="queryIds">The query identifiers</param>
		/// <returns>OK</returns>
		public async Task<QueryTextsResultList> QueryTexts_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string[] queryIds)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMariaDB/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/queryTexts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&"+string.Join("&", queryIds.Select(z => $"queryIds={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryTextsResultList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the Query-Store query texts for the queryId.
		/// QueryTexts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMariaDB/servers/{serverName}/queryTexts/{queryId}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="queryId">The Query-Store query identifier.</param>
		/// <returns>OK</returns>
		public async Task<QueryText> QueryTexts_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string queryId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMariaDB/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/queryTexts/"+ (queryId==null? "" : System.Uri.EscapeDataString(queryId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryText>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the Query-Store top queries for specified metric and aggregation.
		/// TopQueryStatistics_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMariaDB/servers/{serverName}/topQueryStatistics
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<TopQueryStatisticsResultList> TopQueryStatistics_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMariaDB/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/topQueryStatistics?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TopQueryStatisticsResultList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the query statistic for specified identifier.
		/// TopQueryStatistics_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMariaDB/servers/{serverName}/topQueryStatistics/{queryStatisticId}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="queryStatisticId">The Query Statistic identifier.</param>
		/// <returns>OK</returns>
		public async Task<QueryStatistic> TopQueryStatistics_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string queryStatisticId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMariaDB/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/topQueryStatistics/"+ (queryStatisticId==null? "" : System.Uri.EscapeDataString(queryStatisticId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryStatistic>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve wait statistics for specified aggregation window.
		/// WaitStatistics_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMariaDB/servers/{serverName}/waitStatistics
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<WaitStatisticsResultList> WaitStatistics_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMariaDB/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/waitStatistics?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WaitStatisticsResultList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve wait statistics for specified identifier.
		/// WaitStatistics_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMariaDB/servers/{serverName}/waitStatistics/{waitStatisticsId}
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="waitStatisticsId">The Wait Statistic identifier.</param>
		/// <returns>OK</returns>
		public async Task<WaitStatistic> WaitStatistics_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string waitStatisticsId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DBforMariaDB/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/waitStatistics/"+ (waitStatisticsId==null? "" : System.Uri.EscapeDataString(waitStatisticsId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WaitStatistic>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
