//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Autoscale notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleNotification
	{
		
		/// <summary>
		/// Email notification of an autoscale event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public EmailNotification Email { get; set; }
		
		/// <summary>
		/// the operation associated with the notification and its value must be "scale"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public AutoscaleNotificationOperation Operation { get; set; }
		
		/// <summary>
		/// the collection of webhook notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public WebhookNotification[] Webhooks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoscaleNotificationOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scale = 0,
	}
	
	/// <summary>
	/// Webhook notification of an autoscale event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebhookNotification
	{
		
		/// <summary>
		/// a property bag of settings. This value can be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// the service address to receive the notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceUri")]
		public string ServiceUri { get; set; }
	}
	
	/// <summary>
	/// Autoscale profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleProfile
	{
		
		/// <summary>
		/// The number of instances that can be used during this profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public ScaleCapacity Capacity { get; set; }
		
		/// <summary>
		/// A specific date-time for the profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDate")]
		public TimeWindow FixedDate { get; set; }
		
		/// <summary>
		/// the name of the profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public Recurrence Recurrence { get; set; }
		
		/// <summary>
		/// the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public ScaleRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// A rule that provide the triggers and parameters for the scaling action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScaleRule
	{
		
		/// <summary>
		/// The trigger that results in a scaling action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricTrigger")]
		public MetricTrigger MetricTrigger { get; set; }
		
		/// <summary>
		/// The parameters for the scaling action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scaleAction")]
		public ScaleAction ScaleAction { get; set; }
	}
	
	/// <summary>
	/// A setting that contains all of the configuration for the automatic scaling of a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleSetting
	{
		
		/// <summary>
		/// the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'true'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// the name of the autoscale setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// the collection of notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public AutoscaleNotification[] Notifications { get; set; }
		
		/// <summary>
		/// the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.
		/// Required
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profiles")]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public AutoscaleProfile[] Profiles { get; set; }
		
		/// <summary>
		/// the resource identifier of the resource that the autoscale setting should be added to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceUri")]
		public string TargetResourceUri { get; set; }
	}
	
	/// <summary>
	/// The autoscale setting resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleSettingResource
	{
		
		/// <summary>
		/// A setting that contains all of the configuration for the automatic scaling of a resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AutoscaleSetting Properties { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of autoscale setting resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleSettingResourceCollection
	{
		
		/// <summary>
		/// URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// the values for the autoscale setting resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AutoscaleSettingResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The autoscale setting object for patch operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoscaleSettingResourcePatch
	{
		
		/// <summary>
		/// A setting that contains all of the configuration for the automatic scaling of a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AutoscaleSetting Properties { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
	}
	
	/// <summary>
	/// Email notification of an autoscale event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmailNotification
	{
		
		/// <summary>
		/// the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customEmails")]
		public string[] CustomEmails { get; set; }
		
		/// <summary>
		/// a value indicating whether to send email to subscription administrator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendToSubscriptionAdministrator")]
		public System.Nullable<System.Boolean> SendToSubscriptionAdministrator { get; set; }
		
		/// <summary>
		/// a value indicating whether to send email to subscription co-administrators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendToSubscriptionCoAdministrators")]
		public System.Nullable<System.Boolean> SendToSubscriptionCoAdministrators { get; set; }
	}
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The trigger that results in a scaling action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricTrigger
	{
		
		/// <summary>
		/// the name of the metric that defines what the rule monitors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// the resource identifier of the resource the rule monitors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricResourceUri")]
		public string MetricResourceUri { get; set; }
		
		/// <summary>
		/// the operator that is used to compare the metric data and the threshold.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public MetricTriggerOperator Operator { get; set; }
		
		/// <summary>
		/// the metric statistic type. How the metrics from multiple instances are combined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public MetricTriggerStatistic Statistic { get; set; }
		
		/// <summary>
		/// the threshold of the metric that triggers the scale action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public double Threshold { get; set; }
		
		/// <summary>
		/// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeAggregation")]
		public MetricTriggerTimeAggregation TimeAggregation { get; set; }
		
		/// <summary>
		/// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
		
		/// <summary>
		/// the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeWindow")]
		public string TimeWindow { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricTriggerOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equals = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEquals = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanOrEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanOrEqual = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricTriggerStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Min = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Max = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricTriggerTimeAggregation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Last = 5,
	}
	
	/// <summary>
	/// The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Recurrence
	{
		
		/// <summary>
		/// the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public RecurrenceFrequency Frequency { get; set; }
		
		/// <summary>
		/// The scheduling constraints for when the profile begins.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public RecurrentSchedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecurrenceFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Second = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 7,
	}
	
	/// <summary>
	/// The scheduling constraints for when the profile begins.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecurrentSchedule
	{
		
		/// <summary>
		/// the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="days")]
		public string[] Days { get; set; }
		
		/// <summary>
		/// A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public int[] Hours { get; set; }
		
		/// <summary>
		/// A collection of minutes at which the profile takes effect at.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public int[] Minutes { get; set; }
		
		/// <summary>
		/// the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// An azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The parameters for the scaling action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScaleAction
	{
		
		/// <summary>
		/// the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cooldown")]
		public string Cooldown { get; set; }
		
		/// <summary>
		/// the scale direction. Whether the scaling action increases or decreases the number of instances.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public ScaleActionDirection Direction { get; set; }
		
		/// <summary>
		/// the type of action that should occur when the scale rule fires.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ScaleActionType Type { get; set; }
		
		/// <summary>
		/// the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; } = "1";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ScaleActionDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Increase = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decrease = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ScaleActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChangeCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PercentChangeCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExactCount = 2,
	}
	
	/// <summary>
	/// The number of instances that can be used during this profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScaleCapacity
	{
		
		/// <summary>
		/// the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="default")]
		public string Default { get; set; }
		
		/// <summary>
		/// the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public string Maximum { get; set; }
		
		/// <summary>
		/// the minimum number of instances for the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public string Minimum { get; set; }
	}
	
	/// <summary>
	/// A specific date-time for the profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TimeWindow
	{
		
		/// <summary>
		/// the end time for the profile in ISO 8601 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.DateTimeOffset End { get; set; }
		
		/// <summary>
		/// the start time for the profile in ISO 8601 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.DateTimeOffset Start { get; set; }
		
		/// <summary>
		/// the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the autoscale settings for a subscription
		/// AutoscaleSettings_ListBySubscription subscriptions/{subscriptionId}/providers/microsoft.insights/autoscalesettings
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request for a list of autoscale settings</returns>
		public async Task<AutoscaleSettingResourceCollection> AutoscaleSettings_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/autoscalesettings?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AutoscaleSettingResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the autoscale settings for a resource group
		/// AutoscaleSettings_ListByResourceGroup subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request for a list of autoscale settings</returns>
		public async Task<AutoscaleSettingResourceCollection> AutoscaleSettings_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/autoscalesettings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AutoscaleSettingResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an autoscale setting
		/// AutoscaleSettings_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="autoscaleSettingName">The autoscale setting name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request to get one autoscale setting</returns>
		public async Task<AutoscaleSettingResource> AutoscaleSettings_GetAsync(string resourceGroupName, string autoscaleSettingName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/autoscalesettings/"+ (autoscaleSettingName==null? "" : System.Uri.EscapeDataString(autoscaleSettingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AutoscaleSettingResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an autoscale setting.
		/// AutoscaleSettings_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="autoscaleSettingName">The autoscale setting name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>Successful request to create or update an autoscale setting</returns>
		public async Task<AutoscaleSettingResource> AutoscaleSettings_CreateOrUpdateAsync(string resourceGroupName, string autoscaleSettingName, string api_version, string subscriptionId, AutoscaleSettingResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/autoscalesettings/"+ (autoscaleSettingName==null? "" : System.Uri.EscapeDataString(autoscaleSettingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AutoscaleSettingResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes and autoscale setting
		/// AutoscaleSettings_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="autoscaleSettingName">The autoscale setting name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <returns>Successful request to delete an autoscale setting</returns>
		public async Task AutoscaleSettings_DeleteAsync(string resourceGroupName, string autoscaleSettingName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/autoscalesettings/"+ (autoscaleSettingName==null? "" : System.Uri.EscapeDataString(autoscaleSettingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing AutoscaleSettingsResource. To update other fields use the CreateOrUpdate method.
		/// AutoscaleSettings_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="autoscaleSettingName">The autoscale setting name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>An existing autoscale setting resource was successfully updated.</returns>
		public async Task<AutoscaleSettingResource> AutoscaleSettings_UpdateAsync(string subscriptionId, string resourceGroupName, string autoscaleSettingName, string api_version, AutoscaleSettingResourcePatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/autoscalesettings/"+ (autoscaleSettingName==null? "" : System.Uri.EscapeDataString(autoscaleSettingName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AutoscaleSettingResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
