//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Criterion for dynamic threshold.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DynamicMetricCriteria
	{
		
		/// <summary>
		/// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alertSensitivity")]
		public DynamicMetricCriteriaAlertSensitivity AlertSensitivity { get; set; }
		
		/// <summary>
		/// The minimum number of violations required within the selected lookback time window required to raise an alert.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failingPeriods")]
		public DynamicThresholdFailingPeriods FailingPeriods { get; set; }
		
		/// <summary>
		/// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreDataBefore")]
		public System.Nullable<System.DateTimeOffset> IgnoreDataBefore { get; set; }
		
		/// <summary>
		/// The operator used to compare the metric value against the threshold.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public DynamicMetricCriteriaOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DynamicMetricCriteriaAlertSensitivity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DynamicMetricCriteriaOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterOrLessThan = 2,
	}
	
	/// <summary>
	/// The minimum number of violations required within the selected lookback time window required to raise an alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DynamicThresholdFailingPeriods
	{
		
		/// <summary>
		/// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minFailingPeriodsToAlert")]
		public double MinFailingPeriodsToAlert { get; set; }
		
		/// <summary>
		/// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfEvaluationPeriods")]
		public double NumberOfEvaluationPeriods { get; set; }
	}
	
	/// <summary>
	/// An alert action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertAction
	{
		
		/// <summary>
		/// the id of the action group to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionGroupId")]
		public string ActionGroupId { get; set; }
		
		/// <summary>
		/// The properties of a webhook object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookProperties")]
		public System.Collections.Generic.Dictionary<string, string> WebhookProperties { get; set; }
	}
	
	/// <summary>
	/// The rule criteria that defines the conditions of the alert rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertCriteria
	{
		
		/// <summary>
		/// specifies the type of the alert criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="odata.type")]
		public MetricAlertCriteriaOdata_type Odata_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricAlertCriteriaOdata_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria")]
		Microsoft_Azure_Monitor_SingleResourceMultipleMetricCriteria = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria")]
		Microsoft_Azure_Monitor_MultipleResourceMultipleMetricCriteria = 1,
	}
	
	/// <summary>
	/// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertMultipleResourceMultipleMetricCriteria
	{
		
		/// <summary>
		/// the list of multiple metric criteria for this 'all of' operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allOf")]
		public MultiMetricCriteria[] AllOf { get; set; }
	}
	
	/// <summary>
	/// The types of conditions for a multi resource alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MultiMetricCriteria
	{
		
		/// <summary>
		/// Specifies the type of threshold criteria
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="criterionType")]
		public MultiMetricCriteriaCriterionType CriterionType { get; set; }
		
		/// <summary>
		/// List of dimension conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public MetricDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Name of the metric.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Namespace of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricNamespace")]
		public string MetricNamespace { get; set; }
		
		/// <summary>
		/// Name of the criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// the criteria time aggregation types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeAggregation")]
		public MultiMetricCriteriaTimeAggregation TimeAggregation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MultiMetricCriteriaCriterionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticThresholdCriterion = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DynamicThresholdCriterion = 1,
	}
	
	/// <summary>
	/// Specifies a metric dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricDimension
	{
		
		/// <summary>
		/// Name of the dimension.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// the dimension operator. Only 'Include' and 'Exclude' are supported
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		/// <summary>
		/// list of dimension values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MultiMetricCriteriaTimeAggregation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 3,
	}
	
	/// <summary>
	/// An alert rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertProperties
	{
		
		/// <summary>
		/// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public MetricAlertAction[] Actions { get; set; }
		
		/// <summary>
		/// the flag that indicates whether the alert should be auto resolved or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoMitigate")]
		public System.Nullable<System.Boolean> AutoMitigate { get; set; }
		
		/// <summary>
		/// The rule criteria that defines the conditions of the alert rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public MetricAlertCriteria Criteria { get; set; }
		
		/// <summary>
		/// the description of the metric alert that will be included in the alert email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// the flag that indicates whether the metric alert is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// how often the metric alert is evaluated represented in ISO 8601 duration format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evaluationFrequency")]
		public string EvaluationFrequency { get; set; }
		
		/// <summary>
		/// Last time the rule was updated in ISO8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		/// <summary>
		/// the list of resource id's that this metric alert is scoped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		/// <summary>
		/// Alert severity {0, 1, 2, 3, 4}
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public int Severity { get; set; }
		
		/// <summary>
		/// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceRegion")]
		public string TargetResourceRegion { get; set; }
		
		/// <summary>
		/// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceType")]
		public string TargetResourceType { get; set; }
		
		/// <summary>
		/// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="windowSize")]
		public string WindowSize { get; set; }
	}
	
	/// <summary>
	/// The metric alert resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertResource
	{
		
		/// <summary>
		/// An alert rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MetricAlertProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of alert rule resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertResourceCollection
	{
		
		/// <summary>
		/// the values for the alert rule resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MetricAlertResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The metric alert resource for patch operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertResourcePatch
	{
		
		/// <summary>
		/// An alert rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MetricAlertProperties Properties { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
	}
	
	/// <summary>
	/// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertSingleResourceMultipleMetricCriteria
	{
		
		/// <summary>
		/// The list of metric criteria for this 'all of' operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allOf")]
		public MetricCriteria[] AllOf { get; set; }
	}
	
	/// <summary>
	/// Criterion to filter metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricCriteria
	{
		
		/// <summary>
		/// the criteria operator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public MetricCriteriaOperator Operator { get; set; }
		
		/// <summary>
		/// the criteria threshold value that activates the alert.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public double Threshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricCriteriaOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equals = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEquals = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanOrEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanOrEqual = 5,
	}
	
	/// <summary>
	/// An alert status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertStatus
	{
		
		/// <summary>
		/// The alert rule arm id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The status name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An alert status properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MetricAlertStatusProperties Properties { get; set; }
		
		/// <summary>
		/// The extended resource type name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of alert rule resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertStatusCollection
	{
		
		/// <summary>
		/// the values for the alert rule resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public MetricAlertStatus[] Value { get; set; }
	}
	
	/// <summary>
	/// An alert status properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricAlertStatusProperties
	{
		
		/// <summary>
		/// An object describing the type of the dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public System.Collections.Generic.Dictionary<string, string> Dimensions { get; set; }
		
		/// <summary>
		/// status value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// UTC time when the status was checked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// An azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve alert rule definitions in a subscription.
		/// MetricAlerts_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricAlerts
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request for a list of metric alerts</returns>
		public async Task<MetricAlertResourceCollection> MetricAlerts_ListBySubscriptionAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Insights/metricAlerts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetricAlertResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve alert rule definitions in a resource group.
		/// MetricAlerts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request for a list of metric alerts</returns>
		public async Task<MetricAlertResourceCollection> MetricAlerts_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/metricAlerts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetricAlertResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an alert rule definition.
		/// MetricAlerts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request for a list of metric alerts</returns>
		public async Task<MetricAlertResource> MetricAlerts_GetAsync(string subscriptionId, string resourceGroupName, string ruleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/metricAlerts/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetricAlertResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update an metric alert definition.
		/// MetricAlerts_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters of the rule to create or update.</param>
		/// <returns>OK</returns>
		public async Task<MetricAlertResource> MetricAlerts_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string ruleName, string api_version, MetricAlertResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/metricAlerts/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetricAlertResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an alert rule definition.
		/// MetricAlerts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request to delete an metric alert rule</returns>
		public async Task MetricAlerts_DeleteAsync(string subscriptionId, string resourceGroupName, string ruleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/metricAlerts/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an metric alert definition.
		/// MetricAlerts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters of the rule to update.</param>
		/// <returns>OK</returns>
		public async Task<MetricAlertResource> MetricAlerts_UpdateAsync(string subscriptionId, string resourceGroupName, string ruleName, string api_version, MetricAlertResourcePatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/metricAlerts/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetricAlertResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an alert rule status.
		/// MetricAlertsStatus_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request for a list of metric alerts</returns>
		public async Task<MetricAlertStatusCollection> MetricAlertsStatus_ListAsync(string subscriptionId, string resourceGroupName, string ruleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/metricAlerts/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"/status&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetricAlertStatusCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an alert rule status.
		/// MetricAlertsStatus_ListByName subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status/{statusName}
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription Id.</param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="ruleName">The name of the rule.</param>
		/// <param name="statusName">The name of the status.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request for a list of metric alerts</returns>
		public async Task<MetricAlertStatusCollection> MetricAlertsStatus_ListByNameAsync(string subscriptionId, string resourceGroupName, string ruleName, string statusName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/metricAlerts/"+ (ruleName==null? "" : System.Uri.EscapeDataString(ruleName))+"/status/"+ (statusName==null? "" : System.Uri.EscapeDataString(statusName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MetricAlertStatusCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
