//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Details of an Artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Artifact
	{
		
		/// <summary>
		/// The identifier of an Artifact. Format of ArtifactId - {Origin}/{Container}/{Path}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// The name of container. Artifacts can be grouped by container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// The Date and Time at which the Artifact is created. The DateTime is in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPath")]
		public DataPath DataPath { get; set; }
		
		/// <summary>
		/// The Etag of the Artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset' and 'Unknown'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The path to the Artifact in a container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataPath
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataStoreName")]
		public string DataStoreName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqlDataPath")]
		public SqlDataPath SqlDataPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDataPath
	{
		
		[System.Runtime.Serialization.DataMember(Name="sqlQuery")]
		public string SqlQuery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqlStoredProcedureName")]
		public string SqlStoredProcedureName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqlStoredProcedureParams")]
		public StoredProcedureParameter[] SqlStoredProcedureParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqlTableName")]
		public string SqlTableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StoredProcedureParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<StoredProcedureParameterType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StoredProcedureParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Int = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decimal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Guid = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Date = 5,
	}
	
	/// <summary>
	/// Details of the Artifact Container's shared access signature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactContainerSas
	{
		
		/// <summary>
		/// The Prefix to the Artifact in the Blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactPrefix")]
		public string ArtifactPrefix { get; set; }
		
		/// <summary>
		/// The shared access signature of the Container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerSas")]
		public string ContainerSas { get; set; }
		
		/// <summary>
		/// The URI of the Container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerUri")]
		public string ContainerUri { get; set; }
		
		/// <summary>
		/// The Prefix to the Blobs in the Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// Details of an Artifact Content Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactContentInformation
	{
		
		/// <summary>
		/// The name of container. Artifacts can be grouped by container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// The URI of the content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUri")]
		public string ContentUri { get; set; }
		
		/// <summary>
		/// The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset', 'ComputeRecord', 'Metric', and 'Unknown'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The path to the Artifact in a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Contains list of Artifact Ids.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactIdList
	{
		
		/// <summary>
		/// List of Artifacts Ids.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artifactIds")]
		public string[] ArtifactIds { get; set; }
	}
	
	/// <summary>
	/// Details of an Artifact Path.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactPath
	{
		
		/// <summary>
		/// The path to the Artifact in a container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Contains list of Artifact Paths.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactPathList
	{
		
		/// <summary>
		/// List of Artifact Paths.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public ArtifactPath[] Paths { get; set; }
	}
	
	/// <summary>
	/// Results of the Batch Artifact Content Information request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchArtifactContentInformationResult
	{
		
		/// <summary>
		/// Artifact Content Information details of the Artifact Ids requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactContentInformation")]
		public System.Collections.Generic.Dictionary<string, ArtifactContentInformation> ArtifactContentInformation { get; set; }
		
		/// <summary>
		/// Artifact details of the Artifact Ids requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public System.Collections.Generic.Dictionary<string, Artifact> Artifacts { get; set; }
		
		/// <summary>
		/// Errors occurred while fetching the requested Artifact Ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public System.Collections.Generic.Dictionary<string, ErrorResponse> Errors { get; set; }
	}
	
	/// <summary>
	/// The error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Dictionary containing correlation details for the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlation")]
		public System.Collections.Generic.Dictionary<string, string> Correlation { get; set; }
		
		/// <summary>
		/// The hosting environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		/// <summary>
		/// The root error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public RootError Error { get; set; }
		
		/// <summary>
		/// The Azure region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	/// <summary>
	/// The root error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RootError
	{
		
		/// <summary>
		/// The service-defined error code. Supported error codes: ServiceError, UserError, ValidationError, AzureStorageError, TransientError, RequestThrottled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The related errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDetails[] Details { get; set; }
		
		/// <summary>
		/// A nested structure of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerErrorResponse InnerError { get; set; }
		
		/// <summary>
		/// A human-readable representation of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error (e.g., the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error (e.g., the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// A nested structure of errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InnerErrorResponse
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A nested structure of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerErrorResponse InnerError { get; set; }
	}
	
	/// <summary>
	/// A paginated list of ArtifactContentInformations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedArtifactContentInformationList
	{
		
		/// <summary>
		/// The token used in retrieving the next page.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The link to the next page constructed using the continuationToken.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type ArtifactContentInformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ArtifactContentInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// A paginated list of Artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedArtifactList
	{
		
		/// <summary>
		/// The token used in retrieving the next page.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The link to the next page constructed using the continuationToken.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type Artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Artifact[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Batch Artifacts by Ids.
		/// Get Batch Artifacts by the specific Ids.
		/// Artifacts_BatchGetById artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/batch/metadata
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="requestBody">The command for Batch Artifact get request.</param>
		/// <returns>The requested Batch Artifacts are returned successfully.</returns>
		public async Task<BatchArtifactContentInformationResult> Artifacts_BatchGetByIdAsync(string subscriptionId, string resourceGroupName, string workspaceName, ArtifactIdList requestBody)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/batch/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchArtifactContentInformationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Artifact.
		/// Create an Artifact.
		/// Artifacts_Create artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/metadata
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="requestBody">The Artifact details.</param>
		/// <returns>The Artifact is created successfully.</returns>
		public async Task<Artifact> Artifacts_CreateAsync(string subscriptionId, string resourceGroupName, string workspaceName, Artifact requestBody)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artifact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Artifact for an existing data location.
		/// Create an Artifact for an existing dataPath.
		/// Artifacts_Register artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/register
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="requestBody">The Artifact creation details.</param>
		/// <returns>The Artifact is created successfully.</returns>
		public async Task<Artifact> Artifacts_RegisterAsync(string subscriptionId, string resourceGroupName, string workspaceName, Artifact requestBody)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/register";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artifact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Batch Artifacts storage by Ids.
		/// Get Batch Artifacts storage by specific Ids.
		/// Artifacts_BatchGetStorageById artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/storageuri/batch/metadata
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="requestBody">The list of artifactIds to get.</param>
		/// <returns>The Batch Artifact's storage are returned successfully.</returns>
		public async Task<BatchArtifactContentInformationResult> Artifacts_BatchGetStorageByIdAsync(string subscriptionId, string resourceGroupName, string workspaceName, ArtifactIdList requestBody)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/storageuri/batch/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchArtifactContentInformationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artifacts metadata in a container or path.
		/// Get Artifacts metadata in a specific container or path.
		/// Artifacts_ListInContainer artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <param name="continuationToken">The continuation token.</param>
		/// <returns>The details of the Artifacts are returned successfully.</returns>
		public async Task<PaginatedArtifactList> Artifacts_ListInContainerAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path, string continuationToken)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaginatedArtifactList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Artifact Metadata.
		/// Delete Artifact Metadata in a specific container.
		/// Artifacts_DeleteMetaDataInContainer artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="hardDelete">If set to true. The delete cannot be revert at later time.</param>
		/// <returns>The Artifact metadata deleted successfully.</returns>
		public async Task Artifacts_DeleteMetaDataInContainerAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, bool hardDelete)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/batch&hardDelete="+hardDelete;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch ingest using shared access signature.
		/// Ingest Batch Artifacts using shared access signature.
		/// Artifacts_BatchIngestFromSas artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/ingest/containersas
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="requestBody">The artifact container shared access signature to use for batch ingest.</param>
		/// <returns>The Batch is ingested using shared access signature successfully.</returns>
		public async Task<PaginatedArtifactList> Artifacts_BatchIngestFromSasAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, ArtifactContainerSas requestBody)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/batch/ingest/containersas";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaginatedArtifactList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a batch of empty Artifacts.
		/// Create a Batch of empty Artifacts from the supplied paths.
		/// Artifacts_BatchCreateEmptyArtifacts artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/metadata
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="requestBody">The list of Artifact paths to create.</param>
		/// <returns>The Batch of empty Artifacts created successfully.</returns>
		public async Task<BatchArtifactContentInformationResult> Artifacts_BatchCreateEmptyArtifactsAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, ArtifactPathList requestBody)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/batch/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchArtifactContentInformationResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Batch of Artifact Metadata.
		/// Delete a Batch of Artifact Metadata.
		/// Artifacts_DeleteBatchMetaData artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/metadata:delete
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="hardDelete">If set to true, the delete cannot be reverted at a later time.</param>
		/// <param name="requestBody">The list of Artifact paths to delete.</param>
		/// <returns>The batch delete of Artifact metadata completed successfully.</returns>
		public async Task Artifacts_DeleteBatchMetaDataAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, bool hardDelete, ArtifactPathList requestBody)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/batch/metadata:delete&hardDelete="+hardDelete;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artifact content by Id.
		/// Get Artifact content of a specific Id.
		/// Artifacts_Download artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/content
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <returns>File Response</returns>
		public async Task<string> Artifacts_DownloadAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/content&path=" + (path==null? "" : System.Uri.EscapeDataString(path));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artifact content information.
		/// Get content information of an Artifact.
		/// Artifacts_GetContentInformation artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/contentinfo
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <returns>The Artifact content information is returned successfully.</returns>
		public async Task<ArtifactContentInformation> Artifacts_GetContentInformationAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/contentinfo&path=" + (path==null? "" : System.Uri.EscapeDataString(path));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactContentInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artifact storage content information.
		/// Get storage content information of an Artifact.
		/// Artifacts_GetStorageContentInformation artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/contentinfo/storageuri
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <returns>The Artifact storage content information is returned successfully.</returns>
		public async Task<ArtifactContentInformation> Artifacts_GetStorageContentInformationAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/contentinfo/storageuri&path=" + (path==null? "" : System.Uri.EscapeDataString(path));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactContentInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artifact metadata by Id.
		/// Get Artifact metadata for a specific Id.
		/// Artifacts_Get artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/metadata
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <returns>The details of the Artifact are returned successfully.</returns>
		public async Task<Artifact> Artifacts_GetAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/metadata&path=" + (path==null? "" : System.Uri.EscapeDataString(path));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Artifact>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Artifact Metadata.
		/// Delete an Artifact Metadata.
		/// Artifacts_DeleteMetaData artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/metadata
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <param name="hardDelete">If set to true. The delete cannot be revert at later time.</param>
		/// <returns>The Artifact metadata deleted successfully.</returns>
		public async Task Artifacts_DeleteMetaDataAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path, bool hardDelete)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/metadata&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&hardDelete="+hardDelete;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get shared access signature for an Artifact
		/// Get shared access signature for an Artifact in specific path.
		/// Artifacts_ListSasByPrefix artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/prefix/contentinfo
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <param name="continuationToken">The continuation token.</param>
		/// <returns>The Artifact writable shared access signature is returned successfully.</returns>
		public async Task<PaginatedArtifactContentInformationList> Artifacts_ListSasByPrefixAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path, string continuationToken)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/prefix/contentinfo&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaginatedArtifactContentInformationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get storage Uri for Artifacts in a path.
		/// Get storage Uri for Artifacts in a specific path.
		/// Artifacts_ListStorageUriByPrefix artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/prefix/contentinfo/storageuri
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <param name="continuationToken">The continuation token.</param>
		/// <returns>The Artifact storage uri is returned successfully.</returns>
		public async Task<PaginatedArtifactContentInformationList> Artifacts_ListStorageUriByPrefixAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path, string continuationToken)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/prefix/contentinfo/storageuri&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaginatedArtifactContentInformationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get writable shared access signature for Artifact.
		/// Get writable shared access signature for a specific Artifact.
		/// Artifacts_GetSas artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/write
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="origin">The origin of the Artifact.</param>
		/// <param name="container">The container name.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <returns>The Artifact writable shared access signature is returned successfully.</returns>
		public async Task<ArtifactContentInformation> Artifacts_GetSasAsync(string subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path)
		{
			var requestUri = "artifact/v2.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/artifacts/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (container==null? "" : System.Uri.EscapeDataString(container))+"/write&path=" + (path==null? "" : System.Uri.EscapeDataString(path));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtifactContentInformation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
