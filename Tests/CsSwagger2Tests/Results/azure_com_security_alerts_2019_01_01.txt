//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Security alert
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Alert
	{
		
		/// <summary>
		/// describes security alert properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AlertProperties Properties { get; set; }
	}
	
	/// <summary>
	/// describes security alert properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertProperties
	{
		
		/// <summary>
		/// The action that was taken as a response to the alert (Active, Blocked etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionTaken")]
		public string ActionTaken { get; set; }
		
		/// <summary>
		/// Display name of the alert type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertDisplayName")]
		public string AlertDisplayName { get; set; }
		
		/// <summary>
		/// Name of the alert type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertName")]
		public string AlertName { get; set; }
		
		/// <summary>
		/// Azure resource ID of the associated resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedResource")]
		public string AssociatedResource { get; set; }
		
		/// <summary>
		/// Whether this alert can be investigated with Azure Security Center
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canBeInvestigated")]
		public System.Nullable<System.Boolean> CanBeInvestigated { get; set; }
		
		/// <summary>
		/// The entity that the incident happened on
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compromisedEntity")]
		public string CompromisedEntity { get; set; }
		
		/// <summary>
		/// reasons the alert got the confidenceScore value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidenceReasons")]
		public AlertConfidenceReason[] ConfidenceReasons { get; set; }
		
		/// <summary>
		/// level of confidence we have on the alert
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidenceScore")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Single> ConfidenceScore { get; set; }
		
		/// <summary>
		/// Alerts with the same CorrelationKey will be grouped together in Ibiza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationKey")]
		public string CorrelationKey { get; set; }
		
		/// <summary>
		/// Description of the incident and what it means
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The time the incident was detected by the vendor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedTimeUtc")]
		public System.Nullable<System.DateTimeOffset> DetectedTimeUtc { get; set; }
		
		/// <summary>
		/// objects that are related to this alerts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public AlertEntity[] Entities { get; set; }
		
		/// <summary>
		/// Changing set of properties depending on the alert type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedProperties")]
		public AlertExtendedProperties ExtendedProperties { get; set; }
		
		/// <summary>
		/// Instance ID of the alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Whether this alert is for incident type or not (otherwise - single alert)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isIncident")]
		public System.Nullable<System.Boolean> IsIncident { get; set; }
		
		/// <summary>
		/// Recommended steps to reradiate the incident
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediationSteps")]
		public string RemediationSteps { get; set; }
		
		/// <summary>
		/// Estimated severity of this alert
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportedSeverity")]
		public System.Nullable<AlertPropertiesReportedSeverity> ReportedSeverity { get; set; }
		
		/// <summary>
		/// The time the incident was reported to Microsoft.Security in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportedTimeUtc")]
		public System.Nullable<System.DateTimeOffset> ReportedTimeUtc { get; set; }
		
		/// <summary>
		/// State of the alert (Active, Dismissed etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Azure subscription ID of the resource that had the security alert or the subscription ID of the workspace that this resource reports to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// The type of the alerted resource (Azure, Non-Azure)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemSource")]
		public string SystemSource { get; set; }
		
		/// <summary>
		/// Name of the vendor that discovered the incident
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorName")]
		public string VendorName { get; set; }
		
		/// <summary>
		/// Azure resource ID of the workspace that the alert was reported to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceArmId")]
		public string WorkspaceArmId { get; set; }
	}
	
	/// <summary>
	/// Factors that increase our confidence that the alert is a true positive
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertConfidenceReason
	{
		
		/// <summary>
		/// description of the confidence reason
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Type of confidence factor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Changing set of properties depending on the entity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertEntity
	{
		
		/// <summary>
		/// Type of entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Changing set of properties depending on the alert type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertExtendedProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AlertPropertiesReportedSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Informational = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 3,
	}
	
	/// <summary>
	/// List of security alerts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Alert[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all the alerts that are associated with the subscription
		/// Alerts_List subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="select">OData select. Optional.</param>
		/// <param name="expand">OData expand. Optional.</param>
		/// <returns>OK</returns>
		public async Task<AlertList> Alerts_ListAsync(string api_version, string subscriptionId, string filter, string select, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/alerts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all the alerts that are associated with the subscription that are stored in a specific location
		/// Alerts_ListSubscriptionLevelAlertsByRegion subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="select">OData select. Optional.</param>
		/// <param name="expand">OData expand. Optional.</param>
		/// <returns>OK</returns>
		public async Task<AlertList> Alerts_ListSubscriptionLevelAlertsByRegionAsync(string api_version, string subscriptionId, string ascLocation, string filter, string select, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/alerts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an alert that is associated with a subscription
		/// Alerts_GetSubscriptionLevelAlert subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="alertName">Name of the alert object</param>
		/// <returns>OK</returns>
		public async Task<Alert> Alerts_GetSubscriptionLevelAlertAsync(string api_version, string subscriptionId, string ascLocation, string alertName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/alerts/"+ (alertName==null? "" : System.Uri.EscapeDataString(alertName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Alert>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the alert's state
		/// Alerts_UpdateSubscriptionLevelAlertStateToDismiss subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="alertName">Name of the alert object</param>
		public async Task Alerts_UpdateSubscriptionLevelAlertStateToDismissAsync(string api_version, string subscriptionId, string ascLocation, string alertName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/alerts/"+ (alertName==null? "" : System.Uri.EscapeDataString(alertName))+"/dismiss?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the alert's state
		/// Alerts_UpdateSubscriptionLevelAlertStateToReactivate subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/reactivate
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="alertName">Name of the alert object</param>
		public async Task Alerts_UpdateSubscriptionLevelAlertStateToReactivateAsync(string api_version, string subscriptionId, string ascLocation, string alertName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/alerts/"+ (alertName==null? "" : System.Uri.EscapeDataString(alertName))+"/reactivate?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all the alerts that are associated with the resource group
		/// Alerts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/alerts
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="select">OData select. Optional.</param>
		/// <param name="expand">OData expand. Optional.</param>
		/// <returns>OK</returns>
		public async Task<AlertList> Alerts_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName, string filter, string select, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/alerts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all the alerts that are associated with the resource group that are stored in a specific location
		/// Alerts_ListResourceGroupLevelAlertsByRegion subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="filter">OData filter. Optional.</param>
		/// <param name="select">OData select. Optional.</param>
		/// <param name="expand">OData expand. Optional.</param>
		/// <returns>OK</returns>
		public async Task<AlertList> Alerts_ListResourceGroupLevelAlertsByRegionAsync(string api_version, string subscriptionId, string ascLocation, string resourceGroupName, string filter, string select, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/alerts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an alert that is associated a resource group or a resource in a resource group
		/// Alerts_GetResourceGroupLevelAlerts subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="alertName">Name of the alert object</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <returns>OK</returns>
		public async Task<Alert> Alerts_GetResourceGroupLevelAlertsAsync(string api_version, string subscriptionId, string ascLocation, string alertName, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/alerts/"+ (alertName==null? "" : System.Uri.EscapeDataString(alertName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Alert>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the alert's state
		/// Alerts_UpdateResourceGroupLevelAlertStateToDismiss subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="alertName">Name of the alert object</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		public async Task Alerts_UpdateResourceGroupLevelAlertStateToDismissAsync(string api_version, string subscriptionId, string ascLocation, string alertName, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/alerts/"+ (alertName==null? "" : System.Uri.EscapeDataString(alertName))+"/dismiss?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the alert's state
		/// Alerts_UpdateResourceGroupLevelAlertStateToReactivate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/reactivate
		/// </summary>
		/// <param name="api_version">API version for the operation</param>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="alertName">Name of the alert object</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		public async Task Alerts_UpdateResourceGroupLevelAlertStateToReactivateAsync(string api_version, string subscriptionId, string ascLocation, string alertName, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/alerts/"+ (alertName==null? "" : System.Uri.EscapeDataString(alertName))+"/reactivate?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
