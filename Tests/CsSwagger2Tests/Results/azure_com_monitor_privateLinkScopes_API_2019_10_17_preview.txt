//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An Azure Monitor PrivateLinkScope definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureMonitorPrivateLinkScope : PrivateLinkScopesResource
	{
		
		/// <summary>
		/// Properties that define a Azure Monitor PrivateLinkScope resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AzureMonitorPrivateLinkScopeProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Describes the list of Azure Monitor PrivateLinkScope resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureMonitorPrivateLinkScopeListResult
	{
		
		/// <summary>
		/// The URI to get the next set of Azure Monitor PrivateLinkScope definitions if too many PrivateLinkScopes where returned in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Azure Monitor PrivateLinkScope definitions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AzureMonitorPrivateLinkScope[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties that define a Azure Monitor PrivateLinkScope resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureMonitorPrivateLinkScopeProperties
	{
		
		/// <summary>
		/// Current state of this PrivateLinkScope: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Provisioning ,Succeeded, Canceled and Failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Describe the format of an Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A private endpoint connection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointConnection
	{
		
		/// <summary>
		/// Properties of a private endpoint connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PrivateEndpointConnectionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a private endpoint connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointConnectionProperties
	{
		
		/// <summary>
		/// Private endpoint which the connection belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateEndpoint")]
		public PrivateEndpointProperty PrivateEndpoint { get; set; }
		
		/// <summary>
		/// State of the private endpoint connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateLinkServiceConnectionState")]
		public PrivateLinkServiceConnectionStateProperty PrivateLinkServiceConnectionState { get; set; }
		
		/// <summary>
		/// State of the private endpoint connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// Private endpoint which the connection belongs to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointProperty
	{
		
		/// <summary>
		/// Resource id of the private endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// State of the private endpoint connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateLinkServiceConnectionStateProperty
	{
		
		/// <summary>
		/// The actions required for private link service connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionsRequired")]
		public string ActionsRequired { get; set; }
		
		/// <summary>
		/// The private link service connection description.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The private link service connection status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// A list of private endpoint connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointConnectionListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PrivateEndpointConnection[] Value { get; set; }
	}
	
	/// <summary>
	/// A private link resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateLinkResource
	{
		
		/// <summary>
		/// Properties of a private link resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PrivateLinkResourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a private link resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateLinkResourceProperties
	{
		
		/// <summary>
		/// The private link resource group id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// The private link resource required member names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredMembers")]
		public string[] RequiredMembers { get; set; }
	}
	
	/// <summary>
	/// A list of private link resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateLinkResourceListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PrivateLinkResource[] Value { get; set; }
	}
	
	/// <summary>
	/// An azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateLinkScopesResource
	{
		
		/// <summary>
		/// Azure resource Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Azure resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
		
		/// <summary>
		/// Azure resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Common properties of proxy resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A private link scoped resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopedResource
	{
		
		/// <summary>
		/// Properties of a private link scoped resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ScopedResourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a private link scoped resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopedResourceProperties
	{
		
		/// <summary>
		/// The resource id of the scoped Azure monitor resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedResourceId")]
		public string LinkedResourceId { get; set; }
		
		/// <summary>
		/// State of the private endpoint connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// A list of scoped resources in a private link scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScopedResourceListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ScopedResource[] Value { get; set; }
	}
	
	/// <summary>
	/// A container holding only the Tags for a resource, allowing the user to update the tags on a PrivateLinkScope instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TagsResource
	{
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public object Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of all Azure Monitor PrivateLinkScopes within a subscription.
		/// PrivateLinkScopes_List subscriptions/{subscriptionId}/providers/microsoft.insights/privateLinkScopes
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>A list containing 0 or more Azure Monitor PrivateLinkScope definitions.</returns>
		public async Task<AzureMonitorPrivateLinkScopeListResult> PrivateLinkScopes_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.insights/privateLinkScopes?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AzureMonitorPrivateLinkScopeListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all private endpoint connections on a private link scope.
		/// PrivateEndpointConnections_ListByPrivateLinkScope subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/privateEndpointConnections
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <returns>Successfully retrieved private endpoint connections.</returns>
		public async Task<PrivateEndpointConnectionListResult> PrivateEndpointConnections_ListByPrivateLinkScopeAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/privateEndpointConnections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateEndpointConnectionListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a private endpoint connection.
		/// PrivateEndpointConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection.</param>
		/// <returns>Successfully retrieved a specified private endpoint connection.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName, string privateEndpointConnectionName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateEndpointConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve or reject a private endpoint connection with a given name.
		/// PrivateEndpointConnections_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection.</param>
		/// <returns>Successfully approved or rejected private endpoint connection.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName, string privateEndpointConnectionName, PrivateEndpointConnection requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateEndpointConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a private endpoint connection with a given name.
		/// PrivateEndpointConnections_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection.</param>
		/// <returns>Successfully deleted private endpoint connection.</returns>
		public async Task PrivateEndpointConnections_DeleteAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName, string privateEndpointConnectionName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the private link resources that need to be created for a Azure Monitor PrivateLinkScope.
		/// PrivateLinkResources_ListByPrivateLinkScope subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/privateLinkResources
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <returns>Successfully retrieved private link resources.</returns>
		public async Task<PrivateLinkResourceListResult> PrivateLinkResources_ListByPrivateLinkScopeAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/privateLinkResources&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateLinkResourceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the private link resources that need to be created for a Azure Monitor PrivateLinkScope.
		/// PrivateLinkResources_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/privateLinkResources/{groupName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <param name="groupName">The name of the private link resource.</param>
		/// <returns>Successfully retrieved a specified private link resource.</returns>
		public async Task<PrivateLinkResource> PrivateLinkResources_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName, string groupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/privateLinkResources/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateLinkResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all private endpoint connections on a private link scope.
		/// PrivateLinkScopedResources_ListByPrivateLinkScope subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <returns>Successfully retrieved scoped resources in a private link scope.</returns>
		public async Task<ScopedResourceListResult> PrivateLinkScopedResources_ListByPrivateLinkScopeAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/scopedResources&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ScopedResourceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a scoped resource in a private link scope.
		/// PrivateLinkScopedResources_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <param name="name">The name of the scoped resource object.</param>
		/// <returns>Successfully retrieved a scoped resource in a private link scope.</returns>
		public async Task<ScopedResource> PrivateLinkScopedResources_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName, string name)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/scopedResources/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ScopedResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve or reject a private endpoint connection with a given name.
		/// PrivateLinkScopedResources_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <param name="name">The name of the scoped resource object.</param>
		/// <returns>Successfully scoped azure monitor resource in a private link scope.</returns>
		public async Task<ScopedResource> PrivateLinkScopedResources_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName, string name, ScopedResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/scopedResources/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ScopedResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a private endpoint connection with a given name.
		/// PrivateLinkScopedResources_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">Name of the Azure Monitor PrivateLinkScope that will contain the datasource</param>
		/// <param name="name">The name of the scoped resource object.</param>
		/// <returns>Successfully deleted scoped resource.</returns>
		public async Task PrivateLinkScopedResources_DeleteAsync(string subscriptionId, string resourceGroupName, string api_version, string scopeName, string name)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"/scopedResources/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of Azure Monitor PrivateLinkScopes within a resource group.
		/// PrivateLinkScopes_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>A list containing 0 or more Azure Monitor PrivateLinkScope definitions.</returns>
		public async Task<AzureMonitorPrivateLinkScopeListResult> PrivateLinkScopes_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/privateLinkScopes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AzureMonitorPrivateLinkScopeListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a Azure Monitor PrivateLinkScope.
		/// PrivateLinkScopes_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">The name of the Azure Monitor PrivateLinkScope resource.</param>
		/// <returns>An Azure Monitor PrivateLinkScope definition.</returns>
		public async Task<AzureMonitorPrivateLinkScope> PrivateLinkScopes_GetAsync(string resourceGroupName, string api_version, string subscriptionId, string scopeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AzureMonitorPrivateLinkScope>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates (or updates) a Azure Monitor PrivateLinkScope. Note: You cannot specify a different value for InstrumentationKey nor AppId in the Put operation.
		/// PrivateLinkScopes_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">The name of the Azure Monitor PrivateLinkScope resource.</param>
		/// <param name="requestBody">Properties that need to be specified to create or update a Azure Monitor PrivateLinkScope.</param>
		/// <returns>Successful request when creating or updating a Azure Monitor PrivateLinkScope. The updated PrivateLinkScope is returned.</returns>
		public async Task<AzureMonitorPrivateLinkScope> PrivateLinkScopes_CreateOrUpdateAsync(string resourceGroupName, string api_version, string subscriptionId, string scopeName, AzureMonitorPrivateLinkScope requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AzureMonitorPrivateLinkScope>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Azure Monitor PrivateLinkScope.
		/// PrivateLinkScopes_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">The name of the Azure Monitor PrivateLinkScope resource.</param>
		/// <returns>Successful request when deleting a Azure Monitor PrivateLinkScope.</returns>
		public async Task PrivateLinkScopes_DeleteAsync(string resourceGroupName, string api_version, string subscriptionId, string scopeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing PrivateLinkScope's tags. To update other fields use the CreateOrUpdate method.
		/// PrivateLinkScopes_UpdateTags subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="scopeName">The name of the Azure Monitor PrivateLinkScope resource.</param>
		/// <param name="requestBody">Updated tag information to set into the PrivateLinkScope instance.</param>
		/// <returns>Updating the Azure Monitor PrivateLinkScope's tags was successful. PrivateLinkScope tags are updated and returned with the rest of the PrivateLinkScope's object properties.</returns>
		public async Task<AzureMonitorPrivateLinkScope> PrivateLinkScopes_UpdateTagsAsync(string resourceGroupName, string api_version, string subscriptionId, string scopeName, TagsResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.insights/privateLinkScopes/"+ (scopeName==null? "" : System.Uri.EscapeDataString(scopeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AzureMonitorPrivateLinkScope>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
