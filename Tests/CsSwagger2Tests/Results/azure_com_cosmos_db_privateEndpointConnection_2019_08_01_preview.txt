//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Error Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A private endpoint connection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointConnection
	{
		
		/// <summary>
		/// Properties of a private endpoint connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PrivateEndpointConnectionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a private endpoint connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointConnectionProperties
	{
		
		/// <summary>
		/// Private endpoint which the connection belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateEndpoint")]
		public PrivateEndpointProperty PrivateEndpoint { get; set; }
		
		/// <summary>
		/// Connection State of the Private Endpoint Connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateLinkServiceConnectionState")]
		public PrivateLinkServiceConnectionStateProperty PrivateLinkServiceConnectionState { get; set; }
	}
	
	/// <summary>
	/// Private endpoint which the connection belongs to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointProperty
	{
		
		/// <summary>
		/// Resource id of the private endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Connection State of the Private Endpoint Connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateLinkServiceConnectionStateProperty
	{
		
		/// <summary>
		/// Any action that is required beyond basic workflow (approve/ reject/ disconnect)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionsRequired")]
		public string ActionsRequired { get; set; }
		
		/// <summary>
		/// The private link service connection description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The private link service connection status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// A list of private endpoint connections
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointConnectionListResult
	{
		
		/// <summary>
		/// Array of private endpoint connections
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PrivateEndpointConnection[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all private endpoint connections on a Cosmos DB account.
		/// PrivateEndpointConnections_ListByDatabaseAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="accountName">Cosmos DB database account name.</param>
		/// <returns>Successfully retrieved private endpoint connections.</returns>
		public async Task<PrivateEndpointConnectionListResult> PrivateEndpointConnections_ListByDatabaseAccountAsync(string subscriptionId, string resourceGroupName, string api_version, string accountName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateEndpointConnections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateEndpointConnectionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a private endpoint connection.
		/// PrivateEndpointConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="accountName">Cosmos DB database account name.</param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection.</param>
		/// <returns>Successfully retrieved a specified private endpoint connection.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_GetAsync(string subscriptionId, string resourceGroupName, string api_version, string accountName, string privateEndpointConnectionName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateEndpointConnection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve or reject a private endpoint connection with a given name.
		/// PrivateEndpointConnections_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="accountName">Cosmos DB database account name.</param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection.</param>
		/// <returns>Successfully approved or rejected private endpoint connection.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string api_version, string accountName, string privateEndpointConnectionName, PrivateEndpointConnection requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateEndpointConnection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a private endpoint connection with a given name.
		/// PrivateEndpointConnections_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="accountName">Cosmos DB database account name.</param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection.</param>
		public async Task PrivateEndpointConnections_DeleteAsync(string subscriptionId, string resourceGroupName, string api_version, string accountName, string privateEndpointConnectionName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DocumentDB/databaseAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
