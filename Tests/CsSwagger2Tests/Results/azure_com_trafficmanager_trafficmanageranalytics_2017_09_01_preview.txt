//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An error returned by the Azure Resource Manager
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// The content of an error returned by the Azure Resource Manager
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// The content of an error returned by the Azure Resource Manager
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// Error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Error target
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The result of the request or operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteOperationResult
	{
		
		/// <summary>
		/// The result of the operation or request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolean")]
		public System.Nullable<System.Boolean> Boolean { get; set; }
	}
	
	/// <summary>
	/// Class which is a sparse representation of a Traffic Manager endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HeatMapEndpoint
	{
		
		/// <summary>
		/// A number uniquely identifying this endpoint in query experiences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public System.Nullable<System.Int32> EndpointId { get; set; }
		
		/// <summary>
		/// The ARM Resource ID of this Traffic Manager endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager HeatMap.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HeatMapModel : ProxyResource
	{
		
		/// <summary>
		/// Class representing a Traffic Manager HeatMap properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public HeatMapProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager HeatMap properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HeatMapProperties
	{
		
		/// <summary>
		/// The ending of the time window for this HeatMap, exclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The endpoints used in this HeatMap calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public HeatMapEndpoint[] Endpoints { get; set; }
		
		/// <summary>
		/// The beginning of the time window for this HeatMap, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The traffic flows produced in this HeatMap calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trafficFlows")]
		public TrafficFlow[] TrafficFlows { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager HeatMap traffic flow properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrafficFlow
	{
		
		/// <summary>
		/// The approximate latitude that these queries originated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The approximate longitude that these queries originated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// The query experiences produced in this HeatMap calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryExperiences")]
		public QueryExperience[] QueryExperiences { get; set; }
		
		/// <summary>
		/// The IP address that this query experience originated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceIp")]
		public string SourceIp { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager HeatMap query experience properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryExperience
	{
		
		/// <summary>
		/// The id of the endpoint from the 'endpoints' array which these queries were routed to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public int EndpointId { get; set; }
		
		/// <summary>
		/// The latency experienced by queries originating from this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency")]
		public System.Nullable<System.Double> Latency { get; set; }
		
		/// <summary>
		/// The number of queries originating from this location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queryCount")]
		public int QueryCount { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
	}
	
	/// <summary>
	/// The core properties of ARM resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a ARM tracked top level resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource : Resource
	{
		
		/// <summary>
		/// The Azure Region where the resource lives
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Class representing a Traffic Manager Real User Metrics key response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrafficManagerUserMetricsKeyModel : ProxyResource
	{
		
		/// <summary>
		/// Fully qualified resource Id for the resource. Ex - /providers/Microsoft.Network/trafficManagerUserMetricsKeys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The key returned by the Real User Metrics operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The word default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource. Ex- Microsoft.Network/trafficManagerUserMetricsKeys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get the subscription-level key used for Real User Metrics collection.
		/// TrafficManagerUserMetricsKeys_Get subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The subscription-level Traffic Manager Real User Metrics key.</returns>
		public async Task<TrafficManagerUserMetricsKeyModel> TrafficManagerUserMetricsKeys_GetAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/trafficManagerUserMetricsKeys?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrafficManagerUserMetricsKeyModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a subscription-level key used for Real User Metrics collection.
		/// TrafficManagerUserMetricsKeys_CreateOrUpdate subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		public async Task TrafficManagerUserMetricsKeys_CreateOrUpdateAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/trafficManagerUserMetricsKeys?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a subscription-level key used for Real User Metrics collection.
		/// TrafficManagerUserMetricsKeys_Delete subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The Traffic Manager Real User Metrics key was deleted successfully.</returns>
		public async Task<DeleteOperationResult> TrafficManagerUserMetricsKeys_DeleteAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/trafficManagerUserMetricsKeys?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteOperationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets latest heatmap for Traffic Manager profile.
		/// HeatMap_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group containing the Traffic Manager endpoint.</param>
		/// <param name="profileName">The name of the Traffic Manager profile.</param>
		/// <param name="heatMapType">The type of HeatMap for the Traffic Manager profile.</param>
		/// <param name="topLeft">The top left latitude,longitude pair of the rectangular viewport to query for.</param>
		/// <param name="botRight">The bottom right latitude,longitude pair of the rectangular viewport to query for.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>The Traffic Manager heatmap.</returns>
		public async Task<HeatMapModel> HeatMap_GetAsync(string subscriptionId, string resourceGroupName, string profileName, HeatMap_GetHeatMapType heatMapType, double[] topLeft, double[] botRight, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/trafficmanagerprofiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/heatMaps/"+heatMapType+"&"+string.Join("&", topLeft.Select(z => $"topLeft={z}"))+"&"+string.Join("&", botRight.Select(z => $"botRight={z}"))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HeatMapModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum HeatMap_GetHeatMapType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
