//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public class RecoverableDatabase
	{
	}
	
	/// <summary>
	/// The response to a list recoverable databases request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecoverableDatabaseListResult
	{
		
		/// <summary>
		/// A list of recoverable databases
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RecoverableDatabase[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a recoverable database
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecoverableDatabaseProperties
	{
		
		/// <summary>
		/// The edition of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public string Edition { get; set; }
		
		/// <summary>
		/// The elastic pool name of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elasticPoolName")]
		public string ElasticPoolName { get; set; }
		
		/// <summary>
		/// The last available backup date of the database (ISO8601 format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastAvailableBackupDate")]
		public System.Nullable<System.DateTimeOffset> LastAvailableBackupDate { get; set; }
		
		/// <summary>
		/// The service level objective name of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceLevelObjective")]
		public string ServiceLevelObjective { get; set; }
	}
	
	public class RestorableDroppedDatabase
	{
	}
	
	/// <summary>
	/// The response to a list restorable dropped databases request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestorableDroppedDatabaseListResult
	{
		
		/// <summary>
		/// A list of restorable dropped databases
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RestorableDroppedDatabase[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a restorable dropped database
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RestorableDroppedDatabaseProperties
	{
		
		/// <summary>
		/// The creation date of the database (ISO8601 format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The name of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// The deletion date of the database (ISO8601 format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletionDate")]
		public System.Nullable<System.DateTimeOffset> DeletionDate { get; set; }
		
		/// <summary>
		/// The earliest restore date of the database (ISO8601 format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earliestRestoreDate")]
		public System.Nullable<System.DateTimeOffset> EarliestRestoreDate { get; set; }
		
		/// <summary>
		/// The edition of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public string Edition { get; set; }
		
		/// <summary>
		/// The elastic pool name of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elasticPoolName")]
		public string ElasticPoolName { get; set; }
		
		/// <summary>
		/// The max size in bytes of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSizeBytes")]
		public string MaxSizeBytes { get; set; }
		
		/// <summary>
		/// The service level objective name of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceLevelObjective")]
		public string ServiceLevelObjective { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of recoverable databases
		/// RecoverableDatabases_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<RecoverableDatabaseListResult> RecoverableDatabases_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/recoverableDatabases?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RecoverableDatabaseListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a recoverable database, which is a resource representing a database's geo backup
		/// RecoverableDatabases_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases/{databaseName}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database</param>
		/// <returns>OK</returns>
		public async Task<RecoverableDatabase> RecoverableDatabases_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string databaseName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/recoverableDatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RecoverableDatabase>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of deleted databases that can be restored
		/// RestorableDroppedDatabases_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/restorableDroppedDatabases
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <returns>OK</returns>
		public async Task<RestorableDroppedDatabaseListResult> RestorableDroppedDatabases_ListByServerAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/restorableDroppedDatabases?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RestorableDroppedDatabaseListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a deleted database that can be restored
		/// RestorableDroppedDatabases_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/restorableDroppedDatabases/{restorableDroppededDatabaseId}
		/// </summary>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="restorableDroppededDatabaseId">The id of the deleted database in the form of databaseName,deletionTimeInFileTimeFormat</param>
		/// <returns>OK</returns>
		public async Task<RestorableDroppedDatabase> RestorableDroppedDatabases_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serverName, string restorableDroppededDatabaseId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/restorableDroppedDatabases/"+ (restorableDroppededDatabaseId==null? "" : System.Uri.EscapeDataString(restorableDroppededDatabaseId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RestorableDroppedDatabase>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
