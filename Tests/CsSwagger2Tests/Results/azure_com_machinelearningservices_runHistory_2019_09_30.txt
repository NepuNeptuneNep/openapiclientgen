//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Details of an Artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Artifact
	{
		
		/// <summary>
		/// The identifier of an Artifact. Format of ArtifactId - {Origin}/{Container}/{Path}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// The name of container. Artifacts can be grouped by container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// The Date and Time at which the Artifact is created. The DateTime is in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPath")]
		public DataPath DataPath { get; set; }
		
		/// <summary>
		/// The Etag of the Artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset' and 'Unknown'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The path to the Artifact in a container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataPath
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataStoreName")]
		public string DataStoreName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqlDataPath")]
		public SqlDataPath SqlDataPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlDataPath
	{
		
		[System.Runtime.Serialization.DataMember(Name="sqlQuery")]
		public string SqlQuery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqlStoredProcedureName")]
		public string SqlStoredProcedureName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqlStoredProcedureParams")]
		public StoredProcedureParameter[] SqlStoredProcedureParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sqlTableName")]
		public string SqlTableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StoredProcedureParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<StoredProcedureParameterType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StoredProcedureParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Int = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decimal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Guid = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Date = 5,
	}
	
	/// <summary>
	/// Details of an Artifact Content Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactContentInformation
	{
		
		/// <summary>
		/// The name of container. Artifacts can be grouped by container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// The URI of the content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUri")]
		public string ContentUri { get; set; }
		
		/// <summary>
		/// The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset', 'ComputeRecord', 'Metric', and 'Unknown'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The path to the Artifact in a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Details of an Artifact Path.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactPath
	{
		
		/// <summary>
		/// The path to the Artifact in a container.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Contains list of Artifact Paths.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ArtifactPathList
	{
		
		/// <summary>
		/// List of Artifact Paths.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public ArtifactPath[] Paths { get; set; }
	}
	
	/// <summary>
	/// Base event is the envelope used to post event data to the Event controller
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BaseEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAddOrModifyRunRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public CreateRun[] Runs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateRun
	{
		
		[System.Runtime.Serialization.DataMember(Name="cancelUri")]
		public string CancelUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdFrom")]
		public CreatedFrom CreatedFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataContainerId")]
		public string DataContainerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diagnosticsUri")]
		public string DiagnosticsUri { get; set; }
		
		/// <summary>
		/// The end time of the run in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeUtc")]
		public System.Nullable<System.DateTimeOffset> EndTimeUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heartbeatEnabled")]
		public System.Nullable<System.Boolean> HeartbeatEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public RunOptions Options { get; set; }
		
		/// <summary>
		/// The parent of the run if the run is hierarchical; otherwise, Null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentRunId")]
		public string ParentRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runDefinition")]
		public string RunDefinition { get; set; }
		
		/// <summary>
		/// The identifier for the run. Run IDs must be less than 256 characters and contain only alphanumeric characters with dashes and underscores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runType")]
		public string RunType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptName")]
		public string ScriptName { get; set; }
		
		/// <summary>
		/// The start time of the run in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeUtc")]
		public System.Nullable<System.DateTimeOffset> StartTimeUtc { get; set; }
		
		/// <summary>
		/// The status of the run. The Status string value maps to the RunStatus Enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreatedFrom
	{
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public System.Nullable<CreatedFromLocationType> LocationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CreatedFromType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreatedFromLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ArtifactId = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CreatedFromType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Notebook = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="generateDataContainerIdIfNotSpecified")]
		public System.Nullable<System.Boolean> GenerateDataContainerIdIfNotSpecified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAddOrModifyRunResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public System.Collections.Generic.Dictionary<string, ErrorResponse> Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public System.Collections.Generic.Dictionary<string, Run> Runs { get; set; }
	}
	
	/// <summary>
	/// The error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Dictionary containing correlation details for the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlation")]
		public System.Collections.Generic.Dictionary<string, string> Correlation { get; set; }
		
		/// <summary>
		/// The hosting environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		/// <summary>
		/// The root error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public RootError Error { get; set; }
		
		/// <summary>
		/// The Azure region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	/// <summary>
	/// The root error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RootError
	{
		
		/// <summary>
		/// The service-defined error code. Supported error codes: ServiceError, UserError, ValidationError, AzureStorageError, TransientError, RequestThrottled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The related errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDetails[] Details { get; set; }
		
		/// <summary>
		/// A nested structure of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerErrorResponse InnerError { get; set; }
		
		/// <summary>
		/// A human-readable representation of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error (e.g., the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error (e.g., the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// A nested structure of errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InnerErrorResponse
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A nested structure of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerErrorResponse InnerError { get; set; }
	}
	
	/// <summary>
	/// The definition of a Run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Run
	{
		
		[System.Runtime.Serialization.DataMember(Name="cancelUri")]
		public string CancelUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public CreatedBy CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdFrom")]
		public CreatedFrom CreatedFrom { get; set; }
		
		/// <summary>
		/// The time the run was created in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdUtc")]
		public System.Nullable<System.DateTimeOffset> CreatedUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataContainerId")]
		public string DataContainerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diagnosticsUri")]
		public string DiagnosticsUri { get; set; }
		
		/// <summary>
		/// The end time of the run in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeUtc")]
		public System.Nullable<System.DateTimeOffset> EndTimeUtc { get; set; }
		
		/// <summary>
		/// The error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorResponse Error { get; set; }
		
		/// <summary>
		/// The Id of the experiment that created this run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experimentId")]
		public string ExperimentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heartbeatEnabled")]
		public System.Nullable<System.Boolean> HeartbeatEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public RunOptions Options { get; set; }
		
		/// <summary>
		/// The parent of the run if the run is hierarchical; otherwise, Null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentRunId")]
		public string ParentRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootRunId")]
		public string RootRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runDefinition")]
		public string RunDefinition { get; set; }
		
		/// <summary>
		/// The identifier for the run. Run IDs must be less than 256 characters and contain only alphanumeric characters with dashes and underscores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runNumber")]
		public System.Nullable<System.Int32> RunNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runType")]
		public string RunType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptName")]
		public string ScriptName { get; set; }
		
		/// <summary>
		/// The start time of the run in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeUtc")]
		public System.Nullable<System.DateTimeOffset> StartTimeUtc { get; set; }
		
		/// <summary>
		/// The status of the run. The Status string value maps to the RunStatus Enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// A token used for authenticating a run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The Token expiration time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenExpiryTimeUtc")]
		public System.Nullable<System.DateTimeOffset> TokenExpiryTimeUtc { get; set; }
		
		/// <summary>
		/// The Id of the user that created the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// A list of warnings that occurred during the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public RunDetailsWarning[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreatedBy
	{
		
		/// <summary>
		/// A user's full name or a service principal's app ID.
		///This is PII and should never be logged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// A user or service principal's object ID.
		///This is PII and should never be logged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userObjectId")]
		public string UserObjectId { get; set; }
		
		/// <summary>
		/// A user or service principal's tenant ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userTenantId")]
		public string UserTenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunDetailsWarning
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	/// <summary>
	/// Results of the Batch Artifact Content Information request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchArtifactContentInformationResult
	{
		
		/// <summary>
		/// Artifact Content Information details of the Artifact Ids requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactContentInformation")]
		public System.Collections.Generic.Dictionary<string, ArtifactContentInformation> ArtifactContentInformation { get; set; }
		
		/// <summary>
		/// Artifact details of the Artifact Ids requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public System.Collections.Generic.Dictionary<string, Artifact> Artifacts { get; set; }
		
		/// <summary>
		/// Errors occurred while fetching the requested Artifact Ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public System.Collections.Generic.Dictionary<string, ErrorResponse> Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchEventCommand
	{
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public BaseEvent[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchEventCommandResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public KeyValuePairBaseEventErrorResponse[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyValuePairBaseEventErrorResponse
	{
		
		/// <summary>
		/// Base event is the envelope used to post event data to the Event controller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public BaseEvent Key { get; set; }
		
		/// <summary>
		/// The error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ErrorResponse Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchMetric
	{
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Metric[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Metric
	{
		
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public string[] Cells { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdUtc")]
		public System.Nullable<System.DateTimeOffset> CreatedUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataContainerId")]
		public string DataContainerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataLocation")]
		public string DataLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricId")]
		public string MetricId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricType")]
		public string MetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numCells")]
		public System.Nullable<System.Int32> NumCells { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public MetricSchema Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="numProperties")]
		public System.Nullable<System.Int32> NumProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MetricSchemaProperty[] Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricSchemaProperty
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyId")]
		public string PropertyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteTagsCommand
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Experiment
	{
		
		[System.Runtime.Serialization.DataMember(Name="archivedTime")]
		public System.Nullable<System.DateTimeOffset> ArchivedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdUtc")]
		public System.Nullable<System.DateTimeOffset> CreatedUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experimentId")]
		public string ExperimentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestCreatedRunCreatedUtc")]
		public System.Nullable<System.DateTimeOffset> LatestCreatedRunCreatedUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestCreatedRunId")]
		public string LatestCreatedRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ModifyExperiment
	{
		
		[System.Runtime.Serialization.DataMember(Name="archive")]
		public System.Nullable<System.Boolean> Archive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// A paginated list of ArtifactContentInformations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedArtifactContentInformationList
	{
		
		/// <summary>
		/// The token used in retrieving the next page.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The link to the next page constructed using the continuationToken.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type ArtifactContentInformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ArtifactContentInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// A paginated list of Artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedArtifactList
	{
		
		/// <summary>
		/// The token used in retrieving the next page.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The link to the next page constructed using the continuationToken.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type Artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Artifact[] Value { get; set; }
	}
	
	/// <summary>
	/// A paginated list of Experiments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedExperimentList
	{
		
		/// <summary>
		/// The token used in retrieving the next page.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The link to the next page constructed using the continuationToken.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type Experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Experiment[] Value { get; set; }
	}
	
	/// <summary>
	/// A paginated list of Runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedRunList
	{
		
		/// <summary>
		/// The token used in retrieving the next page.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The link to the next page constructed using the continuationToken.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Run[] Value { get; set; }
	}
	
	/// <summary>
	/// A paginated list of RunMetrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PaginatedRunMetricList
	{
		
		/// <summary>
		/// The token used in retrieving the next page.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// The link to the next page constructed using the continuationToken.  If null, there are no additional pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of objects of type RunMetric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RunMetric[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunMetric
	{
		
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public string[] Cells { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdUtc")]
		public System.Nullable<System.DateTimeOffset> CreatedUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataContainerId")]
		public string DataContainerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataLocation")]
		public string DataLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricId")]
		public string MetricId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricType")]
		public string MetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numCells")]
		public System.Nullable<System.Int32> NumCells { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public MetricSchema Schema { get; set; }
	}
	
	/// <summary>
	/// The set of supported filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QueryParams
	{
		
		/// <summary>
		/// The continuation token to use for getting the next set of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		/// <summary>
		/// Allows for filtering the collection of resources.
		///The expression specified is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response.
		///See https://docs.microsoft.com/en-us/azure/search/query-odata-filter-orderby-syntax for details on the expression syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// The comma separated list of resource properties to use for sorting the requested resources.
		///Optionally, can be followed by either 'asc' or 'desc'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public string OrderBy { get; set; }
		
		/// <summary>
		/// The maximum number of items in the resource collection to be included in the result.
		///If not specified, all items are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="top")]
		public System.Nullable<System.Int32> Top { get; set; }
	}
	
	/// <summary>
	/// The details of the run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunDetails
	{
		
		/// <summary>
		/// The end time of the run in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeUtc")]
		public System.Nullable<System.DateTimeOffset> EndTimeUtc { get; set; }
		
		/// <summary>
		/// The error response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorResponse Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logFiles")]
		public System.Collections.Generic.Dictionary<string, string> LogFiles { get; set; }
		
		/// <summary>
		/// The parent of the run if the run is hierarchical.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentRunId")]
		public string ParentRunId { get; set; }
		
		/// <summary>
		/// The properties dictionary for the run. Properties are immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The run definition specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runDefinition")]
		public string RunDefinition { get; set; }
		
		/// <summary>
		/// The identifier for the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// The start time of the run in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeUtc")]
		public System.Nullable<System.DateTimeOffset> StartTimeUtc { get; set; }
		
		/// <summary>
		/// The status of the run. The Status string value maps to the RunStatus Enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The tag dictionary for the run. Tags are mutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The name of the compute target where the run is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// A list of warnings that occurred during the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public RunDetailsWarning[] Warnings { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get details of an Experiment.
		/// Get details of an Experiment with specific Experiment Id.
		/// Experiments_GetById history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentId">The identifier of the experiment.</param>
		/// <returns>Success</returns>
		public async Task<Experiment> Experiments_GetByIdAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentId)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experimentids/"+ (experimentId==null? "" : System.Uri.EscapeDataString(experimentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update details of an Experiment.
		/// Update details of an Experiment with specific Experiment Id.
		/// Experiments_Update history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentId">The identifier of the experiment.</param>
		/// <param name="requestBody">Experiment details which needs to be updated.</param>
		/// <returns>Success</returns>
		public async Task<Experiment> Experiments_UpdateAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentId, ModifyExperiment requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experimentids/"+ (experimentId==null? "" : System.Uri.EscapeDataString(experimentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete list of Tags in an Experiment.
		/// Delete list of Tags from a specific Experiment Id.
		/// Experiments_DeleteTags history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/tags
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentId">The identifier of the experiment.</param>
		/// <returns>Success</returns>
		public async Task<Experiment> Experiments_DeleteTagsAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentId)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experimentids/"+ (experimentId==null? "" : System.Uri.EscapeDataString(experimentId))+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details of an Experiment.
		/// Get details of an Experiment with specific Experiment name.
		/// Experiments_Get history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <returns>The details of the Experiment are returned successfully.</returns>
		public async Task<Experiment> Experiments_GetAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Experiment.
		/// Create a new Experiment.
		/// Experiments_Create history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <returns>The Experiment is created successfully.</returns>
		public async Task<Experiment> Experiments_CreateAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Experiment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch post event data.
		/// Post event data to a specific Run Id.
		/// Events_BatchPost history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/batch/events
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="requestBody">The batch of Event details.</param>
		/// <returns>The batch of Events is posted successfully.</returns>
		public async Task<BatchEventCommandResult> Events_BatchPostAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, BatchEventCommand requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/batch/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchEventCommandResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add or Modify a batch of Runs.
		/// Add or Modify a batch of Runs for a given experiment.
		/// Runs_BatchAddOrModify history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/batch/runs
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="requestBody">The list of requested Run Additions/modifications in an Experiment.</param>
		/// <returns>The Batch Runs are added/modified successfully.</returns>
		public async Task<BatchAddOrModifyRunResult> Runs_BatchAddOrModifyAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, BatchAddOrModifyRunRequest requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/batch/runs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchAddOrModifyRunResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Metric details.
		/// Get Metric details for a specific Metric Id.
		/// RunMetrics_Get history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/metrics/{metricId}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="metricId">The identifier for a Metric.</param>
		/// <returns>Success</returns>
		public async Task<RunMetric> RunMetrics_GetAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string metricId)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/metrics/"+ (metricId==null? "" : System.Uri.EscapeDataString(metricId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RunMetric>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Run Metrics for the specific Experiment.
		/// Get all Run Metrics for the specific Experiment with the specified query filters.
		/// RunMetrics_GetByQuery history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/metrics:query
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="MergeStrategyType">The type of merge strategy. Currently supported strategies are:
		///None - all logged values are returned as individual metrics.
		///MergeToVector - merges multiple values into a vector of values.
		///Default - the system determines the behavior.</param>
		/// <param name="MergeStrategyOptions">Controls behavior of the merge strategy in certain cases; e.g. when a metric is not merged.</param>
		/// <param name="MergeStrategySettings_Version">The strategy settings version.</param>
		/// <param name="MergeStrategySettings_SelectMetrics">Defines how to select metrics when merging them together.</param>
		/// <param name="requestBody">Query Parameters for data sorting and filtering.</param>
		/// <returns>The Run Metrics are returned successfully.</returns>
		public async Task<PaginatedRunMetricList> RunMetrics_GetByQueryAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, RunMetrics_GetByQueryMergeStrategyType MergeStrategyType, RunMetrics_GetByQueryMergeStrategyOptions MergeStrategyOptions, string MergeStrategySettings_Version, RunMetrics_GetByQueryMergeStrategySettings_SelectMetrics MergeStrategySettings_SelectMetrics, QueryParams requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/metrics:query&MergeStrategyType=" + MergeStrategyType+"&MergeStrategyOptions=" + MergeStrategyOptions+"&MergeStrategySettings.Version=" + (MergeStrategySettings_Version==null? "" : System.Uri.EscapeDataString(MergeStrategySettings_Version))+"&MergeStrategySettings.SelectMetrics=" + MergeStrategySettings_SelectMetrics;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedRunMetricList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Run details.
		/// Get Run details of a specific Run Id.
		/// Runs_Get history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <returns>The details of the Run are returned successfully.</returns>
		public async Task<Run> Runs_GetAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Run>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or Modify a Run.
		/// Add a new Run or Modify an existing Run.
		/// Runs_Patch history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="requestBody">The requested Run parameter Additions/modifications.</param>
		/// <returns>The Run is added/modified successfully.</returns>
		public async Task<Run> Runs_PatchAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CreateRun requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Run>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Artifacts in a container.
		/// Get Artifacts in container for a specific Run Id.
		/// RunArtifacts_ListInContainer history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="continuationToken">The Continuation Token.</param>
		/// <returns>The Artifacts in Container are returned successfully.</returns>
		public async Task<PaginatedArtifactList> RunArtifacts_ListInContainerAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string continuationToken)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/artifacts&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedArtifactList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get URI of an Artifact.
		/// Get URI of an Artifact for a specific Run Id.
		/// RunArtifacts_GetSasUri history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/artifacturi
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <returns>Success</returns>
		public async Task<string> RunArtifacts_GetSasUriAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/artifacts/artifacturi&path=" + (path==null? "" : System.Uri.EscapeDataString(path));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a batch of empty Artifacts.
		/// Create a batch of empty Artifacts in a specific Run.
		/// RunArtifacts_BatchCreateEmptyArtifacts history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/batch/metadata
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="requestBody">The list of artifact paths.</param>
		/// <returns>The Batch Artifacts are created successfully.</returns>
		public async Task<BatchArtifactContentInformationResult> RunArtifacts_BatchCreateEmptyArtifactsAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, ArtifactPathList requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/artifacts/batch/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchArtifactContentInformationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Artifact content information.
		/// Get Artifact content information for give Run Id.
		/// RunArtifacts_GetContentInformation history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/contentinfo
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <returns>The Artifact content information is returned successfully.</returns>
		public async Task<ArtifactContentInformation> RunArtifacts_GetContentInformationAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/artifacts/contentinfo&path=" + (path==null? "" : System.Uri.EscapeDataString(path));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArtifactContentInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artifact by Id.
		/// Get Artifact for a specific Id.
		/// RunArtifacts_GetById history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/metadata
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <returns>Success</returns>
		public async Task<Artifact> RunArtifacts_GetByIdAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/artifacts/metadata&path=" + (path==null? "" : System.Uri.EscapeDataString(path));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Artifact>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artifacts in the provided path.
		/// Get Artifacts in the provided path for a specific Run Id.
		/// RunArtifacts_ListInPath history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/path
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <param name="continuationToken">The Continuation Token.</param>
		/// <returns>Success</returns>
		public async Task<PaginatedArtifactList> RunArtifacts_ListInPathAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path, string continuationToken)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/artifacts/path&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedArtifactList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get SAS of an Artifact.
		/// Get SAS of an Artifact in the specified path.
		/// RunArtifacts_ListSasByPrefix history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/artifacts/prefix/contentinfo
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="path">The Artifact Path.</param>
		/// <param name="continuationToken">The Continuation Token.</param>
		/// <returns>Success</returns>
		public async Task<PaginatedArtifactContentInformationList> RunArtifacts_ListSasByPrefixAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path, string continuationToken)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/artifacts/prefix/contentinfo&path=" + (path==null? "" : System.Uri.EscapeDataString(path))+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedArtifactContentInformationList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post Metrics to a Run.
		/// Post Metrics to a specific Run Id.
		/// RunMetrics_BatchPost history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/batch/metrics
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier for a run.</param>
		/// <param name="requestBody">Details of the Metrics which will be added to the Run Id.</param>
		/// <returns>The Run Metrics are posted successfully.</returns>
		public async Task RunMetrics_BatchPostAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BatchMetric requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/batch/metrics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get details of all child runs.
		/// Get details of all child runs for the specified Run Id with the specified filters.
		/// Runs_GetChild history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/children
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="filter">Allows for filtering the collection of resources.
		///The expression specified is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response.</param>
		/// <param name="continuationtoken">The continuation token to use for getting the next set of resources.</param>
		/// <param name="orderby">The list of resource properties to use for sorting the requested resources.</param>
		/// <param name="sortorder">The sort order of the returned resources. Not used, specify asc or desc after each property name in the OrderBy parameter.</param>
		/// <param name="top">The maximum number of items in the resource collection to be included in the result.
		///If not specified, all items are returned.</param>
		/// <param name="count">Whether to include a count of the matching resources along with the resources returned in the response.</param>
		/// <returns>The details of the child Runs are returned successfully.</returns>
		public async Task<PaginatedRunList> Runs_GetChildAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string filter, string continuationtoken, string[] orderby, Runs_GetChildSortorder sortorder, int top, bool count)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/children&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$continuationtoken=" + (continuationtoken==null? "" : System.Uri.EscapeDataString(continuationtoken))+"&"+string.Join("&", orderby.Select(z => $"$orderby={System.Uri.EscapeDataString(z.ToString())}"))+"&$sortorder=" + sortorder+"&$top="+top+"&$count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedRunList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Run Details.
		/// Get Run Details for a specific Run Id.
		/// Runs_GetDetails history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/details
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <returns>The details of the Run are returned successfully.</returns>
		public async Task<RunDetails> Runs_GetDetailsAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RunDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post event data.
		/// Post event data to a specific Run Id.
		/// Events_Post history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/events
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <param name="requestBody">The Event details.</param>
		/// <returns>The Event is posted successfully.</returns>
		public async Task Events_PostAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BaseEvent requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Post Metric to a Run.
		/// Post a Metric to a specific Run Id.
		/// RunMetrics_Post history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/metrics
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier for a run.</param>
		/// <param name="requestBody">Details of the metric which will be added to the Run Id.</param>
		/// <returns>The Run Metric is posted successfully.</returns>
		public async Task RunMetrics_PostAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, Metric requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/metrics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete list of Tags in a Run.
		/// Delete list of Tags from a specific Run Id.
		/// Runs_DeleteTags history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/tags
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The identifier of the Run.</param>
		/// <returns>Success</returns>
		public async Task<Run> Runs_DeleteTagsAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Run>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Runs for a specific Experiment.
		/// Get all Runs for a specific Experiment with the specified query filters.
		/// Runs_GetByQuery history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs:query
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="requestBody">Query parameters for data sorting and filtering.</param>
		/// <returns>Success</returns>
		public async Task<PaginatedRunList> Runs_GetByQueryAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, QueryParams requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runs:query";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedRunList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all Experiments in a specific workspace.
		/// Get all experiments in a specific workspace with the specified query filters.
		/// Experiments_GetByQuery history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments:query
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="requestBody">Query parameters for data sorting and filtering.</param>
		/// <returns>Success</returns>
		public async Task<PaginatedExperimentList> Experiments_GetByQueryAsync(string subscriptionId, string resourceGroupName, string workspaceName, QueryParams requestBody)
		{
			var requestUri = "history/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments:query";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaginatedExperimentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum RunMetrics_GetByQueryMergeStrategyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MergeToVector = 2,
	}
	
	public enum RunMetrics_GetByQueryMergeStrategyOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReportUnmergedMetricsValues = 1,
	}
	
	public enum RunMetrics_GetByQueryMergeStrategySettings_SelectMetrics
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SelectAll = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SelectByFirstValueSchema = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SelectByFirstValueSchemaMergeNumericValues = 2,
	}
	
	public enum Runs_GetChildSortorder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Desc = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
