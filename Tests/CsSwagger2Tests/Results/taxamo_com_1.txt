//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class C
	{
		
		/// <summary>
		/// Date for stats in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public string Day { get; set; }
		
		/// <summary>
		/// Date for stats in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day_raw")]
		public string Day_raw { get; set; }
		
		/// <summary>
		/// Transaction status (C or N).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class N
	{
		
		/// <summary>
		/// Date for stats in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public string Day { get; set; }
		
		/// <summary>
		/// Date for stats in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day_raw")]
		public string Day_raw { get; set; }
		
		/// <summary>
		/// Transaction status (C or N).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Additional_currencies
	{
		
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public Additional_currency Invoice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Additional_currency
	{
		
		/// <summary>
		/// Amount (w/o TAX) in designated currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// 3-letter ISO currency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Foreign exchange rate used in calculation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fx_rate")]
		public System.Nullable<System.Double> Fx_rate { get; set; }
		
		/// <summary>
		/// Tax amount in designated currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Double> Tax_amount { get; set; }
		
		/// <summary>
		/// Total amount in designated currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Double> Total_amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class By_country
	{
		
		/// <summary>
		/// Three-letter ISO currency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_code")]
		public string Tax_country_code { get; set; }
		
		/// <summary>
		/// Country name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_name")]
		public string Tax_country_name { get; set; }
		
		/// <summary>
		/// Tax amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class By_status
	{
		
		/// <summary>
		/// Confirmed transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public C[] C { get; set; }
		
		/// <summary>
		/// New transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public N[] N { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class By_taxation_type
	{
		
		/// <summary>
		/// Number of tax deducted transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deducted_count")]
		public System.Nullable<System.Double> Deducted_count { get; set; }
		
		/// <summary>
		/// Total EU B2B transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eu_b2b")]
		public System.Nullable<System.Int32> Eu_b2b { get; set; }
		
		/// <summary>
		/// Total EU Taxed transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eu_taxed")]
		public System.Nullable<System.Int32> Eu_taxed { get; set; }
		
		/// <summary>
		/// Number of taxed transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxed_count")]
		public System.Nullable<System.Double> Taxed_count { get; set; }
		
		/// <summary>
		/// Total number of transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions_count")]
		public System.Nullable<System.Double> Transactions_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CalculateSimpleTaxIn
	{
		
		/// <summary>
		/// Amount. Required if total amount or both unit price and quantity are not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Billing two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_country_code")]
		public string Billing_country_code { get; set; }
		
		/// <summary>
		/// First 6 digits of buyer's credit card prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_credit_card_prefix")]
		public string Buyer_credit_card_prefix { get; set; }
		
		/// <summary>
		///  Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tax_number")]
		public string Buyer_tax_number { get; set; }
		
		/// <summary>
		/// Currency code for transaction - e.g. EUR.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force_country_code")]
		public string Force_country_code { get; set; }
		
		/// <summary>
		/// Invoice address/postal_code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_address_city")]
		public string Invoice_address_city { get; set; }
		
		/// <summary>
		/// Invoice address/postal_code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_address_postal_code")]
		public string Invoice_address_postal_code { get; set; }
		
		/// <summary>
		/// Invoice address/region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_address_region")]
		public string Invoice_address_region { get; set; }
		
		/// <summary>
		/// Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_date")]
		public string Order_date { get; set; }
		
		/// <summary>
		/// Product type, according to dictionary /dictionaries/product_types. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public string Product_type { get; set; }
		
		/// <summary>
		/// Quantity Defaults to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_deducted")]
		public System.Nullable<System.Boolean> Tax_deducted { get; set; }
		
		/// <summary>
		/// Total amount. Required if amount or both unit price and quantity are not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Double> Total_amount { get; set; }
		
		/// <summary>
		/// Unit price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit_price")]
		public System.Nullable<System.Double> Unit_price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CalculateSimpleTaxOut
	{
		
		/// <summary>
		/// Fields required for transaction storage (can be added later - it's up to merchant software). Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage_required_fields")]
		public Storage_required_fields[] Storage_required_fields { get; set; }
		
		/// <summary>
		/// Fields required for tax calculation. Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_required_fields")]
		public Tax_required_fields[] Tax_required_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Storage_required_fields
	{
		
		/// <summary>
		/// Required field name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field_name")]
		public string Field_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Tax_required_fields
	{
		
		/// <summary>
		/// Required field name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field_name")]
		public string Field_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Transaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="additional_currencies")]
		public Additional_currencies Additional_currencies { get; set; }
		
		/// <summary>
		/// Amount of transaction without tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Billing two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_country_code")]
		public string Billing_country_code { get; set; }
		
		/// <summary>
		/// First 6 digits of buyer's credit card prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_credit_card_prefix")]
		public string Buyer_credit_card_prefix { get; set; }
		
		/// <summary>
		/// Buyer's declared email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email")]
		public string Buyer_email { get; set; }
		
		/// <summary>
		/// IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_ip")]
		public string Buyer_ip { get; set; }
		
		/// <summary>
		/// Buyer's name - first name and last name or company name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_name")]
		public string Buyer_name { get; set; }
		
		/// <summary>
		///  Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tax_number")]
		public string Buyer_tax_number { get; set; }
		
		/// <summary>
		/// If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant's country), tax number doesn't get validated in that case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tax_number_valid")]
		public System.Nullable<System.Boolean> Buyer_tax_number_valid { get; set; }
		
		/// <summary>
		/// Additional information about the transaction - for example if the evidence has been amended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Date and time of transaction confirmation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirm_timestamp")]
		public string Confirm_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public Countries Countries { get; set; }
		
		/// <summary>
		/// Date and time of transaction creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="create_timestamp")]
		public string Create_timestamp { get; set; }
		
		/// <summary>
		/// Currency code for transaction - e.g. EUR.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Custom data related to transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_data")]
		public string Custom_data { get; set; }
		
		/// <summary>
		/// Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public Custom_fields[] Custom_fields { get; set; }
		
		/// <summary>
		/// Custom identifier provided upon transaction creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_id")]
		public string Custom_id { get; set; }
		
		/// <summary>
		/// Free-form field for storing customer id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// How much tax has been deducted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deducted_tax_amount")]
		public System.Nullable<System.Double> Deducted_tax_amount { get; set; }
		
		/// <summary>
		/// Transaction description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public Evidence Evidence { get; set; }
		
		/// <summary>
		/// Transaction external key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_key")]
		public string External_key { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force_country_code")]
		public string Force_country_code { get; set; }
		
		/// <summary>
		/// Set to true if transaction has only informative lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fully_informative")]
		public System.Nullable<System.Boolean> Fully_informative { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice_address")]
		public Invoice_address Invoice_address { get; set; }
		
		/// <summary>
		/// Invoice date of issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_date")]
		public string Invoice_date { get; set; }
		
		/// <summary>
		/// Invoice image URL - provided by Taxamo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_image_url")]
		public string Invoice_image_url { get; set; }
		
		/// <summary>
		/// Invoice number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_number")]
		public string Invoice_number { get; set; }
		
		/// <summary>
		/// Invoice place of issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_place")]
		public string Invoice_place { get; set; }
		
		/// <summary>
		/// Id generated by taxamo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Transaction kind: eu-b2c, eu-b2b, domestic, untaxed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Is the transaction created manually - using private token. In manual mode, it is the merchant who calculates tax country and validates evidence. If you need API to do that when accessing the API with private token, just skip the 'manual' flag or use false value there and provide customer's ip address through buyer_ip field. Manual mode is also used when using original_transaction_key field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manual")]
		public System.Nullable<System.Boolean> Manual { get; set; }
		
		/// <summary>
		/// Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_date")]
		public string Order_date { get; set; }
		
		/// <summary>
		/// Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_transaction_key")]
		public string Original_transaction_key { get; set; }
		
		/// <summary>
		/// Refunded tax amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_tax_amount")]
		public System.Nullable<System.Double> Refunded_tax_amount { get; set; }
		
		/// <summary>
		/// Total amount refunde (including tax).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_total_amount")]
		public System.Nullable<System.Double> Refunded_total_amount { get; set; }
		
		/// <summary>
		/// Transaction source software - e.g. plugin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Sub account identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub_account_id")]
		public string Sub_account_id { get; set; }
		
		/// <summary>
		/// Supply date in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supply_date")]
		public string Supply_date { get; set; }
		
		/// <summary>
		/// Tax amount of transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Double> Tax_amount { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_code")]
		public string Tax_country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax_data")]
		public Tax_data_schema Tax_data { get; set; }
		
		/// <summary>
		/// If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_deducted")]
		public System.Nullable<System.Boolean> Tax_deducted { get; set; }
		
		/// <summary>
		/// To which entity is the tax due.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_entity_name")]
		public string Tax_entity_name { get; set; }
		
		/// <summary>
		/// Tax number service identifier - if available for a given region and the region is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_number_service")]
		public string Tax_number_service { get; set; }
		
		/// <summary>
		/// Is tax calculation supported for a detected tax location?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_supported")]
		public System.Nullable<System.Boolean> Tax_supported { get; set; }
		
		/// <summary>
		/// Timezone name for tax transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_timezone")]
		public string Tax_timezone { get; set; }
		
		/// <summary>
		/// Was this transaction created in test mode?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="test")]
		public System.Nullable<System.Boolean> Test { get; set; }
		
		/// <summary>
		/// Total amount of transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Double> Total_amount { get; set; }
		
		/// <summary>
		/// Transaction lines.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_lines")]
		public Transaction_lines[] Transaction_lines { get; set; }
		
		/// <summary>
		/// Verification token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Countries
	{
		
		[System.Runtime.Serialization.DataMember(Name="by_2003_rules")]
		public Country_schema By_2003_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_billing")]
		public Country_schema By_billing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_cc")]
		public Country_schema By_cc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_ip")]
		public Country_schema By_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_tax_number")]
		public Country_schema By_tax_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_token")]
		public Country_schema By_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detected")]
		public Country_schema Detected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forced")]
		public Country_schema Forced { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guessed_from_ip")]
		public Country_schema Guessed_from_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_commercially_relevant_info")]
		public Country_schema Other_commercially_relevant_info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self_declaration")]
		public Country_schema Self_declaration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Country_schema
	{
		
		/// <summary>
		/// List of phone number calling codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callingCode")]
		public string[] CallingCode { get; set; }
		
		/// <summary>
		/// Two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cca2")]
		public string Cca2 { get; set; }
		
		/// <summary>
		/// Three letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cca3")]
		public string Cca3 { get; set; }
		
		/// <summary>
		/// Country ISO 3-digit code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ccn3")]
		public string Ccn3 { get; set; }
		
		/// <summary>
		/// Two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Three letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code_long")]
		public string Code_long { get; set; }
		
		/// <summary>
		/// Country ISO 3-digit code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codenum")]
		public string Codenum { get; set; }
		
		/// <summary>
		/// List of currencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string[] Currency { get; set; }
		
		/// <summary>
		/// Country name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// VAT number country code. Important for Greece.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_number_country_code")]
		public string Tax_number_country_code { get; set; }
		
		/// <summary>
		/// Tax region code - e.g. EU, US, NO, JP...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_region")]
		public string Tax_region { get; set; }
		
		/// <summary>
		/// True if tax calculation supported for this country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_supported")]
		public System.Nullable<System.Boolean> Tax_supported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Custom_fields
	{
		
		/// <summary>
		/// Field's key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Field's value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Evidence
	{
		
		[System.Runtime.Serialization.DataMember(Name="by_2003_rules")]
		public Evidence_schema By_2003_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_billing")]
		public Evidence_schema By_billing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_cc")]
		public Evidence_schema By_cc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_ip")]
		public Evidence_schema By_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_payment_method")]
		public Evidence_schema By_payment_method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_tax_number")]
		public Evidence_schema By_tax_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_token")]
		public Evidence_schema By_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forced")]
		public Evidence_schema Forced { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guessed_from_ip")]
		public Evidence_schema Guessed_from_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_commercially_relevant_info")]
		public Evidence_schema Other_commercially_relevant_info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self_declaration")]
		public Evidence_schema Self_declaration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Evidence_schema
	{
		
		/// <summary>
		/// Type of evidence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_type")]
		public string Evidence_type { get; set; }
		
		/// <summary>
		/// Value provided as evidence - for example IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evidence_value")]
		public string Evidence_value { get; set; }
		
		/// <summary>
		/// Country code that was resolved using this evidence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolved_country_code")]
		public string Resolved_country_code { get; set; }
		
		/// <summary>
		/// If the evidence was used to match the actual country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="used")]
		public System.Nullable<System.Boolean> Used { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Invoice_address
	{
		
		/// <summary>
		/// Address details - for example apartament number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_detail")]
		public string Address_detail { get; set; }
		
		/// <summary>
		/// Building number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="building_number")]
		public string Building_number { get; set; }
		
		/// <summary>
		/// City name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// 2-letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeform_address")]
		public string Freeform_address { get; set; }
		
		/// <summary>
		/// Postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// Region, for United States - state code - e.g. NJ.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		///  Street name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_name")]
		public string Street_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Tax_data_schema
	{
		
		[System.Runtime.Serialization.DataMember(Name="us_tax_exemption_certificate")]
		public Us_tax_exemption_certificate_schema Us_tax_exemption_certificate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Us_tax_exemption_certificate_schema
	{
		
		/// <summary>
		/// The exemption certificate number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate_id")]
		public string Certificate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public Us_tax_exemption_certificate_details_schema Detail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Us_tax_exemption_certificate_details_schema
	{
		
		/// <summary>
		/// List of states where the certificate is valid.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exempt_states")]
		public Us_tax_exempt_state[] Exempt_states { get; set; }
		
		/// <summary>
		/// Purchaser's first address line.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_address1")]
		public string Purchaser_address1 { get; set; }
		
		/// <summary>
		/// Purchaser's second address line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaser_address2")]
		public string Purchaser_address2 { get; set; }
		
		/// <summary>
		/// Purchaser business type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_business_type")]
		public string Purchaser_business_type { get; set; }
		
		/// <summary>
		/// If business type is other, a short description must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaser_business_type_other_value")]
		public string Purchaser_business_type_other_value { get; set; }
		
		/// <summary>
		/// Purchaser's city.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_city")]
		public string Purchaser_city { get; set; }
		
		/// <summary>
		/// The reason for exemption reason.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_exemption_reason")]
		public string Purchaser_exemption_reason { get; set; }
		
		/// <summary>
		/// The value of exemption reason.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_exemption_reason_value")]
		public string Purchaser_exemption_reason_value { get; set; }
		
		/// <summary>
		/// Purchaser's first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_first_name")]
		public string Purchaser_first_name { get; set; }
		
		/// <summary>
		/// Purchaser's last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_last_name")]
		public string Purchaser_last_name { get; set; }
		
		/// <summary>
		/// Purchaser's state.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_state")]
		public string Purchaser_state { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_tax_id")]
		public Us_tax_id Purchaser_tax_id { get; set; }
		
		/// <summary>
		/// Purchaser's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaser_title")]
		public string Purchaser_title { get; set; }
		
		/// <summary>
		/// Purchaser's zip code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaser_zip")]
		public string Purchaser_zip { get; set; }
		
		/// <summary>
		/// Set to true if this certificate is valid for single purchase only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="single_purchase")]
		public System.Nullable<System.Boolean> Single_purchase { get; set; }
		
		/// <summary>
		/// Purchase/order identifier for single purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="single_purchase_order_identifier")]
		public string Single_purchase_order_identifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Us_tax_exempt_state
	{
		
		/// <summary>
		/// Identifier for exemption reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier_for_exemption_reason")]
		public string Identifier_for_exemption_reason { get; set; }
		
		/// <summary>
		/// Exemption reason
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason_for_exemption")]
		public string Reason_for_exemption { get; set; }
		
		/// <summary>
		/// Two character state abbreviation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state_abbr")]
		public string State_abbr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Us_tax_id
	{
		
		/// <summary>
		/// State of issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_of_issue")]
		public string State_of_issue { get; set; }
		
		/// <summary>
		/// Tax ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_id")]
		public string Tax_id { get; set; }
		
		/// <summary>
		/// Tax id type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tax_id_type")]
		public string Tax_id_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Transaction_lines
	{
		
		[System.Runtime.Serialization.DataMember(Name="additional_currencies")]
		public Additional_currencies Additional_currencies { get; set; }
		
		/// <summary>
		/// Amount. Required if total amount or both unit price and quantity are not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public Custom_fields[] Custom_fields { get; set; }
		
		/// <summary>
		/// Custom id, provided by ecommerce software.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_id")]
		public string Custom_id { get; set; }
		
		/// <summary>
		/// Deducted tax amount, calculated by taxmo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deducted_tax_amount")]
		public System.Nullable<System.Double> Deducted_tax_amount { get; set; }
		
		/// <summary>
		/// Deducted tax rate, calculated by taxamo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deducted_tax_rate")]
		public System.Nullable<System.Double> Deducted_tax_rate { get; set; }
		
		/// <summary>
		/// Line contents description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Generated id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		/// <summary>
		/// If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="informative")]
		public System.Nullable<System.Boolean> Informative { get; set; }
		
		/// <summary>
		/// Generated line key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_key")]
		public string Line_key { get; set; }
		
		/// <summary>
		/// Internal product code, used for invoicing for example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_code")]
		public string Product_code { get; set; }
		
		/// <summary>
		/// External product tax code for a line, for example TIC in US Sales tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_tax_code")]
		public string Product_tax_code { get; set; }
		
		/// <summary>
		/// Product type, according to dictionary /dictionaries/product_types. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public string Product_type { get; set; }
		
		/// <summary>
		/// Quantity Defaults to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Refunded tax amount, calculated by taxmo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_tax_amount")]
		public System.Nullable<System.Double> Refunded_tax_amount { get; set; }
		
		/// <summary>
		/// Refunded total amount, calculated by taxmo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_total_amount")]
		public System.Nullable<System.Double> Refunded_total_amount { get; set; }
		
		/// <summary>
		/// Date of supply in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supply_date")]
		public string Supply_date { get; set; }
		
		/// <summary>
		/// Tax amount, calculated by taxamo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Double> Tax_amount { get; set; }
		
		/// <summary>
		/// Tax name, calculated by taxamo.  Can be overwritten when informative field is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_name")]
		public string Tax_name { get; set; }
		
		/// <summary>
		/// Tax rate, calculated by taxamo. Must be provided when informative field is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_rate")]
		public System.Nullable<System.Double> Tax_rate { get; set; }
		
		/// <summary>
		/// Total amount. Required if amount or both unit price and quantity are not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Double> Total_amount { get; set; }
		
		/// <summary>
		/// Unit of measure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit_of_measure")]
		public string Unit_of_measure { get; set; }
		
		/// <summary>
		/// Unit price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit_price")]
		public System.Nullable<System.Double> Unit_price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CalculateTaxIn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Input_transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Input_transaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="additional_currencies")]
		public Additional_currencies Additional_currencies { get; set; }
		
		/// <summary>
		/// Billing two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_country_code")]
		public string Billing_country_code { get; set; }
		
		/// <summary>
		/// First 6 digits of buyer's credit card prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_credit_card_prefix")]
		public string Buyer_credit_card_prefix { get; set; }
		
		/// <summary>
		/// Buyer's declared email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email")]
		public string Buyer_email { get; set; }
		
		/// <summary>
		/// IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_ip")]
		public string Buyer_ip { get; set; }
		
		/// <summary>
		/// Buyer's name - first name and last name or company name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_name")]
		public string Buyer_name { get; set; }
		
		/// <summary>
		///  Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tax_number")]
		public string Buyer_tax_number { get; set; }
		
		/// <summary>
		/// Additional information about the transaction - for example if the evidence has been amended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Currency code for transaction - e.g. EUR.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Custom data related to transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_data")]
		public string Custom_data { get; set; }
		
		/// <summary>
		/// Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public Custom_fields[] Custom_fields { get; set; }
		
		/// <summary>
		/// Custom identifier provided upon transaction creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_id")]
		public string Custom_id { get; set; }
		
		/// <summary>
		/// Free-form field for storing customer id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// Transaction description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public Evidence Evidence { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force_country_code")]
		public string Force_country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice_address")]
		public Invoice_address Invoice_address { get; set; }
		
		/// <summary>
		/// Invoice date of issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_date")]
		public string Invoice_date { get; set; }
		
		/// <summary>
		/// Invoice number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_number")]
		public string Invoice_number { get; set; }
		
		/// <summary>
		/// Invoice place of issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_place")]
		public string Invoice_place { get; set; }
		
		/// <summary>
		/// Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_date")]
		public string Order_date { get; set; }
		
		/// <summary>
		/// Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_transaction_key")]
		public string Original_transaction_key { get; set; }
		
		/// <summary>
		/// Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Sub account identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub_account_id")]
		public string Sub_account_id { get; set; }
		
		/// <summary>
		/// Supply date in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supply_date")]
		public string Supply_date { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_code")]
		public string Tax_country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax_data")]
		public Tax_data_schema Tax_data { get; set; }
		
		/// <summary>
		/// True if the transaction is deducted from tax and no tax is applied (it is untaxed). Either set automatically when VAT number validates with VIES correctly, but can also be provided in manual mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_deducted")]
		public System.Nullable<System.Boolean> Tax_deducted { get; set; }
		
		/// <summary>
		/// Transaction lines.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_lines")]
		public Input_transaction_line[] Transaction_lines { get; set; }
		
		/// <summary>
		/// Verification token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Input_transaction_line
	{
		
		/// <summary>
		/// Amount. Required if total amount or both unit price and quantity are not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public Custom_fields[] Custom_fields { get; set; }
		
		/// <summary>
		/// Custom id, provided by ecommerce software.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="custom_id")]
		public string Custom_id { get; set; }
		
		/// <summary>
		/// Deducted tax rate, calculated by taxamo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deducted_tax_rate")]
		public System.Nullable<System.Double> Deducted_tax_rate { get; set; }
		
		/// <summary>
		/// Line contents description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="informative")]
		public System.Nullable<System.Boolean> Informative { get; set; }
		
		/// <summary>
		/// Generated line key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_key")]
		public string Line_key { get; set; }
		
		/// <summary>
		/// Internal product code, used for invoicing for example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_code")]
		public string Product_code { get; set; }
		
		/// <summary>
		/// External product tax code for a line, for example TIC in US Sales tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_tax_code")]
		public string Product_tax_code { get; set; }
		
		/// <summary>
		/// Product type, according to dictionary /dictionaries/product_types. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public string Product_type { get; set; }
		
		/// <summary>
		/// Quantity Defaults to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Date of supply in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supply_date")]
		public string Supply_date { get; set; }
		
		/// <summary>
		/// Tax name, calculated by taxamo.  Can be overwritten when informative field is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_name")]
		public string Tax_name { get; set; }
		
		/// <summary>
		/// Tax rate, calculated by taxamo. Must be provided when informative field is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_rate")]
		public System.Nullable<System.Double> Tax_rate { get; set; }
		
		/// <summary>
		/// Total amount. Required if amount or both unit price and quantity are not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Double> Total_amount { get; set; }
		
		/// <summary>
		/// Unit of measure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit_of_measure")]
		public string Unit_of_measure { get; set; }
		
		/// <summary>
		/// Unit price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit_price")]
		public System.Nullable<System.Double> Unit_price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CalculateTaxLocationIn
	{
		
		/// <summary>
		/// Billing two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_country_code")]
		public string Billing_country_code { get; set; }
		
		/// <summary>
		/// First 6 digits of buyer's credit card prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_credit_card_prefix")]
		public string Buyer_credit_card_prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CalculateTaxLocationOut
	{
		
		/// <summary>
		/// Billing two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_country_code")]
		public string Billing_country_code { get; set; }
		
		/// <summary>
		/// First 6 digits of buyer's credit card prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_credit_card_prefix")]
		public string Buyer_credit_card_prefix { get; set; }
		
		/// <summary>
		/// IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_ip")]
		public string Buyer_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public Countries Countries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public Evidence Evidence { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_code")]
		public string Tax_country_code { get; set; }
		
		/// <summary>
		/// If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_deducted")]
		public System.Nullable<System.Boolean> Tax_deducted { get; set; }
		
		/// <summary>
		/// Is tax calculation supported for a detected tax location?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_supported")]
		public System.Nullable<System.Boolean> Tax_supported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CalculateTaxOut
	{
		
		/// <summary>
		/// Fields required for transaction storage (can be added later - it's up to merchant software). Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage_required_fields")]
		public Storage_required_fields[] Storage_required_fields { get; set; }
		
		/// <summary>
		/// Fields required for tax calculation. Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_required_fields")]
		public Tax_required_fields[] Tax_required_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CancelTransactionOut
	{
		
		/// <summary>
		/// Was operation successful?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CapturePaymentOut
	{
		
		/// <summary>
		/// Was the operation successful?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfirmTransactionIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Input_transaction_update Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Input_transaction_update
	{
		
		[System.Runtime.Serialization.DataMember(Name="additional_currencies")]
		public Additional_currencies Additional_currencies { get; set; }
		
		/// <summary>
		/// Billing two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_country_code")]
		public string Billing_country_code { get; set; }
		
		/// <summary>
		/// First 6 digits of buyer's credit card prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_credit_card_prefix")]
		public string Buyer_credit_card_prefix { get; set; }
		
		/// <summary>
		/// Buyer's declared email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email")]
		public string Buyer_email { get; set; }
		
		/// <summary>
		/// IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_ip")]
		public string Buyer_ip { get; set; }
		
		/// <summary>
		/// Buyer's name - first name and last name or company name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_name")]
		public string Buyer_name { get; set; }
		
		/// <summary>
		///  Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tax_number")]
		public string Buyer_tax_number { get; set; }
		
		/// <summary>
		/// Additional information about the transaction - for example if the evidence has been amended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Currency code for transaction - e.g. EUR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Custom data related to transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_data")]
		public string Custom_data { get; set; }
		
		/// <summary>
		/// Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public Custom_fields[] Custom_fields { get; set; }
		
		/// <summary>
		/// Custom identifier provided upon transaction creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_id")]
		public string Custom_id { get; set; }
		
		/// <summary>
		/// Free-form field for storing customer id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// Transaction description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public Evidence Evidence { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force_country_code")]
		public string Force_country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice_address")]
		public Invoice_address Invoice_address { get; set; }
		
		/// <summary>
		/// Invoice date of issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_date")]
		public string Invoice_date { get; set; }
		
		/// <summary>
		/// Invoice number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_number")]
		public string Invoice_number { get; set; }
		
		/// <summary>
		/// Invoice place of issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_place")]
		public string Invoice_place { get; set; }
		
		/// <summary>
		/// Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_date")]
		public string Order_date { get; set; }
		
		/// <summary>
		/// Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_transaction_key")]
		public string Original_transaction_key { get; set; }
		
		/// <summary>
		/// Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Sub account identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub_account_id")]
		public string Sub_account_id { get; set; }
		
		/// <summary>
		/// Supply date in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supply_date")]
		public string Supply_date { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_code")]
		public string Tax_country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax_data")]
		public Tax_data_schema Tax_data { get; set; }
		
		/// <summary>
		/// True if the transaction is deducted from tax and no tax is applied (it is untaxed). Either set automatically when VAT number validates with VIES correctly, but can also be provided in manual mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_deducted")]
		public System.Nullable<System.Boolean> Tax_deducted { get; set; }
		
		/// <summary>
		/// Transaction lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_lines")]
		public Input_transaction_line[] Transaction_lines { get; set; }
		
		/// <summary>
		/// Verification token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConfirmTransactionOut
	{
		
		/// <summary>
		/// Fields required for transaction storage (can be added later - it's up to merchant software). Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage_required_fields")]
		public Storage_required_fields[] Storage_required_fields { get; set; }
		
		/// <summary>
		/// Fields required for tax calculation. Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_required_fields")]
		public Tax_required_fields[] Tax_required_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Country
	{
		
		/// <summary>
		/// List of phone number calling codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callingCode")]
		public string[] CallingCode { get; set; }
		
		/// <summary>
		/// Two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cca2")]
		public string Cca2 { get; set; }
		
		/// <summary>
		/// Three letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cca3")]
		public string Cca3 { get; set; }
		
		/// <summary>
		/// Country ISO 3-digit code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ccn3")]
		public string Ccn3 { get; set; }
		
		/// <summary>
		/// Two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Three letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code_long")]
		public string Code_long { get; set; }
		
		/// <summary>
		/// Country ISO 3-digit code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codenum")]
		public string Codenum { get; set; }
		
		/// <summary>
		/// List of currencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string[] Currency { get; set; }
		
		/// <summary>
		/// Country name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// VAT number country code. Important for Greece.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_number_country_code")]
		public string Tax_number_country_code { get; set; }
		
		/// <summary>
		/// Tax region code - e.g. EU, US, NO, JP...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_region")]
		public string Tax_region { get; set; }
		
		/// <summary>
		/// True if tax calculation supported for this country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_supported")]
		public System.Nullable<System.Boolean> Tax_supported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreatePaymentIn
	{
		
		/// <summary>
		/// Amount that has been paid. Use negative value to register refunds.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// Additional payment information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_information")]
		public string Payment_information { get; set; }
		
		/// <summary>
		/// When the payment was received in yyyy-MM-dd'T'HH:mm:ss(.SSS)'Z' format (24 hour, UTC timezone). Defaults to current date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_timestamp")]
		public string Payment_timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreatePaymentOut
	{
		
		/// <summary>
		/// Was the operation successful?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateRefundIn
	{
		
		/// <summary>
		/// Amount (without tax) to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Line custom identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_id")]
		public string Custom_id { get; set; }
		
		/// <summary>
		/// Line identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_key")]
		public string Line_key { get; set; }
		
		/// <summary>
		/// Refund reason, displayed on the credit note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_reason")]
		public string Refund_reason { get; set; }
		
		/// <summary>
		/// Total amount, including tax, to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Double> Total_amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateRefundOut
	{
		
		/// <summary>
		/// Total tax amount, that was refunded for this line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_tax_amount")]
		public System.Nullable<System.Double> Refunded_tax_amount { get; set; }
		
		/// <summary>
		/// Total amount, including tax, that was refunded for this line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_total_amount")]
		public System.Nullable<System.Double> Refunded_total_amount { get; set; }
		
		/// <summary>
		/// Calculated tax amount, that was refunded in this call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Double> Tax_amount { get; set; }
		
		/// <summary>
		/// Total amount, including tax, that was refunded in this call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Double> Total_amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateSMSTokenIn
	{
		
		/// <summary>
		/// Two letter ISO country code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// Recipient phone number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient")]
		public string Recipient { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateSMSTokenOut
	{
		
		/// <summary>
		/// Always set to true. Success means that the message has been queued for delivery. In some cases message may be undelivered at the end, e.g. mobile number is blacklisted. API errors are signalled with appropriate error codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateTransactionIn
	{
		
		/// <summary>
		/// Use manual mode, bypassing country detection. Only allowed with private token. This flag allows to use original_transaction_key field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manual_mode")]
		public System.Nullable<System.Boolean> Manual_mode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Input_transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateTransactionOut
	{
		
		/// <summary>
		/// Fields required for transaction storage (can be added later - it's up to merchant software). Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage_required_fields")]
		public Storage_required_fields[] Storage_required_fields { get; set; }
		
		/// <summary>
		/// Fields required for tax calculation. Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_required_fields")]
		public Tax_required_fields[] Tax_required_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Currency_schema
	{
		
		/// <summary>
		/// Currency 3-letter ISO code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Currency description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Currency 3-letter ISO code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isocode")]
		public string Isocode { get; set; }
		
		/// <summary>
		/// Currency iso numeric code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isonum")]
		public System.Nullable<System.Int32> Isonum { get; set; }
		
		/// <summary>
		/// Number of minor units for currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minorunits")]
		public System.Nullable<System.Int32> Minorunits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmailInvoiceIn
	{
		
		/// <summary>
		/// Email to send the invoice. If not provided, transaction.buyer_email will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email")]
		public string Buyer_email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmailInvoiceOut
	{
		
		/// <summary>
		/// Was operation successful?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmailRefundIn
	{
		
		/// <summary>
		/// Email to send the credit note/refund note. If not provided, transaction.buyer_email will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email")]
		public string Buyer_email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EmailRefundOut
	{
		
		/// <summary>
		/// Was operation successful?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetCountriesDictIn
	{
		
		/// <summary>
		/// Should only countries with tax supported be listed?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_supported")]
		public System.Nullable<System.Boolean> Tax_supported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetCountriesDictOut
	{
		
		/// <summary>
		/// Countries dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dictionary")]
		public Country_schema[] Dictionary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetCurrenciesDictOut
	{
		
		/// <summary>
		/// Currency dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dictionary")]
		public Currency_schema[] Dictionary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetDailySettlementStatsIn
	{
		
		/// <summary>
		/// Date from in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public string Date_from { get; set; }
		
		/// <summary>
		/// Date to in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public string Date_to { get; set; }
		
		/// <summary>
		/// Interval type - day, week, month.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public string Interval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetDailySettlementStatsOut
	{
		
		/// <summary>
		/// Daily settlement stats
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settlement_daily")]
		public Settlement_daily_stats_schema[] Settlement_daily { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Settlement_daily_stats_schema
	{
		
		/// <summary>
		/// B2B transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="b2b")]
		public System.Nullable<System.Int32> B2b { get; set; }
		
		/// <summary>
		/// B2C transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="b2c")]
		public System.Nullable<System.Int32> B2c { get; set; }
		
		/// <summary>
		/// Total transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Date for stats in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public string Day { get; set; }
		
		/// <summary>
		/// Date for stats in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day_raw")]
		public string Day_raw { get; set; }
		
		/// <summary>
		/// Total EU B2B transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eu_b2b")]
		public System.Nullable<System.Int32> Eu_b2b { get; set; }
		
		/// <summary>
		/// Total EU Taxed transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eu_taxed")]
		public System.Nullable<System.Int32> Eu_taxed { get; set; }
		
		/// <summary>
		/// Total EU transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eu_total")]
		public System.Nullable<System.Int32> Eu_total { get; set; }
		
		/// <summary>
		/// Untaxed transaction count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="untaxed")]
		public System.Nullable<System.Int32> Untaxed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetDetailedRefundsIn
	{
		
		/// <summary>
		/// Comma separated list of 2-letter country codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_codes")]
		public string Country_codes { get; set; }
		
		/// <summary>
		/// Take only refunds issued at or after the date. Format: yyyy-MM-dd
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public string Date_from { get; set; }
		
		/// <summary>
		/// Take only refunds issued at or before the date. Format: yyyy-MM-dd
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public string Date_to { get; set; }
		
		/// <summary>
		/// Output format. 'json' or 'csv'. Default value is 'json'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Limit (no more than 1000, defaults to 100).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Double> Limit { get; set; }
		
		/// <summary>
		/// Offset. Defaults to 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Double> Offset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetDetailedRefundsOut
	{
		
		/// <summary>
		/// Detailed refunds report
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report")]
		public Report[] Report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Report
	{
		
		/// <summary>
		/// Amount w/o tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// Country name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_name")]
		public string Country_name { get; set; }
		
		/// <summary>
		/// Country subdivision (e.g. state or provice or county)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_subdivision")]
		public string Country_subdivision { get; set; }
		
		/// <summary>
		/// Three-letter ISO currency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// If true, this line should not be entered into MOSS and is provided for informative purposes only. For example because the country is the same as MOSS registration country and merchant country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skip_moss")]
		public System.Nullable<System.Boolean> Skip_moss { get; set; }
		
		/// <summary>
		/// Tax amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Double> Tax_amount { get; set; }
		
		/// <summary>
		/// Tax rate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_rate")]
		public System.Nullable<System.Double> Tax_rate { get; set; }
		
		/// <summary>
		/// Tax region key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_region")]
		public string Tax_region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetDomesticSummaryReportIn
	{
		
		/// <summary>
		/// ISO 2-letter country code which will be used for determining which country is domestic.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Period end month in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end_month")]
		public string End_month { get; set; }
		
		/// <summary>
		/// Output format. 'xml' and 'csv' values are accepted. Default format - json
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Which date should be used for FX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fx_date_type")]
		public string Fx_date_type { get; set; }
		
		/// <summary>
		/// Period start month in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_month")]
		public string Start_month { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetDomesticSummaryReportOut
	{
		
		/// <summary>
		/// Three-letter ISO currency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Domestic sales refunds amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domestic_refunds_amount")]
		public System.Nullable<System.Double> Domestic_refunds_amount { get; set; }
		
		/// <summary>
		/// Domestic sales refunds tax amout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domestic_refunds_tax_amount")]
		public System.Nullable<System.Double> Domestic_refunds_tax_amount { get; set; }
		
		/// <summary>
		/// Domestic sales amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domestic_sales_amount")]
		public System.Nullable<System.Double> Domestic_sales_amount { get; set; }
		
		/// <summary>
		/// Domestic sales tax amout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domestic_tax_amount")]
		public System.Nullable<System.Double> Domestic_tax_amount { get; set; }
		
		/// <summary>
		/// Period end date in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// EU deducted tax sales.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eu_tax_deducted_refunds")]
		public System.Nullable<System.Double> Eu_tax_deducted_refunds { get; set; }
		
		/// <summary>
		/// EU deducted tax sales.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eu_tax_deducted_sales")]
		public System.Nullable<System.Double> Eu_tax_deducted_sales { get; set; }
		
		/// <summary>
		/// Global sales refunds amount. This includes refunds from domestic country too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="global_refunds_amount")]
		public System.Nullable<System.Double> Global_refunds_amount { get; set; }
		
		/// <summary>
		/// Global sales refunds amount. This includes refunds from domestic country too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="global_refunds_tax_amount")]
		public System.Nullable<System.Double> Global_refunds_tax_amount { get; set; }
		
		/// <summary>
		/// Global sales amount. This includes sales from domestic country too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="global_sales_amount")]
		public System.Nullable<System.Double> Global_sales_amount { get; set; }
		
		/// <summary>
		/// Global sales amount. This includes sales from domestic country too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="global_sales_tax_amount")]
		public System.Nullable<System.Double> Global_sales_tax_amount { get; set; }
		
		/// <summary>
		/// Period start date in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetEuViesReportIn
	{
		
		/// <summary>
		/// ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Period end month in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end_month")]
		public string End_month { get; set; }
		
		/// <summary>
		/// ISO 2-letter country code which will be used for determining which country is domestic.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eu_country_code")]
		public string Eu_country_code { get; set; }
		
		/// <summary>
		/// Output format. 'xml', 'csv' and 'lff' (only for Ireland) values are accepted as well
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Which date should be used for FX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fx_date_type")]
		public string Fx_date_type { get; set; }
		
		/// <summary>
		/// Sequence number used to generate report in Large Filer Format. If not specified then '0000000001' will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lff_sequence_number")]
		public string Lff_sequence_number { get; set; }
		
		/// <summary>
		/// Length of report period. 'month', 'quarter' and 'year' values are accepted. Required only if Large Filer Format is requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period_length")]
		public string Period_length { get; set; }
		
		/// <summary>
		/// Period start month in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_month")]
		public string Start_month { get; set; }
		
		/// <summary>
		/// MOSS-assigned tax ID - if not provided, merchant's national tax number will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_id")]
		public string Tax_id { get; set; }
		
		/// <summary>
		/// Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformation")]
		public string Transformation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetEuViesReportOut
	{
		
		/// <summary>
		/// Three-letter ISO currency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Period end date in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// Settlement report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report")]
		public Report[] Report { get; set; }
		
		/// <summary>
		/// Period start date in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetProductTypesDictOut
	{
		
		/// <summary>
		/// Product type dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dictionary")]
		public Product_type_schema[] Dictionary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Product_type_schema
	{
		
		/// <summary>
		/// Product type code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetRefundsIn
	{
		
		/// <summary>
		/// Take only refunds issued at or after the date. Format: yyyy-MM-dd
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public string Date_from { get; set; }
		
		/// <summary>
		/// Output format. 'csv' value is accepted as well
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// MOSS country code, used to determine currency. If ommited, merchant default setting is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moss_country_code")]
		public string Moss_country_code { get; set; }
		
		/// <summary>
		/// Tax region key, defaults to EU for backwards compatibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_region")]
		public string Tax_region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetRefundsOut
	{
		
		/// <summary>
		/// Refunds report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report")]
		public Report[] Report { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetSettlementIn
	{
		
		/// <summary>
		/// ISO 3-letter currency code, e.g. EUR or USD. If provided, all amounts will be coerced for this currency. Defaults to region's currency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_month")]
		public string End_month { get; set; }
		
		/// <summary>
		/// Output format. 'csv' value is accepted as well
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// MOSS country code, used to determine currency/region. If ommited, merchant default setting is used. Deprecated: please use tax-country-code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moss_country_code")]
		public string Moss_country_code { get; set; }
		
		/// <summary>
		/// MOSS-assigned tax ID - if not provided, merchant's national tax number will be used. Deprecated, please use tax-id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moss_tax_id")]
		public string Moss_tax_id { get; set; }
		
		/// <summary>
		/// Set to 'order_date' to show only refunds for the transactions in the selected reporting period. Set to 'refund_timestamp' to show refunds that were created in the selected reporting period. Do not set to use the default region's setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_date_kind_override")]
		public string Refund_date_kind_override { get; set; }
		
		/// <summary>
		/// Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_month")]
		public string Start_month { get; set; }
		
		/// <summary>
		/// Tax entity country code, used to determine currency/region. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_code")]
		public string Tax_country_code { get; set; }
		
		/// <summary>
		/// MOSS-assigned tax ID - if not provided, merchant's national tax number will be used. Deprecated, please use tax-id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_id")]
		public string Tax_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetSettlementOut
	{
		
		/// <summary>
		/// Period end date in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// Date of ECB FX rate used for conversions in yyyy-MM-dd'T'hh:mm:ss'Z' format. Applies to tax regions where 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fx_rate_date")]
		public string Fx_rate_date { get; set; }
		
		/// <summary>
		/// If the quarter isn't closed yet, tax amount is indicative, as we cannot determine FX rate or all transactions yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indicative")]
		public System.Nullable<System.Boolean> Indicative { get; set; }
		
		/// <summary>
		/// Settlement report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report")]
		public Report[] Report { get; set; }
		
		/// <summary>
		/// Period start date in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetSettlementStatsByCountryIn
	{
		
		/// <summary>
		/// Date from in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public string Date_from { get; set; }
		
		/// <summary>
		/// Date to in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public string Date_to { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetSettlementStatsByCountryOut
	{
		
		/// <summary>
		/// Settlement stats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="by_country")]
		public By_country[] By_country { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetSettlementStatsByTaxationTypeIn
	{
		
		/// <summary>
		/// Date from in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public string Date_from { get; set; }
		
		/// <summary>
		/// Date to in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public string Date_to { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetSettlementStatsByTaxationTypeOut
	{
		
		[System.Runtime.Serialization.DataMember(Name="by_taxation_type")]
		public By_taxation_type By_taxation_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetSettlementSummaryIn
	{
		
		/// <summary>
		/// Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_month")]
		public string End_month { get; set; }
		
		/// <summary>
		/// MOSS country code, used to determine currency. If ommited, merchant default setting is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moss_country_code")]
		public string Moss_country_code { get; set; }
		
		/// <summary>
		/// Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_month")]
		public string Start_month { get; set; }
		
		/// <summary>
		/// Tax region key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_region")]
		public string Tax_region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetSettlementSummaryOut
	{
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public Summary Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Summary
	{
		
		/// <summary>
		/// In which currency code the settlement was calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Period end date in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// Date of ECB FX rate used for conversions in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fx_rate_date")]
		public string Fx_rate_date { get; set; }
		
		/// <summary>
		/// If the quarter isn't closed yet, tax amount is indicative, as we cannot determine FX rate or all transactions yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indicative")]
		public System.Nullable<System.Boolean> Indicative { get; set; }
		
		/// <summary>
		/// Quarter that this summary applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quarter")]
		public string Quarter { get; set; }
		
		/// <summary>
		/// Period start date in yyyy-MM-dd'T'hh:mm:ss'Z' format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// Tax amount due in this quarter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Double> Tax_amount { get; set; }
		
		/// <summary>
		/// Tax entity that the tax is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_entity_name")]
		public string Tax_entity_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetTransactionOut
	{
		
		/// <summary>
		/// Fields required for transaction storage (can be added later - it's up to merchant software). Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage_required_fields")]
		public Storage_required_fields[] Storage_required_fields { get; set; }
		
		/// <summary>
		/// Fields required for tax calculation. Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_required_fields")]
		public Tax_required_fields[] Tax_required_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetTransactionsStatsByCountryIn
	{
		
		/// <summary>
		/// Date from in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public string Date_from { get; set; }
		
		/// <summary>
		/// Date to in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public string Date_to { get; set; }
		
		/// <summary>
		/// Global currency code to use for conversion - in addition to country's currency if rate is available. Conversion is indicative and based on most-recent rate from ECB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="global_currency_code")]
		public string Global_currency_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetTransactionsStatsByCountryOut
	{
		
		/// <summary>
		/// Settlement stats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="by_country")]
		public By_country[] By_country { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetTransactionsStatsIn
	{
		
		/// <summary>
		/// Date from in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_from")]
		public string Date_from { get; set; }
		
		/// <summary>
		/// Date to in yyyy-MM format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_to")]
		public string Date_to { get; set; }
		
		/// <summary>
		/// Interval. Accepted values are 'day', 'week' and 'month'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public string Interval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GetTransactionsStatsOut
	{
		
		[System.Runtime.Serialization.DataMember(Name="by_status")]
		public By_status By_status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListPaymentsIn
	{
		
		/// <summary>
		/// Max record count (no more than 100, defaults to 10).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public string Limit { get; set; }
		
		/// <summary>
		/// How many records need to be skipped, defaults to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListPaymentsOut
	{
		
		/// <summary>
		/// Payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public Payments[] Payments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Payments
	{
		
		/// <summary>
		/// Amount that has been paid. Use negative value to register refunds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Additional payment information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_information")]
		public string Payment_information { get; set; }
		
		/// <summary>
		/// When the payment was received in yyyy-MM-dd HH:mm:ss (24 hour format, UTC+0 timezone).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_timestamp")]
		public string Payment_timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListRefundsOut
	{
		
		/// <summary>
		/// Refunds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public Refunds[] Refunds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Refunds
	{
		
		/// <summary>
		/// Amount, excluding tax, that was refunded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Was this refund applied to an informative line?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="informative")]
		public System.Nullable<System.Boolean> Informative { get; set; }
		
		/// <summary>
		/// Line identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_key")]
		public string Line_key { get; set; }
		
		/// <summary>
		/// Sequential refund note number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_note_number")]
		public string Refund_note_number { get; set; }
		
		/// <summary>
		/// Refund note image url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_note_url")]
		public string Refund_note_url { get; set; }
		
		/// <summary>
		/// Refund reason, displayed on the credit note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_reason")]
		public string Refund_reason { get; set; }
		
		/// <summary>
		/// Refund timestamp in UTC timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_timestamp")]
		public string Refund_timestamp { get; set; }
		
		/// <summary>
		/// Calculated tax amount, that was refunded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Double> Tax_amount { get; set; }
		
		/// <summary>
		/// Tax rate for the line that was used for the refund calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_rate")]
		public System.Nullable<System.Double> Tax_rate { get; set; }
		
		/// <summary>
		/// Total amount, including tax, that was refunded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Double> Total_amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListTransactionsIn
	{
		
		/// <summary>
		/// Three letter ISO currency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Filtering expression
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter_text")]
		public string Filter_text { get; set; }
		
		/// <summary>
		/// Output format - supports 'csv' value for this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Return only transactions with a note field set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_note")]
		public System.Nullable<System.Boolean> Has_note { get; set; }
		
		/// <summary>
		/// Transaction invoice number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_number")]
		public string Invoice_number { get; set; }
		
		/// <summary>
		/// Taxamo provided transaction key or custom id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key_or_custom_id")]
		public string Key_or_custom_id { get; set; }
		
		/// <summary>
		/// Limit (no more than 1000, defaults to 100).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Offset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// Order date from in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_date_from")]
		public string Order_date_from { get; set; }
		
		/// <summary>
		/// Order date to in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_date_to")]
		public string Order_date_to { get; set; }
		
		/// <summary>
		/// Taxamo provided original transaction key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_transaction_key")]
		public string Original_transaction_key { get; set; }
		
		/// <summary>
		/// If true, results are sorted in descending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_reverse")]
		public System.Nullable<System.Boolean> Sort_reverse { get; set; }
		
		/// <summary>
		/// Comma separated list of of transaction statuses. 'N' - unconfirmed transaction, 'C' - confirmed transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statuses")]
		public string Statuses { get; set; }
		
		/// <summary>
		/// Two letter ISO tax country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_code")]
		public string Tax_country_code { get; set; }
		
		/// <summary>
		/// Comma separated list of two letter ISO tax country codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_codes")]
		public string Tax_country_codes { get; set; }
		
		/// <summary>
		/// Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount_greater_than")]
		public string Total_amount_greater_than { get; set; }
		
		/// <summary>
		/// Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount_less_than")]
		public string Total_amount_less_than { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListTransactionsOut
	{
		
		/// <summary>
		/// Transactions matching the criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public Transactions[] Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Transactions
	{
		
		[System.Runtime.Serialization.DataMember(Name="additional_currencies")]
		public Additional_currencies Additional_currencies { get; set; }
		
		/// <summary>
		/// Amount of transaction without tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Billing two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_country_code")]
		public string Billing_country_code { get; set; }
		
		/// <summary>
		/// First 6 digits of buyer's credit card prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_credit_card_prefix")]
		public string Buyer_credit_card_prefix { get; set; }
		
		/// <summary>
		/// Buyer's declared email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email")]
		public string Buyer_email { get; set; }
		
		/// <summary>
		/// IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_ip")]
		public string Buyer_ip { get; set; }
		
		/// <summary>
		/// Buyer's name - first name and last name or company name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_name")]
		public string Buyer_name { get; set; }
		
		/// <summary>
		///  Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tax_number")]
		public string Buyer_tax_number { get; set; }
		
		/// <summary>
		/// If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant's country), tax number doesn't get validated in that case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tax_number_valid")]
		public System.Nullable<System.Boolean> Buyer_tax_number_valid { get; set; }
		
		/// <summary>
		/// Additional information about the transaction - for example if the evidence has been amended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Date and time of transaction confirmation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirm_timestamp")]
		public string Confirm_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public Countries Countries { get; set; }
		
		/// <summary>
		/// Date and time of transaction creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="create_timestamp")]
		public string Create_timestamp { get; set; }
		
		/// <summary>
		/// Currency code for transaction - e.g. EUR.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Custom data related to transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_data")]
		public string Custom_data { get; set; }
		
		/// <summary>
		/// Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_fields")]
		public Custom_fields[] Custom_fields { get; set; }
		
		/// <summary>
		/// Custom identifier provided upon transaction creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_id")]
		public string Custom_id { get; set; }
		
		/// <summary>
		/// Free-form field for storing customer id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// How much tax has been deducted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deducted_tax_amount")]
		public System.Nullable<System.Double> Deducted_tax_amount { get; set; }
		
		/// <summary>
		/// Transaction description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evidence")]
		public Evidence Evidence { get; set; }
		
		/// <summary>
		/// Transaction external key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_key")]
		public string External_key { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force_country_code")]
		public string Force_country_code { get; set; }
		
		/// <summary>
		/// Set to true if transaction has only informative lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fully_informative")]
		public System.Nullable<System.Boolean> Fully_informative { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice_address")]
		public Invoice_address Invoice_address { get; set; }
		
		/// <summary>
		/// Invoice date of issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_date")]
		public string Invoice_date { get; set; }
		
		/// <summary>
		/// Invoice image URL - provided by Taxamo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_image_url")]
		public string Invoice_image_url { get; set; }
		
		/// <summary>
		/// Invoice number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_number")]
		public string Invoice_number { get; set; }
		
		/// <summary>
		/// Invoice place of issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoice_place")]
		public string Invoice_place { get; set; }
		
		/// <summary>
		/// Id generated by taxamo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Transaction kind: eu-b2c, eu-b2b, domestic, untaxed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Is the transaction created manually - using private token. In manual mode, it is the merchant who calculates tax country and validates evidence. If you need API to do that when accessing the API with private token, just skip the 'manual' flag or use false value there and provide customer's ip address through buyer_ip field. Manual mode is also used when using original_transaction_key field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manual")]
		public System.Nullable<System.Boolean> Manual { get; set; }
		
		/// <summary>
		/// Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_date")]
		public string Order_date { get; set; }
		
		/// <summary>
		/// Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_transaction_key")]
		public string Original_transaction_key { get; set; }
		
		/// <summary>
		/// Refunded tax amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_tax_amount")]
		public System.Nullable<System.Double> Refunded_tax_amount { get; set; }
		
		/// <summary>
		/// Total amount refunde (including tax).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_total_amount")]
		public System.Nullable<System.Double> Refunded_total_amount { get; set; }
		
		/// <summary>
		/// Transaction source software - e.g. plugin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Sub account identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub_account_id")]
		public string Sub_account_id { get; set; }
		
		/// <summary>
		/// Supply date in yyyy-MM-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supply_date")]
		public string Supply_date { get; set; }
		
		/// <summary>
		/// Tax amount of transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Double> Tax_amount { get; set; }
		
		/// <summary>
		/// Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_country_code")]
		public string Tax_country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax_data")]
		public Tax_data_schema Tax_data { get; set; }
		
		/// <summary>
		/// If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_deducted")]
		public System.Nullable<System.Boolean> Tax_deducted { get; set; }
		
		/// <summary>
		/// To which entity is the tax due.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_entity_name")]
		public string Tax_entity_name { get; set; }
		
		/// <summary>
		/// Tax number service identifier - if available for a given region and the region is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_number_service")]
		public string Tax_number_service { get; set; }
		
		/// <summary>
		/// Is tax calculation supported for a detected tax location?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_supported")]
		public System.Nullable<System.Boolean> Tax_supported { get; set; }
		
		/// <summary>
		/// Timezone name for tax transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_timezone")]
		public string Tax_timezone { get; set; }
		
		/// <summary>
		/// Was this transaction created in test mode?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="test")]
		public System.Nullable<System.Boolean> Test { get; set; }
		
		/// <summary>
		/// Total amount of transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		public System.Nullable<System.Double> Total_amount { get; set; }
		
		/// <summary>
		/// Transaction lines.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_lines")]
		public Transaction_lines[] Transaction_lines { get; set; }
		
		/// <summary>
		/// Verification token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_token")]
		public string Verification_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocateGivenIPOut
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public Country Country { get; set; }
		
		/// <summary>
		/// Detected country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// Remote IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remote_addr")]
		public string Remote_addr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocateMyIPOut
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public Country Country { get; set; }
		
		/// <summary>
		/// Detected country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// Remote IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remote_addr")]
		public string Remote_addr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UnconfirmTransactionIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Input_transaction_update Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UnconfirmTransactionOut
	{
		
		/// <summary>
		/// Fields required for transaction storage (can be added later - it's up to merchant software). Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage_required_fields")]
		public Storage_required_fields[] Storage_required_fields { get; set; }
		
		/// <summary>
		/// Fields required for tax calculation. Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_required_fields")]
		public Tax_required_fields[] Tax_required_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateTransactionIn
	{
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateTransactionOut
	{
		
		/// <summary>
		/// Fields required for transaction storage (can be added later - it's up to merchant software). Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storage_required_fields")]
		public Storage_required_fields[] Storage_required_fields { get; set; }
		
		/// <summary>
		/// Fields required for tax calculation. Depends on the region/transaction type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_required_fields")]
		public Tax_required_fields[] Tax_required_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ValidateTaxNumberIn
	{
		
		/// <summary>
		/// Two-letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ValidateTaxNumberOut
	{
		
		/// <summary>
		/// Billing two letter ISO country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_country_code")]
		public string Billing_country_code { get; set; }
		
		/// <summary>
		///  Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tax_number")]
		public string Buyer_tax_number { get; set; }
		
		/// <summary>
		/// If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant's country), tax number doesn't get validated in that case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tax_number_valid")]
		public System.Nullable<System.Boolean> Buyer_tax_number_valid { get; set; }
		
		/// <summary>
		/// If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_deducted")]
		public System.Nullable<System.Boolean> Tax_deducted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VerifySMSTokenOut
	{
		
		/// <summary>
		/// Verified country code, returned if operation was successful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Countries
		/// GetCountriesDict api/v1/dictionaries/countries
		/// </summary>
		/// <param name="tax_supported">Should only countries with tax supported be listed?</param>
		/// <returns>OK</returns>
		public async Task<GetCountriesDictOut> GetCountriesDictAsync(bool tax_supported)
		{
			var requestUri = "api/v1/dictionaries/countries?tax_supported="+tax_supported;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetCountriesDictOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Currencies
		/// GetCurrenciesDict api/v1/dictionaries/currencies
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetCurrenciesDictOut> GetCurrenciesDictAsync()
		{
			var requestUri = "api/v1/dictionaries/currencies";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetCurrenciesDictOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Product types
		/// GetProductTypesDict api/v1/dictionaries/product_types
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetProductTypesDictOut> GetProductTypesDictAsync()
		{
			var requestUri = "api/v1/dictionaries/product_types";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetProductTypesDictOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Locate IP
		/// LocateMyIP api/v1/geoip
		/// </summary>
		/// <returns>OK</returns>
		public async Task<LocateMyIPOut> LocateMyIPAsync()
		{
			var requestUri = "api/v1/geoip";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LocateMyIPOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Locate provided IP
		/// LocateGivenIP api/v1/geoip/{ip}
		/// </summary>
		/// <param name="ip">IP address.</param>
		/// <returns>OK</returns>
		public async Task<LocateGivenIPOut> LocateGivenIPAsync(string ip)
		{
			var requestUri = "api/v1/geoip/"+ (ip==null? "" : System.Uri.EscapeDataString(ip));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LocateGivenIPOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate domestic summary
		/// GetDomesticSummaryReport api/v1/reports/domestic/summary
		/// </summary>
		/// <param name="format">Output format. 'xml' and 'csv' values are accepted. Default format - json</param>
		/// <param name="country_code">ISO 2-letter country code which will be used for determining which country is domestic.</param>
		/// <param name="currency_code">ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.</param>
		/// <param name="start_month">Period start month in yyyy-MM format.</param>
		/// <param name="end_month">Period end month in yyyy-MM format.</param>
		/// <param name="fx_date_type">Which date should be used for FX.</param>
		/// <returns>OK</returns>
		public async Task<GetDomesticSummaryReportOut> GetDomesticSummaryReportAsync(string format, string country_code, string currency_code, string start_month, string end_month, string fx_date_type)
		{
			var requestUri = "api/v1/reports/domestic/summary?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&country_code=" + (country_code==null? "" : System.Uri.EscapeDataString(country_code))+"&currency_code=" + (currency_code==null? "" : System.Uri.EscapeDataString(currency_code))+"&start_month=" + (start_month==null? "" : System.Uri.EscapeDataString(start_month))+"&end_month=" + (end_month==null? "" : System.Uri.EscapeDataString(end_month))+"&fx_date_type=" + (fx_date_type==null? "" : System.Uri.EscapeDataString(fx_date_type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDomesticSummaryReportOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate EU VIES report
		/// GetEuViesReport api/v1/reports/eu/vies
		/// </summary>
		/// <param name="period_length">Length of report period. 'month', 'quarter' and 'year' values are accepted. Required only if Large Filer Format is requested.</param>
		/// <param name="lff_sequence_number">Sequence number used to generate report in Large Filer Format. If not specified then '0000000001' will be used.</param>
		/// <param name="transformation">Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats.</param>
		/// <param name="currency_code">ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.</param>
		/// <param name="end_month">Period end month in yyyy-MM format.</param>
		/// <param name="tax_id">MOSS-assigned tax ID - if not provided, merchant's national tax number will be used.</param>
		/// <param name="start_month">Period start month in yyyy-MM format.</param>
		/// <param name="eu_country_code">ISO 2-letter country code which will be used for determining which country is domestic.</param>
		/// <param name="fx_date_type">Which date should be used for FX.</param>
		/// <param name="format">Output format. 'xml', 'csv' and 'lff' (only for Ireland) values are accepted as well</param>
		/// <returns>OK</returns>
		public async Task<GetEuViesReportOut> GetEuViesReportAsync(string period_length, string lff_sequence_number, string transformation, string currency_code, string end_month, string tax_id, string start_month, string eu_country_code, string fx_date_type, string format)
		{
			var requestUri = "api/v1/reports/eu/vies?period_length=" + (period_length==null? "" : System.Uri.EscapeDataString(period_length))+"&lff_sequence_number=" + (lff_sequence_number==null? "" : System.Uri.EscapeDataString(lff_sequence_number))+"&transformation=" + (transformation==null? "" : System.Uri.EscapeDataString(transformation))+"&currency_code=" + (currency_code==null? "" : System.Uri.EscapeDataString(currency_code))+"&end_month=" + (end_month==null? "" : System.Uri.EscapeDataString(end_month))+"&tax_id=" + (tax_id==null? "" : System.Uri.EscapeDataString(tax_id))+"&start_month=" + (start_month==null? "" : System.Uri.EscapeDataString(start_month))+"&eu_country_code=" + (eu_country_code==null? "" : System.Uri.EscapeDataString(eu_country_code))+"&fx_date_type=" + (fx_date_type==null? "" : System.Uri.EscapeDataString(fx_date_type))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetEuViesReportOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Detailed refunds
		/// GetDetailedRefunds api/v1/settlement/detailed_refunds
		/// </summary>
		/// <param name="format">Output format. 'json' or 'csv'. Default value is 'json'</param>
		/// <param name="country_codes">Comma separated list of 2-letter country codes</param>
		/// <param name="date_from">Take only refunds issued at or after the date. Format: yyyy-MM-dd</param>
		/// <param name="date_to">Take only refunds issued at or before the date. Format: yyyy-MM-dd</param>
		/// <param name="limit">Limit (no more than 1000, defaults to 100).</param>
		/// <param name="offset">Offset. Defaults to 0</param>
		/// <returns>OK</returns>
		public async Task<GetDetailedRefundsOut> GetDetailedRefundsAsync(string format, string country_codes, string date_from, string date_to, double limit, double offset)
		{
			var requestUri = "api/v1/settlement/detailed_refunds?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&country_codes=" + (country_codes==null? "" : System.Uri.EscapeDataString(country_codes))+"&date_from=" + (date_from==null? "" : System.Uri.EscapeDataString(date_from))+"&date_to=" + (date_to==null? "" : System.Uri.EscapeDataString(date_to))+"&limit="+limit+"&offset="+offset;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDetailedRefundsOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch refunds
		/// GetRefunds api/v1/settlement/refunds
		/// </summary>
		/// <param name="format">Output format. 'csv' value is accepted as well</param>
		/// <param name="moss_country_code">MOSS country code, used to determine currency. If ommited, merchant default setting is used.</param>
		/// <param name="tax_region">Tax region key, defaults to EU for backwards compatibility.</param>
		/// <param name="date_from">Take only refunds issued at or after the date. Format: yyyy-MM-dd</param>
		/// <returns>OK</returns>
		public async Task<GetRefundsOut> GetRefundsAsync(string format, string moss_country_code, string tax_region, string date_from)
		{
			var requestUri = "api/v1/settlement/refunds?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&moss_country_code=" + (moss_country_code==null? "" : System.Uri.EscapeDataString(moss_country_code))+"&tax_region=" + (tax_region==null? "" : System.Uri.EscapeDataString(tax_region))+"&date_from=" + (date_from==null? "" : System.Uri.EscapeDataString(date_from));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetRefundsOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch summary
		/// GetSettlementSummary api/v1/settlement/summary/{quarter}
		/// </summary>
		/// <param name="moss_country_code">MOSS country code, used to determine currency. If ommited, merchant default setting is used.</param>
		/// <param name="tax_region">Tax region key</param>
		/// <param name="start_month">Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.</param>
		/// <param name="end_month">Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.</param>
		/// <param name="quarter">Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to 'range'.</param>
		/// <returns>OK</returns>
		public async Task<GetSettlementSummaryOut> GetSettlementSummaryAsync(string moss_country_code, string tax_region, string start_month, string end_month, string quarter)
		{
			var requestUri = "api/v1/settlement/summary/"+ (quarter==null? "" : System.Uri.EscapeDataString(quarter))+"?moss_country_code=" + (moss_country_code==null? "" : System.Uri.EscapeDataString(moss_country_code))+"&tax_region=" + (tax_region==null? "" : System.Uri.EscapeDataString(tax_region))+"&start_month=" + (start_month==null? "" : System.Uri.EscapeDataString(start_month))+"&end_month=" + (end_month==null? "" : System.Uri.EscapeDataString(end_month));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSettlementSummaryOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch settlement
		/// GetSettlement api/v1/settlement/{quarter}
		/// </summary>
		/// <param name="moss_tax_id">MOSS-assigned tax ID - if not provided, merchant's national tax number will be used. Deprecated, please use tax-id.</param>
		/// <param name="currency_code">ISO 3-letter currency code, e.g. EUR or USD. If provided, all amounts will be coerced for this currency. Defaults to region's currency code.</param>
		/// <param name="end_month">Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.</param>
		/// <param name="tax_id">MOSS-assigned tax ID - if not provided, merchant's national tax number will be used. Deprecated, please use tax-id.</param>
		/// <param name="refund_date_kind_override">Set to 'order_date' to show only refunds for the transactions in the selected reporting period. Set to 'refund_timestamp' to show refunds that were created in the selected reporting period. Do not set to use the default region's setting.</param>
		/// <param name="start_month">Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.</param>
		/// <param name="moss_country_code">MOSS country code, used to determine currency/region. If ommited, merchant default setting is used. Deprecated: please use tax-country-code.</param>
		/// <param name="format">Output format. 'csv' value is accepted as well</param>
		/// <param name="tax_country_code">Tax entity country code, used to determine currency/region. </param>
		/// <param name="quarter">Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to 'range'.</param>
		/// <returns>OK</returns>
		public async Task<GetSettlementOut> GetSettlementAsync(string moss_tax_id, string currency_code, string end_month, string tax_id, string refund_date_kind_override, string start_month, string moss_country_code, string format, string tax_country_code, string quarter)
		{
			var requestUri = "api/v1/settlement/"+ (quarter==null? "" : System.Uri.EscapeDataString(quarter))+"?moss_tax_id=" + (moss_tax_id==null? "" : System.Uri.EscapeDataString(moss_tax_id))+"&currency_code=" + (currency_code==null? "" : System.Uri.EscapeDataString(currency_code))+"&end_month=" + (end_month==null? "" : System.Uri.EscapeDataString(end_month))+"&tax_id=" + (tax_id==null? "" : System.Uri.EscapeDataString(tax_id))+"&refund_date_kind_override=" + (refund_date_kind_override==null? "" : System.Uri.EscapeDataString(refund_date_kind_override))+"&start_month=" + (start_month==null? "" : System.Uri.EscapeDataString(start_month))+"&moss_country_code=" + (moss_country_code==null? "" : System.Uri.EscapeDataString(moss_country_code))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&tax_country_code=" + (tax_country_code==null? "" : System.Uri.EscapeDataString(tax_country_code));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSettlementOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Settlement by country
		/// GetSettlementStatsByCountry api/v1/stats/settlement/by_country
		/// </summary>
		/// <param name="date_from">Date from in yyyy-MM format.</param>
		/// <param name="date_to">Date to in yyyy-MM format.</param>
		/// <returns>OK</returns>
		public async Task<GetSettlementStatsByCountryOut> GetSettlementStatsByCountryAsync(string date_from, string date_to)
		{
			var requestUri = "api/v1/stats/settlement/by_country?date_from=" + (date_from==null? "" : System.Uri.EscapeDataString(date_from))+"&date_to=" + (date_to==null? "" : System.Uri.EscapeDataString(date_to));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSettlementStatsByCountryOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Settlement by tax type
		/// GetSettlementStatsByTaxationType api/v1/stats/settlement/by_taxation_type
		/// </summary>
		/// <param name="date_from">Date from in yyyy-MM format.</param>
		/// <param name="date_to">Date to in yyyy-MM format.</param>
		/// <returns>OK</returns>
		public async Task<GetSettlementStatsByTaxationTypeOut> GetSettlementStatsByTaxationTypeAsync(string date_from, string date_to)
		{
			var requestUri = "api/v1/stats/settlement/by_taxation_type?date_from=" + (date_from==null? "" : System.Uri.EscapeDataString(date_from))+"&date_to=" + (date_to==null? "" : System.Uri.EscapeDataString(date_to));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSettlementStatsByTaxationTypeOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Settlement stats over time
		/// GetDailySettlementStats api/v1/stats/settlement/daily
		/// </summary>
		/// <param name="interval">Interval type - day, week, month.</param>
		/// <param name="date_from">Date from in yyyy-MM format.</param>
		/// <param name="date_to">Date to in yyyy-MM format.</param>
		/// <returns>OK</returns>
		public async Task<GetDailySettlementStatsOut> GetDailySettlementStatsAsync(string interval, string date_from, string date_to)
		{
			var requestUri = "api/v1/stats/settlement/daily?interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&date_from=" + (date_from==null? "" : System.Uri.EscapeDataString(date_from))+"&date_to=" + (date_to==null? "" : System.Uri.EscapeDataString(date_to));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDailySettlementStatsOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Transaction stats
		/// GetTransactionsStats api/v1/stats/transactions
		/// </summary>
		/// <param name="date_from">Date from in yyyy-MM format.</param>
		/// <param name="date_to">Date to in yyyy-MM format.</param>
		/// <param name="interval">Interval. Accepted values are 'day', 'week' and 'month'.</param>
		/// <returns>OK</returns>
		public async Task<GetTransactionsStatsOut> GetTransactionsStatsAsync(string date_from, string date_to, string interval)
		{
			var requestUri = "api/v1/stats/transactions?date_from=" + (date_from==null? "" : System.Uri.EscapeDataString(date_from))+"&date_to=" + (date_to==null? "" : System.Uri.EscapeDataString(date_to))+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTransactionsStatsOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Settlement by country
		/// GetTransactionsStatsByCountry api/v1/stats/transactions/by_country
		/// </summary>
		/// <param name="global_currency_code">Global currency code to use for conversion - in addition to country's currency if rate is available. Conversion is indicative and based on most-recent rate from ECB.</param>
		/// <param name="date_from">Date from in yyyy-MM format.</param>
		/// <param name="date_to">Date to in yyyy-MM format.</param>
		/// <returns>OK</returns>
		public async Task<GetTransactionsStatsByCountryOut> GetTransactionsStatsByCountryAsync(string global_currency_code, string date_from, string date_to)
		{
			var requestUri = "api/v1/stats/transactions/by_country?global_currency_code=" + (global_currency_code==null? "" : System.Uri.EscapeDataString(global_currency_code))+"&date_from=" + (date_from==null? "" : System.Uri.EscapeDataString(date_from))+"&date_to=" + (date_to==null? "" : System.Uri.EscapeDataString(date_to));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTransactionsStatsByCountryOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Simple tax
		/// CalculateSimpleTax api/v1/tax/calculate
		/// </summary>
		/// <param name="product_type">Product type, according to dictionary /dictionaries/product_types. </param>
		/// <param name="invoice_address_city">Invoice address/postal_code</param>
		/// <param name="buyer_credit_card_prefix">First 6 digits of buyer's credit card prefix.</param>
		/// <param name="currency_code">Currency code for transaction - e.g. EUR.</param>
		/// <param name="invoice_address_region">Invoice address/region</param>
		/// <param name="unit_price">Unit price.</param>
		/// <param name="quantity">Quantity Defaults to 1.</param>
		/// <param name="buyer_tax_number"> Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.</param>
		/// <param name="force_country_code">Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.</param>
		/// <param name="order_date">Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.</param>
		/// <param name="amount">Amount. Required if total amount or both unit price and quantity are not provided.</param>
		/// <param name="billing_country_code">Billing two letter ISO country code.</param>
		/// <param name="invoice_address_postal_code">Invoice address/postal_code</param>
		/// <param name="total_amount">Total amount. Required if amount or both unit price and quantity are not provided.</param>
		/// <param name="tax_deducted">If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.</param>
		/// <returns>OK</returns>
		public async Task<CalculateSimpleTaxOut> CalculateSimpleTaxAsync(string product_type, string invoice_address_city, string buyer_credit_card_prefix, string currency_code, string invoice_address_region, double unit_price, double quantity, string buyer_tax_number, string force_country_code, string order_date, double amount, string billing_country_code, string invoice_address_postal_code, double total_amount, bool tax_deducted)
		{
			var requestUri = "api/v1/tax/calculate?product_type=" + (product_type==null? "" : System.Uri.EscapeDataString(product_type))+"&invoice_address_city=" + (invoice_address_city==null? "" : System.Uri.EscapeDataString(invoice_address_city))+"&buyer_credit_card_prefix=" + (buyer_credit_card_prefix==null? "" : System.Uri.EscapeDataString(buyer_credit_card_prefix))+"&currency_code=" + (currency_code==null? "" : System.Uri.EscapeDataString(currency_code))+"&invoice_address_region=" + (invoice_address_region==null? "" : System.Uri.EscapeDataString(invoice_address_region))+"&unit_price="+unit_price+"&quantity="+quantity+"&buyer_tax_number=" + (buyer_tax_number==null? "" : System.Uri.EscapeDataString(buyer_tax_number))+"&force_country_code=" + (force_country_code==null? "" : System.Uri.EscapeDataString(force_country_code))+"&order_date=" + (order_date==null? "" : System.Uri.EscapeDataString(order_date))+"&amount="+amount+"&billing_country_code=" + (billing_country_code==null? "" : System.Uri.EscapeDataString(billing_country_code))+"&invoice_address_postal_code=" + (invoice_address_postal_code==null? "" : System.Uri.EscapeDataString(invoice_address_postal_code))+"&total_amount="+total_amount+"&tax_deducted="+tax_deducted;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CalculateSimpleTaxOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate tax
		/// CalculateTax api/v1/tax/calculate
		/// </summary>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<CalculateTaxOut> CalculateTaxAsync(CalculateTaxIn requestBody)
		{
			var requestUri = "api/v1/tax/calculate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CalculateTaxOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate location
		/// CalculateTaxLocation api/v1/tax/location/calculate
		/// </summary>
		/// <param name="billing_country_code">Billing two letter ISO country code.</param>
		/// <param name="buyer_credit_card_prefix">First 6 digits of buyer's credit card prefix.</param>
		/// <returns>OK</returns>
		public async Task<CalculateTaxLocationOut> CalculateTaxLocationAsync(string billing_country_code, string buyer_credit_card_prefix)
		{
			var requestUri = "api/v1/tax/location/calculate?billing_country_code=" + (billing_country_code==null? "" : System.Uri.EscapeDataString(billing_country_code))+"&buyer_credit_card_prefix=" + (buyer_credit_card_prefix==null? "" : System.Uri.EscapeDataString(buyer_credit_card_prefix));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CalculateTaxLocationOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Validate VAT number
		/// ValidateTaxNumber api/v1/tax/vat_numbers/{tax_number}/validate
		/// </summary>
		/// <param name="country_code">Two-letter ISO country code.</param>
		/// <param name="tax_number">Tax number</param>
		/// <returns>OK</returns>
		public async Task<ValidateTaxNumberOut> ValidateTaxNumberAsync(string country_code, string tax_number)
		{
			var requestUri = "api/v1/tax/vat_numbers/"+ (tax_number==null? "" : System.Uri.EscapeDataString(tax_number))+"/validate?country_code=" + (country_code==null? "" : System.Uri.EscapeDataString(country_code));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ValidateTaxNumberOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Browse transactions
		/// ListTransactions api/v1/transactions
		/// </summary>
		/// <param name="filter_text">Filtering expression</param>
		/// <param name="offset">Offset</param>
		/// <param name="has_note">Return only transactions with a note field set.</param>
		/// <param name="key_or_custom_id">Taxamo provided transaction key or custom id</param>
		/// <param name="currency_code">Three letter ISO currency code.</param>
		/// <param name="order_date_to">Order date to in yyyy-MM-dd format.</param>
		/// <param name="sort_reverse">If true, results are sorted in descending order.</param>
		/// <param name="limit">Limit (no more than 1000, defaults to 100).</param>
		/// <param name="invoice_number">Transaction invoice number.</param>
		/// <param name="tax_country_codes">Comma separated list of two letter ISO tax country codes.</param>
		/// <param name="statuses">Comma separated list of of transaction statuses. 'N' - unconfirmed transaction, 'C' - confirmed transaction.</param>
		/// <param name="original_transaction_key">Taxamo provided original transaction key</param>
		/// <param name="order_date_from">Order date from in yyyy-MM-dd format.</param>
		/// <param name="total_amount_greater_than">Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned.</param>
		/// <param name="format">Output format - supports 'csv' value for this operation.</param>
		/// <param name="total_amount_less_than">Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned.</param>
		/// <param name="tax_country_code">Two letter ISO tax country code.</param>
		/// <returns>OK</returns>
		public async Task<ListTransactionsOut> ListTransactionsAsync(
					string filter_text, 
					int offset, 
					bool has_note, 
					string key_or_custom_id, 
					string currency_code, 
					string order_date_to, 
					bool sort_reverse, 
					int limit, 
					string invoice_number, 
					string tax_country_codes, 
					string statuses, 
					string original_transaction_key, 
					string order_date_from, 
					string total_amount_greater_than, 
					string format, 
					string total_amount_less_than, 
					string tax_country_code)
		{
			var requestUri = "api/v1/transactions?filter_text=" + (filter_text==null? "" : System.Uri.EscapeDataString(filter_text))+"&offset="+offset+"&has_note="+has_note+"&key_or_custom_id=" + (key_or_custom_id==null? "" : System.Uri.EscapeDataString(key_or_custom_id))+"&currency_code=" + (currency_code==null? "" : System.Uri.EscapeDataString(currency_code))+"&order_date_to=" + (order_date_to==null? "" : System.Uri.EscapeDataString(order_date_to))+"&sort_reverse="+sort_reverse+"&limit="+limit+"&invoice_number=" + (invoice_number==null? "" : System.Uri.EscapeDataString(invoice_number))+"&tax_country_codes=" + (tax_country_codes==null? "" : System.Uri.EscapeDataString(tax_country_codes))+"&statuses=" + (statuses==null? "" : System.Uri.EscapeDataString(statuses))+"&original_transaction_key=" + (original_transaction_key==null? "" : System.Uri.EscapeDataString(original_transaction_key))+"&order_date_from=" + (order_date_from==null? "" : System.Uri.EscapeDataString(order_date_from))+"&total_amount_greater_than=" + (total_amount_greater_than==null? "" : System.Uri.EscapeDataString(total_amount_greater_than))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&total_amount_less_than=" + (total_amount_less_than==null? "" : System.Uri.EscapeDataString(total_amount_less_than))+"&tax_country_code=" + (tax_country_code==null? "" : System.Uri.EscapeDataString(tax_country_code));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTransactionsOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Store transaction
		/// CreateTransaction api/v1/transactions
		/// </summary>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<CreateTransactionOut> CreateTransactionAsync(CreateTransactionIn requestBody)
		{
			var requestUri = "api/v1/transactions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateTransactionOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve transaction data.
		/// GetTransaction api/v1/transactions/{key}
		/// </summary>
		/// <param name="key">Transaction key</param>
		/// <returns>OK</returns>
		public async Task<GetTransactionOut> GetTransactionAsync(string key)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTransactionOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update transaction
		/// UpdateTransaction api/v1/transactions/{key}
		/// </summary>
		/// <param name="key">Transaction key.</param>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<UpdateTransactionOut> UpdateTransactionAsync(string key, UpdateTransactionIn requestBody)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateTransactionOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete transaction
		/// CancelTransaction api/v1/transactions/{key}
		/// </summary>
		/// <param name="key">Transaction key</param>
		/// <returns>OK</returns>
		public async Task<CancelTransactionOut> CancelTransactionAsync(string key)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CancelTransactionOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Confirm transaction
		/// ConfirmTransaction api/v1/transactions/{key}/confirm
		/// </summary>
		/// <param name="key">Transaction key.</param>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<ConfirmTransactionOut> ConfirmTransactionAsync(string key, ConfirmTransactionIn requestBody)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/confirm";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConfirmTransactionOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Email credit note
		/// EmailRefund api/v1/transactions/{key}/invoice/refunds/{refund_note_number}/send_email
		/// </summary>
		/// <param name="key">Transaction key.</param>
		/// <param name="refund_note_number">Refund note id.</param>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<EmailRefundOut> EmailRefundAsync(string key, string refund_note_number, EmailRefundIn requestBody)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/invoice/refunds/"+ (refund_note_number==null? "" : System.Uri.EscapeDataString(refund_note_number))+"/send_email";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EmailRefundOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Email invoice
		/// EmailInvoice api/v1/transactions/{key}/invoice/send_email
		/// </summary>
		/// <param name="key">Transaction key.</param>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<EmailInvoiceOut> EmailInvoiceAsync(string key, EmailInvoiceIn requestBody)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/invoice/send_email";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EmailInvoiceOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List payments
		/// ListPayments api/v1/transactions/{key}/payments
		/// </summary>
		/// <param name="limit">Max record count (no more than 100, defaults to 10).</param>
		/// <param name="offset">How many records need to be skipped, defaults to 0.</param>
		/// <param name="key">Transaction key.</param>
		/// <returns>OK</returns>
		public async Task<ListPaymentsOut> ListPaymentsAsync(string limit, string offset, string key)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/payments?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPaymentsOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Register a payment
		/// CreatePayment api/v1/transactions/{key}/payments
		/// </summary>
		/// <param name="key">Transaction key.</param>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<CreatePaymentOut> CreatePaymentAsync(string key, CreatePaymentIn requestBody)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/payments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreatePaymentOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Capture payment
		/// CapturePayment api/v1/transactions/{key}/payments/capture
		/// </summary>
		/// <param name="key">Transaction key.</param>
		/// <returns>OK</returns>
		public async Task<CapturePaymentOut> CapturePaymentAsync(string key)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/payments/capture";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CapturePaymentOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get transaction refunds
		/// ListRefunds api/v1/transactions/{key}/refunds
		/// </summary>
		/// <param name="key">Transaction key.</param>
		/// <returns>OK</returns>
		public async Task<ListRefundsOut> ListRefundsAsync(string key)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/refunds";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListRefundsOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a refund
		/// CreateRefund api/v1/transactions/{key}/refunds
		/// </summary>
		/// <param name="key">Transaction key.</param>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<CreateRefundOut> CreateRefundAsync(string key, CreateRefundIn requestBody)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/refunds";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateRefundOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Un-confirm the transaction
		/// UnconfirmTransaction api/v1/transactions/{key}/unconfirm
		/// </summary>
		/// <param name="key">Transaction key.</param>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<UnconfirmTransactionOut> UnconfirmTransactionAsync(string key, UnconfirmTransactionIn requestBody)
		{
			var requestUri = "api/v1/transactions/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/unconfirm";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UnconfirmTransactionOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create SMS token
		/// CreateSMSToken api/v1/verification/sms
		/// </summary>
		/// <param name="requestBody">Input</param>
		/// <returns>OK</returns>
		public async Task<CreateSMSTokenOut> CreateSMSTokenAsync(CreateSMSTokenIn requestBody)
		{
			var requestUri = "api/v1/verification/sms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSMSTokenOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Verify SMS token
		/// VerifySMSToken api/v1/verification/sms/{token}
		/// </summary>
		/// <param name="token">Provided token.</param>
		/// <returns>OK</returns>
		public async Task<VerifySMSTokenOut> VerifySMSTokenAsync(string token)
		{
			var requestUri = "api/v1/verification/sms/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VerifySMSTokenOut>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
