//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The response to an account resource GET request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountResource
	{
		
		/// <summary>
		/// Resource properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	/// <summary>
	/// The response to an account resource list GET request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountResourceListResult
	{
		
		/// <summary>
		/// Array of resource details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AccountResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The body of a PUT request to modify a Visual Studio account resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountResourceRequest
	{
		
		/// <summary>
		/// The account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The Azure instance location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The type of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<AccountResourceRequestOperationType> OperationType { get; set; }
		
		/// <summary>
		/// The custom properties of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// The custom tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AccountResourceRequestOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		create = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		update = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		link = 3,
	}
	
	/// <summary>
	/// Defines the source application for a VSTS pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationSource
	{
		
		/// <summary>
		/// Application specific properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationConfiguration")]
		public System.Collections.Generic.Dictionary<string, string> ApplicationConfiguration { get; set; }
		
		/// <summary>
		/// Type of application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationType")]
		public ApplicationSourceApplicationType ApplicationType { get; set; }
		
		/// <summary>
		/// Type of application source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public ApplicationSourceSourceType SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationSourceApplicationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AspDotNet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AspDotNetCore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NodeJs = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationSourceSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeTemplate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeRepository = 1,
	}
	
	/// <summary>
	/// Defines the target resources for a VSTS pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationTarget
	{
		
		/// <summary>
		/// List of target resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public TargetResource[] Resources { get; set; }
		
		/// <summary>
		/// Type of target.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public ApplicationTargetTargetType TargetType { get; set; }
	}
	
	/// <summary>
	/// Defines a single resource used as target for a VSTS pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TargetResource
	{
		
		/// <summary>
		/// Reference to the authorization info used to access the target resource. This value is used as a key into the global authorization details dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationReference")]
		public string AuthorizationReference { get; set; }
		
		/// <summary>
		/// Unique identifier of the target resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Role of the target resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationTargetTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WindowsAppService = 0,
	}
	
	/// <summary>
	/// Defines the authorization type and its parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Authorization
	{
		
		/// <summary>
		/// Type of authorization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizationType")]
		public AuthorizationAuthorizationType AuthorizationType { get; set; }
		
		/// <summary>
		/// Authorization parameters corresponding to the authorization type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AuthorizationAuthorizationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authorizationToken = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personalAccessToken = 1,
	}
	
	/// <summary>
	/// The body of a POST request to check name availability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityParameter
	{
		
		/// <summary>
		/// The name of the resource to check availability for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The type of resource to check availability for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// The response to a name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityResult
	{
		
		/// <summary>
		/// The message describing the detailed reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The value which indicates whether the provided name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
	}
	
	/// <summary>
	/// Defines a code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CodeRepository
	{
		
		/// <summary>
		/// Reference to the authorization info used to access the code repository. This value is used as a key into the global authorization details dictionary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationReference")]
		public string AuthorizationReference { get; set; }
		
		/// <summary>
		/// Default branch for which continuous integration should be configured in the VSTS pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultBranch")]
		public string DefaultBranch { get; set; }
		
		/// <summary>
		/// Unique identifier of the code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Repository-specific properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Type of code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryType")]
		public CodeRepositoryRepositoryType RepositoryType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CodeRepositoryRepositoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gitHub = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vstsGit = 1,
	}
	
	/// <summary>
	/// Defines the source application, when it resides in a code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CodeRepositoryApplicationSource
	{
		
		/// <summary>
		/// Defines a code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public CodeRepository Repository { get; set; }
	}
	
	/// <summary>
	/// Defines the source application template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CodeTemplateApplicationSource
	{
	}
	
	/// <summary>
	/// The response to an extension resource GET request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtensionResource
	{
		
		/// <summary>
		/// Plan data for an extension resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public ExtensionResourcePlan Plan { get; set; }
		
		/// <summary>
		/// Resource properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	/// <summary>
	/// Plan data for an extension resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtensionResourcePlan
	{
		
		/// <summary>
		/// Name of the plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// Optional: the promotion code associated with the plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionCode")]
		public string PromotionCode { get; set; }
		
		/// <summary>
		/// Name of the extension publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// A string that uniquely identifies the plan version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The response to an extension resource list GET request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtensionResourceListResult
	{
		
		/// <summary>
		/// Array of extension resource details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExtensionResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The body of an extension resource PUT request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExtensionResourceRequest
	{
		
		/// <summary>
		/// The Azure region of the Visual Studio account associated with this request (i.e 'southcentralus'.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Plan data for an extension resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public ExtensionResourcePlan Plan { get; set; }
		
		/// <summary>
		/// A dictionary of extended properties. This property is currently unused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// A dictionary of user-defined tags to be stored with the extension resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Properties of an operation supported by the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Properties of an operation supported by the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationProperties Display { get; set; }
		
		/// <summary>
		/// The name of the resource operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Properties of an operation supported by the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationProperties
	{
		
		/// <summary>
		/// The description of the resource operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The provider name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Container for a list of operations supported by a resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// A list of operations supported by a resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Defines a VSTS pipeline template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PipelineTemplate
	{
		
		/// <summary>
		/// Defines the source application for a VSTS pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationSource")]
		public ApplicationSource ApplicationSource { get; set; }
		
		/// <summary>
		/// Defines the target resources for a VSTS pipeline.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationTarget")]
		public ApplicationTarget ApplicationTarget { get; set; }
		
		/// <summary>
		/// Global dictionary of authorization details used by the pipeline, with a friendly name as key. Individual resource in the pipeline can reference to a specific authorization info using the friendly name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizationDetails")]
		public System.Collections.Generic.Dictionary<string, Authorization> AuthorizationDetails { get; set; }
	}
	
	/// <summary>
	/// A Visual Studio Team Services project resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectResource
	{
		
		/// <summary>
		/// Kind of project resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<ProjectResourceKind> Kind { get; set; }
		
		/// <summary>
		/// Defines the custom properties of project resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProjectResourceProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProjectResourceKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		project = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bootstrappedProject = 1,
	}
	
	/// <summary>
	/// Defines the custom properties of project resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectResourceProperties
	{
		
		/// <summary>
		/// Defines a VSTS pipeline template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootstrapPipelineTemplate")]
		public PipelineTemplate BootstrapPipelineTemplate { get; set; }
		
		/// <summary>
		/// Optional UPN of the owner, on-behalf-of whom the project is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerUpn")]
		public string OwnerUpn { get; set; }
		
		/// <summary>
		/// Process template to use in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processTemplateId")]
		public System.Nullable<ProjectResourcePropertiesProcessTemplateId> ProcessTemplateId { get; set; }
		
		/// <summary>
		/// Unique identifier of the VSTS project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tfsUniqueIdentifier")]
		public string TfsUniqueIdentifier { get; set; }
		
		/// <summary>
		/// Version control to use for the default repo created in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionControlOption")]
		public System.Nullable<ProjectResourcePropertiesVersionControlOption> VersionControlOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProjectResourcePropertiesProcessTemplateId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scrum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Agile = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cmmi = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProjectResourcePropertiesVersionControlOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Git = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tfvc = 1,
	}
	
	/// <summary>
	/// The response to a request to list Team Services project resources in a resource group/account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectResourceListResult
	{
		
		/// <summary>
		/// List of project resource details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProjectResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters to update a project resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectResourceUpdateParameters
	{
		
		/// <summary>
		/// The custom tags to be set on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// A generic Azure Resource Manager resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Unique identifier of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Operations_List
		/// Gets the details of all operations possible on the Microsoft.VisualStudio resource provider.
		/// Operations_List providers/microsoft.visualstudio/operations
		/// </summary>
		/// <returns>The operation succeeded. The response contains the possible operations on the Microsoft.VisualStudio resource provider.</returns>
		public async Task<OperationListResult> Operations_ListAsync()
		{
			var requestUri = "providers/microsoft.visualstudio/operations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accounts_CheckNameAvailability
		/// Checks if the specified Visual Studio Team Services account name is available. Resource name can be either an account name or an account name and PUID.
		/// Accounts_CheckNameAvailability subscriptions/{subscriptionId}/providers/microsoft.visualstudio/checkNameAvailability
		/// </summary>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Parameters describing the name to check availability for.</param>
		/// <returns>The operation succeeded. The response contains the result of the name availability check.</returns>
		public async Task<CheckNameAvailabilityResult> Accounts_CheckNameAvailabilityAsync(string subscriptionId, string api_version, CheckNameAvailabilityParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.visualstudio/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Projects_ListByAccountResource
		/// Gets all Visual Studio Team Services project resources created in the specified Team Services account.
		/// Project_ListByAccountResource subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="rootResourceName">Name of the Team Services account.</param>
		/// <returns>The operation succeeded. The response contains the details of the Visual Studio Team Services project resources created in the specified Team Services account.</returns>
		public async Task<ProjectResourceListResult> Project_ListByAccountResourceAsync(string resourceGroupName, string subscriptionId, string api_version, string rootResourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (rootResourceName==null? "" : System.Uri.EscapeDataString(rootResourceName))+"/project&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProjectResourceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Projects_Get
		/// Gets the details of a Team Services project resource.
		/// Projects_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="rootResourceName">Name of the Team Services account.</param>
		/// <param name="resourceName">Name of the Team Services project.</param>
		/// <returns>The operation succeeded. The response contains the details of the updated team project resource.</returns>
		public async Task<ProjectResource> Projects_GetAsync(string resourceGroupName, string subscriptionId, string api_version, string rootResourceName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (rootResourceName==null? "" : System.Uri.EscapeDataString(rootResourceName))+"/project/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProjectResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Projects_Create
		/// Creates a Team Services project in the collection with the specified name. 'VersionControlOption' and 'ProcessTemplateId' must be specified in the resource properties. Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId: 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC, 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process templates).
		/// Projects_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="rootResourceName">Name of the Team Services account.</param>
		/// <param name="resourceName">Name of the Team Services project.</param>
		/// <param name="validating">This parameter is ignored and should be set to an empty string.</param>
		/// <param name="requestBody">The request data.</param>
		/// <returns>The operation succeeded. The response contains the details of the created or updated team project resource.</returns>
		public async Task<ProjectResource> Projects_CreateAsync(string resourceGroupName, string subscriptionId, string api_version, string rootResourceName, string resourceName, string validating, ProjectResource requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (rootResourceName==null? "" : System.Uri.EscapeDataString(rootResourceName))+"/project/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&validating=" + (validating==null? "" : System.Uri.EscapeDataString(validating));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProjectResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Projects_Update
		/// Updates the tags of the specified Team Services project.
		/// Projects_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="rootResourceName">Name of the Team Services account.</param>
		/// <param name="resourceName">Name of the Team Services project.</param>
		/// <param name="requestBody">The request data.</param>
		/// <returns>The operation succeeded. The response contains the details of the updated team project resource.</returns>
		public async Task<ProjectResource> Projects_UpdateAsync(string resourceGroupName, string subscriptionId, string api_version, string rootResourceName, string resourceName, ProjectResourceUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (rootResourceName==null? "" : System.Uri.EscapeDataString(rootResourceName))+"/project/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProjectResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accounts_ListByResourceGroup
		/// Gets all Visual Studio Team Services account resources under the resource group linked to the specified Azure subscription.
		/// Accounts_ListByResourceGroup subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <returns>The operation succeeded. The response contains the details of the Visual Studio Team Services account resources linked to the Azure subscription.</returns>
		public async Task<AccountResourceListResult> Accounts_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountResourceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Extensions_ListByAccount
		/// Gets the details of the extension resources created within the resource group.
		/// Extensions_ListByAccount subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="accountResourceName">The name of the Visual Studio Team Services account resource.</param>
		/// <returns>The operation succeeded. The response contains all extension resource details for the specified account.</returns>
		public async Task<ExtensionResourceListResult> Extensions_ListByAccountAsync(string resourceGroupName, string subscriptionId, string api_version, string accountResourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (accountResourceName==null? "" : System.Uri.EscapeDataString(accountResourceName))+"/extension&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExtensionResourceListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Extensions_Get
		/// Gets the details of an extension associated with a Visual Studio Team Services account resource.
		/// Extensions_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="accountResourceName">The name of the Visual Studio Team Services account resource.</param>
		/// <param name="extensionResourceName">The name of the extension.</param>
		/// <returns>The operation succeeded. The response contains the extension resource details for the specified account.</returns>
		public async Task<ExtensionResource> Extensions_GetAsync(string resourceGroupName, string subscriptionId, string api_version, string accountResourceName, string extensionResourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (accountResourceName==null? "" : System.Uri.EscapeDataString(accountResourceName))+"/extension/"+ (extensionResourceName==null? "" : System.Uri.EscapeDataString(extensionResourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExtensionResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Extensions_Create
		/// Registers the extension with a Visual Studio Team Services account.
		/// Extensions_Create subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="accountResourceName">The name of the Visual Studio Team Services account resource.</param>
		/// <param name="extensionResourceName">The name of the extension.</param>
		/// <param name="requestBody">An object containing additional information related to the extension request.</param>
		/// <returns>The operation succeeded. The extension resource was created for the specified account.</returns>
		public async Task<ExtensionResource> Extensions_CreateAsync(string resourceGroupName, string subscriptionId, string api_version, string accountResourceName, string extensionResourceName, ExtensionResourceRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (accountResourceName==null? "" : System.Uri.EscapeDataString(accountResourceName))+"/extension/"+ (extensionResourceName==null? "" : System.Uri.EscapeDataString(extensionResourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExtensionResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Extensions_Delete
		/// Removes an extension resource registration for a Visual Studio Team Services account.
		/// Extensions_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="accountResourceName">The name of the Visual Studio Team Services account resource.</param>
		/// <param name="extensionResourceName">The name of the extension.</param>
		/// <returns>The operation succeeded. The extension resource has been deleted for the specified account.</returns>
		public async Task Extensions_DeleteAsync(string resourceGroupName, string subscriptionId, string api_version, string accountResourceName, string extensionResourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (accountResourceName==null? "" : System.Uri.EscapeDataString(accountResourceName))+"/extension/"+ (extensionResourceName==null? "" : System.Uri.EscapeDataString(extensionResourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Extensions_Update
		/// Updates an existing extension registration for the Visual Studio Team Services account.
		/// Extensions_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="accountResourceName">The name of the Visual Studio Team Services account resource.</param>
		/// <param name="extensionResourceName">The name of the extension.</param>
		/// <param name="requestBody">An object containing additional information related to the extension request.</param>
		/// <returns>The operation succeeded. The extension resource was updated for the specified account.</returns>
		public async Task<ExtensionResource> Extensions_UpdateAsync(string resourceGroupName, string subscriptionId, string api_version, string accountResourceName, string extensionResourceName, ExtensionResourceRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (accountResourceName==null? "" : System.Uri.EscapeDataString(accountResourceName))+"/extension/"+ (extensionResourceName==null? "" : System.Uri.EscapeDataString(extensionResourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExtensionResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accounts_Get
		/// Gets the Visual Studio Team Services account resource details.
		/// Accounts_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <returns>The operation succeeded. The response contains the details of the Visual Studio Team Services account resource.</returns>
		public async Task<AccountResource> Accounts_GetAsync(string resourceGroupName, string subscriptionId, string api_version, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accounts_CreateOrUpdate
		/// Creates or updates a Visual Studio Team Services account resource.
		/// Accounts_CreateOrUpdate subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <param name="requestBody">The request data.</param>
		/// <returns>The operation succeeded. The Visual Studio Team Services account resource was created or updated.</returns>
		public async Task<AccountResource> Accounts_CreateOrUpdateAsync(string resourceGroupName, string subscriptionId, string api_version, string resourceName, AccountResourceRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AccountResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accounts_Delete
		/// Deletes a Visual Studio Team Services account resource.
		/// Accounts_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group within the Azure subscription.</param>
		/// <param name="subscriptionId">The Azure subscription identifier.</param>
		/// <param name="api_version">API Version</param>
		/// <param name="resourceName">Name of the resource.</param>
		/// <returns>The operation succeeded. The Visual Studio Team Services account resource was deleted.</returns>
		public async Task Accounts_DeleteAsync(string resourceGroupName, string subscriptionId, string api_version, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.visualstudio/account/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
