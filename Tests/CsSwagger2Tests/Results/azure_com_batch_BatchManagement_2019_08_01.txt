//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Parameters for an activating an application package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActivateApplicationPackageParameters
	{
		
		/// <summary>
		/// The format of the application package binary file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
	}
	
	/// <summary>
	/// Contains information about an application in a Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Application : ProxyResource
	{
		
		/// <summary>
		/// The properties associated with the Application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApplicationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// An application package which represents a particular version of an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPackage : ProxyResource
	{
		
		/// <summary>
		/// Properties of an application package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApplicationPackageProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of an application package
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPackageProperties
	{
		
		/// <summary>
		/// The format of the application package, if the package is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// The time at which the package was last activated, if the package is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastActivationTime")]
		public System.Nullable<System.DateTimeOffset> LastActivationTime { get; set; }
		
		/// <summary>
		/// The current state of the application package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ApplicationPackagePropertiesState> State { get; set; }
		
		/// <summary>
		/// The URL for the application package in Azure Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageUrl")]
		public string StorageUrl { get; set; }
		
		/// <summary>
		/// The UTC time at which the Azure Storage URL will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageUrlExpiry")]
		public System.Nullable<System.DateTimeOffset> StorageUrlExpiry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationPackagePropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPackageReference
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The properties associated with the Application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationProperties
	{
		
		/// <summary>
		/// A value indicating whether packages within the application may be overwritten using the same version string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUpdates")]
		public System.Nullable<System.Boolean> AllowUpdates { get; set; }
		
		/// <summary>
		/// The package to use if a client requests the application but does not specify a version. This property can only be set to the name of an existing package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultVersion")]
		public string DefaultVersion { get; set; }
		
		/// <summary>
		/// The display name for the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoScaleRun
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public AutoScaleRunError Error { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evaluationTime")]
		public System.DateTimeOffset EvaluationTime { get; set; }
		
		/// <summary>
		/// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public string Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoScaleRunError
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public AutoScaleRunError[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoScaleSettings
	{
		
		/// <summary>
		/// If omitted, the default value is 15 minutes (PT15M).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationInterval")]
		public string EvaluationInterval { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formula")]
		public string Formula { get; set; }
	}
	
	/// <summary>
	/// The properties related to the auto-storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoStorageBaseProperties
	{
		
		/// <summary>
		/// The resource ID of the storage account to be used for auto-storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountId")]
		public string StorageAccountId { get; set; }
	}
	
	/// <summary>
	/// Contains information about the auto-storage account associated with a Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoStorageProperties : AutoStorageBaseProperties
	{
		
		/// <summary>
		/// The UTC time at which storage keys were last synchronized with the Batch account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastKeySync")]
		public System.DateTimeOffset LastKeySync { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoUserSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="elevationLevel")]
		public System.Nullable<AutoUserSpecificationElevationLevel> ElevationLevel { get; set; }
		
		/// <summary>
		/// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<AutoUserSpecificationScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoUserSpecificationElevationLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonAdmin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Admin = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoUserSpecificationScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pool = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureBlobFileSystemConfiguration
	{
		
		/// <summary>
		/// This property is mutually exclusive with sasKey and one must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountKey")]
		public string AccountKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// These are 'net use' options in Windows and 'mount' options in Linux.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobfuseOptions")]
		public string BlobfuseOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relativeMountPath")]
		public string RelativeMountPath { get; set; }
		
		/// <summary>
		/// This property is mutually exclusive with accountKey and one must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasKey")]
		public string SasKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureFileShareConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountKey")]
		public string AccountKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// This is of the form 'https://{account}.file.core.windows.net/'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureFileUrl")]
		public string AzureFileUrl { get; set; }
		
		/// <summary>
		/// These are 'net use' options in Windows and 'mount' options in Linux.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountOptions")]
		public string MountOptions { get; set; }
		
		/// <summary>
		/// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relativeMountPath")]
		public string RelativeMountPath { get; set; }
	}
	
	/// <summary>
	/// Contains information about an Azure Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAccount : Resource
	{
		
		/// <summary>
		/// Account specific properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BatchAccountProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Parameters supplied to the Create operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAccountCreateParameters
	{
		
		/// <summary>
		/// The region in which to create the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The properties of a Batch account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BatchAccountCreateProperties Properties { get; set; }
		
		/// <summary>
		/// The user-specified tags associated with the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The properties of a Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAccountCreateProperties
	{
		
		/// <summary>
		/// The properties related to the auto-storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoStorage")]
		public AutoStorageBaseProperties AutoStorage { get; set; }
		
		/// <summary>
		/// Identifies the Azure key vault associated with a Batch account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultReference")]
		public KeyVaultReference KeyVaultReference { get; set; }
		
		/// <summary>
		/// The allocation mode for creating pools in the Batch account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolAllocationMode")]
		public System.Nullable<BatchAccountCreatePropertiesPoolAllocationMode> PoolAllocationMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BatchAccountCreatePropertiesPoolAllocationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BatchService = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserSubscription = 1,
	}
	
	/// <summary>
	/// A set of Azure Batch account keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAccountKeys
	{
		
		/// <summary>
		/// The Batch account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The primary key associated with the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public string Primary { get; set; }
		
		/// <summary>
		/// The secondary key associated with the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondary")]
		public string Secondary { get; set; }
	}
	
	/// <summary>
	/// Values returned by the List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAccountListResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of Batch accounts returned by the listing operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BatchAccount[] Value { get; set; }
	}
	
	/// <summary>
	/// Account specific properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAccountProperties
	{
		
		/// <summary>
		/// The account endpoint used to interact with the Batch service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountEndpoint")]
		public string AccountEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeJobAndJobScheduleQuota")]
		public System.Nullable<System.Int32> ActiveJobAndJobScheduleQuota { get; set; }
		
		/// <summary>
		/// Contains information about the auto-storage account associated with a Batch account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoStorage")]
		public AutoStorageProperties AutoStorage { get; set; }
		
		/// <summary>
		/// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dedicatedCoreQuota")]
		public System.Nullable<System.Int32> DedicatedCoreQuota { get; set; }
		
		/// <summary>
		/// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dedicatedCoreQuotaPerVMFamily")]
		public VirtualMachineFamilyCoreQuota[] DedicatedCoreQuotaPerVMFamily { get; set; }
		
		/// <summary>
		/// Batch is transitioning its core quota system for dedicated cores to be enforced per Virtual Machine family. During this transitional phase, the dedicated core quota per Virtual Machine family may not yet be enforced. If this flag is false, dedicated core quota is enforced via the old dedicatedCoreQuota property on the account and does not consider Virtual Machine family. If this flag is true, dedicated core quota is enforced via the dedicatedCoreQuotaPerVMFamily property on the account, and the old dedicatedCoreQuota does not apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dedicatedCoreQuotaPerVMFamilyEnforced")]
		public System.Nullable<System.Boolean> DedicatedCoreQuotaPerVMFamilyEnforced { get; set; }
		
		/// <summary>
		/// Identifies the Azure key vault associated with a Batch account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultReference")]
		public KeyVaultReference KeyVaultReference { get; set; }
		
		/// <summary>
		/// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowPriorityCoreQuota")]
		public System.Nullable<System.Int32> LowPriorityCoreQuota { get; set; }
		
		/// <summary>
		/// The allocation mode for creating pools in the Batch account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolAllocationMode")]
		public BatchAccountCreatePropertiesPoolAllocationMode PoolAllocationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolQuota")]
		public System.Nullable<System.Int32> PoolQuota { get; set; }
		
		/// <summary>
		/// The provisioned state of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<BatchAccountPropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// A VM Family and its associated core quota for the Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineFamilyCoreQuota
	{
		
		/// <summary>
		/// The core quota for the VM family for the Batch account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coreQuota")]
		public System.Nullable<System.Int32> CoreQuota { get; set; }
		
		/// <summary>
		/// The Virtual Machine family name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BatchAccountPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 5,
	}
	
	/// <summary>
	/// Parameters supplied to the RegenerateKey operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAccountRegenerateKeyParameters
	{
		
		/// <summary>
		/// The type of account key to regenerate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public BatchAccountRegenerateKeyParametersKeyName KeyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BatchAccountRegenerateKeyParametersKeyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Secondary = 1,
	}
	
	/// <summary>
	/// Parameters for updating an Azure Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAccountUpdateParameters
	{
		
		/// <summary>
		/// The properties of a Batch account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BatchAccountUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// The user-specified tags associated with the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The properties of a Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAccountUpdateProperties
	{
		
		/// <summary>
		/// The properties related to the auto-storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoStorage")]
		public AutoStorageBaseProperties AutoStorage { get; set; }
	}
	
	/// <summary>
	/// Quotas associated with a Batch region for a particular subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchLocationQuota
	{
		
		/// <summary>
		/// The number of Batch accounts that may be created under the subscription in the specified region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountQuota")]
		public System.Nullable<System.Int32> AccountQuota { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CIFSMountConfiguration
	{
		
		/// <summary>
		/// These are 'net use' options in Windows and 'mount' options in Linux.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountOptions")]
		public string MountOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relativeMountPath")]
		public string RelativeMountPath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CachingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadWrite = 2,
	}
	
	/// <summary>
	/// Contains information about a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Certificate : ProxyResource
	{
		
		/// <summary>
		/// Certificate properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CertificateProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateBaseProperties
	{
		
		/// <summary>
		/// The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<CertificateBasePropertiesFormat> Format { get; set; }
		
		/// <summary>
		/// This must match the thumbprint from the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprint")]
		public string Thumbprint { get; set; }
		
		/// <summary>
		/// This must match the first portion of the certificate name. Currently required to be 'SHA1'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbprintAlgorithm")]
		public string ThumbprintAlgorithm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificateBasePropertiesFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pfx = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cer = 1,
	}
	
	/// <summary>
	/// Contains information about a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateCreateOrUpdateParameters : ProxyResource
	{
		
		/// <summary>
		/// Certificate properties for create operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CertificateCreateOrUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Certificate properties for create operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateCreateOrUpdateProperties : CertificateBaseProperties
	{
		
		/// <summary>
		/// The maximum size is 10KB.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// This is required if the certificate format is pfx and must be omitted if the certificate format is cer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Certificate properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateProperties : CertificateBaseProperties
	{
		
		/// <summary>
		/// An error response from the Batch service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteCertificateError")]
		public DeleteCertificateError DeleteCertificateError { get; set; }
		
		/// <summary>
		/// The previous provisioned state of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousProvisioningState")]
		public System.Nullable<CertificatePropertiesPreviousProvisioningState> PreviousProvisioningState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousProvisioningStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> PreviousProvisioningStateTransitionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public CertificatePropertiesPreviousProvisioningState ProvisioningState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> ProvisioningStateTransitionTime { get; set; }
		
		/// <summary>
		/// The public key of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicData")]
		public string PublicData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificatePropertiesPreviousProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CertificateReference
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeLocation")]
		public System.Nullable<CertificateReferenceStoreLocation> StoreLocation { get; set; }
		
		/// <summary>
		/// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public string[] Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CertificateReferenceStoreLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CurrentUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocalMachine = 1,
	}
	
	/// <summary>
	/// Parameters for a check name availability request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityParameters
	{
		
		/// <summary>
		/// The name to check for availability
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type. Must be set to Microsoft.Batch/batchAccounts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckNameAvailabilityParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Batch/batchAccounts")]
		Microsoft_Batch_batchAccounts = 0,
	}
	
	/// <summary>
	/// The CheckNameAvailability operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityResult
	{
		
		/// <summary>
		/// Gets an error message explaining the Reason value in more detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or invalid and cannot be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Gets the reason that a Batch account name could not be used. The Reason element is only returned if NameAvailable is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameAvailabilityResultReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityResultReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// An error response from the Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from the Batch service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from the Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudServiceConfiguration
	{
		
		/// <summary>
		/// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="osFamily")]
		public string OsFamily { get; set; }
		
		/// <summary>
		/// The default value is * which specifies the latest operating system version for the specified OS family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComputeNodeDeallocationOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Requeue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TaskCompletion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RetainedData = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerConfiguration
	{
		
		/// <summary>
		/// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImageNames")]
		public string[] ContainerImageNames { get; set; }
		
		/// <summary>
		/// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerRegistries")]
		public ContainerRegistry[] ContainerRegistries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ContainerConfigurationType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerRegistry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// If omitted, the default is "docker.io".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registryServer")]
		public string RegistryServer { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerConfigurationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DockerCompatible = 0,
	}
	
	/// <summary>
	/// Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataDisk
	{
		
		[System.Runtime.Serialization.DataMember(Name="caching")]
		public CachingType Caching { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskSizeGB")]
		public int DiskSizeGB { get; set; }
		
		/// <summary>
		/// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lun")]
		public int Lun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageAccountType")]
		public System.Nullable<DataDiskStorageAccountType> StorageAccountType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataDiskStorageAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_LRS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_LRS = 1,
	}
	
	/// <summary>
	/// An error response from the Batch service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteCertificateError
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public DeleteCertificateError[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudServiceConfiguration")]
		public CloudServiceConfiguration CloudServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfiguration")]
		public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ElevationLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonAdmin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Admin = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FixedScaleSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodeDeallocationOption")]
		public ComputeNodeDeallocationOption NodeDeallocationOption { get; set; }
		
		/// <summary>
		/// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		/// <summary>
		/// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetDedicatedNodes")]
		public System.Nullable<System.Int32> TargetDedicatedNodes { get; set; }
		
		/// <summary>
		/// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLowPriorityNodes")]
		public System.Nullable<System.Int32> TargetLowPriorityNodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageReference
	{
		
		/// <summary>
		/// This property is mutually exclusive with other properties. For Virtual Machine Image it must be in the same region and subscription as the Azure Batch account. For SIG image it must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// For example, UbuntuServer or WindowsServer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// For example, Canonical or MicrosoftWindowsServer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// For example, 18.04-LTS or 2019-Datacenter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InboundNatPool
	{
		
		/// <summary>
		/// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendPort")]
		public int BackendPort { get; set; }
		
		/// <summary>
		/// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frontendPortRangeEnd")]
		public int FrontendPortRangeEnd { get; set; }
		
		/// <summary>
		/// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frontendPortRangeStart")]
		public int FrontendPortRangeStart { get; set; }
		
		/// <summary>
		/// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkSecurityGroupRules")]
		public NetworkSecurityGroupRule[] NetworkSecurityGroupRules { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public InboundNatPoolProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkSecurityGroupRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access")]
		public NetworkSecurityGroupRuleAccess Access { get; set; }
		
		/// <summary>
		/// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public int Priority { get; set; }
		
		/// <summary>
		/// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAddressPrefix")]
		public string SourceAddressPrefix { get; set; }
		
		/// <summary>
		/// Valid values are '*' (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can't overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourcePortRanges")]
		public string[] SourcePortRanges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkSecurityGroupRuleAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InboundNatPoolProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 1,
	}
	
	/// <summary>
	/// Identifies the Azure key vault associated with a Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultReference
	{
		
		/// <summary>
		/// The resource ID of the Azure key vault associated with the Batch account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The URL of the Azure key vault associated with the Batch account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LinuxUserConfiguration
	{
		
		/// <summary>
		/// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public System.Nullable<System.Int32> Gid { get; set; }
		
		/// <summary>
		/// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshPrivateKey")]
		public string SshPrivateKey { get; set; }
		
		/// <summary>
		/// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public System.Nullable<System.Int32> Uid { get; set; }
	}
	
	/// <summary>
	/// The result of performing list application packages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListApplicationPackagesResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of application packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ApplicationPackage[] Value { get; set; }
	}
	
	/// <summary>
	/// The result of performing list applications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListApplicationsResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of applications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Application[] Value { get; set; }
	}
	
	/// <summary>
	/// Values returned by the List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListCertificatesResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of returned certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Certificate[] Value { get; set; }
	}
	
	/// <summary>
	/// Values returned by the List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListPoolsResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of returned pools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Pool[] Value { get; set; }
	}
	
	/// <summary>
	/// Contains information about a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Pool : ProxyResource
	{
		
		/// <summary>
		/// Pool properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PoolProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetadataItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MountConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="azureBlobFileSystemConfiguration")]
		public AzureBlobFileSystemConfiguration AzureBlobFileSystemConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="azureFileShareConfiguration")]
		public AzureFileShareConfiguration AzureFileShareConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cifsMountConfiguration")]
		public CIFSMountConfiguration CifsMountConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nfsMountConfiguration")]
		public NFSMountConfiguration NfsMountConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NFSMountConfiguration
	{
		
		/// <summary>
		/// These are 'net use' options in Windows and 'mount' options in Linux.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountOptions")]
		public string MountOptions { get; set; }
		
		/// <summary>
		/// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relativeMountPath")]
		public string RelativeMountPath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	/// <summary>
	/// The network configuration for a pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="endpointConfiguration")]
		public PoolEndpointConfiguration EndpointConfiguration { get; set; }
		
		/// <summary>
		/// The number of IPs specified here limits the maximum size of the Pool - 50 dedicated nodes or 20 low-priority nodes can be allocated for each public IP. For example, a pool needing 150 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIPs")]
		public string[] PublicIPs { get; set; }
		
		/// <summary>
		/// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created via virtualMachineConfiguration the Batch account must have poolAllocationMode userSubscription in order to use a VNet. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// This is of the format {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The allocation mode for creating pools in the Batch account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PoolAllocationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BatchService = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserSubscription = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolEndpointConfiguration
	{
		
		/// <summary>
		/// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inboundNatPools")]
		public InboundNatPool[] InboundNatPools { get; set; }
	}
	
	/// <summary>
	/// Pool properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PoolProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="allocationState")]
		public System.Nullable<PoolPropertiesAllocationState> AllocationState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocationStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> AllocationStateTransitionTime { get; set; }
		
		/// <summary>
		/// The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationLicenses")]
		public string[] ApplicationLicenses { get; set; }
		
		/// <summary>
		/// Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPackages")]
		public ApplicationPackageReference[] ApplicationPackages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScaleRun")]
		public AutoScaleRun AutoScaleRun { get; set; }
		
		/// <summary>
		/// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public CertificateReference[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentDedicatedNodes")]
		public System.Nullable<System.Int32> CurrentDedicatedNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentLowPriorityNodes")]
		public System.Nullable<System.Int32> CurrentLowPriorityNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfiguration")]
		public DeploymentConfiguration DeploymentConfiguration { get; set; }
		
		/// <summary>
		/// The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interNodeCommunication")]
		public System.Nullable<PoolPropertiesInterNodeCommunication> InterNodeCommunication { get; set; }
		
		/// <summary>
		/// This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It does not factor in node-level changes such as a compute node changing state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTasksPerNode")]
		public System.Nullable<System.Int32> MaxTasksPerNode { get; set; }
		
		/// <summary>
		/// The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetadataItem[] Metadata { get; set; }
		
		/// <summary>
		/// This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountConfiguration")]
		public MountConfiguration[] MountConfiguration { get; set; }
		
		/// <summary>
		/// The network configuration for a pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<PoolPropertiesProvisioningState> ProvisioningState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> ProvisioningStateTransitionTime { get; set; }
		
		/// <summary>
		/// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeOperationStatus")]
		public ResizeOperationStatus ResizeOperationStatus { get; set; }
		
		/// <summary>
		/// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleSettings")]
		public ScaleSettings ScaleSettings { get; set; }
		
		/// <summary>
		/// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTask")]
		public StartTask StartTask { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskSchedulingPolicy")]
		public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAccounts")]
		public UserAccount[] UserAccounts { get; set; }
		
		/// <summary>
		/// For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PoolPropertiesAllocationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Steady = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resizing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PoolPropertiesInterNodeCommunication
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PoolPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="elevationLevel")]
		public AutoUserSpecificationElevationLevel ElevationLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linuxUserConfiguration")]
		public LinuxUserConfiguration LinuxUserConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windowsUserConfiguration")]
		public WindowsUserConfiguration WindowsUserConfiguration { get; set; }
	}
	
	/// <summary>
	/// A definition of an Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
		
		/// <summary>
		/// The ETag of the resource, used for concurrency statements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResizeError
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ResizeError[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResizeOperationStatus
	{
		
		/// <summary>
		/// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ResizeError[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeDeallocationOption")]
		public ComputeNodeDeallocationOption NodeDeallocationOption { get; set; }
		
		/// <summary>
		/// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resizeTimeout")]
		public string ResizeTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetDedicatedNodes")]
		public System.Nullable<System.Int32> TargetDedicatedNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetLowPriorityNodes")]
		public System.Nullable<System.Int32> TargetLowPriorityNodes { get; set; }
	}
	
	/// <summary>
	/// A definition of an Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The ID of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceFile
	{
		
		/// <summary>
		/// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoStorageContainerName")]
		public string AutoStorageContainerName { get; set; }
		
		/// <summary>
		/// The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobPrefix")]
		public string BlobPrefix { get; set; }
		
		/// <summary>
		/// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public string FileMode { get; set; }
		
		/// <summary>
		/// If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpUrl")]
		public string HttpUrl { get; set; }
		
		/// <summary>
		/// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageContainerUrl")]
		public string StorageContainerUrl { get; set; }
	}
	
	/// <summary>
	/// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScaleSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoScale")]
		public AutoScaleSettings AutoScale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fixedScale")]
		public FixedScaleSettings FixedScale { get; set; }
	}
	
	/// <summary>
	/// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartTask
	{
		
		/// <summary>
		/// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerSettings")]
		public TaskContainerSettings ContainerSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentSettings")]
		public EnvironmentSetting[] EnvironmentSettings { get; set; }
		
		/// <summary>
		/// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTaskRetryCount")]
		public System.Nullable<System.Int32> MaxTaskRetryCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceFiles")]
		public ResourceFile[] ResourceFiles { get; set; }
		
		/// <summary>
		/// Specify either the userName or autoUser property, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIdentity")]
		public UserIdentity UserIdentity { get; set; }
		
		/// <summary>
		/// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitForSuccess")]
		public System.Nullable<System.Boolean> WaitForSuccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StorageAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_LRS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_LRS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskContainerSettings
	{
		
		/// <summary>
		/// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerRunOptions")]
		public string ContainerRunOptions { get; set; }
		
		/// <summary>
		/// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageName")]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registry")]
		public ContainerRegistry Registry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workingDirectory")]
		public System.Nullable<TaskContainerSettingsWorkingDirectory> WorkingDirectory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskContainerSettingsWorkingDirectory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TaskWorkingDirectory = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContainerImageDefault = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskSchedulingPolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeFillType")]
		public TaskSchedulingPolicyNodeFillType NodeFillType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskSchedulingPolicyNodeFillType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Spread = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pack = 1,
	}
	
	/// <summary>
	/// Specify either the userName or autoUser property, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoUser")]
		public AutoUserSpecification AutoUser { get; set; }
		
		/// <summary>
		/// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerConfiguration")]
		public ContainerConfiguration ContainerConfiguration { get; set; }
		
		/// <summary>
		/// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisks")]
		public DataDisk[] DataDisks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageReference")]
		public ImageReference ImageReference { get; set; }
		
		/// <summary>
		/// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
		///
		/// Windows_Server - The on-premises license is for Windows Server.
		/// Windows_Client - The on-premises license is for Windows Client.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public string LicenseType { get; set; }
		
		/// <summary>
		/// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeAgentSkuId")]
		public string NodeAgentSkuId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windowsConfiguration")]
		public WindowsConfiguration WindowsConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WindowsConfiguration
	{
		
		/// <summary>
		/// If omitted, the default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutomaticUpdates")]
		public System.Nullable<System.Boolean> EnableAutomaticUpdates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WindowsUserConfiguration
	{
		
		/// <summary>
		/// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginMode")]
		public System.Nullable<WindowsUserConfigurationLoginMode> LoginMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WindowsUserConfigurationLoginMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Batch = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interactive = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists available operations for the Microsoft.Batch provider
		/// Operations_List providers/Microsoft.Batch/operations
		/// </summary>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <returns>The operation was successful. The response contains the list of available operations.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Batch/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OperationListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the Batch accounts associated with the subscription.
		/// BatchAccount_List subscriptions/{subscriptionId}/providers/Microsoft.Batch/batchAccounts
		/// </summary>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains a list of Batch account entities associated with the subscription.</returns>
		public async Task<BatchAccountListResult> BatchAccount_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Batch/batchAccounts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchAccountListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether the Batch account name is available in the specified region.
		/// Location_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Batch/locations/{locationName}/checkNameAvailability
		/// </summary>
		/// <param name="locationName">The desired region for the name check.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">Properties needed to check the availability of a name.</param>
		/// <returns>Success. Returns details about whether a Batch account name is available.</returns>
		public async Task<CheckNameAvailabilityResult> Location_CheckNameAvailabilityAsync(string locationName, string api_version, string subscriptionId, CheckNameAvailabilityParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Batch/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Batch service quotas for the specified subscription at the given location.
		/// Location_GetQuotas subscriptions/{subscriptionId}/providers/Microsoft.Batch/locations/{locationName}/quotas
		/// </summary>
		/// <param name="locationName">The region for which to retrieve Batch service quotas.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the Batch service quotas for the subscription in the specified location.</returns>
		public async Task<BatchLocationQuota> Location_GetQuotasAsync(string locationName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Batch/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/quotas&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchLocationQuota>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the Batch accounts associated with the specified resource group.
		/// BatchAccount_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains a list of Batch account entities associated with the resource group.</returns>
		public async Task<BatchAccountListResult> BatchAccount_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchAccountListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified Batch account.
		/// BatchAccount_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the Batch account entity.</returns>
		public async Task<BatchAccount> BatchAccount_GetAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
		/// BatchAccount_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">A name for the Batch account which must be unique within the region. Batch account names must be between 3 and 24 characters in length and must use only numbers and lowercase letters. This name is used as part of the DNS name that is used to access the Batch service in the region in which the account is created. For example: http://accountname.region.batch.azure.com/.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">Additional parameters for account creation.</param>
		/// <returns>The operation was successful. The response contains the Batch account entity.</returns>
		public async Task<BatchAccount> BatchAccount_CreateAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, BatchAccountCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Batch account.
		/// BatchAccount_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful.</returns>
		public async Task BatchAccount_DeleteAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of an existing Batch account.
		/// BatchAccount_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">Additional parameters for account update.</param>
		/// <returns>The operation was successful. The response contains the Batch account entity.</returns>
		public async Task<BatchAccount> BatchAccount_UpdateAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, BatchAccountUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the applications in the specified account.
		/// Application_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains a list of the application entities associated with the specified account.</returns>
		public async Task<ListApplicationsResult> Application_ListAsync(string resourceGroupName, string accountName, int maxresults, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications&maxresults="+maxresults+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListApplicationsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified application.
		/// Application_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="applicationName">The name of the application. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the application entity.</returns>
		public async Task<Application> Application_GetAsync(string resourceGroupName, string accountName, string applicationName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Application>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an application to the specified Batch account.
		/// Application_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="applicationName">The name of the application. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">The parameters for the request.</param>
		/// <returns>The operation was successful. The response contains the application entity.</returns>
		public async Task<Application> Application_CreateAsync(string resourceGroupName, string accountName, string applicationName, string api_version, string subscriptionId, Application requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Application>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an application.
		/// Application_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="applicationName">The name of the application. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful.</returns>
		public async Task Application_DeleteAsync(string resourceGroupName, string accountName, string applicationName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates settings for the specified application.
		/// Application_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="applicationName">The name of the application. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">The parameters for the request.</param>
		/// <returns>The operation was successful. The response contains the application entity.</returns>
		public async Task<Application> Application_UpdateAsync(string resourceGroupName, string accountName, string applicationName, string api_version, string subscriptionId, Application requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Application>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the application packages in the specified application.
		/// ApplicationPackage_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="applicationName">The name of the application. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains a list of the application package entities associated with the specified application.</returns>
		public async Task<ListApplicationPackagesResult> ApplicationPackage_ListAsync(string resourceGroupName, string accountName, string applicationName, int maxresults, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"/versions&maxresults="+maxresults+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListApplicationPackagesResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified application package.
		/// ApplicationPackage_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="applicationName">The name of the application. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="versionName">The version of the application.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the application package entity.</returns>
		public async Task<ApplicationPackage> ApplicationPackage_GetAsync(string resourceGroupName, string accountName, string applicationName, string versionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"/versions/"+ (versionName==null? "" : System.Uri.EscapeDataString(versionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationPackage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an application package record. The record contains the SAS where the package should be uploaded to.  Once it is uploaded the `ApplicationPackage` needs to be activated using `ApplicationPackageActive` before it can be used.
		/// ApplicationPackage_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="applicationName">The name of the application. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="versionName">The version of the application.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">The parameters for the request.</param>
		/// <returns>The operation was successful. The response contains the application package entity.</returns>
		public async Task<ApplicationPackage> ApplicationPackage_CreateAsync(string resourceGroupName, string accountName, string applicationName, string versionName, string api_version, string subscriptionId, ApplicationPackage requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"/versions/"+ (versionName==null? "" : System.Uri.EscapeDataString(versionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationPackage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an application package record and its associated binary file.
		/// ApplicationPackage_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="applicationName">The name of the application. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="versionName">The version of the application.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful.</returns>
		public async Task ApplicationPackage_DeleteAsync(string resourceGroupName, string accountName, string applicationName, string versionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"/versions/"+ (versionName==null? "" : System.Uri.EscapeDataString(versionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activates the specified application package. This should be done after the `ApplicationPackage` was created and uploaded. This needs to be done before an `ApplicationPackage` can be used on Pools or Tasks
		/// ApplicationPackage_Activate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}/activate
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="applicationName">The name of the application. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="versionName">The version of the application.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">The parameters for the request.</param>
		/// <returns>The operation was successful. The response contains the application package entity.</returns>
		public async Task<ApplicationPackage> ApplicationPackage_ActivateAsync(string resourceGroupName, string accountName, string applicationName, string versionName, string api_version, string subscriptionId, ActivateApplicationPackageParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"/versions/"+ (versionName==null? "" : System.Uri.EscapeDataString(versionName))+"/activate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationPackage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the certificates in the specified account.
		/// Certificate_ListByBatchAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="select">Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection.</param>
		/// <param name="filter">OData filter expression. Valid properties for filtering are "properties/provisioningState", "properties/provisioningStateTransitionTime", "name".</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains a list of certificates associated with the account.</returns>
		public async Task<ListCertificatesResult> Certificate_ListByBatchAccountAsync(string resourceGroupName, string accountName, int maxresults, string select, string filter, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/certificates&maxresults="+maxresults+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCertificatesResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified certificate.
		/// Certificate_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="certificateName">The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5.
		/// Min length: 5
		/// Max length: 45
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the certificate entity.</returns>
		public async Task<Certificate> Certificate_GetAsync(string resourceGroupName, string accountName, string certificateName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Certificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new certificate inside the specified account.
		/// Certificate_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="certificateName">The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5.
		/// Min length: 5
		/// Max length: 45
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">Additional parameters for certificate creation.</param>
		/// <returns>The operation was successful. The response contains the certificate entity.</returns>
		public async Task<Certificate> Certificate_CreateAsync(string resourceGroupName, string accountName, string certificateName, string api_version, string subscriptionId, CertificateCreateOrUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Certificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified certificate.
		/// Certificate_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="certificateName">The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5.
		/// Min length: 5
		/// Max length: 45
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful.</returns>
		public async Task Certificate_DeleteAsync(string resourceGroupName, string accountName, string certificateName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of an existing certificate.
		/// Certificate_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="certificateName">The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5.
		/// Min length: 5
		/// Max length: 45
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">Certificate entity to update.</param>
		/// <returns>The operation was successful. The response contains the certificate entity.</returns>
		public async Task<Certificate> Certificate_UpdateAsync(string resourceGroupName, string accountName, string certificateName, string api_version, string subscriptionId, CertificateCreateOrUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Certificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a failed deletion of a certificate from the specified account.
		/// If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.
		/// Certificate_CancelDeletion subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}/cancelDelete
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="certificateName">The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5.
		/// Min length: 5
		/// Max length: 45
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the certificate entity.</returns>
		public async Task<Certificate> Certificate_CancelDeletionAsync(string resourceGroupName, string accountName, string certificateName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/certificates/"+ (certificateName==null? "" : System.Uri.EscapeDataString(certificateName))+"/cancelDelete&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Certificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the account keys for the specified Batch account.
		/// This operation applies only to Batch accounts created with a poolAllocationMode of 'BatchService'. If the Batch account was created with a poolAllocationMode of 'UserSubscription', clients cannot use access to keys to authenticate, and must use Azure Active Directory instead. In this case, getting the keys will fail.
		/// BatchAccount_GetKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/listKeys
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the keys of the Batch account.</returns>
		public async Task<BatchAccountKeys> BatchAccount_GetKeysAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchAccountKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the pools in the specified account.
		/// Pool_ListByBatchAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="maxresults">The maximum number of items to return in the response.</param>
		/// <param name="select">Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection.</param>
		/// <param name="filter">OData filter expression. Valid properties for filtering are:
		///
		/// name
		/// properties/allocationState
		/// properties/allocationStateTransitionTime
		/// properties/creationTime
		/// properties/provisioningState
		/// properties/provisioningStateTransitionTime
		/// properties/lastModified
		/// properties/vmSize
		/// properties/interNodeCommunication
		/// properties/scaleSettings/autoScale
		/// properties/scaleSettings/fixedScale</param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains a list of certificates associated with the account.</returns>
		public async Task<ListPoolsResult> Pool_ListByBatchAccountAsync(string resourceGroupName, string accountName, int maxresults, string select, string filter, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/pools&maxresults="+maxresults+"&$select=" + (select==null? "" : System.Uri.EscapeDataString(select))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPoolsResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified pool.
		/// Pool_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="poolName">The pool name. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the pool entity.</returns>
		public async Task<Pool> Pool_GetAsync(string resourceGroupName, string accountName, string poolName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/pools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new pool inside the specified account.
		/// Pool_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="poolName">The pool name. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">Additional parameters for pool creation.</param>
		/// <returns>The operation was successful. The response contains the pool entity.</returns>
		public async Task<Pool> Pool_CreateAsync(string resourceGroupName, string accountName, string poolName, string api_version, string subscriptionId, Pool requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/pools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified pool.
		/// Pool_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="poolName">The pool name. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful.</returns>
		public async Task Pool_DeleteAsync(string resourceGroupName, string accountName, string poolName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/pools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the properties of an existing pool.
		/// Pool_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="poolName">The pool name. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged.</param>
		/// <returns>The operation was successful. The response contains the pool entity.</returns>
		public async Task<Pool> Pool_UpdateAsync(string resourceGroupName, string accountName, string poolName, string api_version, string subscriptionId, Pool requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/pools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables automatic scaling for a pool.
		/// Pool_DisableAutoScale subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}/disableAutoScale
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="poolName">The pool name. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the pool entity.</returns>
		public async Task<Pool> Pool_DisableAutoScaleAsync(string resourceGroupName, string accountName, string poolName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/pools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/disableAutoScale&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an ongoing resize operation on the pool.
		/// This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.
		/// Pool_StopResize subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}/stopResize
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="poolName">The pool name. This must be unique within the account.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <returns>The operation was successful. The response contains the pool entity.</returns>
		public async Task<Pool> Pool_StopResizeAsync(string resourceGroupName, string accountName, string poolName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/pools/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/stopResize&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates the specified account key for the Batch account.
		/// BatchAccount_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/regenerateKeys
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		/// <param name="requestBody">The type of key to regenerate.</param>
		/// <returns>The operation was successful. The response contains the Batch account keys.</returns>
		public async Task<BatchAccountKeys> BatchAccount_RegenerateKeyAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, BatchAccountRegenerateKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/regenerateKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchAccountKeys>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Synchronizes access keys for the auto-storage account configured for the specified Batch account.
		/// BatchAccount_SynchronizeAutoStorageKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/syncAutoStorageKeys
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the Batch account.</param>
		/// <param name="accountName">The name of the Batch account.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to be used with the HTTP request.</param>
		/// <param name="subscriptionId">The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)</param>
		public async Task BatchAccount_SynchronizeAutoStorageKeysAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Batch/batchAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/syncAutoStorageKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
