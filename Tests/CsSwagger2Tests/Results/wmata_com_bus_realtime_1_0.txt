//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// XML - Next Buses
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns next bus arrival times at a stop.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Predictions</td>
		/// 
		/// <td>
		/// Array containing bus predictions (<a href=
		/// "#NextBusPrediction">NextBusPrediction</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StopName</td>
		/// 
		/// <td>Full name of the given StopID.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="NextBusPrediction" name=
		/// "NextBusPrediction">NextBusPrediction Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DirectionNum</td>
		/// 
		/// <td>Denotes a binary direction (0 or 1) of the bus. There is no
		/// specific mapping to direction, but a different value for the same
		/// route signifies that the buses are traveling in opposite
		/// directions. Use the DirectionText element to show the actual
		/// destination of the bus.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DirectionText</td>
		/// 
		/// <td>Customer-friendly description of direction and destination for
		/// a bus.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Minutes</td>
		/// 
		/// <td>Minutes until bus arrival at this stop. Numeric value.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>RouteID</td>
		/// 
		/// <td>Base route name as shown on the bus. This can be used in other
		/// bus-related methods. Note that all variants will be shown as their
		/// base route names (i.e.: 10Av1 and 10Av2 will be shown as 10A).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>TripID</td>
		/// 
		/// <td>Trip identifier. This can be correlated with the data in our
		/// bus schedule information as well as bus positions.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>VehicleID</td>
		/// 
		/// <td>Bus identifier. This can be correlated with results returned
		/// from bus positions.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// PredictionsGetByStopID Predictions
		/// </summary>
		/// <param name="StopID">7-digit regional stop ID.</param>
		/// <returns>Default response code.</returns>
		public async Task PredictionsGetByStopIDAsync(PredictionsGetByStopIDStopID StopID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Predictions?StopID=" + StopID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// JSON - Next Buses
		/// <h4 class="text-primary">Description</h4>
		/// 
		/// <p>Returns next bus arrival times at a stop.</p>
		/// 
		/// <h4 class="text-primary">Response Elements</h4>
		/// 
		/// <table class="table table-condensed table-hover">
		/// <thead>
		/// <tr>
		/// <th class="col-md-3">Element</th>
		/// 
		/// <th>Description</th>
		/// </tr>
		/// </thead>
		/// 
		/// <tbody>
		/// <tr>
		/// <td>Predictions</td>
		/// 
		/// <td>
		/// Array containing bus predictions (<a href=
		/// "#NextBusPrediction">NextBusPrediction</a>).
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>StopName</td>
		/// 
		/// <td>Full name of the given StopID.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td colspan="2">
		/// <div class="text-primary" style="margin-top: 1em">
		/// <a id="NextBusPrediction" name=
		/// "NextBusPrediction">NextBusPrediction Elements</a>
		/// </div>
		/// </td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DirectionNum</td>
		/// 
		/// <td>Denotes a binary direction (0 or 1) of the bus. There is no
		/// specific mapping to direction, but a different value for the same
		/// route signifies that the buses are traveling in opposite
		/// directions. Use the DirectionText element to show the actual
		/// destination of the bus.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>DirectionText</td>
		/// 
		/// <td>Customer-friendly description of direction and destination for
		/// a bus.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>Minutes</td>
		/// 
		/// <td>Minutes until bus arrival at this stop. Numeric value.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>RouteID</td>
		/// 
		/// <td>Base route name as shown on the bus. This can be used in other
		/// bus-related methods. Note that all variants will be shown as their
		/// base route names (i.e.: 10Av1 and 10Av2 will be shown as 10A).</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>TripID</td>
		/// 
		/// <td>Trip identifier. This can be correlated with the data in our
		/// bus schedule information as well as bus positions.</td>
		/// </tr>
		/// 
		/// <tr>
		/// <td>VehicleID</td>
		/// 
		/// <td>Bus identifier. This can be correlated with results returned
		/// from bus positions.</td>
		/// </tr>
		/// </tbody>
		/// </table>
		/// JsonJPredictionsGetByStopID json/jPredictions
		/// </summary>
		/// <param name="StopID">7-digit regional stop ID.</param>
		/// <returns>Default response type.</returns>
		public async Task JsonJPredictionsGetByStopIDAsync(JsonJPredictionsGetByStopIDStopID StopID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "json/jPredictions?StopID=" + StopID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum PredictionsGetByStopIDStopID
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1001195")]
		_1001195 = 0,
	}
	
	public enum JsonJPredictionsGetByStopIDStopID
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1001195")]
		_1001195 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
