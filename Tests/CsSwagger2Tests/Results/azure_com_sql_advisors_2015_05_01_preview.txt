//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Database, Server or Elastic Pool Advisor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Advisor
	{
		
		/// <summary>
		/// Resource kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Properties for a Database, Server or Elastic Pool Advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AdvisorProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties for a Database, Server or Elastic Pool Advisor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AdvisorProperties
	{
		
		/// <summary>
		/// Gets the status of availability of this advisor to customers. Possible values are 'GA', 'PublicPreview', 'LimitedPublicPreview' and 'PrivatePreview'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advisorStatus")]
		public System.Nullable<AdvisorPropertiesAdvisorStatus> AdvisorStatus { get; set; }
		
		/// <summary>
		/// Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are 'Enabled' and 'Disabled'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoExecuteStatus")]
		public AdvisorPropertiesAutoExecuteStatus AutoExecuteStatus { get; set; }
		
		/// <summary>
		/// Gets the resource from which current value of auto-execute status is inherited. Auto-execute status can be set on (and inherited from) different levels in the resource hierarchy. Possible values are 'Subscription', 'Server', 'ElasticPool', 'Database' and 'Default' (when status is not explicitly set on any level).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoExecuteStatusInheritedFrom")]
		public System.Nullable<AdvisorPropertiesAutoExecuteStatusInheritedFrom> AutoExecuteStatusInheritedFrom { get; set; }
		
		/// <summary>
		/// Gets the time when the current resource was analyzed for recommendations by this advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastChecked")]
		public System.Nullable<System.DateTimeOffset> LastChecked { get; set; }
		
		/// <summary>
		/// Gets that status of recommendations for this advisor and reason for not having any recommendations. Possible values include, but are not limited to, 'Ok' (Recommendations available),LowActivity (not enough workload to analyze), 'DbSeemsTuned' (Database is doing well), etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendationsStatus")]
		public string RecommendationsStatus { get; set; }
		
		/// <summary>
		/// Gets the recommended actions for this advisor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedActions")]
		public RecommendedAction[] RecommendedActions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AdvisorPropertiesAdvisorStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublicPreview = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitedPublicPreview = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivatePreview = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AdvisorPropertiesAutoExecuteStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AdvisorPropertiesAutoExecuteStatusInheritedFrom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Subscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElasticPool = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Database = 4,
	}
	
	/// <summary>
	/// Database, Server or Elastic Pool Recommended Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedAction
	{
		
		/// <summary>
		/// Resource kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Properties for a Database, Server or Elastic Pool Recommended Action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RecommendedActionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties for a Database, Server or Elastic Pool Recommended Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedActionProperties
	{
		
		/// <summary>
		/// Gets additional details specific to this recommended action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public System.Collections.Generic.Dictionary<string, object> Details { get; set; }
		
		/// <summary>
		/// Contains error information for an Azure SQL Database, Server or Elastic Pool Recommended Action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public RecommendedActionErrorInfo ErrorDetails { get; set; }
		
		/// <summary>
		/// Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedImpact")]
		public RecommendedActionImpactRecord[] EstimatedImpact { get; set; }
		
		/// <summary>
		/// Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executeActionDuration")]
		public string ExecuteActionDuration { get; set; }
		
		/// <summary>
		/// Gets if approval for applying this recommended action was given by user/system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executeActionInitiatedBy")]
		public System.Nullable<RecommendedActionPropertiesExecuteActionInitiatedBy> ExecuteActionInitiatedBy { get; set; }
		
		/// <summary>
		/// Gets the time when this recommended action was approved for execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executeActionInitiatedTime")]
		public System.Nullable<System.DateTimeOffset> ExecuteActionInitiatedTime { get; set; }
		
		/// <summary>
		/// Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executeActionStartTime")]
		public System.Nullable<System.DateTimeOffset> ExecuteActionStartTime { get; set; }
		
		/// <summary>
		/// Contains information for manual implementation for an Azure SQL Database, Server or Elastic Pool Recommended Action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="implementationDetails")]
		public RecommendedActionImplementationInfo ImplementationDetails { get; set; }
		
		/// <summary>
		/// Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isArchivedAction")]
		public System.Nullable<System.Boolean> IsArchivedAction { get; set; }
		
		/// <summary>
		/// Gets if this recommended action is actionable by user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isExecutableAction")]
		public System.Nullable<System.Boolean> IsExecutableAction { get; set; }
		
		/// <summary>
		/// Gets if changes applied by this recommended action can be reverted by user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRevertableAction")]
		public System.Nullable<System.Boolean> IsRevertableAction { get; set; }
		
		/// <summary>
		/// Gets time when this recommended action was last refreshed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRefresh")]
		public System.Nullable<System.DateTimeOffset> LastRefresh { get; set; }
		
		/// <summary>
		/// Gets the linked objects, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedObjects")]
		public string[] LinkedObjects { get; set; }
		
		/// <summary>
		/// Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observedImpact")]
		public RecommendedActionImpactRecord[] ObservedImpact { get; set; }
		
		/// <summary>
		/// Gets the reason for recommending this action. e.g., DuplicateIndex
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendationReason")]
		public string RecommendationReason { get; set; }
		
		/// <summary>
		/// Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revertActionDuration")]
		public string RevertActionDuration { get; set; }
		
		/// <summary>
		/// Gets if approval for reverting this recommended action was given by user/system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revertActionInitiatedBy")]
		public System.Nullable<RecommendedActionPropertiesRevertActionInitiatedBy> RevertActionInitiatedBy { get; set; }
		
		/// <summary>
		/// Gets the time when this recommended action was approved for revert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revertActionInitiatedTime")]
		public System.Nullable<System.DateTimeOffset> RevertActionInitiatedTime { get; set; }
		
		/// <summary>
		/// Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revertActionStartTime")]
		public System.Nullable<System.DateTimeOffset> RevertActionStartTime { get; set; }
		
		/// <summary>
		/// Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Int32> Score { get; set; }
		
		/// <summary>
		/// Contains information of current state for an Azure SQL Database, Server or Elastic Pool Recommended Action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public RecommendedActionStateInfo State { get; set; }
		
		/// <summary>
		/// Gets the time series info of metrics for this recommended action e.g., CPU consumption time series
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeries")]
		public RecommendedActionMetricInfo[] TimeSeries { get; set; }
		
		/// <summary>
		/// Gets the time since when this recommended action is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validSince")]
		public System.Nullable<System.DateTimeOffset> ValidSince { get; set; }
	}
	
	/// <summary>
	/// Contains error information for an Azure SQL Database, Server or Elastic Pool Recommended Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedActionErrorInfo
	{
		
		/// <summary>
		/// Gets the reason why the recommended action was put to error state. e.g., DatabaseHasQdsOff, IndexAlreadyExists
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Gets whether the error could be ignored and recommended action could be retried. Possible values are: Yes/No
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRetryable")]
		public System.Nullable<RecommendedActionErrorInfoIsRetryable> IsRetryable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedActionErrorInfoIsRetryable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		No = 1,
	}
	
	/// <summary>
	/// Contains information of estimated or observed impact on various metrics for an Azure SQL Database, Server or Elastic Pool Recommended Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedActionImpactRecord
	{
		
		/// <summary>
		/// Gets the absolute value of this dimension if applicable. e.g., Number of Queries affected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absoluteValue")]
		public System.Nullable<System.Double> AbsoluteValue { get; set; }
		
		/// <summary>
		/// Gets the absolute change in the value of this dimension. e.g., Absolute Disk space change in Megabytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeValueAbsolute")]
		public System.Nullable<System.Double> ChangeValueAbsolute { get; set; }
		
		/// <summary>
		/// Gets the relative change in the value of this dimension. e.g., Relative Disk space change in Percentage
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeValueRelative")]
		public System.Nullable<System.Double> ChangeValueRelative { get; set; }
		
		/// <summary>
		/// Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedActionPropertiesExecuteActionInitiatedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="System")]
		_System = 1,
	}
	
	/// <summary>
	/// Contains information for manual implementation for an Azure SQL Database, Server or Elastic Pool Recommended Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedActionImplementationInfo
	{
		
		/// <summary>
		/// Gets the method in which this recommended action can be manually implemented. e.g., TSql, AzurePowerShell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public System.Nullable<RecommendedActionImplementationInfoMethod> Method { get; set; }
		
		/// <summary>
		/// Gets the manual implementation script. e.g., T-SQL script that could be executed on the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedActionImplementationInfoMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSql = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzurePowerShell = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedActionPropertiesRevertActionInitiatedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="System")]
		_System = 1,
	}
	
	/// <summary>
	/// Contains information of current state for an Azure SQL Database, Server or Elastic Pool Recommended Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedActionStateInfo
	{
		
		/// <summary>
		/// Gets who initiated the execution of this recommended action. Possible Value are: User    -> When user explicitly notified system to apply the recommended action. System  -> When auto-execute status of this advisor was set to 'Enabled', in which case the system applied it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionInitiatedBy")]
		public System.Nullable<RecommendedActionStateInfoActionInitiatedBy> ActionInitiatedBy { get; set; }
		
		/// <summary>
		/// Current state the recommended action is in. Some commonly used states are: Active      -> recommended action is active and no action has been taken yet. Pending     -> recommended action is approved for and is awaiting execution. Executing   -> recommended action is being applied on the user database. Verifying   -> recommended action was applied and is being verified of its usefulness by the system. Success     -> recommended action was applied and improvement found during verification. Pending Revert  -> verification found little or no improvement so recommended action is queued for revert or user has manually reverted. Reverting   -> changes made while applying recommended action are being reverted on the user database. Reverted    -> successfully reverted the changes made by recommended action on user database. Ignored     -> user explicitly ignored/discarded the recommended action. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public RecommendedActionStateInfoCurrentValue CurrentValue { get; set; }
		
		/// <summary>
		/// Gets the time when the state was last modified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedActionStateInfoActionInitiatedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="System")]
		_System = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecommendedActionStateInfoCurrentValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Executing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verifying = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingRevert = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RevertCancelled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reverting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reverted = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ignored = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monitoring = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resolved = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 13,
	}
	
	/// <summary>
	/// Contains time series of various impacted metrics for an Azure SQL Database, Server or Elastic Pool Recommended Action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecommendedActionMetricInfo
	{
		
		/// <summary>
		/// Gets the name of the metric. e.g., CPU, Number of Queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Gets the start time of time interval given by this MetricInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Gets the duration of time interval for the value given by this MetricInfo. e.g., PT1H (1 hour)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeGrain")]
		public string TimeGrain { get; set; }
		
		/// <summary>
		/// Gets the unit in which metric is measured. e.g., DTU, Frequency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Gets the value of the metric in the time interval given by this MetricInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of server advisors.
		/// ServerAdvisors_ListByServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/advisors
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of server advisors.</returns>
		public async Task<Advisor[]> ServerAdvisors_ListByServerAsync(string resourceGroupName, string serverName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/advisors&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Advisor[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a server advisor.
		/// ServerAdvisors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/advisors/{advisorName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="advisorName">The name of the Server Advisor.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved details of specified server advisor.</returns>
		public async Task<Advisor> ServerAdvisors_GetAsync(string resourceGroupName, string serverName, string advisorName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Advisor>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a server advisor.
		/// ServerAdvisors_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/advisors/{advisorName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="advisorName">The name of the Server Advisor.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The requested advisor resource state.</param>
		/// <returns>Successfully updated the specified server advisor.</returns>
		public async Task<Advisor> ServerAdvisors_UpdateAsync(string resourceGroupName, string serverName, string advisorName, string subscriptionId, string api_version, Advisor requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Advisor>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of database advisors.
		/// DatabaseAdvisors_ListByDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of database advisors.</returns>
		public async Task<Advisor[]> DatabaseAdvisors_ListByDatabaseAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/advisors&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Advisor[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a database advisor.
		/// DatabaseAdvisors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="advisorName">The name of the Database Advisor.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved details of specified database advisor.</returns>
		public async Task<Advisor> DatabaseAdvisors_GetAsync(string resourceGroupName, string serverName, string databaseName, string advisorName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Advisor>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a database advisor.
		/// DatabaseAdvisors_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="advisorName">The name of the Database Advisor.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The requested advisor resource state.</param>
		/// <returns>Successfully updated the specified database advisor.</returns>
		public async Task<Advisor> DatabaseAdvisors_UpdateAsync(string resourceGroupName, string serverName, string databaseName, string advisorName, string subscriptionId, string api_version, Advisor requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Advisor>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets list of Database Recommended Actions.
		/// DatabaseRecommendedActions_ListByDatabaseAdvisor subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}/recommendedActions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="advisorName">The name of the Database Advisor.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of database recommended actions.</returns>
		public async Task<RecommendedAction[]> DatabaseRecommendedActions_ListByDatabaseAdvisorAsync(string resourceGroupName, string serverName, string databaseName, string advisorName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"/recommendedActions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecommendedAction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a database recommended action.
		/// DatabaseRecommendedActions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}/recommendedActions/{recommendedActionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="advisorName">The name of the Database Advisor.</param>
		/// <param name="recommendedActionName">The name of Database Recommended Action.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved details of specified database recommended action.</returns>
		public async Task<RecommendedAction> DatabaseRecommendedActions_GetAsync(string resourceGroupName, string serverName, string databaseName, string advisorName, string recommendedActionName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"/recommendedActions/"+ (recommendedActionName==null? "" : System.Uri.EscapeDataString(recommendedActionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecommendedAction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a database recommended action.
		/// DatabaseRecommendedActions_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}/recommendedActions/{recommendedActionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="advisorName">The name of the Database Advisor.</param>
		/// <param name="recommendedActionName">The name of Database Recommended Action.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The requested recommended action resource state.</param>
		/// <returns>Successfully updated the specified database recommended action.</returns>
		public async Task<RecommendedAction> DatabaseRecommendedActions_UpdateAsync(string resourceGroupName, string serverName, string databaseName, string advisorName, string recommendedActionName, string subscriptionId, string api_version, RecommendedAction requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/advisors/"+ (advisorName==null? "" : System.Uri.EscapeDataString(advisorName))+"/recommendedActions/"+ (recommendedActionName==null? "" : System.Uri.EscapeDataString(recommendedActionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecommendedAction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
