//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Contains information about orchestrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrchestratorProfile
	{
		
		/// <summary>
		/// Whether Kubernetes version is currently in preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPreview")]
		public System.Nullable<System.Boolean> IsPreview { get; set; }
		
		/// <summary>
		/// Orchestrator type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orchestratorType")]
		public string OrchestratorType { get; set; }
		
		/// <summary>
		/// Orchestrator version (major, minor, patch).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orchestratorVersion")]
		public string OrchestratorVersion { get; set; }
	}
	
	/// <summary>
	/// The profile of an orchestrator and its available versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrchestratorVersionProfile
	{
		
		/// <summary>
		/// Installed by default if version is not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		/// <summary>
		/// Whether Kubernetes version is currently in preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPreview")]
		public System.Nullable<System.Boolean> IsPreview { get; set; }
		
		/// <summary>
		/// Orchestrator type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orchestratorType")]
		public string OrchestratorType { get; set; }
		
		/// <summary>
		/// Orchestrator version (major, minor, patch).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orchestratorVersion")]
		public string OrchestratorVersion { get; set; }
		
		/// <summary>
		/// The list of available upgrade versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrades")]
		public OrchestratorProfile[] Upgrades { get; set; }
	}
	
	/// <summary>
	/// The list of versions for supported orchestrators.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrchestratorVersionProfileListResult
	{
		
		/// <summary>
		/// Id of the orchestrator version profile list result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the orchestrator version profile list result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties of an orchestrator version profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OrchestratorVersionProfileProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the orchestrator version profile list result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The properties of an orchestrator version profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrchestratorVersionProfileProperties
	{
		
		/// <summary>
		/// List of orchestrator version profiles.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orchestrators")]
		public OrchestratorVersionProfile[] Orchestrators { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of supported orchestrators in the specified subscription.
		/// Gets a list of supported orchestrators in the specified subscription. The operation returns properties of each orchestrator including version, available upgrades and whether that version or upgrades are in preview.
		/// ContainerServices_ListOrchestrators subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/orchestrators
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">The name of a supported Azure region.</param>
		/// <param name="resource_type">resource type for which the list of orchestrators needs to be returned</param>
		/// <returns>OK</returns>
		public async Task<OrchestratorVersionProfileListResult> ContainerServices_ListOrchestratorsAsync(string api_version, string subscriptionId, string location, string resource_type)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ContainerService/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/orchestrators?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&resource-type=" + (resource_type==null? "" : System.Uri.EscapeDataString(resource_type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrchestratorVersionProfileListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
