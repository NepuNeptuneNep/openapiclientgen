//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Reference to an express route circuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCircuitReference
	{
		
		/// <summary>
		/// Corresponding Express Route Circuit Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class ExpressRouteCrossConnection
	{
	}
	
	/// <summary>
	/// Response for ListExpressRouteCrossConnection API service call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCrossConnectionListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of ExpressRouteCrossConnection resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCrossConnection[] Value { get; set; }
	}
	
	public class ExpressRouteCrossConnectionPeering
	{
	}
	
	/// <summary>
	/// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCrossConnection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCrossConnectionPeeringList
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The peerings in an express route cross connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCrossConnectionPeering[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of express route cross connection peering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCrossConnectionPeeringProperties
	{
		
		/// <summary>
		/// The Azure ASN.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureASN")]
		public System.Nullable<System.Int32> AzureASN { get; set; }
		
		/// <summary>
		/// The GatewayManager Etag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayManagerEtag")]
		public string GatewayManagerEtag { get; set; }
		
		/// <summary>
		/// Contains IPv6 peering config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6PeeringConfig")]
		public object Ipv6PeeringConfig { get; set; }
		
		/// <summary>
		/// Who was the last to modify the peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		/// <summary>
		/// Specifies the peering configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microsoftPeeringConfig")]
		public object MicrosoftPeeringConfig { get; set; }
		
		/// <summary>
		/// The peer ASN.
		/// Minimum: 1
		/// Maximum: 4294967295
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerASN")]
		[System.ComponentModel.DataAnnotations.Range(1, 4294967295)]
		public System.Nullable<System.Int64> PeerASN { get; set; }
		
		/// <summary>
		/// The peering type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeringType")]
		public System.Nullable<ExpressRouteCrossConnectionPeeringPropertiesPeeringType> PeeringType { get; set; }
		
		/// <summary>
		/// The primary port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryAzurePort")]
		public string PrimaryAzurePort { get; set; }
		
		/// <summary>
		/// The primary address prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPeerAddressPrefix")]
		public string PrimaryPeerAddressPrefix { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ExpressRouteCrossConnectionPeeringPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The secondary port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryAzurePort")]
		public string SecondaryAzurePort { get; set; }
		
		/// <summary>
		/// The secondary address prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryPeerAddressPrefix")]
		public string SecondaryPeerAddressPrefix { get; set; }
		
		/// <summary>
		/// The shared key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedKey")]
		public string SharedKey { get; set; }
		
		/// <summary>
		/// The state of peering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ExpressRouteCrossConnectionPeeringPropertiesState> State { get; set; }
		
		/// <summary>
		/// The VLAN ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vlanId")]
		public System.Nullable<System.Int32> VlanId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCrossConnectionPeeringPropertiesPeeringType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzurePublicPeering = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzurePrivatePeering = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MicrosoftPeering = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCrossConnectionPeeringPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCrossConnectionPeeringPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Properties of ExpressRouteCrossConnection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCrossConnectionProperties
	{
		
		/// <summary>
		/// The circuit bandwidth In Mbps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthInMbps")]
		public System.Nullable<System.Int32> BandwidthInMbps { get; set; }
		
		/// <summary>
		/// Reference to an express route circuit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressRouteCircuit")]
		public ExpressRouteCircuitReference ExpressRouteCircuit { get; set; }
		
		/// <summary>
		/// The peering location of the ExpressRoute circuit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeringLocation")]
		public string PeeringLocation { get; set; }
		
		/// <summary>
		/// The list of peerings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerings")]
		public ExpressRouteCrossConnectionPeering[] Peerings { get; set; }
		
		/// <summary>
		/// The name of the primary port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryAzurePort")]
		public string PrimaryAzurePort { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ExpressRouteCrossConnectionPeeringPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The identifier of the circuit traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sTag")]
		public System.Nullable<System.Int32> STag { get; set; }
		
		/// <summary>
		/// The name of the secondary port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryAzurePort")]
		public string SecondaryAzurePort { get; set; }
		
		/// <summary>
		/// Additional read only notes set by the connectivity provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProviderNotes")]
		public string ServiceProviderNotes { get; set; }
		
		/// <summary>
		/// The ServiceProviderProvisioningState state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceProviderProvisioningState")]
		public System.Nullable<ExpressRouteCrossConnectionPropertiesServiceProviderProvisioningState> ServiceProviderProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExpressRouteCrossConnectionPropertiesServiceProviderProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotProvisioned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deprovisioning = 3,
	}
	
	/// <summary>
	/// The routes table associated with the ExpressRouteCircuit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCrossConnectionRoutesTableSummary
	{
		
		/// <summary>
		/// Autonomous system number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asn")]
		public System.Nullable<System.Int32> Asn { get; set; }
		
		/// <summary>
		/// IP address of Neighbor router.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighbor")]
		public string Neighbor { get; set; }
		
		/// <summary>
		/// Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateOrPrefixesReceived")]
		public string StateOrPrefixesReceived { get; set; }
		
		/// <summary>
		/// The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upDown")]
		public string UpDown { get; set; }
	}
	
	/// <summary>
	/// Response for ListRoutesTable associated with the Express Route Cross Connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExpressRouteCrossConnectionsRoutesTableSummaryListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of the routes table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExpressRouteCrossConnectionRoutesTableSummary[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves all the ExpressRouteCrossConnections in a subscription.
		/// ExpressRouteCrossConnections_List subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCrossConnections
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRouteCrossConnection resources. If there are no cross connection resources an empty list is returned.</returns>
		public async Task<ExpressRouteCrossConnectionListResult> ExpressRouteCrossConnections_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Network/expressRouteCrossConnections?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCrossConnectionListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves all the ExpressRouteCrossConnections in a resource group.
		/// ExpressRouteCrossConnections_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful.The operation returns a list of ExpressRouteCrossConnection resources. If there are no cross connection resources an empty list is returned.</returns>
		public async Task<ExpressRouteCrossConnectionListResult> ExpressRouteCrossConnections_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCrossConnectionListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about the specified ExpressRouteCrossConnection.
		/// ExpressRouteCrossConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group (peering location of the circuit).</param>
		/// <param name="crossConnectionName">The name of the ExpressRouteCrossConnection (service key of the circuit).</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCrossConnection resource.</returns>
		public async Task<ExpressRouteCrossConnection> ExpressRouteCrossConnections_GetAsync(string resourceGroupName, string crossConnectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCrossConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the specified ExpressRouteCrossConnection.
		/// ExpressRouteCrossConnections_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="crossConnectionName">The name of the ExpressRouteCrossConnection.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the update express route crossConnection operation.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRouteCrossConnection resource.</returns>
		public async Task<ExpressRouteCrossConnection> ExpressRouteCrossConnections_CreateOrUpdateAsync(string resourceGroupName, string crossConnectionName, string api_version, string subscriptionId, ExpressRouteCrossConnection requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCrossConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an express route cross connection tags.
		/// ExpressRouteCrossConnections_UpdateTags subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="crossConnectionName">The name of the cross connection.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to update express route cross connection tags.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRouteCrossConnection resource.</returns>
		public async Task<ExpressRouteCrossConnection> ExpressRouteCrossConnections_UpdateTagsAsync(string resourceGroupName, string crossConnectionName, string api_version, string subscriptionId, object requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCrossConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all peerings in a specified ExpressRouteCrossConnection.
		/// ExpressRouteCrossConnectionPeerings_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="crossConnectionName">The name of the ExpressRouteCrossConnection.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns a list of ExpressRouteCrossConnectionPeering resources.</returns>
		public async Task<ExpressRouteCrossConnectionPeeringList> ExpressRouteCrossConnectionPeerings_ListAsync(string resourceGroupName, string crossConnectionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"/peerings&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCrossConnectionPeeringList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified peering for the ExpressRouteCrossConnection.
		/// ExpressRouteCrossConnectionPeerings_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="crossConnectionName">The name of the ExpressRouteCrossConnection.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource.</returns>
		public async Task<ExpressRouteCrossConnectionPeering> ExpressRouteCrossConnectionPeerings_GetAsync(string resourceGroupName, string crossConnectionName, string peeringName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCrossConnectionPeering>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a peering in the specified ExpressRouteCrossConnection.
		/// ExpressRouteCrossConnectionPeerings_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="crossConnectionName">The name of the ExpressRouteCrossConnection.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the create or update ExpressRouteCrossConnection peering operation.</param>
		/// <returns>Update successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource.</returns>
		public async Task<ExpressRouteCrossConnectionPeering> ExpressRouteCrossConnectionPeerings_CreateOrUpdateAsync(string resourceGroupName, string crossConnectionName, string peeringName, string api_version, string subscriptionId, ExpressRouteCrossConnectionPeering requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCrossConnectionPeering>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified peering from the ExpressRouteCrossConnection.
		/// ExpressRouteCrossConnectionPeerings_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="crossConnectionName">The name of the ExpressRouteCrossConnection.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Delete successful.</returns>
		public async Task ExpressRouteCrossConnectionPeerings_DeleteAsync(string resourceGroupName, string crossConnectionName, string peeringName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the currently advertised ARP table associated with the express route cross connection in a resource group.
		/// ExpressRouteCrossConnections_ListArpTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}/arpTables/{devicePath}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="crossConnectionName">The name of the ExpressRouteCrossConnection.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="devicePath">The path of the device.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCrossConnectionsArpTable resource.</returns>
		public async Task<object> ExpressRouteCrossConnections_ListArpTableAsync(string resourceGroupName, string crossConnectionName, string peeringName, string devicePath, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/arpTables/"+ (devicePath==null? "" : System.Uri.EscapeDataString(devicePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the currently advertised routes table associated with the express route cross connection in a resource group.
		/// ExpressRouteCrossConnections_ListRoutesTable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}/routeTables/{devicePath}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="crossConnectionName">The name of the ExpressRouteCrossConnection.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="devicePath">The path of the device.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCrossConnectionsRouteTable resource.</returns>
		public async Task<object> ExpressRouteCrossConnections_ListRoutesTableAsync(string resourceGroupName, string crossConnectionName, string peeringName, string devicePath, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/routeTables/"+ (devicePath==null? "" : System.Uri.EscapeDataString(devicePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the route table summary associated with the express route cross connection in a resource group.
		/// ExpressRouteCrossConnections_ListRoutesTableSummary subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}/routeTablesSummary/{devicePath}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="crossConnectionName">The name of the ExpressRouteCrossConnection.</param>
		/// <param name="peeringName">The name of the peering.</param>
		/// <param name="devicePath">The path of the device.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Request successful. The operation returns the resulting ExpressRouteCrossConnectionsRouteTableSummary resource.</returns>
		public async Task<ExpressRouteCrossConnectionsRoutesTableSummaryListResult> ExpressRouteCrossConnections_ListRoutesTableSummaryAsync(string resourceGroupName, string crossConnectionName, string peeringName, string devicePath, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Network/expressRouteCrossConnections/"+ (crossConnectionName==null? "" : System.Uri.EscapeDataString(crossConnectionName))+"/peerings/"+ (peeringName==null? "" : System.Uri.EscapeDataString(peeringName))+"/routeTablesSummary/"+ (devicePath==null? "" : System.Uri.EscapeDataString(devicePath))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ExpressRouteCrossConnectionsRoutesTableSummaryListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
