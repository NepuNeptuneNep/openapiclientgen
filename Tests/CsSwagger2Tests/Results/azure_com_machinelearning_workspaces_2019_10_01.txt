//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The error response send when an operation fails.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// error code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Azure Machine Learning Studio REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Display name of operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An array of operations supported by the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// List of AML Studio operations supported by the AML Studio resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// An Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource. This cannot be changed after the resource is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Sku of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Sku of the resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// Name of the sku
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tier of the sku like Basic or Enterprise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// An object that represents a machine learning workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Workspace
	{
		
		/// <summary>
		/// The properties of a machine learning workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkspaceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a machine learning workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceProperties
	{
		
		/// <summary>
		/// The creation time for this workspace resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// The key vault identifier used for encrypted workspaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultIdentifierId")]
		public string KeyVaultIdentifierId { get; set; }
		
		/// <summary>
		/// The email id of the owner for this workspace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownerEmail")]
		public string OwnerEmail { get; set; }
		
		/// <summary>
		/// The regional endpoint for the machine learning studio service which hosts this workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studioEndpoint")]
		public string StudioEndpoint { get; set; }
		
		/// <summary>
		/// The fully qualified arm id of the storage account associated with this workspace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userStorageAccountId")]
		public string UserStorageAccountId { get; set; }
		
		/// <summary>
		/// The immutable id associated with this workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// The current state of workspace resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceState")]
		public System.Nullable<WorkspacePropertiesWorkspaceState> WorkspaceState { get; set; }
		
		/// <summary>
		/// The type of this workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceType")]
		public System.Nullable<WorkspacePropertiesWorkspaceType> WorkspaceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkspacePropertiesWorkspaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Migrated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updated = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistered = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WorkspacePropertiesWorkspaceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Production = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Anonymous = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PaidStandard = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PaidPremium = 4,
	}
	
	/// <summary>
	/// Workspace authorization keys for a workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceKeysResponse
	{
		
		/// <summary>
		/// Primary authorization key for this workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryToken")]
		public string PrimaryToken { get; set; }
		
		/// <summary>
		/// Secondary authorization key for this workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryToken")]
		public string SecondaryToken { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list machine learning workspace keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next list of machine learning workspaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of machine learning workspaces. Since this list may be incomplete, the nextLink field should be used to request the next list of machine learning workspaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Workspace[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating the properties of a machine learning workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspacePropertiesUpdateParameters
	{
		
		/// <summary>
		/// The key vault identifier used for encrypted workspaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultIdentifierId")]
		public string KeyVaultIdentifierId { get; set; }
		
		/// <summary>
		/// Sku of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The current state of workspace resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceState")]
		public WorkspacePropertiesWorkspaceState WorkspaceState { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating a machine learning workspace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceUpdateParameters
	{
		
		/// <summary>
		/// The parameters for updating the properties of a machine learning workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkspacePropertiesUpdateParameters Properties { get; set; }
		
		/// <summary>
		/// The resource tags for the machine learning workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Azure Machine Learning Studio REST API operations.
		/// Operations_List providers/Microsoft.MachineLearning/operations
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.MachineLearning/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the available machine learning workspaces under the specified subscription.
		/// Workspaces_List subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/workspaces
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<WorkspaceListResult> Workspaces_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.MachineLearning/workspaces?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkspaceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the available machine learning workspaces under the specified resource group.
		/// Workspaces_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/workspaces
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the machine learning workspace belongs.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<WorkspaceListResult> Workspaces_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/workspaces?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkspaceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified machine learning workspace.
		/// Workspaces_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/workspaces/{workspaceName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the machine learning workspace belongs.</param>
		/// <param name="workspaceName">The name of the machine learning workspace.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Workspace> Workspaces_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string workspaceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Workspace>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a workspace with the specified parameters.
		/// Workspaces_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/workspaces/{workspaceName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the machine learning workspace belongs.</param>
		/// <param name="workspaceName">The name of the machine learning workspace.</param>
		/// <param name="requestBody">The parameters for creating or updating a machine learning workspace.</param>
		/// <returns>The request was successful; the resource already exists and was updated.</returns>
		public async Task<Workspace> Workspaces_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string workspaceName, Workspace requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Workspace>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a machine learning workspace.
		/// Workspaces_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/workspaces/{workspaceName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the machine learning workspace belongs.</param>
		/// <param name="workspaceName">The name of the machine learning workspace.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task Workspaces_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string workspaceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a machine learning workspace with the specified parameters.
		/// Workspaces_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/workspaces/{workspaceName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the machine learning workspace belongs.</param>
		/// <param name="workspaceName">The name of the machine learning workspace.</param>
		/// <param name="requestBody">The parameters for updating a machine learning workspace.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Workspace> Workspaces_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string workspaceName, WorkspaceUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Workspace>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the authorization keys associated with this workspace.
		/// Workspaces_ListWorkspaceKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/workspaces/{workspaceName}/listWorkspaceKeys
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="workspaceName">The name of the machine learning workspace.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the machine learning workspace belongs.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<WorkspaceKeysResponse> Workspaces_ListWorkspaceKeysAsync(string api_version, string subscriptionId, string workspaceName, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/listWorkspaceKeys?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkspaceKeysResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resync storage keys associated with this workspace.
		/// Workspaces_ResyncStorageKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/workspaces/{workspaceName}/resyncStorageKeys
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="workspaceName">The name of the machine learning workspace.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the machine learning workspace belongs.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task Workspaces_ResyncStorageKeysAsync(string api_version, string subscriptionId, string workspaceName, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearning/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/resyncStorageKeys?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
