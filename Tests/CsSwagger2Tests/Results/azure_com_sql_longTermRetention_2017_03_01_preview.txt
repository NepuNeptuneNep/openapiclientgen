//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A long term retention policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BackupLongTermRetentionPolicy
	{
		
		/// <summary>
		/// Properties of a long term retention policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LongTermRetentionPolicyProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a long term retention policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LongTermRetentionPolicyProperties
	{
		
		/// <summary>
		/// The monthly retention policy for an LTR backup in an ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyRetention")]
		public string MonthlyRetention { get; set; }
		
		/// <summary>
		/// The week of year to take the yearly backup in an ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekOfYear")]
		public System.Nullable<System.Int32> WeekOfYear { get; set; }
		
		/// <summary>
		/// The weekly retention policy for an LTR backup in an ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyRetention")]
		public string WeeklyRetention { get; set; }
		
		/// <summary>
		/// The yearly retention policy for an LTR backup in an ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yearlyRetention")]
		public string YearlyRetention { get; set; }
	}
	
	/// <summary>
	/// A long term retention backup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LongTermRetentionBackup
	{
		
		/// <summary>
		/// Properties of a long term retention backup
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public LongTermRetentionBackupProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a long term retention backup
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LongTermRetentionBackupProperties
	{
		
		/// <summary>
		/// The time the long term retention backup will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupExpirationTime")]
		public System.Nullable<System.DateTimeOffset> BackupExpirationTime { get; set; }
		
		/// <summary>
		/// The time the backup was taken
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupTime")]
		public System.Nullable<System.DateTimeOffset> BackupTime { get; set; }
		
		/// <summary>
		/// The delete time of the database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseDeletionTime")]
		public System.Nullable<System.DateTimeOffset> DatabaseDeletionTime { get; set; }
		
		/// <summary>
		/// The name of the database the backup belong to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// The create time of the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCreateTime")]
		public System.Nullable<System.DateTimeOffset> ServerCreateTime { get; set; }
		
		/// <summary>
		/// The server name that the backup database belong to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverName")]
		public string ServerName { get; set; }
	}
	
	/// <summary>
	/// A list of long term retention backups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LongTermRetentionBackupListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public LongTermRetentionBackup[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the long term retention backups for a given location.
		/// LongTermRetentionBackups_ListByLocation subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups
		/// </summary>
		/// <param name="locationName">The location of the database</param>
		/// <param name="onlyLatestPerDatabase">Whether or not to only get the latest backup for each database.</param>
		/// <param name="databaseState">Whether to query against just live databases, just deleted databases, or all databases.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of backups.</returns>
		public async Task<LongTermRetentionBackupListResult> LongTermRetentionBackups_ListByLocationAsync(string locationName, bool onlyLatestPerDatabase, LongTermRetentionBackups_ListByLocationDatabaseState databaseState, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionBackups&onlyLatestPerDatabase="+onlyLatestPerDatabase+"&databaseState=" + databaseState+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LongTermRetentionBackupListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the long term retention backups for a given server.
		/// LongTermRetentionBackups_ListByServer subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups
		/// </summary>
		/// <param name="locationName">The location of the database</param>
		/// <param name="longTermRetentionServerName">The name of the server</param>
		/// <param name="onlyLatestPerDatabase">Whether or not to only get the latest backup for each database.</param>
		/// <param name="databaseState">Whether to query against just live databases, just deleted databases, or all databases.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of backups.</returns>
		public async Task<LongTermRetentionBackupListResult> LongTermRetentionBackups_ListByServerAsync(string locationName, string longTermRetentionServerName, bool onlyLatestPerDatabase, LongTermRetentionBackups_ListByLocationDatabaseState databaseState, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionServers/"+ (longTermRetentionServerName==null? "" : System.Uri.EscapeDataString(longTermRetentionServerName))+"/longTermRetentionBackups&onlyLatestPerDatabase="+onlyLatestPerDatabase+"&databaseState=" + databaseState+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LongTermRetentionBackupListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all long term retention backups for a database.
		/// LongTermRetentionBackups_ListByDatabase subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups
		/// </summary>
		/// <param name="locationName">The location of the database</param>
		/// <param name="longTermRetentionServerName">The name of the server</param>
		/// <param name="longTermRetentionDatabaseName">The name of the database</param>
		/// <param name="onlyLatestPerDatabase">Whether or not to only get the latest backup for each database.</param>
		/// <param name="databaseState">Whether to query against just live databases, just deleted databases, or all databases.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of backups.</returns>
		public async Task<LongTermRetentionBackupListResult> LongTermRetentionBackups_ListByDatabaseAsync(string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, bool onlyLatestPerDatabase, LongTermRetentionBackups_ListByLocationDatabaseState databaseState, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionServers/"+ (longTermRetentionServerName==null? "" : System.Uri.EscapeDataString(longTermRetentionServerName))+"/longTermRetentionDatabases/"+ (longTermRetentionDatabaseName==null? "" : System.Uri.EscapeDataString(longTermRetentionDatabaseName))+"/longTermRetentionBackups&onlyLatestPerDatabase="+onlyLatestPerDatabase+"&databaseState=" + databaseState+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LongTermRetentionBackupListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a long term retention backup.
		/// LongTermRetentionBackups_Get subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}
		/// </summary>
		/// <param name="locationName">The location of the database.</param>
		/// <param name="longTermRetentionServerName">The name of the server</param>
		/// <param name="longTermRetentionDatabaseName">The name of the database</param>
		/// <param name="backupName">The backup name.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the backup.</returns>
		public async Task<LongTermRetentionBackup> LongTermRetentionBackups_GetAsync(string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionServers/"+ (longTermRetentionServerName==null? "" : System.Uri.EscapeDataString(longTermRetentionServerName))+"/longTermRetentionDatabases/"+ (longTermRetentionDatabaseName==null? "" : System.Uri.EscapeDataString(longTermRetentionDatabaseName))+"/longTermRetentionBackups/"+ (backupName==null? "" : System.Uri.EscapeDataString(backupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LongTermRetentionBackup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a long term retention backup.
		/// LongTermRetentionBackups_Delete subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}
		/// </summary>
		/// <param name="locationName">The location of the database</param>
		/// <param name="longTermRetentionServerName">The name of the server</param>
		/// <param name="longTermRetentionDatabaseName">The name of the database</param>
		/// <param name="backupName">The backup name.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully deleted the backup.</returns>
		public async Task LongTermRetentionBackups_DeleteAsync(string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionServers/"+ (longTermRetentionServerName==null? "" : System.Uri.EscapeDataString(longTermRetentionServerName))+"/longTermRetentionDatabases/"+ (longTermRetentionDatabaseName==null? "" : System.Uri.EscapeDataString(longTermRetentionDatabaseName))+"/longTermRetentionBackups/"+ (backupName==null? "" : System.Uri.EscapeDataString(backupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the long term retention backups for a given location.
		/// LongTermRetentionBackups_ListByResourceGroupLocation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The location of the database</param>
		/// <param name="onlyLatestPerDatabase">Whether or not to only get the latest backup for each database.</param>
		/// <param name="databaseState">Whether to query against just live databases, just deleted databases, or all databases.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of backups.</returns>
		public async Task<LongTermRetentionBackupListResult> LongTermRetentionBackups_ListByResourceGroupLocationAsync(string resourceGroupName, string locationName, bool onlyLatestPerDatabase, LongTermRetentionBackups_ListByLocationDatabaseState databaseState, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionBackups&onlyLatestPerDatabase="+onlyLatestPerDatabase+"&databaseState=" + databaseState+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LongTermRetentionBackupListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the long term retention backups for a given server.
		/// LongTermRetentionBackups_ListByResourceGroupServer subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The location of the database</param>
		/// <param name="longTermRetentionServerName">The name of the server</param>
		/// <param name="onlyLatestPerDatabase">Whether or not to only get the latest backup for each database.</param>
		/// <param name="databaseState">Whether to query against just live databases, just deleted databases, or all databases.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of backups.</returns>
		public async Task<LongTermRetentionBackupListResult> LongTermRetentionBackups_ListByResourceGroupServerAsync(string resourceGroupName, string locationName, string longTermRetentionServerName, bool onlyLatestPerDatabase, LongTermRetentionBackups_ListByLocationDatabaseState databaseState, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionServers/"+ (longTermRetentionServerName==null? "" : System.Uri.EscapeDataString(longTermRetentionServerName))+"/longTermRetentionBackups&onlyLatestPerDatabase="+onlyLatestPerDatabase+"&databaseState=" + databaseState+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LongTermRetentionBackupListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all long term retention backups for a database.
		/// LongTermRetentionBackups_ListByResourceGroupDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The location of the database</param>
		/// <param name="longTermRetentionServerName">The name of the server</param>
		/// <param name="longTermRetentionDatabaseName">The name of the database</param>
		/// <param name="onlyLatestPerDatabase">Whether or not to only get the latest backup for each database.</param>
		/// <param name="databaseState">Whether to query against just live databases, just deleted databases, or all databases.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of backups.</returns>
		public async Task<LongTermRetentionBackupListResult> LongTermRetentionBackups_ListByResourceGroupDatabaseAsync(string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, bool onlyLatestPerDatabase, LongTermRetentionBackups_ListByLocationDatabaseState databaseState, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionServers/"+ (longTermRetentionServerName==null? "" : System.Uri.EscapeDataString(longTermRetentionServerName))+"/longTermRetentionDatabases/"+ (longTermRetentionDatabaseName==null? "" : System.Uri.EscapeDataString(longTermRetentionDatabaseName))+"/longTermRetentionBackups&onlyLatestPerDatabase="+onlyLatestPerDatabase+"&databaseState=" + databaseState+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LongTermRetentionBackupListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a long term retention backup.
		/// LongTermRetentionBackups_GetByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The location of the database.</param>
		/// <param name="longTermRetentionServerName">The name of the server</param>
		/// <param name="longTermRetentionDatabaseName">The name of the database</param>
		/// <param name="backupName">The backup name.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the backup.</returns>
		public async Task<LongTermRetentionBackup> LongTermRetentionBackups_GetByResourceGroupAsync(string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionServers/"+ (longTermRetentionServerName==null? "" : System.Uri.EscapeDataString(longTermRetentionServerName))+"/longTermRetentionDatabases/"+ (longTermRetentionDatabaseName==null? "" : System.Uri.EscapeDataString(longTermRetentionDatabaseName))+"/longTermRetentionBackups/"+ (backupName==null? "" : System.Uri.EscapeDataString(backupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LongTermRetentionBackup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a long term retention backup.
		/// LongTermRetentionBackups_DeleteByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="locationName">The location of the database</param>
		/// <param name="longTermRetentionServerName">The name of the server</param>
		/// <param name="longTermRetentionDatabaseName">The name of the database</param>
		/// <param name="backupName">The backup name.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully deleted the backup.</returns>
		public async Task LongTermRetentionBackups_DeleteByResourceGroupAsync(string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/longTermRetentionServers/"+ (longTermRetentionServerName==null? "" : System.Uri.EscapeDataString(longTermRetentionServerName))+"/longTermRetentionDatabases/"+ (longTermRetentionDatabaseName==null? "" : System.Uri.EscapeDataString(longTermRetentionDatabaseName))+"/longTermRetentionBackups/"+ (backupName==null? "" : System.Uri.EscapeDataString(backupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a database's long term retention policy.
		/// BackupLongTermRetentionPolicies_ListByDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully get the policy.</returns>
		public async Task<BackupLongTermRetentionPolicy> BackupLongTermRetentionPolicies_ListByDatabaseAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/backupLongTermRetentionPolicies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BackupLongTermRetentionPolicy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a database's long term retention policy.
		/// BackupLongTermRetentionPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="policyName">The policy name. Should always be Default.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully get the policy.</returns>
		public async Task<BackupLongTermRetentionPolicy> BackupLongTermRetentionPolicies_GetAsync(string resourceGroupName, string serverName, string databaseName, BackupLongTermRetentionPolicies_GetPolicyName policyName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/backupLongTermRetentionPolicies/"+policyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BackupLongTermRetentionPolicy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets a database's long term retention policy.
		/// BackupLongTermRetentionPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database.</param>
		/// <param name="policyName">The policy name. Should always be Default.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The long term retention policy info.</param>
		/// <returns>Successfully set the policy.</returns>
		public async Task<BackupLongTermRetentionPolicy> BackupLongTermRetentionPolicies_CreateOrUpdateAsync(string resourceGroupName, string serverName, string databaseName, BackupLongTermRetentionPolicies_CreateOrUpdatePolicyName policyName, string subscriptionId, string api_version, BackupLongTermRetentionPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/backupLongTermRetentionPolicies/"+policyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BackupLongTermRetentionPolicy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum LongTermRetentionBackups_ListByLocationDatabaseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Live = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 2,
	}
	
	public enum BackupLongTermRetentionPolicies_GetPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum BackupLongTermRetentionPolicies_CreateOrUpdatePolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
