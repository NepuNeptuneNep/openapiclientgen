//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Holds Compute quota information used to control resource allocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Quota
	{
		
		/// <summary>
		/// Properties for a Compute Quota
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public QuotaProperties Properties { get; set; }
	}
	
	public class QuotaProperties
	{
		
		/// <summary>
		/// Maximum number of availability sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilitySetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailabilitySetCount { get; set; }
		
		/// <summary>
		/// Maximum number of cores allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coresLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CoresLimit { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type premium allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationPremiumManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationPremiumManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type standard allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationStandardManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationStandardManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of virtual machines allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VirtualMachineCount { get; set; }
		
		/// <summary>
		/// Maximum number of scale sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmScaleSetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VmScaleSetCount { get; set; }
	}
	
	/// <summary>
	/// List of Compute quotas
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QuotaList
	{
		
		/// <summary>
		/// URI to the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Compute quotas
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public QuotaListValue[] QuotaListValue { get; set; }
	}
	
	public class QuotaListValue
	{
		
		/// <summary>
		/// Properties for a Compute Quota
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public QuotaListValueProperties Properties { get; set; }
	}
	
	public class QuotaListValueProperties
	{
		
		/// <summary>
		/// Maximum number of availability sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilitySetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailabilitySetCount { get; set; }
		
		/// <summary>
		/// Maximum number of cores allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coresLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CoresLimit { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type premium allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationPremiumManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationPremiumManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type standard allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationStandardManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationStandardManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of virtual machines allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VirtualMachineCount { get; set; }
		
		/// <summary>
		/// Maximum number of scale sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmScaleSetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VmScaleSetCount { get; set; }
	}
	
	/// <summary>
	/// Holds Compute quota information used to control resource allocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NewQuotaParameter
	{
		
		/// <summary>
		/// Properties for a Compute Quota
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public NewQuotaParameterProperties Properties { get; set; }
	}
	
	public class NewQuotaParameterProperties
	{
		
		/// <summary>
		/// Maximum number of availability sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilitySetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailabilitySetCount { get; set; }
		
		/// <summary>
		/// Maximum number of cores allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coresLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CoresLimit { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type premium allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationPremiumManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationPremiumManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type standard allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationStandardManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationStandardManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of virtual machines allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VirtualMachineCount { get; set; }
		
		/// <summary>
		/// Maximum number of scale sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmScaleSetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VmScaleSetCount { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all Compute quotas.
		/// Get a list of existing Compute quotas.
		/// Quotas_List subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/quotas
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">Location of the resource.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK</returns>
		public async Task<Quotas_ListReturn> Quotas_ListAsync(string subscriptionId, string location, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Compute.Admin/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/quotas&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Quotas_ListReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the requested Compute quota.
		/// Get an existing Compute Quota.
		/// Quotas_Get subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/quotas/{quotaName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">Location of the resource.</param>
		/// <param name="quotaName">Name of the quota.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK</returns>
		public async Task<Quotas_GetReturn> Quotas_GetAsync(string subscriptionId, string location, string quotaName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Compute.Admin/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/quotas/"+ (quotaName==null? "" : System.Uri.EscapeDataString(quotaName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Quotas_GetReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or Updates a Compute Quota.
		/// Creates or Updates a Compute Quota with the provided quota parameters.
		/// Quotas_CreateOrUpdate subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/quotas/{quotaName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">Location of the resource.</param>
		/// <param name="quotaName">Name of the quota.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="requestBody">New quota to create.</param>
		/// <returns>OK</returns>
		public async Task<Quotas_CreateOrUpdateReturn> Quotas_CreateOrUpdateAsync(string subscriptionId, string location, string quotaName, string api_version, Quotas_CreateOrUpdatePutBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Compute.Admin/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/quotas/"+ (quotaName==null? "" : System.Uri.EscapeDataString(quotaName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Quotas_CreateOrUpdateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes specified Compute quota
		/// Delete an existing Compute quota.
		/// Quotas_Delete subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/quotas/{quotaName}
		/// </summary>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="location">Location of the resource.</param>
		/// <param name="quotaName">Name of the quota.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>OK</returns>
		public async Task Quotas_DeleteAsync(string subscriptionId, string location, string quotaName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Compute.Admin/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/quotas/"+ (quotaName==null? "" : System.Uri.EscapeDataString(quotaName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Quotas_ListReturn
	{
		
		/// <summary>
		/// URI to the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Compute quotas
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Quotas_ListReturnValue[] Quotas_ListReturnValue { get; set; }
	}
	
	public class Quotas_ListReturnValue
	{
		
		/// <summary>
		/// Properties for a Compute Quota
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Quotas_ListReturnValueProperties Properties { get; set; }
	}
	
	public class Quotas_ListReturnValueProperties
	{
		
		/// <summary>
		/// Maximum number of availability sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilitySetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailabilitySetCount { get; set; }
		
		/// <summary>
		/// Maximum number of cores allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coresLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CoresLimit { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type premium allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationPremiumManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationPremiumManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type standard allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationStandardManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationStandardManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of virtual machines allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VirtualMachineCount { get; set; }
		
		/// <summary>
		/// Maximum number of scale sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmScaleSetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VmScaleSetCount { get; set; }
	}
	
	public class Quotas_GetReturn
	{
		
		/// <summary>
		/// Properties for a Compute Quota
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Quotas_GetReturnProperties Properties { get; set; }
	}
	
	public class Quotas_GetReturnProperties
	{
		
		/// <summary>
		/// Maximum number of availability sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilitySetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailabilitySetCount { get; set; }
		
		/// <summary>
		/// Maximum number of cores allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coresLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CoresLimit { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type premium allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationPremiumManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationPremiumManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type standard allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationStandardManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationStandardManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of virtual machines allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VirtualMachineCount { get; set; }
		
		/// <summary>
		/// Maximum number of scale sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmScaleSetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VmScaleSetCount { get; set; }
	}
	
	public class Quotas_CreateOrUpdatePutBody
	{
		
		/// <summary>
		/// Properties for a Compute Quota
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Quotas_CreateOrUpdatePutBodyProperties Properties { get; set; }
	}
	
	public class Quotas_CreateOrUpdatePutBodyProperties
	{
		
		/// <summary>
		/// Maximum number of availability sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilitySetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailabilitySetCount { get; set; }
		
		/// <summary>
		/// Maximum number of cores allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coresLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CoresLimit { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type premium allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationPremiumManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationPremiumManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type standard allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationStandardManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationStandardManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of virtual machines allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VirtualMachineCount { get; set; }
		
		/// <summary>
		/// Maximum number of scale sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmScaleSetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VmScaleSetCount { get; set; }
	}
	
	public class Quotas_CreateOrUpdateReturn
	{
		
		/// <summary>
		/// Properties for a Compute Quota
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Quotas_CreateOrUpdateReturnProperties Properties { get; set; }
	}
	
	public class Quotas_CreateOrUpdateReturnProperties
	{
		
		/// <summary>
		/// Maximum number of availability sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilitySetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailabilitySetCount { get; set; }
		
		/// <summary>
		/// Maximum number of cores allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coresLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CoresLimit { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type premium allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationPremiumManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationPremiumManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of managed disks and snapshots of type standard allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAllocationStandardManagedDisksAndSnapshots")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxAllocationStandardManagedDisksAndSnapshots { get; set; }
		
		/// <summary>
		/// Maximum number of virtual machines allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VirtualMachineCount { get; set; }
		
		/// <summary>
		/// Maximum number of scale sets allowed.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmScaleSetCount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VmScaleSetCount { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
