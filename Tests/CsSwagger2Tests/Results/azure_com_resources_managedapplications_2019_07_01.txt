//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Information about managed application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Application : GenericResource
	{
		
		/// <summary>
		/// Identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public Identity Identity { get; set; }
		
		/// <summary>
		/// The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog.
		/// Required
		/// Pattern: ^[-\w\._,\(\)]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-\w\._,\(\)]+$")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Plan for the managed application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public Plan Plan { get; set; }
		
		/// <summary>
		/// The managed application properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApplicationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Managed application artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationArtifact
	{
		
		/// <summary>
		/// The managed application artifact name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public ApplicationArtifactName Name { get; set; }
		
		/// <summary>
		/// The managed application artifact type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApplicationArtifactType Type { get; set; }
		
		/// <summary>
		/// The managed application artifact blob uri.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationArtifactName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ViewDefinition = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Authorizations = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomRoleDefinition = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationArtifactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Template = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 2,
	}
	
	/// <summary>
	/// The managed application provider authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationAuthorization
	{
		
		/// <summary>
		/// The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the managed application resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The provider's role definition identifier. This role will define all the permissions that the provider must have on the managed application's container resource group. This role definition cannot have permission to delete the resource group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleDefinitionId")]
		public string RoleDefinitionId { get; set; }
	}
	
	/// <summary>
	/// Managed application billing details definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationBillingDetailsDefinition
	{
		
		/// <summary>
		/// The managed application resource usage Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUsageId")]
		public string ResourceUsageId { get; set; }
	}
	
	/// <summary>
	/// The application client details to track the entity creating/updating the managed app resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationClientDetails
	{
		
		/// <summary>
		/// The client application Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// The client Oid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oid")]
		public string Oid { get; set; }
		
		/// <summary>
		/// The client Puid
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="puid")]
		public string Puid { get; set; }
	}
	
	/// <summary>
	/// Information about managed application definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationDefinition : GenericResource
	{
		
		/// <summary>
		/// The managed application definition properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApplicationDefinitionProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Application definition artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationDefinitionArtifact
	{
		
		/// <summary>
		/// The managed application artifact name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public ApplicationDefinitionArtifactName Name { get; set; }
		
		/// <summary>
		/// The managed application artifact type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ApplicationArtifactType Type { get; set; }
		
		/// <summary>
		/// The managed application definition artifact blob uri.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationDefinitionArtifactName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationResourceTemplate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateUiDefinition = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainTemplateParameters = 3,
	}
	
	/// <summary>
	/// List of managed application definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationDefinitionListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The array of managed application definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ApplicationDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The managed application definition properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationDefinitionProperties
	{
		
		/// <summary>
		/// The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ApplicationDefinitionArtifact[] Artifacts { get; set; }
		
		/// <summary>
		/// The managed application provider authorizations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizations")]
		public ApplicationAuthorization[] Authorizations { get; set; }
		
		/// <summary>
		/// The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createUiDefinition")]
		public string CreateUiDefinition { get; set; }
		
		/// <summary>
		/// Managed application deployment policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentPolicy")]
		public ApplicationDeploymentPolicy DeploymentPolicy { get; set; }
		
		/// <summary>
		/// The managed application definition description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The managed application definition display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// A value indicating whether the package is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// The managed application lock level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lockLevel")]
		public ApplicationDefinitionPropertiesLockLevel LockLevel { get; set; }
		
		/// <summary>
		/// Managed application locking policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockingPolicy")]
		public ApplicationPackageLockingPolicyDefinition LockingPolicy { get; set; }
		
		/// <summary>
		/// The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainTemplate")]
		public string MainTemplate { get; set; }
		
		/// <summary>
		/// Managed application management policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementPolicy")]
		public ApplicationManagementPolicy ManagementPolicy { get; set; }
		
		/// <summary>
		/// Managed application notification policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationPolicy")]
		public ApplicationNotificationPolicy NotificationPolicy { get; set; }
		
		/// <summary>
		/// The managed application definition package file Uri. Use this element
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageFileUri")]
		public string PackageFileUri { get; set; }
		
		/// <summary>
		/// The managed application provider policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public ApplicationPolicy[] Policies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationDefinitionPropertiesLockLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CanNotDelete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// Managed application policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPolicy
	{
		
		/// <summary>
		/// The policy name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The policy parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// The policy definition Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyDefinitionId")]
		public string PolicyDefinitionId { get; set; }
	}
	
	/// <summary>
	/// Managed application deployment policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationDeploymentPolicy
	{
		
		/// <summary>
		/// The deployment mode.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentMode")]
		public ApplicationDeploymentPolicyDeploymentMode DeploymentMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationDeploymentPolicyDeploymentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Incremental = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 2,
	}
	
	/// <summary>
	/// Managed application Jit access policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationJitAccessPolicy
	{
		
		/// <summary>
		/// Whether the JIT access is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jitAccessEnabled")]
		public bool JitAccessEnabled { get; set; }
		
		/// <summary>
		/// The Jit approval mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jitApprovalMode")]
		public System.Nullable<ApplicationJitAccessPolicyJitApprovalMode> JitApprovalMode { get; set; }
		
		/// <summary>
		/// The JIT approvers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jitApprovers")]
		public JitApproverDefinition[] JitApprovers { get; set; }
		
		/// <summary>
		/// The maximum duration JIT access is granted. This is an ISO8601 time period value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumJitAccessDuration")]
		public string MaximumJitAccessDuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationJitAccessPolicyJitApprovalMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoApprove = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManualApprove = 2,
	}
	
	/// <summary>
	/// JIT approver definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JitApproverDefinition
	{
		
		/// <summary>
		/// The approver display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The approver service principal Id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The approver type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<JitApproverDefinitionType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JitApproverDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 1,
	}
	
	/// <summary>
	/// List of managed applications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The array of managed applications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Application[] Value { get; set; }
	}
	
	/// <summary>
	/// The managed application lock level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationLockLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CanNotDelete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// The management mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationManagementMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unmanaged = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Managed = 2,
	}
	
	/// <summary>
	/// Managed application management policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationManagementPolicy
	{
		
		/// <summary>
		/// The management mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public ApplicationManagementMode Mode { get; set; }
	}
	
	/// <summary>
	/// Managed application notification endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationNotificationEndpoint
	{
		
		/// <summary>
		/// The managed application notification endpoint uri.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Managed application notification policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationNotificationPolicy
	{
		
		/// <summary>
		/// The managed application notification endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationEndpoints")]
		public ApplicationNotificationEndpoint[] NotificationEndpoints { get; set; }
	}
	
	/// <summary>
	/// The application package contact information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPackageContact
	{
		
		/// <summary>
		/// The contact name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactName")]
		public string ContactName { get; set; }
		
		/// <summary>
		/// The contact email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The contact phone number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	/// <summary>
	/// Managed application locking policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPackageLockingPolicyDefinition
	{
		
		/// <summary>
		/// The deny assignment excluded actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedActions")]
		public string[] AllowedActions { get; set; }
	}
	
	/// <summary>
	/// The appliance package support URLs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPackageSupportUrls
	{
		
		/// <summary>
		/// The government cloud support URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="governmentCloud")]
		public string GovernmentCloud { get; set; }
		
		/// <summary>
		/// The public azure support URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicAzure")]
		public string PublicAzure { get; set; }
	}
	
	/// <summary>
	/// Information about managed application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPatchable : GenericResource
	{
		
		/// <summary>
		/// Identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public Identity Identity { get; set; }
		
		/// <summary>
		/// The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog.
		/// Pattern: ^[-\w\._,\(\)]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-\w\._,\(\)]+$")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Plan for the managed application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public PlanPatchable Plan { get; set; }
		
		/// <summary>
		/// The managed application properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ApplicationPropertiesPatchable Properties { get; set; }
	}
	
	/// <summary>
	/// The managed application properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationProperties
	{
		
		/// <summary>
		/// The fully qualified path of managed application definition Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationDefinitionId")]
		public string ApplicationDefinitionId { get; set; }
		
		/// <summary>
		/// The collection of managed application artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public ApplicationArtifact[] Artifacts { get; set; }
		
		/// <summary>
		/// The  read-only authorizations property that is retrieved from the application package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizations")]
		public ApplicationAuthorization[] Authorizations { get; set; }
		
		/// <summary>
		/// Managed application billing details definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingDetails")]
		public ApplicationBillingDetailsDefinition BillingDetails { get; set; }
		
		/// <summary>
		/// The application client details to track the entity creating/updating the managed app resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public ApplicationClientDetails CreatedBy { get; set; }
		
		/// <summary>
		/// The application package contact information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerSupport")]
		public ApplicationPackageContact CustomerSupport { get; set; }
		
		/// <summary>
		/// Managed application Jit access policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jitAccessPolicy")]
		public ApplicationJitAccessPolicy JitAccessPolicy { get; set; }
		
		/// <summary>
		/// The managed resource group Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedResourceGroupId")]
		public string ManagedResourceGroupId { get; set; }
		
		/// <summary>
		/// The management mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementMode")]
		public ApplicationManagementMode ManagementMode { get; set; }
		
		/// <summary>
		/// Name and value pairs that define the managed application outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public string Outputs { get; set; }
		
		/// <summary>
		/// Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// Provisioning status of the managed application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ApplicationPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The publisher tenant Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherTenantId")]
		public string PublisherTenantId { get; set; }
		
		/// <summary>
		/// The appliance package support URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportUrls")]
		public ApplicationPackageSupportUrls SupportUrls { get; set; }
		
		/// <summary>
		/// The application client details to track the entity creating/updating the managed app resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public ApplicationClientDetails UpdatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ApplicationPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 11,
	}
	
	/// <summary>
	/// The managed application properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApplicationPropertiesPatchable
	{
		
		/// <summary>
		/// The fully qualified path of managed application definition Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationDefinitionId")]
		public string ApplicationDefinitionId { get; set; }
		
		/// <summary>
		/// The managed resource group Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedResourceGroupId")]
		public string ManagedResourceGroupId { get; set; }
		
		/// <summary>
		/// Name and value pairs that define the managed application outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputs")]
		public string Outputs { get; set; }
		
		/// <summary>
		/// Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// Provisioning status of the managed application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ApplicationPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// The deployment mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Incremental = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 2,
	}
	
	/// <summary>
	/// Error response indicates managed application is not able to process the incoming request. The reason is provided in the error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Http status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatus")]
		public string HttpStatus { get; set; }
	}
	
	/// <summary>
	/// Resource information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GenericResource : Resource
	{
		
		/// <summary>
		/// ID of the resource that manages this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedBy")]
		public string ManagedBy { get; set; }
		
		/// <summary>
		/// SKU for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// Identity for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identity
	{
		
		/// <summary>
		/// The principal ID of resource identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant ID of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<IdentityType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
	}
	
	/// <summary>
	/// The Jit approval mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JitApprovalMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoApprove = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManualApprove = 2,
	}
	
	/// <summary>
	/// The JIT authorization policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JitAuthorizationPolicies
	{
		
		/// <summary>
		/// The the principal id that will be granted JIT access.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The role definition id that will be granted to the Principal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleDefinitionId")]
		public string RoleDefinitionId { get; set; }
	}
	
	/// <summary>
	/// Information about JIT request definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JitRequestDefinition : Resource
	{
		
		/// <summary>
		/// Information about JIT request properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JitRequestProperties Properties { get; set; }
	}
	
	/// <summary>
	/// List of JIT requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JitRequestDefinitionListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The array of Jit request definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JitRequestDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Information about JIT request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JitRequestPatchable
	{
		
		/// <summary>
		/// Jit request tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Information about JIT request properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JitRequestProperties
	{
		
		/// <summary>
		/// The parent application id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationResourceId")]
		public string ApplicationResourceId { get; set; }
		
		/// <summary>
		/// The application client details to track the entity creating/updating the managed app resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public ApplicationClientDetails CreatedBy { get; set; }
		
		/// <summary>
		/// The JIT authorization policies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jitAuthorizationPolicies")]
		public JitAuthorizationPolicies[] JitAuthorizationPolicies { get; set; }
		
		/// <summary>
		/// The JIT request state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jitRequestState")]
		public System.Nullable<JitRequestPropertiesJitRequestState> JitRequestState { get; set; }
		
		/// <summary>
		/// The JIT scheduling policies.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jitSchedulingPolicy")]
		public JitSchedulingPolicy JitSchedulingPolicy { get; set; }
		
		/// <summary>
		/// Provisioning status of the managed application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ApplicationPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The publisher tenant id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherTenantId")]
		public string PublisherTenantId { get; set; }
		
		/// <summary>
		/// The application client details to track the entity creating/updating the managed app resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public ApplicationClientDetails UpdatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JitRequestPropertiesJitRequestState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Denied = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Timeout = 7,
	}
	
	/// <summary>
	/// The JIT request state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JitRequestState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Denied = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Timeout = 7,
	}
	
	/// <summary>
	/// The JIT scheduling policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JitSchedulingPolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// The start time of the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The JIT request scheduling type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public JitSchedulingPolicyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JitSchedulingPolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Once = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recurring = 2,
	}
	
	/// <summary>
	/// The JIT request scheduling type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JitSchedulingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Once = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recurring = 2,
	}
	
	/// <summary>
	/// Microsoft.Solutions operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Microsoft.Solutions operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Microsoft.Solutions operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Plan for the managed application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Plan
	{
		
		/// <summary>
		/// The plan name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The product code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// The promotion code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionCode")]
		public string PromotionCode { get; set; }
		
		/// <summary>
		/// The publisher ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The plan's version.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Plan for the managed application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PlanPatchable
	{
		
		/// <summary>
		/// The plan name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The product code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// The promotion code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionCode")]
		public string PromotionCode { get; set; }
		
		/// <summary>
		/// The publisher ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The plan's version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Provisioning status of the managed application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 11,
	}
	
	/// <summary>
	/// Resource information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// SKU for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The SKU capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// The SKU family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The SKU model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// The SKU name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The SKU size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The SKU tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Microsoft.Solutions REST API operations.
		/// ListOperations providers/Microsoft.Solutions/operations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> ListOperationsAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Solutions/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the applications within a subscription.
		/// Applications_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Solutions/applications
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of applications.</returns>
		public async Task<ApplicationListResult> Applications_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Solutions/applications?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves all JIT requests within the subscription.
		/// JitRequests_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Solutions/jitRequests
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of JIT requests.</returns>
		public async Task<JitRequestDefinitionListResult> JitRequests_ListBySubscriptionAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Solutions/jitRequests?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JitRequestDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the managed application definitions in a resource group.
		/// ApplicationDefinitions_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of managed application definitions.</returns>
		public async Task<ApplicationDefinitionListResult> ApplicationDefinitions_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applicationDefinitions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the managed application definition.
		/// ApplicationDefinitions_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="applicationDefinitionName">The name of the managed application definition.
		/// Max length: 64
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns the managed application definition.</returns>
		public async Task<ApplicationDefinition> ApplicationDefinitions_GetAsync(string resourceGroupName, string applicationDefinitionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applicationDefinitions/"+ (applicationDefinitionName==null? "" : System.Uri.EscapeDataString(applicationDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new managed application definition.
		/// ApplicationDefinitions_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="applicationDefinitionName">The name of the managed application definition.
		/// Max length: 64
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters supplied to the create or update an managed application definition.</param>
		/// <returns>OK - Returns information about the managed application definition, including provisioning status.</returns>
		public async Task<ApplicationDefinition> ApplicationDefinitions_CreateOrUpdateAsync(string resourceGroupName, string applicationDefinitionName, string api_version, string subscriptionId, ApplicationDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applicationDefinitions/"+ (applicationDefinitionName==null? "" : System.Uri.EscapeDataString(applicationDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the managed application definition.
		/// ApplicationDefinitions_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="applicationDefinitionName">The name of the managed application definition to delete.
		/// Max length: 64
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK</returns>
		public async Task ApplicationDefinitions_DeleteAsync(string resourceGroupName, string applicationDefinitionName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applicationDefinitions/"+ (applicationDefinitionName==null? "" : System.Uri.EscapeDataString(applicationDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all the applications within a resource group.
		/// Applications_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of applications.</returns>
		public async Task<ApplicationListResult> Applications_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applications&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApplicationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the managed application.
		/// Applications_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="applicationName">The name of the managed application.
		/// Max length: 64
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns the managed application.</returns>
		public async Task<Application> Applications_GetAsync(string resourceGroupName, string applicationName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new managed application.
		/// Applications_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="applicationName">The name of the managed application.
		/// Max length: 64
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters supplied to the create or update a managed application.</param>
		/// <returns>Created - Returns information about the managed application, including provisioning status.</returns>
		public async Task<Application> Applications_CreateOrUpdateAsync(string resourceGroupName, string applicationName, string api_version, string subscriptionId, Application requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the managed application.
		/// Applications_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="applicationName">The name of the managed application.
		/// Max length: 64
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		public async Task Applications_DeleteAsync(string resourceGroupName, string applicationName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing managed application. The only value that can be updated via PATCH currently is the tags.
		/// Applications_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="applicationName">The name of the managed application.
		/// Max length: 64
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters supplied to update an existing managed application.</param>
		/// <returns>Created - Returns information about the managed application, including provisioning status.</returns>
		public async Task<Application> Applications_UpdateAsync(string resourceGroupName, string applicationName, string api_version, string subscriptionId, Application requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Refresh Permissions for application.
		/// Applications_RefreshPermissions subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}/refreshPermissions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="applicationName">The name of the managed application.
		/// Max length: 64
		/// Min length: 3
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		public async Task Applications_RefreshPermissionsAsync(string resourceGroupName, string applicationName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/applications/"+ (applicationName==null? "" : System.Uri.EscapeDataString(applicationName))+"/refreshPermissions&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves all JIT requests within the resource group.
		/// JitRequests_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns an array of JIT requests.</returns>
		public async Task<JitRequestDefinitionListResult> JitRequests_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/jitRequests&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JitRequestDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the JIT request.
		/// JitRequests_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="jitRequestName">The name of the JIT request.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK - Returns the JIT request</returns>
		public async Task<JitRequestDefinition> JitRequests_GetAsync(string resourceGroupName, string jitRequestName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/jitRequests/"+ (jitRequestName==null? "" : System.Uri.EscapeDataString(jitRequestName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JitRequestDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the JIT request.
		/// JitRequests_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="jitRequestName">The name of the JIT request.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters supplied to the update JIT request.</param>
		/// <returns>Ok - Returns information about existing JIT request.</returns>
		public async Task<JitRequestDefinition> JitRequests_CreateOrUpdateAsync(string resourceGroupName, string jitRequestName, string api_version, string subscriptionId, JitRequestDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/jitRequests/"+ (jitRequestName==null? "" : System.Uri.EscapeDataString(jitRequestName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JitRequestDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the JIT request.
		/// JitRequests_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="jitRequestName">The name of the JIT request.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <returns>OK</returns>
		public async Task JitRequests_DeleteAsync(string resourceGroupName, string jitRequestName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/jitRequests/"+ (jitRequestName==null? "" : System.Uri.EscapeDataString(jitRequestName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the JIT request.
		/// JitRequests_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group. The name is case insensitive.
		/// Max length: 90
		/// Min length: 1
		// </param>
		/// <param name="jitRequestName">The name of the JIT request.</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="requestBody">Parameters supplied to the update JIT request.</param>
		/// <returns>Ok - Returns information about the JIT request.</returns>
		public async Task<JitRequestDefinition> JitRequests_UpdateAsync(string resourceGroupName, string jitRequestName, string api_version, string subscriptionId, JitRequestPatchable requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Solutions/jitRequests/"+ (jitRequestName==null? "" : System.Uri.EscapeDataString(jitRequestName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JitRequestDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the managed application.
		/// Applications_GetById {applicationId}
		/// </summary>
		/// <param name="applicationId">The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <returns>OK - Returns the managed application.</returns>
		public async Task<Application> Applications_GetByIdAsync(string applicationId, string api_version)
		{
			var requestUri = ""+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new managed application.
		/// Applications_CreateOrUpdateById {applicationId}
		/// </summary>
		/// <param name="applicationId">The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Parameters supplied to the create or update a managed application.</param>
		/// <returns>Created - Returns information about the managed application, including provisioning status.</returns>
		public async Task<Application> Applications_CreateOrUpdateByIdAsync(string applicationId, string api_version, Application requestBody)
		{
			var requestUri = ""+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the managed application.
		/// Applications_DeleteById {applicationId}
		/// </summary>
		/// <param name="applicationId">The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		public async Task Applications_DeleteByIdAsync(string applicationId, string api_version)
		{
			var requestUri = ""+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing managed application. The only value that can be updated via PATCH currently is the tags.
		/// Applications_UpdateById {applicationId}
		/// </summary>
		/// <param name="applicationId">The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}</param>
		/// <param name="api_version">The API version to use for this operation.</param>
		/// <param name="requestBody">Parameters supplied to update an existing managed application.</param>
		/// <returns>Created - Returns information about the managed application, including provisioning status.</returns>
		public async Task<Application> Applications_UpdateByIdAsync(string applicationId, string api_version, Application requestBody)
		{
			var requestUri = ""+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
