//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The Action Groups information, used by the alert rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActionGroupsInformation
	{
		
		/// <summary>
		/// An optional custom email subject to use in email notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customEmailSubject")]
		public string CustomEmailSubject { get; set; }
		
		/// <summary>
		/// An optional custom web-hook payload to use in web-hook notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customWebhookPayload")]
		public string CustomWebhookPayload { get; set; }
		
		/// <summary>
		/// The Action Group resource IDs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupIds")]
		public string[] GroupIds { get; set; }
	}
	
	/// <summary>
	/// The alert rule information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertRule : AzureResource
	{
		
		/// <summary>
		/// The alert rule properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AlertRuleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The alert rule patch information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertRulePatchObject
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The alert rule properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AlertRulePatchProperties Properties { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The alert rule properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertRulePatchProperties
	{
		
		/// <summary>
		/// The Action Groups information, used by the alert rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionGroups")]
		public ActionGroupsInformation ActionGroups { get; set; }
		
		/// <summary>
		/// The alert rule description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// The alert rule severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<AlertRulePatchPropertiesSeverity> Severity { get; set; }
		
		/// <summary>
		/// The alert rule state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AlertRulePatchPropertiesState> State { get; set; }
		
		/// <summary>
		/// Optional throttling information for the alert rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="throttling")]
		public ThrottlingInformation Throttling { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AlertRulePatchPropertiesSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sev4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AlertRulePatchPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// The alert rule properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertRuleProperties
	{
		
		/// <summary>
		/// The Action Groups information, used by the alert rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionGroups")]
		public ActionGroupsInformation ActionGroups { get; set; }
		
		/// <summary>
		/// The alert rule description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The detector information. By default this is not populated, unless it's specified in expandDetector
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detector")]
		public Detector Detector { get; set; }
		
		/// <summary>
		/// The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// The alert rule resources scope.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string[] Scope { get; set; }
		
		/// <summary>
		/// The alert rule severity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public AlertRulePatchPropertiesSeverity Severity { get; set; }
		
		/// <summary>
		/// The alert rule state.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AlertRulePatchPropertiesState State { get; set; }
		
		/// <summary>
		/// Optional throttling information for the alert rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="throttling")]
		public ThrottlingInformation Throttling { get; set; }
	}
	
	/// <summary>
	/// List of Smart Detector alert rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertRulesList
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Smart Detector alert rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AlertRule[] Value { get; set; }
	}
	
	/// <summary>
	/// An Azure resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureResource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The resource location.
		/// </summary>
		[System.ComponentModel.DefaultValue("global")]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; } = "global";
		
		/// <summary>
		/// The resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The detector information. By default this is not populated, unless it's specified in expandDetector
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Detector
	{
		
		/// <summary>
		/// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The detector id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imagePaths")]
		public string[] ImagePaths { get; set; }
		
		/// <summary>
		/// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The detector's parameters.'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
		
		/// <summary>
		/// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedResourceTypes")]
		public string[] SupportedResourceTypes { get; set; }
	}
	
	/// <summary>
	/// Describe the format of an Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Optional throttling information for the alert rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ThrottlingInformation
	{
		
		/// <summary>
		/// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all the existing Smart Detector alert rules within the subscription.
		/// SmartDetectorAlertRules_List subscriptions/{subscriptionId}/providers/microsoft.alertsManagement/smartDetectorAlertRules
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="expandDetector">Indicates if Smart Detector should be expanded.</param>
		/// <returns>Successful request to list Smart Detector alert rules.</returns>
		public async Task<AlertRulesList> SmartDetectorAlertRules_ListAsync(string subscriptionId, string api_version, bool expandDetector)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/microsoft.alertsManagement/smartDetectorAlertRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&expandDetector="+expandDetector;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertRulesList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all the existing Smart Detector alert rules within the subscription and resource group.
		/// SmartDetectorAlertRules_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="expandDetector">Indicates if Smart Detector should be expanded.</param>
		/// <returns>Successful request to list Smart Detector alert rules.</returns>
		public async Task<AlertRulesList> SmartDetectorAlertRules_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, bool expandDetector)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.alertsManagement/smartDetectorAlertRules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&expandDetector="+expandDetector;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertRulesList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific Smart Detector alert rule.
		/// SmartDetectorAlertRules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="alertRuleName">The name of the alert rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="expandDetector">Indicates if Smart Detector should be expanded.</param>
		/// <returns>Successful request to get Smart Detector alert rule.</returns>
		public async Task<AlertRule> SmartDetectorAlertRules_GetAsync(string subscriptionId, string resourceGroupName, string alertRuleName, string api_version, bool expandDetector)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.alertsManagement/smartDetectorAlertRules/"+ (alertRuleName==null? "" : System.Uri.EscapeDataString(alertRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&expandDetector="+expandDetector;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertRule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update a Smart Detector alert rule.
		/// SmartDetectorAlertRules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="alertRuleName">The name of the alert rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>Successful request to update a Smart Detector alert rule.</returns>
		public async Task<AlertRule> SmartDetectorAlertRules_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string alertRuleName, string api_version, AlertRule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.alertsManagement/smartDetectorAlertRules/"+ (alertRuleName==null? "" : System.Uri.EscapeDataString(alertRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertRule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an existing Smart Detector alert rule.
		/// SmartDetectorAlertRules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="alertRuleName">The name of the alert rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Successful request to delete a Smart Detector alert rule.</returns>
		public async Task SmartDetectorAlertRules_DeleteAsync(string subscriptionId, string resourceGroupName, string alertRuleName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.alertsManagement/smartDetectorAlertRules/"+ (alertRuleName==null? "" : System.Uri.EscapeDataString(alertRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Patch a specific Smart Detector alert rule.
		/// SmartDetectorAlertRules_Patch subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="alertRuleName">The name of the alert rule.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>Successful request to patch Smart Detector alert rule.</returns>
		public async Task<AlertRule> SmartDetectorAlertRules_PatchAsync(string subscriptionId, string resourceGroupName, string alertRuleName, string api_version, AlertRulePatchObject requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/microsoft.alertsManagement/smartDetectorAlertRules/"+ (alertRuleName==null? "" : System.Uri.EscapeDataString(alertRuleName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertRule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
