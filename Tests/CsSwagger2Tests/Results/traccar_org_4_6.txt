//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Attribute
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public string Attribute1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// String|Number|Boolean
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Calendar
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// base64 encoded in iCalendar format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Command
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public System.Nullable<System.Int32> DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CommandType
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Device
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public string Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geofenceIds")]
		public int[] GeofenceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int32> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="positionId")]
		public System.Nullable<System.Int32> PositionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class DeviceAccumulators
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public System.Nullable<System.Int32> DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Double> Hours { get; set; }
		
		/// <summary>
		/// in meters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDistance")]
		public System.Nullable<System.Double> TotalDistance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Driver
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public System.Nullable<System.Int32> DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geofenceId")]
		public System.Nullable<System.Int32> GeofenceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maintenanceId")]
		public System.Nullable<System.Int32> MaintenanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="positionId")]
		public System.Nullable<System.Int32> PositionId { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverTime")]
		public System.Nullable<System.DateTimeOffset> ServerTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Geofence
	{
		
		[System.Runtime.Serialization.DataMember(Name="area")]
		public string Area { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public System.Nullable<System.Int32> CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int32> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Maintenance
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<System.Double> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Double> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Notification
	{
		
		[System.Runtime.Serialization.DataMember(Name="always")]
		public System.Nullable<System.Boolean> Always { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public System.Nullable<System.Int32> CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mail")]
		public System.Nullable<System.Boolean> Mail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sms")]
		public System.Nullable<System.Boolean> Sms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="web")]
		public System.Nullable<System.Boolean> Web { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NotificationType
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// This is a permission map that contain two object indexes. It is used to link/unlink objects. Order is important. Example: { deviceId:8, geofenceId: 16 }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Permission
	{
		
		/// <summary>
		/// Computed Attribute Id, can be second parameter only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeId")]
		public System.Nullable<System.Int32> AttributeId { get; set; }
		
		/// <summary>
		/// Calendar Id, can be second parameter only and only in combination with userId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public System.Nullable<System.Int32> CalendarId { get; set; }
		
		/// <summary>
		/// Device Id, can be first parameter or second only in combination with userId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public System.Nullable<System.Int32> DeviceId { get; set; }
		
		/// <summary>
		/// Driver Id, can be second parameter only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driverId")]
		public System.Nullable<System.Int32> DriverId { get; set; }
		
		/// <summary>
		/// Geofence Id, can be second parameter only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geofenceId")]
		public System.Nullable<System.Int32> GeofenceId { get; set; }
		
		/// <summary>
		/// Group Id, can be first parameter or second only in combination with userId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int32> GroupId { get; set; }
		
		/// <summary>
		/// User Id, can be second parameter only and only in combination with userId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedUserId")]
		public System.Nullable<System.Int32> ManagedUserId { get; set; }
		
		/// <summary>
		/// User Id, can be only first parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int32> UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Position
	{
		
		[System.Runtime.Serialization.DataMember(Name="accuracy")]
		public System.Nullable<System.Double> Accuracy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="altitude")]
		public System.Nullable<System.Double> Altitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="course")]
		public System.Nullable<System.Double> Course { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public System.Nullable<System.Int32> DeviceId { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceTime")]
		public System.Nullable<System.DateTimeOffset> DeviceTime { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixTime")]
		public System.Nullable<System.DateTimeOffset> FixTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outdated")]
		public System.Nullable<System.Boolean> Outdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverTime")]
		public System.Nullable<System.DateTimeOffset> ServerTime { get; set; }
		
		/// <summary>
		/// in knots
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ReportStops
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public System.Nullable<System.Int32> DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineHours")]
		public System.Nullable<System.Int32> EngineHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		/// <summary>
		/// in liters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spentFuel")]
		public System.Nullable<System.Double> SpentFuel { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ReportSummary
	{
		
		/// <summary>
		/// in knots
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averageSpeed")]
		public System.Nullable<System.Double> AverageSpeed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public System.Nullable<System.Int32> DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// in meters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineHours")]
		public System.Nullable<System.Int32> EngineHours { get; set; }
		
		/// <summary>
		/// in knots
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSpeed")]
		public System.Nullable<System.Double> MaxSpeed { get; set; }
		
		/// <summary>
		/// in liters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spentFuel")]
		public System.Nullable<System.Double> SpentFuel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ReportTrips
	{
		
		/// <summary>
		/// in knots
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averageSpeed")]
		public System.Nullable<System.Double> AverageSpeed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public System.Nullable<System.Int32> DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// in meters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="driverName")]
		public string DriverName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="driverUniqueId")]
		public System.Nullable<System.Int32> DriverUniqueId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endAddress")]
		public string EndAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endLat")]
		public System.Nullable<System.Double> EndLat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endLon")]
		public System.Nullable<System.Double> EndLon { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// in knots
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSpeed")]
		public System.Nullable<System.Double> MaxSpeed { get; set; }
		
		/// <summary>
		/// in liters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spentFuel")]
		public System.Nullable<System.Double> SpentFuel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startAddress")]
		public string StartAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startLat")]
		public System.Nullable<System.Double> StartLat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startLon")]
		public System.Nullable<System.Double> StartLon { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Server
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bingKey")]
		public string BingKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinateFormat")]
		public string CoordinateFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceReadonly")]
		public System.Nullable<System.Boolean> DeviceReadonly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceSettings")]
		public System.Nullable<System.Boolean> ForceSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limitCommands")]
		public System.Nullable<System.Boolean> LimitCommands { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map")]
		public string Map { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapUrl")]
		public string MapUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poiLayer")]
		public string PoiLayer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readonly")]
		public System.Nullable<System.Boolean> Readonly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registration")]
		public System.Nullable<System.Boolean> Registration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twelveHourFormat")]
		public System.Nullable<System.Boolean> TwelveHourFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zoom")]
		public System.Nullable<System.Int32> Zoom { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Statistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeDevices")]
		public System.Nullable<System.Int32> ActiveDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeUsers")]
		public System.Nullable<System.Int32> ActiveUsers { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captureTime")]
		public System.Nullable<System.DateTimeOffset> CaptureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messagesReceived")]
		public System.Nullable<System.Int32> MessagesReceived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messagesStored")]
		public System.Nullable<System.Int32> MessagesStored { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public System.Nullable<System.Int32> Requests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="administrator")]
		public System.Nullable<System.Boolean> Administrator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinateFormat")]
		public string CoordinateFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceLimit")]
		public System.Nullable<System.Int32> DeviceLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceReadonly")]
		public System.Nullable<System.Boolean> DeviceReadonly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limitCommands")]
		public System.Nullable<System.Boolean> LimitCommands { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="map")]
		public string Map { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poiLayer")]
		public string PoiLayer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readonly")]
		public System.Nullable<System.Boolean> Readonly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twelveHourFormat")]
		public System.Nullable<System.Boolean> TwelveHourFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userLimit")]
		public System.Nullable<System.Int32> UserLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zoom")]
		public System.Nullable<System.Int32> Zoom { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Fetch a list of Attributes
		/// Without params, it returns a list of Attributes the user has access to
		/// AttributesComputedGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefresh attributes/computed
		/// </summary>
		/// <param name="all">Can only be used by admins or managers to fetch all entities</param>
		/// <param name="userId">Standard users can use this only with their own _userId_</param>
		/// <param name="deviceId">Standard users can use this only with _deviceId_s, they have access to</param>
		/// <param name="groupId">Standard users can use this only with _groupId_s, they have access to</param>
		/// <returns>OK</returns>
		public async Task<Attribute[]> AttributesComputedGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefreshAsync(bool all, int userId, int deviceId, int groupId, bool refresh, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attributes/computed?all="+all+"&userId="+userId+"&deviceId="+deviceId+"&groupId="+groupId+"&refresh="+refresh;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Attribute[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an Attribute
		/// AttributesComputedPost attributes/computed
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Attribute> AttributesComputedPostAsync(Attribute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attributes/computed";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Attribute>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an Attribute
		/// AttributesComputed_idPut attributes/computed/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Attribute> AttributesComputed_idPutAsync(int id, Attribute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attributes/computed/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Attribute>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an Attribute
		/// AttributesComputed_idDelete attributes/computed/{id}
		/// </summary>
		public async Task AttributesComputed_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attributes/computed/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Calendars
		/// Without params, it returns a list of Calendars the user has access to
		/// CalendarsGetByAllAndUserId calendars
		/// </summary>
		/// <param name="all">Can only be used by admins or managers to fetch all entities</param>
		/// <param name="userId">Standard users can use this only with their own _userId_</param>
		/// <returns>OK</returns>
		public async Task<Calendar[]> CalendarsGetByAllAndUserIdAsync(bool all, int userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars?all="+all+"&userId="+userId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Calendar[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Calendar
		/// CalendarsPost calendars
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Calendar> CalendarsPostAsync(Calendar requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Calendar>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Calendar
		/// Calendars_idPut calendars/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Calendar> Calendars_idPutAsync(int id, Calendar requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Calendar>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Calendar
		/// Calendars_idDelete calendars/{id}
		/// </summary>
		public async Task Calendars_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendars/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Saved Commands
		/// Without params, it returns a list of Drivers the user has access to
		/// CommandsGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefresh commands
		/// </summary>
		/// <param name="all">Can only be used by admins or managers to fetch all entities</param>
		/// <param name="userId">Standard users can use this only with their own _userId_</param>
		/// <param name="deviceId">Standard users can use this only with _deviceId_s, they have access to</param>
		/// <param name="groupId">Standard users can use this only with _groupId_s, they have access to</param>
		/// <returns>OK</returns>
		public async Task<Command[]> CommandsGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefreshAsync(bool all, int userId, int deviceId, int groupId, bool refresh, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "commands?all="+all+"&userId="+userId+"&deviceId="+deviceId+"&groupId="+groupId+"&refresh="+refresh;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Command[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Saved Command
		/// CommandsPost commands
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Command> CommandsPostAsync(Command requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "commands";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Command>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Saved Commands supported by Device at the moment
		/// Return a list of saved commands linked to Device and its groups, filtered by current Device protocol support
		/// CommandsSendGetByDeviceId commands/send
		/// </summary>
		/// <param name="deviceId">Standard users can use this only with _deviceId_s, they have access to</param>
		/// <returns>OK</returns>
		public async Task<Command[]> CommandsSendGetByDeviceIdAsync(int deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "commands/send?deviceId="+deviceId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Command[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Dispatch commands to device
		/// Dispatch a new command or Saved Command if _body.id_ set
		/// CommandsSendPost commands/send
		/// </summary>
		/// <returns>Command sent</returns>
		public async Task<Command> CommandsSendPostAsync(Command requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "commands/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Command>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of available Commands for the Device or all possible Commands if Device ommited
		/// CommandsTypesGetByDeviceIdAndProtocolAndTextChannel commands/types
		/// </summary>
		/// <param name="deviceId">Internal device identifier. Only works if device has already reported some locations</param>
		/// <param name="protocol">Protocol name. Can be used instead of device id</param>
		/// <param name="textChannel">When `true` return SMS commands. If not specified or `false` return data commands</param>
		/// <returns>OK</returns>
		public async Task<CommandType[]> CommandsTypesGetByDeviceIdAndProtocolAndTextChannelAsync(int deviceId, string protocol, bool textChannel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "commands/types?deviceId="+deviceId+"&protocol=" + (protocol==null? "" : System.Uri.EscapeDataString(protocol))+"&textChannel="+textChannel;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CommandType[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Saved Command
		/// Commands_idPut commands/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Command> Commands_idPutAsync(int id, Command requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "commands/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Command>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Saved Command
		/// Commands_idDelete commands/{id}
		/// </summary>
		public async Task Commands_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "commands/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Devices
		/// Without any params, returns a list of the user's devices
		/// DevicesGetByAllAndUserIdAndIdAndUniqueId devices
		/// </summary>
		/// <param name="all">Can only be used by admins or managers to fetch all entities</param>
		/// <param name="userId">Standard users can use this only with their own _userId_</param>
		/// <param name="id">To fetch one or more devices. Multiple params can be passed like `id=31&id=42`</param>
		/// <param name="uniqueId">To fetch one or more devices. Multiple params can be passed like `uniqueId=333331&uniqieId=44442`</param>
		/// <returns>OK</returns>
		public async Task<Device[]> DevicesGetByAllAndUserIdAndIdAndUniqueIdAsync(bool all, int userId, int id, string uniqueId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "devices?all="+all+"&userId="+userId+"&id="+id+"&uniqueId=" + (uniqueId==null? "" : System.Uri.EscapeDataString(uniqueId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Device
		/// DevicesPost devices
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Device> DevicesPostAsync(Device requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "devices";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Device
		/// Devices_idPut devices/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Device> Devices_idPutAsync(int id, Device requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "devices/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Device
		/// Devices_idDelete devices/{id}
		/// </summary>
		public async Task Devices_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "devices/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update total distance and hours of the Device
		/// Devices_idAccumulatorsPut devices/{id}/accumulators
		/// </summary>
		public async Task Devices_idAccumulatorsPutAsync(int id, DeviceAccumulators requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "devices/"+id+"/accumulators";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Drivers
		/// Without params, it returns a list of Drivers the user has access to
		/// DriversGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefresh drivers
		/// </summary>
		/// <param name="all">Can only be used by admins or managers to fetch all entities</param>
		/// <param name="userId">Standard users can use this only with their own _userId_</param>
		/// <param name="deviceId">Standard users can use this only with _deviceId_s, they have access to</param>
		/// <param name="groupId">Standard users can use this only with _groupId_s, they have access to</param>
		/// <returns>OK</returns>
		public async Task<Driver[]> DriversGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefreshAsync(bool all, int userId, int deviceId, int groupId, bool refresh, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drivers?all="+all+"&userId="+userId+"&deviceId="+deviceId+"&groupId="+groupId+"&refresh="+refresh;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Driver[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Driver
		/// DriversPost drivers
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Driver> DriversPostAsync(Driver requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drivers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Driver>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Driver
		/// Drivers_idPut drivers/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Driver> Drivers_idPutAsync(int id, Driver requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drivers/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Driver>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Driver
		/// Drivers_idDelete drivers/{id}
		/// </summary>
		public async Task Drivers_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drivers/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Events_idGet events/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Event> Events_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Event>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Geofences
		/// Without params, it returns a list of Geofences the user has access to
		/// GeofencesGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefresh geofences
		/// </summary>
		/// <param name="all">Can only be used by admins or managers to fetch all entities</param>
		/// <param name="userId">Standard users can use this only with their own _userId_</param>
		/// <param name="deviceId">Standard users can use this only with _deviceId_s, they have access to</param>
		/// <param name="groupId">Standard users can use this only with _groupId_s, they have access to</param>
		/// <returns>OK</returns>
		public async Task<Geofence[]> GeofencesGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefreshAsync(bool all, int userId, int deviceId, int groupId, bool refresh, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "geofences?all="+all+"&userId="+userId+"&deviceId="+deviceId+"&groupId="+groupId+"&refresh="+refresh;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Geofence[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Geofence
		/// GeofencesPost geofences
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Geofence> GeofencesPostAsync(Geofence requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "geofences";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Geofence>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Geofence
		/// Geofences_idPut geofences/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Geofence> Geofences_idPutAsync(int id, Geofence requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "geofences/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Geofence>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Geofence
		/// Geofences_idDelete geofences/{id}
		/// </summary>
		public async Task Geofences_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "geofences/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Groups
		/// Without any params, returns a list of the Groups the user belongs to
		/// GroupsGetByAllAndUserId groups
		/// </summary>
		/// <param name="all">Can only be used by admins or managers to fetch all entities</param>
		/// <param name="userId">Standard users can use this only with their own _userId_</param>
		/// <returns>OK</returns>
		public async Task<Group[]> GroupsGetByAllAndUserIdAsync(bool all, int userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups?all="+all+"&userId="+userId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Group[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Group
		/// GroupsPost groups
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Group> GroupsPostAsync(Group requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Group>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Group
		/// Groups_idPut groups/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Group> Groups_idPutAsync(int id, Group requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Group>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Group
		/// Groups_idDelete groups/{id}
		/// </summary>
		public async Task Groups_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Maintenance
		/// Without params, it returns a list of Maintenance the user has access to
		/// MaintenanceGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefresh maintenance
		/// </summary>
		/// <param name="all">Can only be used by admins or managers to fetch all entities</param>
		/// <param name="userId">Standard users can use this only with their own _userId_</param>
		/// <param name="deviceId">Standard users can use this only with _deviceId_s, they have access to</param>
		/// <param name="groupId">Standard users can use this only with _groupId_s, they have access to</param>
		/// <returns>OK</returns>
		public async Task<Maintenance[]> MaintenanceGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefreshAsync(bool all, int userId, int deviceId, int groupId, bool refresh, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maintenance?all="+all+"&userId="+userId+"&deviceId="+deviceId+"&groupId="+groupId+"&refresh="+refresh;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Maintenance[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Maintenance
		/// MaintenancePost maintenance
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Maintenance> MaintenancePostAsync(Maintenance requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maintenance";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Maintenance>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Maintenance
		/// Maintenance_idPut maintenance/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Maintenance> Maintenance_idPutAsync(int id, Maintenance requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maintenance/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Maintenance>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Maintenance
		/// Maintenance_idDelete maintenance/{id}
		/// </summary>
		public async Task Maintenance_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "maintenance/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Notifications
		/// Without params, it returns a list of Notifications the user has access to
		/// NotificationsGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefresh notifications
		/// </summary>
		/// <param name="all">Can only be used by admins or managers to fetch all entities</param>
		/// <param name="userId">Standard users can use this only with their own _userId_</param>
		/// <param name="deviceId">Standard users can use this only with _deviceId_s, they have access to</param>
		/// <param name="groupId">Standard users can use this only with _groupId_s, they have access to</param>
		/// <returns>OK</returns>
		public async Task<Notification[]> NotificationsGetByAllAndUserIdAndDeviceIdAndGroupIdAndRefreshAsync(bool all, int userId, int deviceId, int groupId, bool refresh, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications?all="+all+"&userId="+userId+"&deviceId="+deviceId+"&groupId="+groupId+"&refresh="+refresh;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Notification[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Notification
		/// NotificationsPost notifications
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Notification> NotificationsPostAsync(Notification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Notification>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send test notification to current user via Email and SMS
		/// NotificationsTestPost notifications/test
		/// </summary>
		public async Task NotificationsTestPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications/test";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of available Notification types
		/// NotificationsTypesGet notifications/types
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NotificationType[]> NotificationsTypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications/types";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<NotificationType[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Notification
		/// Notifications_idPut notifications/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Notification> Notifications_idPutAsync(int id, Notification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Notification>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Notification
		/// Notifications_idDelete notifications/{id}
		/// </summary>
		public async Task Notifications_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Link an Object to another Object
		/// PermissionsPost permissions
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Permission> PermissionsPostAsync(Permission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permissions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Permission>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unlink an Object from another Object
		/// PermissionsDelete permissions
		/// </summary>
		public async Task PermissionsDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permissions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetches a list of Positions
		/// Without any params, it returns a list of last known positions for all the user's Devices. _from_ and _to_ fields are not required with _id_
		/// PositionsGetByDeviceIdAndFromAndToAndId positions
		/// </summary>
		/// <param name="deviceId">_deviceId_ is optional, but requires the _from_ and _to_ parameters when used</param>
		/// <param name="from">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <param name="to">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <param name="id">To fetch one or more positions. Multiple params can be passed like `id=31&id=42`</param>
		/// <returns>OK</returns>
		public async Task<Position[]> PositionsGetByDeviceIdAndFromAndToAndIdAsync(int deviceId, System.DateTimeOffset from, System.DateTimeOffset to, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "positions?deviceId="+deviceId+"&from=" + from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&to=" + to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&id="+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Position[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Events within the time period for the Devices or Groups
		/// At least one _deviceId_ or one _groupId_ must be passed
		/// ReportsEventsGetByDeviceIdAndGroupIdAndTypeAndFromAndTo reports/events
		/// </summary>
		/// <param name="type">% can be used to return events of all types</param>
		/// <param name="from">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <param name="to">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <returns>OK</returns>
		public async Task<Event[]> ReportsEventsGetByDeviceIdAndGroupIdAndTypeAndFromAndToAsync(int[] deviceId, int[] groupId, string[] type, System.DateTimeOffset from, System.DateTimeOffset to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/events?"+string.Join("&", deviceId.Select(z => $"deviceId={z}"))+"&"+string.Join("&", groupId.Select(z => $"groupId={z}"))+"&"+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"&from=" + from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&to=" + to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Event[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Positions within the time period for the Devices or Groups
		/// At least one _deviceId_ or one _groupId_ must be passed
		/// ReportsRouteGetByDeviceIdAndGroupIdAndFromAndTo reports/route
		/// </summary>
		/// <param name="from">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <param name="to">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <returns>OK</returns>
		public async Task<Position[]> ReportsRouteGetByDeviceIdAndGroupIdAndFromAndToAsync(int[] deviceId, int[] groupId, System.DateTimeOffset from, System.DateTimeOffset to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/route?"+string.Join("&", deviceId.Select(z => $"deviceId={z}"))+"&"+string.Join("&", groupId.Select(z => $"groupId={z}"))+"&from=" + from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&to=" + to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Position[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of ReportStops within the time period for the Devices or Groups
		/// At least one _deviceId_ or one _groupId_ must be passed
		/// ReportsStopsGetByDeviceIdAndGroupIdAndFromAndTo reports/stops
		/// </summary>
		/// <param name="from">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <param name="to">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <returns>OK</returns>
		public async Task<ReportStops[]> ReportsStopsGetByDeviceIdAndGroupIdAndFromAndToAsync(int[] deviceId, int[] groupId, System.DateTimeOffset from, System.DateTimeOffset to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/stops?"+string.Join("&", deviceId.Select(z => $"deviceId={z}"))+"&"+string.Join("&", groupId.Select(z => $"groupId={z}"))+"&from=" + from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&to=" + to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportStops[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of ReportSummary within the time period for the Devices or Groups
		/// At least one _deviceId_ or one _groupId_ must be passed
		/// ReportsSummaryGetByDeviceIdAndGroupIdAndFromAndTo reports/summary
		/// </summary>
		/// <param name="from">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <param name="to">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <returns>OK</returns>
		public async Task<ReportSummary[]> ReportsSummaryGetByDeviceIdAndGroupIdAndFromAndToAsync(int[] deviceId, int[] groupId, System.DateTimeOffset from, System.DateTimeOffset to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/summary?"+string.Join("&", deviceId.Select(z => $"deviceId={z}"))+"&"+string.Join("&", groupId.Select(z => $"groupId={z}"))+"&from=" + from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&to=" + to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportSummary[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of ReportTrips within the time period for the Devices or Groups
		/// At least one _deviceId_ or one _groupId_ must be passed
		/// ReportsTripsGetByDeviceIdAndGroupIdAndFromAndTo reports/trips
		/// </summary>
		/// <param name="from">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <param name="to">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <returns>OK</returns>
		public async Task<ReportTrips[]> ReportsTripsGetByDeviceIdAndGroupIdAndFromAndToAsync(int[] deviceId, int[] groupId, System.DateTimeOffset from, System.DateTimeOffset to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/trips?"+string.Join("&", deviceId.Select(z => $"deviceId={z}"))+"&"+string.Join("&", groupId.Select(z => $"groupId={z}"))+"&from=" + from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&to=" + to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportTrips[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch Server information
		/// ServerGet server
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Server> ServerGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "server";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Server>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Server information
		/// ServerPut server
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Server> ServerPutAsync(Server requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "server";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Server>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch Session information
		/// SessionGetByToken session
		/// </summary>
		/// <returns>OK</returns>
		public async Task<User> SessionGetByTokenAsync(string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "session?token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Close the Session
		/// SessionDelete session
		/// </summary>
		public async Task SessionDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "session";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch server Statistics
		/// StatisticsGetByFromAndTo statistics
		/// </summary>
		/// <param name="from">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <param name="to">in IS0 8601 format. eg. `1963-11-22T18:30:00Z`</param>
		/// <returns>OK</returns>
		public async Task<Statistics[]> StatisticsGetByFromAndToAsync(System.DateTimeOffset from, System.DateTimeOffset to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics?from=" + from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&to=" + to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Statistics[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch a list of Users
		/// UsersGetByUserId users
		/// </summary>
		/// <param name="userId">Can only be used by admin or manager users</param>
		/// <returns>OK</returns>
		public async Task<User[]> UsersGetByUserIdAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users?userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a User
		/// UsersPost users
		/// </summary>
		/// <returns>OK</returns>
		public async Task<User> UsersPostAsync(User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a User
		/// Users_idPut users/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<User> Users_idPutAsync(int id, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a User
		/// Users_idDelete users/{id}
		/// </summary>
		public async Task Users_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
