//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a physical address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Address
	{
		
		/// <summary>
		/// The first line of the address.
		///
		///Fields that start with `address_line` provide the address's most specific
		///details, like street number, street name, and building name. They do *not*
		///provide less specific details like city, state/province, or country (these
		///details are provided in other fields).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_1")]
		public string Address_line_1 { get; set; }
		
		/// <summary>
		/// The second line of the address, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_2")]
		public string Address_line_2 { get; set; }
		
		/// <summary>
		/// The third line of the address, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_3")]
		public string Address_line_3 { get; set; }
		
		/// <summary>
		/// A civil entity within the address's country. In the US, this
		///is the state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrative_district_level_1")]
		public string Administrative_district_level_1 { get; set; }
		
		/// <summary>
		/// A civil entity within the address's `administrative_district_level_1`.
		///In the US, this is the county.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrative_district_level_2")]
		public string Administrative_district_level_2 { get; set; }
		
		/// <summary>
		/// A civil entity within the address's `administrative_district_level_2`,
		///if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrative_district_level_3")]
		public string Administrative_district_level_3 { get; set; }
		
		/// <summary>
		/// The address's country, in ISO 3166-1-alpha-2 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public System.Nullable<AddressCountry> Country { get; set; }
		
		/// <summary>
		/// Optional first name when it's representing recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Optional last name when it's representing recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// The city or town of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Optional organization name when it's representing recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// The address's postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// A civil region within the address's `locality`, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality")]
		public string Sublocality { get; set; }
		
		/// <summary>
		/// A civil region within the address's `sublocality`, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality_2")]
		public string Sublocality_2 { get; set; }
		
		/// <summary>
		/// A civil region within the address's `sublocality_2`, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality_3")]
		public string Sublocality_3 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AddressCountry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AM = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AQ = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AW = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AX = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZ = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BA = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BB = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BF = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BH = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BI = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BJ = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BL = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BN = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BO = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BQ = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BR = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BS = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BT = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BV = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BY = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZ = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CC = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CD = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CF = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CG = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CH = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CI = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CK = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CL = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CM = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CR = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CU = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CV = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CW = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CX = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CY = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZ = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DE = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DJ = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DK = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DM = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZ = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EE = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EG = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EH = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ER = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ET = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FK = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FM = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FO = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GA = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GB = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GD = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GE = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GF = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GG = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GH = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GI = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GL = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GM = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GN = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GP = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GQ = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GS = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GT = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GU = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GW = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GY = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HK = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HN = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HR = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HT = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HU = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IE = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IL = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IM = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IO = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IQ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IR = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JE = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JM = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JO = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JP = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KE = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KG = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KH = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KI = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KM = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KN = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KP = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KW = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KY = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KZ = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LA = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LB = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LK = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LR = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LU = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LV = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LY = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MA = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MC = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ME = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MF = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MG = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MH = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MK = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ML = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MM = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MN = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MO = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MQ = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MR = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MT = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MU = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MV = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MW = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MX = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MY = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MZ = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NA = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NC = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NE = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NF = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NG = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NI = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NP = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NR = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NU = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZ = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OM = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PA = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PE = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PF = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PG = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PH = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PK = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PL = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PN = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PR = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PS = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PW = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PY = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QA = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RE = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RO = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RS = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RW = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SA = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SB = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SC = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SG = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SH = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SI = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SJ = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SL = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SM = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SN = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SO = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SR = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SS = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ST = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SV = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SX = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SY = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SZ = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TC = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TD = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TF = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TG = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TH = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TJ = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TK = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TL = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TM = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TN = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TO = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TR = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TT = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TV = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TW = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TZ = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UA = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UG = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UM = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UY = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZ = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VA = 236,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VC = 237,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VE = 238,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VG = 239,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VI = 240,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VN = 241,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VU = 242,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WF = 243,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WS = 244,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YE = 245,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YT = 246,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZA = 247,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZM = 248,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZW = 249,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchDeleteCatalogObjectsRequest
	{
		
		/// <summary>
		/// The IDs of the [CatalogObject](#type-catalogobject)s to be deleted. When an object is deleted, other objects
		///in the graph that depend on that object will be deleted as well (for example, deleting a
		///[CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_ids")]
		public string[] Object_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchDeleteCatalogObjectsResponse
	{
		
		/// <summary>
		/// The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted_at")]
		public string Deleted_at { get; set; }
		
		/// <summary>
		/// The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted_object_ids")]
		public string[] Deleted_object_ids { get; set; }
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Represents an error encountered during a request to the Connect API.
	///
	///See [Handling errors](#handlingerrors) for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// The error's high-level category. See [ErrorCategory](#type-errorcategory)
		///for possible values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ErrorCategory Category { get; set; }
		
		/// <summary>
		/// The error's specific code. See [ErrorCode](#type-errorcode) for possible
		///values
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ErrorCode Code { get; set; }
		
		/// <summary>
		/// A human-readable description of the error for debugging purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The name of the field provided in the original request that the error
		///pertains to, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_REQUEST_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE_LIMIT_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_METHOD_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_ERROR = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_SERVER_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAUTHORIZED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_TOKEN_EXPIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_TOKEN_REVOKED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORBIDDEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_SCOPES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_DISABLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V1_APPLICATION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V1_ACCESS_TOKEN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD_PROCESSING_NOT_ENABLED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAD_REQUEST = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_REQUIRED_PARAMETER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCORRECT_TYPE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_TIME = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_TIME_RANGE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_VALUE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CURSOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_QUERY_PARAMETER = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFLICTING_PARAMETERS = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTED_JSON_BODY = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_SORT_ORDER = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_REGEX_MISMATCH = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_TOO_SHORT = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_TOO_LONG = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_TOO_LOW = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_TOO_HIGH = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_EMPTY = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRAY_EMPTY = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTED_BOOLEAN = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTED_INTEGER = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTED_FLOAT = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTED_STRING = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTED_OBJECT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTED_ARRAY = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTED_BASE64_ENCODED_BYTE_ARRAY = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ARRAY_VALUE = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ENUM_VALUE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CONTENT_TYPE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_FORM_VALUE = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_INSTRUMENT_EXPECTED = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_FIELDS_SET = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD_EXPIRED = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_EXPIRATION = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_EXPIRATION_YEAR = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_EXPIRATION_DATE = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_CARD_BRAND = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CARD = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELAYED_TRANSACTION_EXPIRED = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELAYED_TRANSACTION_CANCELED = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELAYED_TRANSACTION_CAPTURED = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELAYED_TRANSACTION_FAILED = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD_TOKEN_EXPIRED = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD_TOKEN_USED = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMOUNT_TOO_HIGH = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_INSTRUMENT_TYPE = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_AMOUNT_INVALID = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_ALREADY_PENDING = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_NOT_REFUNDABLE = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CARD_DATA = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDEMPOTENCY_KEY_REUSED = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXPECTED_VALUE = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SANDBOX_NOT_SUPPORTED = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_EMAIL_ADDRESS = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKOUT_EXPIRED = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD_DECLINED = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFY_CVV_FAILURE = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFY_AVS_FAILURE = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD_DECLINED_CALL_ISSUER = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_TIMEOUT = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFLICT = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_ENTITY_TOO_LARGE = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_MEDIA_TYPE = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE_LIMITED = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IMPLEMENTED = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_UNAVAILABLE = 75,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchRetrieveCatalogObjectsRequest
	{
		
		/// <summary>
		/// If `true`, the response will include additional objects that are related to the
		///requested objects, as follows:
		///
		///If the `objects` field of the response contains a [CatalogItem](#type-catalogitem),
		///its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and
		///[CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the
		///response. If the `objects` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation),
		///its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of
		///the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_related_objects")]
		public System.Nullable<System.Boolean> Include_related_objects { get; set; }
		
		/// <summary>
		/// The IDs of the [CatalogObject](#type-catalogobject)s to be retrieved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object_ids")]
		public string[] Object_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchRetrieveCatalogObjectsResponse
	{
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A list of [CatalogObject](#type-catalogobject)s returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
		
		/// <summary>
		/// A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `objects` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related_objects")]
		public CatalogObject[] Related_objects { get; set; }
	}
	
	/// <summary>
	/// The wrapper object for object types in the Catalog data model. The type
	///of a particular `CatalogObject` is determined by the value of
	///`type` and only the corresponding data field may be set.
	///
	///- if type = `ITEM`, only `item_data` will be populated and it will contain a valid [CatalogItem](#type-catalogitem) object.
	///- if type = `ITEM_VARIATION`, only `item_variation_data` will be populated and it will contain a valid [CatalogItemVariation](#type-catalogitemvariation) object.
	///- if type = `MODIFIER`, only `modifier_data` will be populated and it will contain a valid [CatalogModifier](#type-catalogmodifier) object.
	///- if type = `MODIFIER_LIST`, only `modifier_list_data` will be populated and it will contain a valid [CatalogModifierList](#type-catalogmodifierlist) object.
	///- if type = `CATEGORY`, only `category_data` will be populated and it will contain a valid [CatalogCategory](#type-catalogcategory) object.
	///- if type = `DISCOUNT`, only `discount_data` will be populated and it will contain a valid [CatalogDiscount](#type-catalogdiscount) object.
	///- if type = `TAX`, only `tax_data` will be populated and it will contain a valid [CatalogTax](#type-catalogtax) object.
	///
	///For a more detailed discussion of the Catalog data model, please see the
	///[Catalog Overview](https://docs.connect.squareup.com/articles/catalog-overview).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogObject
	{
		
		/// <summary>
		/// A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absent_at_location_ids")]
		public string[] Absent_at_location_ids { get; set; }
		
		/// <summary>
		/// The Connect V1 IDs for this object at each [location][#type-location] where it is present, where they
		///differ from the object's Connect V2 ID. The field will only be present for objects that
		///have been created or modified by legacy APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_v1_ids")]
		public CatalogV1Id[] Catalog_v1_ids { get; set; }
		
		/// <summary>
		/// A category to which an [CatalogItem](#type-catalogitem) belongs in the Catalog object model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_data")]
		public CatalogCategory Category_data { get; set; }
		
		/// <summary>
		/// A discount in the Catalog object model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_data")]
		public CatalogDiscount Discount_data { get; set; }
		
		/// <summary>
		/// An identifier to reference this object in the catalog. When a new CatalogObject
		///is inserted, the client should set the id to a temporary identifier starting with
		///a `'#'` character. Other objects being inserted or updated within the same request
		///may use this identifier to refer to the new object.
		///
		///When the server receives the new object, it will supply a unique identifier that
		///replaces the temporary identifier for all future references.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Id { get; set; }
		
		/// <summary>
		/// If `true`, the object has been deleted from the database. Must be `false` for new objects
		///being inserted. When deleted, the `updated_at` field will equal the deletion time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_deleted")]
		public System.Nullable<System.Boolean> Is_deleted { get; set; }
		
		/// <summary>
		/// An item (i.e., product family) in the Catalog object model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_data")]
		public CatalogItem Item_data { get; set; }
		
		/// <summary>
		/// An item variation (i.e., product) in the Catalog object model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_variation_data")]
		public CatalogItemVariation Item_variation_data { get; set; }
		
		/// <summary>
		/// A modifier in the Catalog object model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_data")]
		public CatalogModifier Modifier_data { get; set; }
		
		/// <summary>
		/// A modifier list in the Catalog object model. A [CatalogModifierList](#type-catalogmodifierlist)
		///contains [Modifier](#type-catalogmodifier)s that can be applied to a [CatalogItem](#type-catalogitem)
		///at the time of sale.
		///
		///For example, a modifier list "Condiments" that would apply to a "Hot Dog" [CatalogItem](#type-catalogitem) might
		///contain [CatalogModifier](#type-catalogmodifier)s "Ketchup", "Mustard", and "Relish". The
		///`selection_type` field specifies whether or not multiple selections from the modifier list are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_list_data")]
		public CatalogModifierList Modifier_list_data { get; set; }
		
		/// <summary>
		/// If `true`, this object is present at all locations (including future locations), except where specified in
		///the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),
		///except where specified in the `present_at_location_ids` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="present_at_all_locations")]
		public System.Nullable<System.Boolean> Present_at_all_locations { get; set; }
		
		/// <summary>
		/// A list of locations where the object is present, even if `present_at_all_locations` is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="present_at_location_ids")]
		public string[] Present_at_location_ids { get; set; }
		
		/// <summary>
		/// A tax in the Catalog object model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_data")]
		public CatalogTax Tax_data { get; set; }
		
		/// <summary>
		/// The type of this object. Each object type has expected
		///properties expressed in a structured format within its corresponding `*_data` field below.
		///
		///See [CatalogObjectType](#type-catalogobjecttype) for all possible values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CatalogObjectType Type { get; set; }
		
		/// <summary>
		/// Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., `"2016-08-15T23:59:33.123Z"`
		///would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// The version of the object. When updating an object, the version supplied by the
		///must match the version in the database, otherwise the write will be rejected as conflicting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int64> Version { get; set; }
	}
	
	/// <summary>
	/// An Items Connect V1 object ID along with its associated [location][#type-location] ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogV1Id
	{
		
		/// <summary>
		/// The ID for an object in Connect V1, if different from its Connect V2 ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_v1_id")]
		public string Catalog_v1_id { get; set; }
		
		/// <summary>
		/// The ID of the [location][#type-location] this Connect V1 ID is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
	}
	
	/// <summary>
	/// A category to which an [CatalogItem](#type-catalogitem) belongs in the Catalog object model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogCategory
	{
		
		/// <summary>
		/// The category's name. Searchable.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A discount in the Catalog object model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogDiscount
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.
		///See [CatalogDiscountType](#type-catalogdiscounttype) for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_type")]
		public System.Nullable<CatalogDiscountDiscount_type> Discount_type { get; set; }
		
		/// <summary>
		/// The color of the discount's display label in the Square Point of Sale app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label_color")]
		public string Label_color { get; set; }
		
		/// <summary>
		/// The discount's name. Searchable.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal
		///separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type`
		///is `VARIABLE_PERCENTAGE`.
		///
		///Do not include this field for amount-based or variable discounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Indicates whether a mobile staff member needs to enter their PIN to apply the
		///discount to a payment in the Square Point of Sale app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin_required")]
		public System.Nullable<System.Boolean> Pin_required { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money.
	///
	///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
	///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
	///if they represent money being paid _by_ a merchant, instead of money being
	///paid _to_ a merchant.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Money
	{
		
		/// <summary>
		/// The amount of money, in the smallest denomination of the
		///currency indicated by `currency`. For example, when `currency` is `USD`,
		///`amount` is in cents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// The type of currency, in __ISO 4217 format__. For example, the currency
		///code for US dollars is `USD`.
		///
		///See [Currency](#type-currency) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public System.Nullable<MoneyCurrency> Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MoneyCurrency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AOA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWG = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BBD = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BDT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BGN = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BHD = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIF = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BMD = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BND = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOB = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOV = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRL = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BSD = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BTN = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BWP = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYR = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZD = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAD = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CDF = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHF = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHW = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLF = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLP = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNY = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COP = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COU = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRC = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUC = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUP = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CVE = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZK = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DJF = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DKK = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOP = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZD = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EGP = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERN = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETB = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUR = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FJD = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FKP = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GBP = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEL = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GHS = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIP = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GMD = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GNF = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GTQ = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GYD = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HKD = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HNL = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRK = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTG = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUF = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDR = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILS = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INR = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IQD = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRR = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISK = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JMD = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOD = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPY = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KES = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KGS = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KHR = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMF = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KPW = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KRW = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KWD = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KYD = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KZT = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAK = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LBP = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LKR = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LRD = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LSL = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LTL = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LVL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LYD = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAD = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MDL = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MGA = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MKD = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MMK = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MNT = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOP = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRO = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUR = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MVR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MWK = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MXN = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MXV = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYR = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MZN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAD = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NGN = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NIO = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOK = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NPR = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZD = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMR = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAB = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PEN = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PGK = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHP = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PKR = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLN = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYG = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QAR = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSD = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUB = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RWF = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAR = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SBD = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCR = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDG = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEK = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SGD = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHP = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLL = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRD = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSP = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STD = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SVC = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYP = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SZL = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THB = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TJS = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TMT = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TND = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRY = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TTD = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWD = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TZS = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UAH = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UGX = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USN = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USS = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UYI = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UYU = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZS = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEF = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VND = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VUV = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WST = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XAF = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XAG = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XAU = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBA = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBB = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBC = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBD = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCD = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XDR = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XOF = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XPD = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XPF = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XPT = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XTS = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XXX = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YER = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZAR = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZMK = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZMW = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BTC = 179,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogDiscountDiscount_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_PERCENTAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_AMOUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_PERCENTAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_AMOUNT = 3,
	}
	
	/// <summary>
	/// An item (i.e., product family) in the Catalog object model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogItem
	{
		
		/// <summary>
		/// The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.  Searchable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_electronically")]
		public System.Nullable<System.Boolean> Available_electronically { get; set; }
		
		/// <summary>
		/// If `true`, the item can be added to pickup orders from the merchant's online store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_for_pickup")]
		public System.Nullable<System.Boolean> Available_for_pickup { get; set; }
		
		/// <summary>
		/// If `true`, the item can be added to shipping orders from the merchant's online store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_online")]
		public System.Nullable<System.Boolean> Available_online { get; set; }
		
		/// <summary>
		/// The ID of the item's category, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public string Category_id { get; set; }
		
		/// <summary>
		/// The item's description. Searchable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The URL of an image representing this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// The color of the item's display label in the Square Point of Sale app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label_color")]
		public string Label_color { get; set; }
		
		/// <summary>
		/// A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects
		///representing the modifier lists that apply to this item, along with the overrides and min
		///and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s
		///may also be added to or deleted from an item using `UpdateItemModifierLists`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_list_info")]
		public CatalogItemModifierListInfo[] Modifier_list_info { get; set; }
		
		/// <summary>
		/// The item's name. Searchable.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The product type of the item. May not be changed once an item has been created.
		///
		///Only items of product type `REGULAR` may be created by this API; items with other product
		///types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_type")]
		public System.Nullable<CatalogItemProduct_type> Product_type { get; set; }
		
		/// <summary>
		/// If `false`, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)'s
		///details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s
		///before adding the item to the cart.  This is the default behavior.
		///
		///If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected
		///modifiers, and merchants can edit modifiers by drilling down onto the item's details.
		///
		///Third-party clients are encouraged to implement similar behaviors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skip_modifier_screen")]
		public System.Nullable<System.Boolean> Skip_modifier_screen { get; set; }
		
		/// <summary>
		/// A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for
		///this item. When updating an item, any taxes listed here will be added to the item.
		///[CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using `UpdateItemTaxes`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_ids")]
		public string[] Tax_ids { get; set; }
		
		/// <summary>
		/// A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public CatalogObject[] Variations { get; set; }
	}
	
	/// <summary>
	/// Controls the properties of a [CatalogModifierList](#type-catalogmodifierlist) as it applies to this [CatalogItem](#type-catalogitem).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogItemModifierListInfo
	{
		
		/// <summary>
		/// If `true`, enable this [CatalogModifierList](#type-catalogmodifierlist).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// If zero or larger, the largest number of [CatalogModifier](#type-catalogmodifier)s that can be selected from this [CatalogModifierList](#type-catalogmodifierlist).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_selected_modifiers")]
		public System.Nullable<System.Int32> Max_selected_modifiers { get; set; }
		
		/// <summary>
		/// If zero or larger, the smallest number of [CatalogModifier](#type-catalogmodifier)s that must be selected from this [CatalogModifierList](#type-catalogmodifierlist).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min_selected_modifiers")]
		public System.Nullable<System.Int32> Min_selected_modifiers { get; set; }
		
		/// <summary>
		/// The ID of the [CatalogModifierList](#type-catalogmodifierlist) controlled by this [CatalogModifierListInfo](#type-catalogmodifierlistinfo).
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modifier_list_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Modifier_list_id { get; set; }
		
		/// <summary>
		/// A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given [CatalogModifier](#type-catalogmodifier) is enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_overrides")]
		public CatalogModifierOverride[] Modifier_overrides { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogModifierOverride
	{
		
		/// <summary>
		/// The ID of the [CatalogModifier](#type-catalogmodifier) whose default behavior is being overridden.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modifier_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Modifier_id { get; set; }
		
		/// <summary>
		/// If `true`, this [CatalogModifier](#type-catalogmodifier) should be selected by default for this [CatalogItem](#type-catalogitem).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="on_by_default")]
		public System.Nullable<System.Boolean> On_by_default { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogItemProduct_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGULAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIFT_CARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPOINTMENTS_SERVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL_ITEM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTAURANT_ITEM = 4,
	}
	
	/// <summary>
	/// An item variation (i.e., product) in the Catalog object model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogItemVariation
	{
		
		/// <summary>
		/// If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
		///is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
		///
		///This value is always an integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_threshold")]
		public System.Nullable<System.Int64> Inventory_alert_threshold { get; set; }
		
		/// <summary>
		/// Indicates whether the item variation displays an alert when its inventory quantity is less than or equal
		///to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_type")]
		public System.Nullable<CatalogItemVariationInventory_alert_type> Inventory_alert_type { get; set; }
		
		/// <summary>
		/// The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_id")]
		public string Item_id { get; set; }
		
		/// <summary>
		/// Per-[location][#type-location] price and inventory overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_overrides")]
		public ItemVariationLocationOverrides[] Location_overrides { get; set; }
		
		/// <summary>
		/// The item variation's name. Searchable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_money")]
		public Money Price_money { get; set; }
		
		/// <summary>
		/// Indicates whether the item variation's price is fixed or determined at the time
		///of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_type")]
		public ItemVariationLocationOverridesPricing_type Pricing_type { get; set; }
		
		/// <summary>
		/// If the [CatalogItem](#type-catalogitem) that owns this item variation is of type
		///`APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For
		///example, a 30 minute appointment would have the value `1800000`, which is equal to
		///30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_duration")]
		public System.Nullable<System.Int64> Service_duration { get; set; }
		
		/// <summary>
		/// The item variation's SKU, if any. Searchable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// If `true`, inventory tracking is active for the variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_inventory")]
		public System.Nullable<System.Boolean> Track_inventory { get; set; }
		
		/// <summary>
		/// The item variation's UPC, if any. Searchable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upc")]
		public string Upc { get; set; }
		
		/// <summary>
		/// Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_data")]
		public string User_data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogItemVariationInventory_alert_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW_QUANTITY = 1,
	}
	
	/// <summary>
	/// Price and inventory alerting overrides for a [CatalogItemVariation](#type-catalogitemvariation) at a specific [location][#type-location].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ItemVariationLocationOverrides
	{
		
		/// <summary>
		/// If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
		///is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
		///
		///This value is always an integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_threshold")]
		public System.Nullable<System.Int64> Inventory_alert_threshold { get; set; }
		
		/// <summary>
		/// Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory
		///quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype)
		///for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_type")]
		public CatalogItemVariationInventory_alert_type Inventory_alert_type { get; set; }
		
		/// <summary>
		/// The ID of the [location][#type-location].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_money")]
		public Money Price_money { get; set; }
		
		/// <summary>
		/// The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location][#type-location].
		///See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_type")]
		public System.Nullable<ItemVariationLocationOverridesPricing_type> Pricing_type { get; set; }
		
		/// <summary>
		/// If `true`, inventory tracking is active for the [CatalogItemVariation](#type-catalogitemvariation) at this [location][#type-location].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_inventory")]
		public System.Nullable<System.Boolean> Track_inventory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ItemVariationLocationOverridesPricing_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_PRICING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_PRICING = 1,
	}
	
	/// <summary>
	/// A modifier in the Catalog object model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogModifier
	{
		
		/// <summary>
		/// The modifier's name. Searchable.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_money")]
		public Money Price_money { get; set; }
	}
	
	/// <summary>
	/// A modifier list in the Catalog object model. A [CatalogModifierList](#type-catalogmodifierlist)
	///contains [Modifier](#type-catalogmodifier)s that can be applied to a [CatalogItem](#type-catalogitem)
	///at the time of sale.
	///
	///For example, a modifier list "Condiments" that would apply to a "Hot Dog" [CatalogItem](#type-catalogitem) might
	///contain [CatalogModifier](#type-catalogmodifier)s "Ketchup", "Mustard", and "Relish". The
	///`selection_type` field specifies whether or not multiple selections from the modifier list are allowed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogModifierList
	{
		
		/// <summary>
		/// The options included in the [CatalogModifierList](#type-catalogmodifierlist).
		///You must include at least one [CatalogModifier](#type-catalogmodifier).
		///Each [CatalogObject](#type-catalogobject) must have type `MODIFIER` and contain
		///[CatalogModifier](#type-catalogmodifier) data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiers")]
		public CatalogObject[] Modifiers { get; set; }
		
		/// <summary>
		/// The [CatalogModifierList](#type-catalogmodifierlist)'s name. Searchable.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist)
		///can be applied to a single [CatalogItem](#type-catalogitem). See
		///[CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection_type")]
		public System.Nullable<CatalogModifierListSelection_type> Selection_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogModifierListSelection_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLE = 1,
	}
	
	/// <summary>
	/// A tax in the Catalog object model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogTax
	{
		
		/// <summary>
		/// If `true`, the fee applies to custom amounts entered into the Square Point of Sale
		///app that are not associated with a particular [CatalogItem](#type-catalogitem).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applies_to_custom_amounts")]
		public System.Nullable<System.Boolean> Applies_to_custom_amounts { get; set; }
		
		/// <summary>
		/// Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculation_phase")]
		public System.Nullable<CatalogTaxCalculation_phase> Calculation_phase { get; set; }
		
		/// <summary>
		/// If `true`, the tax will be shown as enabled in the Square Point of Sale app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusion_type")]
		public System.Nullable<CatalogTaxInclusion_type> Inclusion_type { get; set; }
		
		/// <summary>
		/// The tax's name. Searchable.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.
		///A value of `7.5` corresponds to 7.5%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogTaxCalculation_phase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_SUBTOTAL_PHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_TOTAL_PHASE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogTaxInclusion_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUSIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATEGORY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM_VARIATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOUNT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIER_LIST = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIER = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchUpsertCatalogObjectsRequest
	{
		
		/// <summary>
		/// A batch of [CatalogObject](#type-catalogobject)s to be inserted/updated atomically.
		///The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
		///attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
		///in one batch will not affect other batches within the same request.
		///
		///For each object, its `updated_at` field is ignored and replaced with a current [timestamp](#workingwithdates), and its
		///`is_deleted` field must not be set to `true`.
		///
		///To modify an existing object, supply its ID. To create a new object, use an ID starting
		///with `#`. These IDs may be used to create relationships between an object and attributes of
		///other objects that reference it. For example, you can create a [CatalogItem](#type-catalogitem) with
		///ID `#ABC` and a [CatalogItemVariation](#type-catalogitemvariation) with its `item_id` attribute set to
		///`#ABC` in order to associate the [CatalogItemVariation](#type-catalogitemvariation) with its parent
		///[CatalogItem](#type-catalogitem).
		///
		///Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.
		///
		///Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
		///may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
		///be inserted or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batches")]
		public CatalogObjectBatch[] Batches { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this
		///request among all your requests. A common way to create
		///a valid idempotency key is to use a Universally unique
		///identifier (UUID).
		///
		///If you're unsure whether a particular request was successful,
		///you can reattempt it with the same idempotency key without
		///worrying about creating duplicate objects.
		///
		///See [Idempotency keys](#idempotencykeys) for more information.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Idempotency_key { get; set; }
	}
	
	/// <summary>
	/// A batch of [CatalogObject](#type-catalogobject)s.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogObjectBatch
	{
		
		/// <summary>
		/// A list of [CatalogObject](#type-catalogobject)s belonging to this batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchUpsertCatalogObjectsResponse
	{
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The mapping between client and server IDs for this Upsert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id_mappings")]
		public CatalogIdMapping[] Id_mappings { get; set; }
		
		/// <summary>
		/// The created [CatalogObject](#type-catalogobject)s
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
		
		/// <summary>
		/// The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// A mapping between a client-supplied temporary ID and a permanent server ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogIdMapping
	{
		
		/// <summary>
		/// The client-supplied, temporary `#`-prefixed ID for a new [CatalogObject](#type-catalogobject).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_object_id")]
		public string Client_object_id { get; set; }
		
		/// <summary>
		/// The permanent ID for the [CatalogObject](#type-catalogobject) created by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_id")]
		public string Object_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CaptureTransactionRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CaptureTransactionResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Represents the non-confidential details of a credit card.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Card
	{
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand)
		///for all possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_brand")]
		public System.Nullable<CardCard_brand> Card_brand { get; set; }
		
		/// <summary>
		/// The cardholder name. This value is present only if this object
		///represents a customer's card on file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardholder_name")]
		public string Cardholder_name { get; set; }
		
		/// <summary>
		/// The month of the card's expiration date. This value is always between
		///`1` and `12`, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exp_month")]
		public System.Nullable<System.Int64> Exp_month { get; set; }
		
		/// <summary>
		/// The four-digit year of the card's expiration date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exp_year")]
		public System.Nullable<System.Int64> Exp_year { get; set; }
		
		/// <summary>
		/// The unique string fingerprint for the card. 
		///The fingerprint is based on the credit card number and is unique to the merchant. 
		///If a card is used at multiple locations for the same merchant, it will have the same fingerprint in each case.
		///Note: Fingerprint may not exist on old transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// The card's unique ID, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last 4 digits of the card's number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_4")]
		public string Last_4 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CardCard_brand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_BRAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTERCARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMERICAN_EXPRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER_DINERS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JCB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHINA_UNIONPAY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_GIFT_CARD = 8,
	}
	
	/// <summary>
	/// Indicates a credit card's brand, such as `VISA`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CardBrand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_BRAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTERCARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMERICAN_EXPRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER_DINERS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JCB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHINA_UNIONPAY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_GIFT_CARD = 8,
	}
	
	/// <summary>
	/// How to apply a [CatalogDiscount](#type-catalogdiscount) to a [CatalogItem](#type-catalogitem).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogDiscountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_PERCENTAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_AMOUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_PERCENTAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_AMOUNT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogInfoRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogInfoResponse
	{
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limits")]
		public CatalogInfoResponseLimits Limits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogInfoResponseLimits
	{
		
		/// <summary>
		/// The maximum number of object IDs that may be included in a single
		///`/v2/catalog/batch-delete` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_delete_max_object_ids")]
		public System.Nullable<System.Int32> Batch_delete_max_object_ids { get; set; }
		
		/// <summary>
		/// The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve`
		///request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_retrieve_max_object_ids")]
		public System.Nullable<System.Int32> Batch_retrieve_max_object_ids { get; set; }
		
		/// <summary>
		/// The maximum number of objects that may appear within a single batch in a
		///`/v2/catalog/batch-upsert` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_upsert_max_objects_per_batch")]
		public System.Nullable<System.Int32> Batch_upsert_max_objects_per_batch { get; set; }
		
		/// <summary>
		/// The maximum number of objects that may appear across all batches in a
		///`/v2/catalog/batch-upsert` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch_upsert_max_total_objects")]
		public System.Nullable<System.Int32> Batch_upsert_max_total_objects { get; set; }
		
		/// <summary>
		/// The maximum number of results that may be returned in a page of a
		///`/v2/catalog/search` response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_max_page_limit")]
		public System.Nullable<System.Int32> Search_max_page_limit { get; set; }
		
		/// <summary>
		/// The maximum number of item IDs that may be included in a single
		///`/v2/catalog/update-item-modifier-lists` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_modifier_lists_max_item_ids")]
		public System.Nullable<System.Int32> Update_item_modifier_lists_max_item_ids { get; set; }
		
		/// <summary>
		/// The maximum number of modifier list IDs to be disabled that may be included in
		///a single `/v2/catalog/update-item-modifier-lists` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_modifier_lists_max_modifier_lists_to_disable")]
		public System.Nullable<System.Int32> Update_item_modifier_lists_max_modifier_lists_to_disable { get; set; }
		
		/// <summary>
		/// The maximum number of modifier list IDs to be enabled that may be included in
		///a single `/v2/catalog/update-item-modifier-lists` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_modifier_lists_max_modifier_lists_to_enable")]
		public System.Nullable<System.Int32> Update_item_modifier_lists_max_modifier_lists_to_enable { get; set; }
		
		/// <summary>
		/// The maximum number of item IDs that may be included in a single
		///`/v2/catalog/update-item-taxes` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_taxes_max_item_ids")]
		public System.Nullable<System.Int32> Update_item_taxes_max_item_ids { get; set; }
		
		/// <summary>
		/// The maximum number of tax IDs to be disabled that may be included in a single
		///`/v2/catalog/update-item-taxes` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_taxes_max_taxes_to_disable")]
		public System.Nullable<System.Int32> Update_item_taxes_max_taxes_to_disable { get; set; }
		
		/// <summary>
		/// The maximum number of tax IDs to be enabled that may be included in a single
		///`/v2/catalog/update-item-taxes` request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_item_taxes_max_taxes_to_enable")]
		public System.Nullable<System.Int32> Update_item_taxes_max_taxes_to_enable { get; set; }
	}
	
	/// <summary>
	/// The type of a [CatalogItem](#type-catalogitem). Connect V2 only allows the creation of `REGULAR` items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogItemProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGULAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIFT_CARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPOINTMENTS_SERVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL_ITEM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTAURANT_ITEM = 4,
	}
	
	/// <summary>
	/// Indicates whether a [CatalogModifierList](#type-catalogmodifierlist) supports multiple selections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogModifierListSelectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLE = 1,
	}
	
	/// <summary>
	/// Indicates whether the price of a [CatalogItemVariation](#type-catalogitemvariation) should be entered manually at the time of sale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogPricingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_PRICING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_PRICING = 1,
	}
	
	/// <summary>
	/// A query to be applied to a [SearchCatalogObjectsRequest](#type-searchcatalogobjectsrequest).
	///Only one query field may be present.
	///
	///Where an attribute name is required, it should be specified as the name of any field
	///marked "searchable" from the structured data types for the desired result object type(s)
	///([CatalogItem](#type-catalogitem), [CatalogItemVariation](#type-catalogitemvariation),
	///[CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax),
	///[CatalogDiscount](#type-catalogdiscount), [CatalogModifierList](#type-catalogmodifierlist),
	///[CatalogModifier](#type-catalogmodifier)).
	///
	///For example, a query that should return Items may specify attribute names from
	///any of the searchable fields of the [CatalogItem](#type-catalogitem) data type, namely
	///`"name"`, `"description"`, and `"abbreviation"`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="exact_query")]
		public CatalogQueryExact Exact_query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items_for_modifier_list_query")]
		public CatalogQueryItemsForModifierList Items_for_modifier_list_query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items_for_tax_query")]
		public CatalogQueryItemsForTax Items_for_tax_query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix_query")]
		public CatalogQueryPrefix Prefix_query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="range_query")]
		public CatalogQueryRange Range_query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sorted_attribute_query")]
		public CatalogQuerySortedAttribute Sorted_attribute_query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text_query")]
		public CatalogQueryText Text_query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogQueryExact
	{
		
		/// <summary>
		/// The name of the attribute to be searched.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_name { get; set; }
		
		/// <summary>
		/// The desired value of the search attribute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_value")]
		public string Attribute_value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogQueryItemsForModifierList
	{
		
		/// <summary>
		/// A set of [CatalogModifierList](#type-catalogmodifierlist) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modifier_list_ids")]
		public string[] Modifier_list_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogQueryItemsForTax
	{
		
		/// <summary>
		/// A set of [CatalogTax](#type-catalogtax) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tax_ids")]
		public string[] Tax_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogQueryPrefix
	{
		
		/// <summary>
		/// The name of the attribute to be searched.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_name { get; set; }
		
		/// <summary>
		/// The desired prefix of the search attribute value.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_prefix")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogQueryRange
	{
		
		/// <summary>
		/// The desired maximum value for the search attribute (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute_max_value")]
		public System.Nullable<System.Int64> Attribute_max_value { get; set; }
		
		/// <summary>
		/// The desired minimum value for the search attribute (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute_min_value")]
		public System.Nullable<System.Int64> Attribute_min_value { get; set; }
		
		/// <summary>
		/// The name of the attribute to be searched.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogQuerySortedAttribute
	{
		
		/// <summary>
		/// The attribute whose value should be used as the sort key.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute_name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Attribute_name { get; set; }
		
		/// <summary>
		/// The first attribute value to be returned by the query. Ascending sorts will return only
		///objects with this value or greater, while descending sorts will return only objects with this value
		///or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initial_attribute_value")]
		public string Initial_attribute_value { get; set; }
		
		/// <summary>
		/// The desired [SortOrder](#type-sortorder), `"ASC"` (ascending) or `"DESC"` (descending).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public System.Nullable<CatalogQuerySortedAttributeSort_order> Sort_order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CatalogQuerySortedAttributeSort_order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CatalogQueryText
	{
		
		/// <summary>
		/// A list of one, two, or three search keywords. Keywords with fewer than three characters
		///are ignored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
	}
	
	/// <summary>
	/// Defines the parameters that can be included in the body of
	///a request to the [Charge](#endpoint-charge) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChargeRequest
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// The buyer's email address, if available. This value is optional,
		///but this transaction is ineligible for chargeback protection if it is not
		///provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email_address")]
		public string Buyer_email_address { get; set; }
		
		/// <summary>
		/// A nonce generated from the `SqPaymentForm` that represents the card
		///to charge.
		///
		///The application that provides a nonce to this endpoint must be the
		///_same application_ that generated the nonce with the `SqPaymentForm`.
		///Otherwise, the nonce is invalid.
		///
		///Do not provide a value for this field if you provide a value for
		///`customer_card_id`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_nonce")]
		public string Card_nonce { get; set; }
		
		/// <summary>
		/// The ID of the customer card on file to charge. Do
		///not provide a value for this field if you provide a value for `card_nonce`.
		///
		///If you provide this value, you _must_ also provide a value for
		///`customer_id`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_card_id")]
		public string Customer_card_id { get; set; }
		
		/// <summary>
		/// The ID of the customer to associate this transaction with. This field
		///is required if you provide a value for `customer_card_id`, and optional
		///otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// If `true`, the request will only perform an Auth on the provided
		///card. You can then later perform either a Capture (with the
		///[CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void
		///(with the [VoidTransaction](#endpoint-voidtransaction) endpoint).
		///
		///Default value: `false`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delay_capture")]
		public System.Nullable<System.Boolean> Delay_capture { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this
		///transaction among transactions you've created.
		///
		///If you're unsure whether a particular transaction succeeded,
		///you can reattempt it with the same idempotency key without
		///worrying about double-charging the buyer.
		///
		///See [Idempotency keys](#idempotencykeys) for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// An optional note to associate with the transaction.
		///
		///This value cannot exceed 60 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// An optional ID you can associate with the transaction for your own
		///purposes (such as to associate the transaction with an entity ID in your
		///own database).
		///
		///This value cannot exceed 40 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [Charge](#endpoint-charge) endpoint.
	///
	///One of `errors` or `transaction` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChargeResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a transaction processed with Square, either with the
		///Connect API or with Square Point of Sale.
		///
		///The `tenders` field of this object lists all methods of payment used to pay in
		///the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	/// <summary>
	/// Represents a transaction processed with Square, either with the
	///Connect API or with Square Point of Sale.
	///
	///The `tenders` field of this object lists all methods of payment used to pay in
	///the transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Transaction
	{
		
		/// <summary>
		/// If the transaction was created in the Square Point of Sale app, this value
		///is the ID generated for the transaction by Square Point of Sale.
		///
		///This ID has no relationship to the transaction's canonical `id`, which is
		///generated by Square's backend servers. This value is generated for bookkeeping
		///purposes, in case the transaction cannot immediately be completed (for example,
		///if the transaction is processed in offline mode).
		///
		///It is not currently possible with the Connect API to perform a transaction
		///lookup by this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// The time when the transaction was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The transaction's unique ID, issued by Square payments servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the transaction's associated location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
		
		/// <summary>
		/// The Square product that processed the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public System.Nullable<TransactionProduct> Product { get; set; }
		
		/// <summary>
		/// If the transaction was created with the [Charge](#endpoint-charge)
		///endpoint, this value is the same as the value provided for the `reference_id`
		///parameter in the request to that endpoint. Otherwise, it is not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Refunds that have been applied to any tender in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public Refund[] Refunds { get; set; }
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// The tenders used to pay in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenders")]
		public Tender[] Tenders { get; set; }
	}
	
	/// <summary>
	/// Contains all information related to a single order to process with Square,
	///including line items that specify the products to purchase
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Order
	{
		
		/// <summary>
		/// The line items included in the order. Every order has at least one
		///line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_items")]
		public OrderLineItem[] Line_items { get; set; }
		
		/// <summary>
		/// The ID of the merchant location this order is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// A client specified identifier to associate an entity in another system
		///with this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_discount_money")]
		public Money Total_discount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public Money Total_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tax_money")]
		public Money Total_tax_money { get; set; }
	}
	
	/// <summary>
	/// Represents a line item in an order. Each line item describes a different
	///product to purchase, with its own quantity and price details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrderLineItem
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_price_money")]
		public Money Base_price_money { get; set; }
		
		/// <summary>
		/// The discounts applied to this line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discounts")]
		public OrderLineItemDiscount[] Discounts { get; set; }
		
		/// <summary>
		/// The name of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The quantity of the product to purchase. Currently, this string must
		///have an integer value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// The taxes applied to this line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public OrderLineItemTax[] Taxes { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_discount_money")]
		public Money Total_discount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public Money Total_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tax_money")]
		public Money Total_tax_money { get; set; }
	}
	
	/// <summary>
	/// Represents a discount that applies to one or more line items in an
	///order.
	///
	///Fixed-amount, order-level discounts are distributed across all non-zero line item totals.
	///The amount distributed to each line item is relative to that item’s contribution to the order subtotal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrderLineItemDiscount
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// The discount's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the tax, as a string representation of a decimal number.
		///A value of `7.25` corresponds to a percentage of 7.25%.
		///
		///The percentage won't be set for an amount-based discount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Indicates the level at which the discount applies.
		///See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<OrderLineItemDiscountScope> Scope { get; set; }
		
		/// <summary>
		/// The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		///
		///VARIABLE_* is not supported in API because the order is created at the time of sale and either
		///percentage or amount has to be specified.
		///
		///See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OrderLineItemDiscountType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OrderLineItemDiscountScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OrderLineItemDiscountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_PERCENTAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_AMOUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_PERCENTAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_AMOUNT = 4,
	}
	
	/// <summary>
	/// Represents a tax that applies to one or more line items in an order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrderLineItemTax
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public Money Applied_money { get; set; }
		
		/// <summary>
		/// The tax's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the tax, as a string representation of a decimal number.
		///
		///A value of `7.25` corresponds to a percentage of 7.25%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Indicates the calculation method used to apply the tax.
		///
		///See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<OrderLineItemTaxType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OrderLineItemTaxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUSIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TransactionProduct
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_API = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPOINTMENTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOICES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE_STORE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYROLL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 7,
	}
	
	/// <summary>
	/// Represents a refund processed for a Square transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Refund
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The time when the refund was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The refund's unique ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the refund's associated location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processing_fee_money")]
		public Money Processing_fee_money { get; set; }
		
		/// <summary>
		/// The reason for the refund being issued.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`,
		///or `FAILED`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RefundStatus Status { get; set; }
		
		/// <summary>
		/// The ID of the refunded tender.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tender_id")]
		public string Tender_id { get; set; }
		
		/// <summary>
		/// The ID of the transaction that the refunded tender is part of.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RefundStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Represents a tender (i.e., a method of payment) used in a Square transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Tender
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_details")]
		public TenderCardDetails Card_details { get; set; }
		
		/// <summary>
		/// Represents the details of a tender with `type` `CASH`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_details")]
		public TenderCashDetails Cash_details { get; set; }
		
		/// <summary>
		/// The time when the tender was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// If the tender is associated with a customer or represents a customer's card on file,
		///this is the ID of the associated customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// The tender's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the transaction's associated location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_id")]
		public string Location_id { get; set; }
		
		/// <summary>
		/// An optional note associated with the tender at the time of payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processing_fee_money")]
		public Money Processing_fee_money { get; set; }
		
		/// <summary>
		/// The ID of the tender's associated transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// The type of tender, such as `CARD` or `CASH`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TenderType Type { get; set; }
	}
	
	/// <summary>
	/// Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TenderCardDetails
	{
		
		/// <summary>
		/// Represents the non-confidential details of a credit card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public Card Card { get; set; }
		
		/// <summary>
		/// The method used to enter the card's details for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry_method")]
		public System.Nullable<TenderCardDetailsEntry_method> Entry_method { get; set; }
		
		/// <summary>
		/// The credit card payment's current state (such as `AUTHORIZED` or
		///`CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus)
		///for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TenderCardDetailsStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TenderCardDetailsEntry_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWIPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEYED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_FILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTLESS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TenderCardDetailsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAPTURED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOIDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Represents the details of a tender with `type` `CASH`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TenderCashDetails
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_tendered_money")]
		public Money Buyer_tendered_money { get; set; }
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="change_back_money")]
		public Money Change_back_money { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TenderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_CARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_GIFT_CARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SALE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 5,
	}
	
	/// <summary>
	/// Square Checkout lets merchants accept online payments for supported
	///payment types using a checkout workflow hosted on squareup.com.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Checkout
	{
		
		/// <summary>
		/// If `true`, Square Checkout will collect shipping information on your
		///behalf and store that information with the transaction information in your
		///Square Dashboard.
		///
		///Default: `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ask_for_shipping_address")]
		public System.Nullable<System.Boolean> Ask_for_shipping_address { get; set; }
		
		/// <summary>
		/// The URL that the buyer's browser should be redirected to after the
		///checkout is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkout_page_url")]
		public string Checkout_page_url { get; set; }
		
		/// <summary>
		/// The time when the checkout was created, in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// ID generated by Square Checkout when a new checkout is requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The email address to display on the Square Checkout confirmation page
		///and confirmation email that the buyer can use to contact the merchant.
		///
		///If this value is not set, the confirmation page and email will display the
		///primary email address associated with the merchant's Square account.
		///
		///Default: none; only exists if explicitly set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_support_email")]
		public string Merchant_support_email { get; set; }
		
		/// <summary>
		/// Contains all information related to a single order to process with Square,
		///including line items that specify the products to purchase
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Order Order { get; set; }
		
		/// <summary>
		/// If provided, the buyer's email is pre-populated on the checkout page
		///as an editable text field.
		///
		///Default: none; only exists if explicitly set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pre_populate_buyer_email")]
		public string Pre_populate_buyer_email { get; set; }
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pre_populate_shipping_address")]
		public Address Pre_populate_shipping_address { get; set; }
		
		/// <summary>
		/// The URL to redirect to after checkout is completed with `checkoutId`,
		///Square's `orderId`, `transactionId`, and `referenceId` appended as URL
		///parameters. For example, if the provided redirect_url is
		///`http://www.example.com/order-complete`, a successful transaction redirects
		///the customer to:
		///
		///`http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`
		///
		///If you do not provide a redirect URL, Square Checkout will display an order
		///confirmation page on your behalf; however Square strongly recommends that
		///you provide a redirect URL so you can verify the transaction results and
		///finalize the order through your existing/normal confirmation workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_url")]
		public string Redirect_url { get; set; }
	}
	
	/// <summary>
	/// Indicates the country associated with another entity, such as a business.
	///Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum Country
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AM = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AQ = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AW = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AX = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZ = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BA = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BB = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BF = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BH = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BI = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BJ = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BL = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BN = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BO = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BQ = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BR = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BS = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BT = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BV = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BY = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZ = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CC = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CD = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CF = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CG = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CH = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CI = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CK = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CL = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CM = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CR = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CU = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CV = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CW = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CX = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CY = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZ = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DE = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DJ = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DK = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DM = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZ = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EE = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EG = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EH = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ER = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ET = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FK = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FM = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FO = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GA = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GB = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GD = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GE = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GF = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GG = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GH = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GI = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GL = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GM = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GN = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GP = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GQ = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GS = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GT = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GU = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GW = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GY = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HK = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HN = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HR = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HT = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HU = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IE = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IL = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IM = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IO = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IQ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IR = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JE = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JM = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JO = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JP = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KE = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KG = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KH = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KI = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KM = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KN = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KP = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KW = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KY = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KZ = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LA = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LB = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LK = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LR = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LU = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LV = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LY = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MA = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MC = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ME = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MF = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MG = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MH = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MK = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ML = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MM = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MN = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MO = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MQ = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MR = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MT = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MU = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MV = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MW = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MX = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MY = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MZ = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NA = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NC = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NE = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NF = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NG = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NI = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NP = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NR = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NU = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZ = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OM = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PA = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PE = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PF = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PG = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PH = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PK = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PL = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PN = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PR = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PS = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PW = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PY = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QA = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RE = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RO = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RS = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RW = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SA = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SB = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SC = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SG = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SH = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SI = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SJ = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SL = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SM = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SN = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SO = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SR = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SS = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ST = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SV = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SX = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SY = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SZ = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TC = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TD = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TF = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TG = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TH = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TJ = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TK = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TL = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TM = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TN = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TO = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TR = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TT = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TV = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TW = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TZ = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UA = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UG = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UM = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UY = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZ = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VA = 236,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VC = 237,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VE = 238,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VG = 239,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VI = 240,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VN = 241,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VU = 242,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WF = 243,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WS = 244,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YE = 245,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YT = 246,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZA = 247,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZM = 248,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZW = 249,
	}
	
	/// <summary>
	/// Defines the parameters that can be included in the body of
	///a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateCheckoutRequest
	{
		
		/// <summary>
		/// If `true`, Square Checkout will collect shipping information on your
		///behalf and store that information with the transaction information in your
		///Square Dashboard.
		///
		///Default: `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ask_for_shipping_address")]
		public System.Nullable<System.Boolean> Ask_for_shipping_address { get; set; }
		
		/// <summary>
		/// A unique string that identifies this checkout among others
		///you've created. It can be any valid string but must be unique for every
		///order sent to Square Checkout for a given location ID.
		///
		///The idempotency key is used to avoid processing the same order more than
		///once. If you're unsure whether a particular checkout was created
		///successfully, you can reattempt it with the same idempotency key and all the
		///same other parameters without worrying about creating duplicates.
		///
		///We recommend using a random number/string generator native to the language
		///you are working in to generate strings for your idempotency keys.
		///
		///See [Idempotency keys](#idempotencykeys) for more information.
		/// Required
		/// Max length: 192
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The email address to display on the Square Checkout confirmation page
		///and confirmation email that the buyer can use to contact the merchant.
		///
		///If this value is not set, the confirmation page and email will display the
		///primary email address associated with the merchant's Square account.
		///
		///Default: none; only exists if explicitly set.
		/// Max length: 254
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_support_email")]
		[System.ComponentModel.DataAnnotations.MaxLength(254)]
		public string Merchant_support_email { get; set; }
		
		/// <summary>
		/// Defines the parameters that can be included in the body of
		///a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public CreateOrderRequest Order { get; set; }
		
		/// <summary>
		/// If provided, the buyer's email is pre-populated on the checkout page
		///as an editable text field.
		///
		///Default: none; only exists if explicitly set.
		/// Max length: 254
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pre_populate_buyer_email")]
		[System.ComponentModel.DataAnnotations.MaxLength(254)]
		public string Pre_populate_buyer_email { get; set; }
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pre_populate_shipping_address")]
		public Address Pre_populate_shipping_address { get; set; }
		
		/// <summary>
		/// The URL to redirect to after checkout is completed with `checkoutId`,
		///Square's `orderId`, `transactionId`, and `referenceId` appended as URL
		///parameters. For example, if the provided redirect_url is
		///`http://www.example.com/order-complete`, a successful transaction redirects
		///the customer to:
		///
		///`http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`
		///
		///If you do not provide a redirect URL, Square Checkout will display an order
		///confirmation page on your behalf; however Square strongly recommends that
		///you provide a redirect URL so you can verify the transaction results and
		///finalize the order through your existing/normal confirmation workflow.
		///
		///Default: none; only exists if explicitly set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_url")]
		public string Redirect_url { get; set; }
	}
	
	/// <summary>
	/// Defines the parameters that can be included in the body of
	///a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrderRequest
	{
		
		/// <summary>
		/// The discounts include the custom discounts .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discounts")]
		public CreateOrderRequestDiscount[] Discounts { get; set; }
		
		/// <summary>
		/// The line items to associate with this order.
		///
		///Each line item represents a different product (or a custom monetary amount)
		///to include in a purchase.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line_items")]
		public CreateOrderRequestLineItem[] Line_items { get; set; }
		
		/// <summary>
		/// An optional ID you can associate with the order for your own
		///purposes (such as to associate the order with an entity ID in your
		///own database).
		///
		///This value cannot exceed 40 characters.
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// The taxes include the custom taxes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public CreateOrderRequestTax[] Taxes { get; set; }
	}
	
	/// <summary>
	/// Represents a discount that to either a single line item or an entire order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrderRequestDiscount
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// The discount's name.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the discount, as a string representation of a decimal number.
		///
		///A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
	}
	
	/// <summary>
	/// Represents a line item to include in an order. Each line item describes
	///a different product to purchase, with its own quantity and price details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrderRequestLineItem
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_price_money")]
		public Money Base_price_money { get; set; }
		
		/// <summary>
		/// The discounts include the custom discounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discounts")]
		public CreateOrderRequestDiscount[] Discounts { get; set; }
		
		/// <summary>
		/// The name of the line item. This value cannot exceed 500 characters.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// The quantity to purchase, as a string representation of a number.
		///Currently, only integer values are supported.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Quantity { get; set; }
		
		/// <summary>
		/// The taxes include the custom taxes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public CreateOrderRequestTax[] Taxes { get; set; }
	}
	
	/// <summary>
	/// Represents a tax that applies to either a single line item or an entire order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateOrderRequestTax
	{
		
		/// <summary>
		/// The tax's name.
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the tax, as a string representation of a decimal number.
		///
		///A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Indicates the calculation method used to apply the line item tax.
		///
		///Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OrderLineItemTaxType Type { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateCheckoutResponse
	{
		
		/// <summary>
		/// Square Checkout lets merchants accept online payments for supported
		///payment types using a checkout workflow hosted on squareup.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkout")]
		public Checkout Checkout { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the request body of a request
	///to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateCustomerCardRequest
	{
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// A card nonce representing the credit card to link to the customer.
		///
		///Card nonces are generated by the `SqPaymentForm` that buyers enter
		///their card information into. See
		///[Embedding the payment form](/articles/adding-payment-form/) for
		///more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="card_nonce")]
		public string Card_nonce { get; set; }
		
		/// <summary>
		/// The cardholder's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardholder_name")]
		public string Cardholder_name { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
	///
	///One of `errors` or `card` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateCustomerCardResponse
	{
		
		/// <summary>
		/// Represents the non-confidential details of a credit card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card")]
		public Card Card { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines the body parameters that can be provided in a request to the
	///[CreateCustomer](#endpoint-createcustomer) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateCustomerRequest
	{
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The name of the customer's company.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The customer's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The customer's family (i.e., last) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The customer's given (i.e., first) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// A nickname for the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// An optional note to associate with the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The customer's phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// An optional second ID you can set to associate the customer with an
		///entity in another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CreateCustomer](#endpoint-createcustomer) endpoint.
	///
	///One of `errors` or `customer` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateCustomerResponse
	{
		
		/// <summary>
		/// Represents one of a business's customers, which can have one or more
		///cards on file associated with it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	/// <summary>
	/// Represents one of a business's customers, which can have one or more
	///cards on file associated with it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Customer
	{
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The non-confidential details of the customer's cards on file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cards")]
		public Card[] Cards { get; set; }
		
		/// <summary>
		/// The name of the customer's company.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The time when the customer was created, in RFC 3339 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The customer's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The customer's family (i.e., last) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The customer's given (i.e., first) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// The groups the customer belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public CustomerGroupInfo[] Groups { get; set; }
		
		/// <summary>
		/// The customer's unique ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The customer's nickname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// A note to associate with the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The customer's phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Represents a particular customer's preferences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public CustomerPreferences Preferences { get; set; }
		
		/// <summary>
		/// A second ID you can set to associate the customer with an
		///entity in another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
		
		/// <summary>
		/// The time when the customer was last updated, in RFC 3339 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	/// <summary>
	/// Contains some brief information about a customer group with its identifier included.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomerGroupInfo
	{
		
		/// <summary>
		/// The ID of the customer group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the customer group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a particular customer's preferences.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomerPreferences
	{
		
		/// <summary>
		/// The customer has unsubscribed from receiving marketing campaign emails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_unsubscribed")]
		public System.Nullable<System.Boolean> Email_unsubscribed { get; set; }
	}
	
	/// <summary>
	/// Defines the body parameters that can be included in
	///a request to the [CreateRefund](#endpoint-createrefund) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateRefundRequest
	{
		
		/// <summary>
		/// Represents an amount of money.
		///
		///__Important:__ Unlike version 1 of the Connect API, __all monetary amounts
		///returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative
		///if they represent money being paid _by_ a merchant, instead of money being
		///paid _to_ a merchant.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public Money Amount_money { get; set; }
		
		/// <summary>
		/// A value you specify that uniquely identifies this
		///refund among refunds you've created for the tender.
		///
		///If you're unsure whether a particular refund succeeded,
		///you can reattempt it with the same idempotency key without
		///worrying about duplicating the refund.
		///
		///See [Idempotency keys](#idempotencykeys) for more information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// A description of the reason for the refund.
		///
		///Default value: `Refund via API`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The ID of the tender to refund.
		///
		///A [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods
		///of payment) associated with it, and you refund each tender separately with
		///the Connect API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tender_id")]
		public string Tender_id { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CreateRefund](#endpoint-createrefund) endpoint.
	///
	///One of `errors` or `refund` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CreateRefundResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a refund processed for a Square transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund")]
		public Refund Refund { get; set; }
	}
	
	/// <summary>
	/// Indicates the associated currency for an amount of money. Values correspond
	///to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum Currency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AOA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWG = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BBD = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BDT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BGN = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BHD = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIF = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BMD = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BND = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOB = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOV = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRL = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BSD = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BTN = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BWP = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYR = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZD = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAD = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CDF = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHF = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHW = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLF = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLP = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNY = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COP = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COU = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRC = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUC = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUP = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CVE = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZK = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DJF = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DKK = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOP = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZD = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EGP = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERN = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETB = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUR = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FJD = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FKP = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GBP = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEL = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GHS = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIP = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GMD = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GNF = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GTQ = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GYD = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HKD = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HNL = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRK = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTG = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUF = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDR = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILS = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INR = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IQD = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRR = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISK = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JMD = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOD = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPY = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KES = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KGS = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KHR = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMF = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KPW = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KRW = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KWD = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KYD = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KZT = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAK = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LBP = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LKR = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LRD = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LSL = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LTL = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LVL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LYD = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAD = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MDL = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MGA = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MKD = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MMK = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MNT = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOP = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRO = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUR = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MVR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MWK = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MXN = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MXV = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYR = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MZN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAD = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NGN = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NIO = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOK = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NPR = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZD = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMR = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAB = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PEN = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PGK = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHP = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PKR = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLN = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYG = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QAR = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSD = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUB = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RWF = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAR = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SBD = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCR = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDG = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEK = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SGD = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHP = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLL = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRD = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSP = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STD = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SVC = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYP = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SZL = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THB = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TJS = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TMT = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TND = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRY = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TTD = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWD = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TZS = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UAH = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UGX = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USN = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USS = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UYI = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UYU = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZS = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEF = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VND = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VUV = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WST = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XAF = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XAG = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XAU = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBA = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBB = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBC = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XBD = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCD = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XDR = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XOF = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XPD = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XPF = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XPT = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XTS = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XXX = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YER = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZAR = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZMK = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZMW = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BTC = 179,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteCatalogObjectRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteCatalogObjectResponse
	{
		
		/// <summary>
		/// The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g.,
		///"2016-09-04T23:59:33.123Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted_at")]
		public string Deleted_at { get; set; }
		
		/// <summary>
		/// The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request.
		///Multiple IDs may be returned when associated objects are also deleted, for example
		///a [CatalogItemVariation](#type-catalogitemvariation) will be deleted (and its ID included in this field)
		///when its parent [CatalogItem](#type-catalogitem) is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted_object_ids")]
		public string[] Deleted_object_ids { get; set; }
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteCustomerCardRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteCustomerCardResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteCustomerRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeleteCustomerResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Device
	{
		
		/// <summary>
		/// The device's Square-issued ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The device's merchant-specified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Indicates whether Square should alert the merchant when the inventory quantity of a [CatalogItemVariation](#type-catalogitemvariation) is low.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum InventoryAlertType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW_QUANTITY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListCatalogRequest
	{
		
		/// <summary>
		/// The pagination cursor returned in the previous response. Leave unset for an initial request.
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// An optional case-insensitive, comma-separated list of object types to retrieve, for example
		///`ITEM,ITEM_VARIATION,CATEGORY`.
		///
		///The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype)
		///enumeration, namely `"ITEM"`, `"ITEM_VARIATION"`, `"CATEGORY"`, `"DISCOUNT"`, `"TAX"`,
		///`"MODIFIER"`, or `"MODIFIER_LIST"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListCatalogResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If unset, this is the final response.
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The [CatalogObject](#type-catalogobject)s returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
	}
	
	/// <summary>
	/// Defines the query parameters that can be provided in a request to the
	///[ListCustomers](#endpoint-listcustomers) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListCustomersRequest
	{
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [ListCustomers](#endpoint-listcustomers) endpoint.
	///
	///One of `errors` or `customers` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListCustomersResponse
	{
		
		/// <summary>
		/// A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint. This value is present only if the request
		///succeeded and additional results are available.
		///
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// An array of `Customer` objects that match your query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public Customer[] Customers { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListLocationsRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [ListLocations](#endpoint-listlocations) endpoint.
	///
	///One of `errors` or `locations` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The business's locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
	}
	
	/// <summary>
	/// Represents one of a business's locations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Location
	{
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// Indicates which Square features are enabled for the location.
		///
		///See [LocationCapability](#type-locationcapability) for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public string[] Capabilities { get; set; }
		
		/// <summary>
		/// The location's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The [IANA Timezone Database](https://www.iana.org/time-zones)
		///identifier for the location's timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	/// <summary>
	/// Defines the query parameters that can be included in
	///a request to the [ListRefunds](#endpoint-listrefunds) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListRefundsRequest
	{
		
		/// <summary>
		/// The beginning of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The end of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// The order in which results are listed in the response (`ASC` for
		///oldest first, `DESC` for newest first).
		///
		///Default value: `DESC`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public CatalogQuerySortedAttributeSort_order Sort_order { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [ListRefunds](#endpoint-listrefunds) endpoint.
	///
	///One of `errors` or `refunds` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListRefundsResponse
	{
		
		/// <summary>
		/// A pagination cursor for retrieving the next set of results,
		///if any remain. Provide this value as the `cursor` parameter in a subsequent
		///request to this endpoint.
		///
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// An array of refunds that match your query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public Refund[] Refunds { get; set; }
	}
	
	/// <summary>
	/// Defines the query parameters that can be included in
	///a request to the [ListTransactions](#endpoint-listtransactions) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListTransactionsRequest
	{
		
		/// <summary>
		/// The beginning of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time minus one year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The end of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public string End_time { get; set; }
		
		/// <summary>
		/// The order in which results are listed in the response (`ASC` for
		///oldest first, `DESC` for newest first).
		///
		///Default value: `DESC`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public CatalogQuerySortedAttributeSort_order Sort_order { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [ListTransactions](#endpoint-listtransactions) endpoint.
	///
	///One of `errors` or `transactions` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListTransactionsResponse
	{
		
		/// <summary>
		/// A pagination cursor for retrieving the next set of results,
		///if any remain. Provide this value as the `cursor` parameter in a subsequent
		///request to this endpoint.
		///
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// An array of transactions that match your query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public Transaction[] Transactions { get; set; }
	}
	
	/// <summary>
	/// Indicates account capabilities that a business's location might or
	///might not have enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LocationCapability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT_CARD_PROCESSING = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetrieveCatalogObjectRequest
	{
		
		/// <summary>
		/// If `true`, the response will include additional objects that are related to the
		///requested object, as follows:
		///
		///If the `object` field of the response contains a [CatalogItem](#type-catalogitem),
		///its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and
		///[CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the
		///response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation),
		///its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of
		///the response.
		///
		///Default value: `false`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_related_objects")]
		public System.Nullable<System.Boolean> Include_related_objects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetrieveCatalogObjectResponse
	{
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The wrapper object for object types in the Catalog data model. The type
		///of a particular `CatalogObject` is determined by the value of
		///`type` and only the corresponding data field may be set.
		///
		///- if type = `ITEM`, only `item_data` will be populated and it will contain a valid [CatalogItem](#type-catalogitem) object.
		///- if type = `ITEM_VARIATION`, only `item_variation_data` will be populated and it will contain a valid [CatalogItemVariation](#type-catalogitemvariation) object.
		///- if type = `MODIFIER`, only `modifier_data` will be populated and it will contain a valid [CatalogModifier](#type-catalogmodifier) object.
		///- if type = `MODIFIER_LIST`, only `modifier_list_data` will be populated and it will contain a valid [CatalogModifierList](#type-catalogmodifierlist) object.
		///- if type = `CATEGORY`, only `category_data` will be populated and it will contain a valid [CatalogCategory](#type-catalogcategory) object.
		///- if type = `DISCOUNT`, only `discount_data` will be populated and it will contain a valid [CatalogDiscount](#type-catalogdiscount) object.
		///- if type = `TAX`, only `tax_data` will be populated and it will contain a valid [CatalogTax](#type-catalogtax) object.
		///
		///For a more detailed discussion of the Catalog data model, please see the
		///[Catalog Overview](https://docs.connect.squareup.com/articles/catalog-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public CatalogObject Object { get; set; }
		
		/// <summary>
		/// A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `object` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related_objects")]
		public CatalogObject[] Related_objects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetrieveCustomerRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [RetrieveCustomer](#endpoint-retrievecustomer) endpoint.
	///
	///One of `errors` or `customer` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetrieveCustomerResponse
	{
		
		/// <summary>
		/// Represents one of a business's customers, which can have one or more
		///cards on file associated with it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetrieveTransactionRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [RetrieveTransaction](#endpont-retrievetransaction) endpoint.
	///
	///One of `errors` or `transaction` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetrieveTransactionResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Represents a transaction processed with Square, either with the
		///Connect API or with Square Point of Sale.
		///
		///The `tenders` field of this object lists all methods of payment used to pay in
		///the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SearchCatalogObjectsRequest
	{
		
		/// <summary>
		/// Return only objects that have been modified after this [timestamp](#workingwithdates)
		///(in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z"). The timestamp is exclusive -
		///objects whose timestamp is equal to `begin_time` will not be included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin_time")]
		public string Begin_time { get; set; }
		
		/// <summary>
		/// The pagination cursor returned in the previous response. Leave unset for an initial request.
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// If `true`, deleted objects will be included in the results. Deleted objects will have their
		///`is_deleted` field set to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_deleted_objects")]
		public System.Nullable<System.Boolean> Include_deleted_objects { get; set; }
		
		/// <summary>
		/// If `true`, the response will include additional objects that are related to the
		///requested object, as follows:
		///
		///If a [CatalogItem](#type-catalogitem) is returned in the object field of the response,
		///its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and
		///[CatalogModifierList](#type-catalogmodifierlist)s will be included in the `related_objects` field of the
		///response.
		///
		///If a [CatalogItemVariation](#type-catalogitemvariation) is returned in the object field of the
		///response, its parent [CatalogItem](#type-catalogitem) will be included in the `related_objects` field of
		///the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="include_related_objects")]
		public System.Nullable<System.Boolean> Include_related_objects { get; set; }
		
		/// <summary>
		/// A limit on the number of results to be returned in a single page. The limit is advisory -
		///the implementation may return more or fewer results. If the supplied limit is negative, zero, or
		///is higher than the maximum limit of 1,000, it will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The desired set of object types to appear in the search results. The legal values are taken from the
		///[CatalogObjectType](#type-catalogobjecttype) enumeration, namely `"ITEM"`, `"ITEM_VARIATION"`, `"CATEGORY"`,
		///`"DISCOUNT"`, `"TAX"`, `"MODIFIER"`, or `"MODIFIER_LIST"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_types")]
		public CatalogObjectType[] Object_types { get; set; }
		
		/// <summary>
		/// A query to be applied to a [SearchCatalogObjectsRequest](#type-searchcatalogobjectsrequest).
		///Only one query field may be present.
		///
		///Where an attribute name is required, it should be specified as the name of any field
		///marked "searchable" from the structured data types for the desired result object type(s)
		///([CatalogItem](#type-catalogitem), [CatalogItemVariation](#type-catalogitemvariation),
		///[CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax),
		///[CatalogDiscount](#type-catalogdiscount), [CatalogModifierList](#type-catalogmodifierlist),
		///[CatalogModifier](#type-catalogmodifier)).
		///
		///For example, a query that should return Items may specify attribute names from
		///any of the searchable fields of the [CatalogItem](#type-catalogitem) data type, namely
		///`"name"`, `"description"`, and `"abbreviation"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public CatalogQuery Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SearchCatalogObjectsResponse
	{
		
		/// <summary>
		/// The pagination cursor to be used in a subsequent request. If unset, this is the final response.
		///See [Paginating results](#paginatingresults) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The [CatalogObject](#type-catalogobject)s returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public CatalogObject[] Objects { get; set; }
		
		/// <summary>
		/// A list of [CatalogObject](#type-catalogobject)s referenced by the objects in the `objects` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related_objects")]
		public CatalogObject[] Related_objects { get; set; }
	}
	
	/// <summary>
	/// The order (e.g., chronological or alphabetical) in which results from a request are returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 1,
	}
	
	/// <summary>
	/// When to calculate the taxes due on a cart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaxCalculationPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_SUBTOTAL_PHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_TOTAL_PHASE = 1,
	}
	
	/// <summary>
	/// Whether to the tax amount should be additional to or included in to the [CatalogItem](#type-catalogitem) price.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaxInclusionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUSIVE = 1,
	}
	
	/// <summary>
	/// Indicates the method used to enter the card's details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TenderCardDetailsEntryMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWIPED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEYED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_FILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTLESS = 4,
	}
	
	/// <summary>
	/// Defines the body parameters that can be provided in a request to the
	///[UpdateCustomer](#endpoint-updatecustomer) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateCustomerRequest
	{
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The name of the customer's company.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// The customer's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The customer's family (i.e., last) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The customer's given (i.e., first) name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// A nickname for the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// An optional note to associate with the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The customer's phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// An optional second ID you can set to associate the customer with an
		///entity in another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference_id")]
		public string Reference_id { get; set; }
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [UpdateCustomer](#endpoint-updatecustomer) endpoint.
	///
	///One of `errors` or `customer` is present in a given response (never both).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateCustomerResponse
	{
		
		/// <summary>
		/// Represents one of a business's customers, which can have one or more
		///cards on file associated with it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateItemModifierListsRequest
	{
		
		/// <summary>
		/// The [CatalogItem](#type-catalogitem)s whose [CatalogModifierList](#type-catalogmodifierlist)s are being updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="item_ids")]
		public string[] Item_ids { get; set; }
		
		/// <summary>
		/// The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_lists_to_disable")]
		public string[] Modifier_lists_to_disable { get; set; }
		
		/// <summary>
		/// The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_lists_to_enable")]
		public string[] Modifier_lists_to_enable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateItemModifierListsResponse
	{
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateItemTaxesRequest
	{
		
		/// <summary>
		/// The [CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax](#type-catalogtax)es are being updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="item_ids")]
		public string[] Item_ids { get; set; }
		
		/// <summary>
		/// The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes_to_disable")]
		public string[] Taxes_to_disable { get; set; }
		
		/// <summary>
		/// The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes_to_enable")]
		public string[] Taxes_to_enable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateItemTaxesResponse
	{
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpsertCatalogObjectRequest
	{
		
		/// <summary>
		/// A value you specify that uniquely identifies this
		///request among all your requests. A common way to create
		///a valid idempotency key is to use a Universally unique
		///identifier (UUID).
		///
		///If you're unsure whether a particular request was successful,
		///you can reattempt it with the same idempotency key without
		///worrying about creating duplicate objects.
		///
		///See [Idempotency keys](#idempotencykeys) for more information.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idempotency_key")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Idempotency_key { get; set; }
		
		/// <summary>
		/// The wrapper object for object types in the Catalog data model. The type
		///of a particular `CatalogObject` is determined by the value of
		///`type` and only the corresponding data field may be set.
		///
		///- if type = `ITEM`, only `item_data` will be populated and it will contain a valid [CatalogItem](#type-catalogitem) object.
		///- if type = `ITEM_VARIATION`, only `item_variation_data` will be populated and it will contain a valid [CatalogItemVariation](#type-catalogitemvariation) object.
		///- if type = `MODIFIER`, only `modifier_data` will be populated and it will contain a valid [CatalogModifier](#type-catalogmodifier) object.
		///- if type = `MODIFIER_LIST`, only `modifier_list_data` will be populated and it will contain a valid [CatalogModifierList](#type-catalogmodifierlist) object.
		///- if type = `CATEGORY`, only `category_data` will be populated and it will contain a valid [CatalogCategory](#type-catalogcategory) object.
		///- if type = `DISCOUNT`, only `discount_data` will be populated and it will contain a valid [CatalogDiscount](#type-catalogdiscount) object.
		///- if type = `TAX`, only `tax_data` will be populated and it will contain a valid [CatalogTax](#type-catalogtax) object.
		///
		///For a more detailed discussion of the Catalog data model, please see the
		///[Catalog Overview](https://docs.connect.squareup.com/articles/catalog-overview).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public CatalogObject Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpsertCatalogObjectResponse
	{
		
		/// <summary>
		/// The wrapper object for object types in the Catalog data model. The type
		///of a particular `CatalogObject` is determined by the value of
		///`type` and only the corresponding data field may be set.
		///
		///- if type = `ITEM`, only `item_data` will be populated and it will contain a valid [CatalogItem](#type-catalogitem) object.
		///- if type = `ITEM_VARIATION`, only `item_variation_data` will be populated and it will contain a valid [CatalogItemVariation](#type-catalogitemvariation) object.
		///- if type = `MODIFIER`, only `modifier_data` will be populated and it will contain a valid [CatalogModifier](#type-catalogmodifier) object.
		///- if type = `MODIFIER_LIST`, only `modifier_list_data` will be populated and it will contain a valid [CatalogModifierList](#type-catalogmodifierlist) object.
		///- if type = `CATEGORY`, only `category_data` will be populated and it will contain a valid [CatalogCategory](#type-catalogcategory) object.
		///- if type = `DISCOUNT`, only `discount_data` will be populated and it will contain a valid [CatalogDiscount](#type-catalogdiscount) object.
		///- if type = `TAX`, only `tax_data` will be populated and it will contain a valid [CatalogTax](#type-catalogtax) object.
		///
		///For a more detailed discussion of the Catalog data model, please see the
		///[Catalog Overview](https://docs.connect.squareup.com/articles/catalog-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catalog_object")]
		public CatalogObject Catalog_object { get; set; }
		
		/// <summary>
		/// The set of [Error](#type-error)s encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The mapping between client and server IDs for this Upsert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id_mappings")]
		public CatalogIdMapping[] Id_mappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VoidTransactionRequest
	{
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VoidTransactionResponse
	{
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1AdjustInventoryRequest
	{
		
		/// <summary>
		/// The reason for the inventory adjustment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustment_type")]
		public System.Nullable<V1AdjustInventoryRequestAdjustment_type> Adjustment_type { get; set; }
		
		/// <summary>
		/// A note about the inventory adjustment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		/// <summary>
		/// The number to adjust the variation's quantity by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_delta")]
		public System.Nullable<System.Double> Quantity_delta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1AdjustInventoryRequestAdjustment_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECEIVE_STOCK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL_ADJUST = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1BankAccount
	{
		
		/// <summary>
		/// The last few digits of the bank account number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_number_suffix")]
		public string Account_number_suffix { get; set; }
		
		/// <summary>
		/// The name of the bank that manages the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_name")]
		public string Bank_name { get; set; }
		
		/// <summary>
		/// The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The bank account's Square-issued ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Square-issued ID of the merchant associated with the bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// The name associated with the bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The bank account's routing number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routing_number")]
		public string Routing_number { get; set; }
		
		/// <summary>
		/// The bank account's type (for example, savings or checking).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<V1BankAccountType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1BankAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_CHECKING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVESTMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1CashDrawerEvent
	{
		
		/// <summary>
		/// The time when the event occurred, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// An optional description of the event, entered by the employee that created it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the employee that created the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_money")]
		public V1Money Event_money { get; set; }
		
		/// <summary>
		/// The type of event that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public System.Nullable<V1CashDrawerEventEvent_type> Event_type { get; set; }
		
		/// <summary>
		/// The event's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Money
	{
		
		/// <summary>
		/// Amount in the lowest denominated value of this Currency. E.g. in USD
		///these are cents, in JPY they are Yen (which do not have a 'cent' concept).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public MoneyCurrency Currency_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1CashDrawerEventEvent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SALE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASH_TENDER_PAYMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_TENDER_PAYMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASH_TENDER_CANCELED_PAYMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_TENDER_CANCELED_PAYMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASH_TENDER_REFUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_TENDER_REFUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAID_IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAID_OUT = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1CashDrawerShift
	{
		
		[System.Runtime.Serialization.DataMember(Name="cash_paid_in_money")]
		public V1Money Cash_paid_in_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_paid_out_money")]
		public V1Money Cash_paid_out_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_payment_money")]
		public V1Money Cash_payment_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_refunds_money")]
		public V1Money Cash_refunds_money { get; set; }
		
		/// <summary>
		/// The time when the shift was closed, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closed_at")]
		public string Closed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closed_cash_money")]
		public V1Money Closed_cash_money { get; set; }
		
		/// <summary>
		/// The ID of the employee that closed the cash drawer shift by auditing the cash drawer's contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closing_employee_id")]
		public string Closing_employee_id { get; set; }
		
		/// <summary>
		/// The time when the timecard was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device Device { get; set; }
		
		/// <summary>
		/// The IDs of all employees that were logged into Square Register at some point during the cash drawer shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_ids")]
		public string[] Employee_ids { get; set; }
		
		/// <summary>
		/// The time when the shift ended, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ended_at")]
		public System.Nullable<System.Boolean> Ended_at { get; set; }
		
		/// <summary>
		/// The ID of the employee that ended the cash drawer shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ending_employee_id")]
		public string Ending_employee_id { get; set; }
		
		/// <summary>
		/// The shift's current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public System.Nullable<V1CashDrawerShiftEvent_type> Event_type { get; set; }
		
		/// <summary>
		/// All of the events (payments, refunds, and so on) that involved the cash drawer during the shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public V1CashDrawerEvent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expected_cash_money")]
		public V1Money Expected_cash_money { get; set; }
		
		/// <summary>
		/// The shift's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The time when the shift began, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opened_at")]
		public string Opened_at { get; set; }
		
		/// <summary>
		/// The ID of the employee that started the cash drawer shift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opening_employee_id")]
		public string Opening_employee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="starting_cash_money")]
		public V1Money Starting_cash_money { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1CashDrawerShiftEvent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Category
	{
		
		/// <summary>
		/// The category's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The category's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1CreateRefundRequest
	{
		
		/// <summary>
		/// The ID of the payment to refund. If you're creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// The reason for the refund.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_money")]
		public V1Money Refunded_money { get; set; }
		
		/// <summary>
		/// An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request_idempotence_key")]
		public string Request_idempotence_key { get; set; }
		
		/// <summary>
		/// TThe type of refund (FULL or PARTIAL).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public V1CreateRefundRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1CreateRefundRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Discount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public V1Money Amount_money { get; set; }
		
		/// <summary>
		/// The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public System.Nullable<V1DiscountColor> Color { get; set; }
		
		/// <summary>
		/// Indicates whether the discount is a FIXED value or entered at the time of sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_type")]
		public System.Nullable<V1DiscountDiscount_type> Discount_type { get; set; }
		
		/// <summary>
		/// The discount's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The discount's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin_required")]
		public System.Nullable<System.Boolean> Pin_required { get; set; }
		
		/// <summary>
		/// The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public string Rate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1DiscountColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9da2a6")]
		_9da2a6 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4ab200")]
		_4ab200 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0b8000")]
		_0b8000 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2952cc")]
		_2952cc = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a82ee5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		e5457a = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		b21212 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="593c00")]
		_593c00 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		e5BF00 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1DiscountDiscount_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_PERCENTAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_AMOUNT = 2,
	}
	
	/// <summary>
	/// Represents one of a business's employees.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Employee
	{
		
		/// <summary>
		/// The IDs of the locations the employee is allowed to clock in at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorized_location_ids")]
		public string[] Authorized_location_ids { get; set; }
		
		/// <summary>
		/// The time when the employee entity was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The employee's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// An ID the merchant can set to associate the employee with an entity in another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The employee's first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// The employee's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The employee's last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role_ids")]
		public string[] Role_ids { get; set; }
		
		/// <summary>
		/// CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<V1EmployeeStatus> Status { get; set; }
		
		/// <summary>
		/// The time when the employee entity was most recently updated, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1EmployeeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1EmployeeRole
	{
		
		/// <summary>
		/// The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The role's unique ID, Can only be set by Square.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If true, employees with this role have all permissions, regardless of the values indicated in permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_owner")]
		public System.Nullable<System.Boolean> Is_owner { get; set; }
		
		/// <summary>
		/// The role's merchant-defined name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The role's permissions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
		
		/// <summary>
		/// The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Fee
	{
		
		/// <summary>
		/// The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustment_type")]
		public System.Nullable<V1FeeAdjustment_type> Adjustment_type { get; set; }
		
		/// <summary>
		/// If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applies_to_custom_amounts")]
		public System.Nullable<System.Boolean> Applies_to_custom_amounts { get; set; }
		
		/// <summary>
		/// Forthcoming
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculation_phase")]
		public System.Nullable<V1FeeCalculation_phase> Calculation_phase { get; set; }
		
		/// <summary>
		/// If true, the fee is applied to all appropriate items. If false, the fee is not applied at all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The fee's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the fee is ADDITIVE or INCLUSIVE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusion_type")]
		public CatalogTaxInclusion_type Inclusion_type { get; set; }
		
		/// <summary>
		/// The fee's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public string Rate { get; set; }
		
		/// <summary>
		/// In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<V1FeeType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1FeeAdjustment_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1FeeCalculation_phase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEE_SUBTOTAL_PHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEE_TOTAL_PHASE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1FeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_GST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_HST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_PST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_QST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JP_CONSUMPTION_TAX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_PEI_PST = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US_SALES_TAX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1InventoryEntry
	{
		
		/// <summary>
		/// The current available quantity of the item variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_on_hand")]
		public System.Nullable<System.Double> Quantity_on_hand { get; set; }
		
		/// <summary>
		/// The variation that the entry corresponds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variation_id")]
		public string Variation_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Item
	{
		
		/// <summary>
		/// The text of the item's display label in Square Register. Only up to the first five characters of the string are used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// If true, the item can be added to shipping orders from the merchant's online store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_online")]
		public System.Nullable<System.Boolean> Available_online { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public V1Category Category { get; set; }
		
		/// <summary>
		/// The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public System.Nullable<V1ItemColor> Color { get; set; }
		
		/// <summary>
		/// The item's description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The fees that apply to the item, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public V1Fee[] Fees { get; set; }
		
		/// <summary>
		/// The item's ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="master_image")]
		public V1ItemImage Master_image { get; set; }
		
		/// <summary>
		/// The modifier lists that apply to the item, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_lists")]
		public V1Variation[] Modifier_lists { get; set; }
		
		/// <summary>
		/// The item's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Deprecated. This field is not used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxable")]
		public System.Nullable<System.Boolean> Taxable { get; set; }
		
		/// <summary>
		/// The item's type. This value is NORMAL for almost all items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<V1ItemType> Type { get; set; }
		
		/// <summary>
		/// The item's variations. You must specify at least one variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public V1Variation[] Variations { get; set; }
		
		/// <summary>
		/// Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<V1ItemVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1ItemColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9da2a6")]
		_9da2a6 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4ab200")]
		_4ab200 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0b8000")]
		_0b8000 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2952cc")]
		_2952cc = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a82ee5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		e5457a = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		b21212 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="593c00")]
		_593c00 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		e5BF00 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1ItemImage
	{
		
		/// <summary>
		/// The image's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The image's publicly accessible URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Variation
	{
		
		/// <summary>
		/// The item variation's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_threshold")]
		public System.Nullable<System.Int32> Inventory_alert_threshold { get; set; }
		
		/// <summary>
		/// Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory_alert_type")]
		public System.Nullable<V1VariationInventory_alert_type> Inventory_alert_type { get; set; }
		
		/// <summary>
		/// The ID of the variation's associated item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_id")]
		public string Item_id { get; set; }
		
		/// <summary>
		/// The item variation's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates the variation's list position when displayed in Square Register and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int32> Ordinal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_money")]
		public V1Money Price_money { get; set; }
		
		/// <summary>
		/// Indicates whether the item variation's price is fixed or determined at the time of sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricing_type")]
		public ItemVariationLocationOverridesPricing_type Pricing_type { get; set; }
		
		/// <summary>
		/// The item variation's SKU, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// If true, inventory tracking is active for the variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_inventory")]
		public System.Nullable<System.Boolean> Track_inventory { get; set; }
		
		/// <summary>
		/// Arbitrary metadata associated with the variation. Cannot exceed 255 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_data")]
		public string User_data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1VariationInventory_alert_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW_QUANTITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVESTMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1ItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIFT_CARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1ItemVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Defines the fields that are included in the response body of
	///a request to the **RetrieveBusiness** endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Merchant
	{
		
		/// <summary>
		/// Capabilities that are enabled for the merchant's Square account. Capabilities that are not listed in this array are not enabled for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_capabilities")]
		public string[] Account_capabilities { get; set; }
		
		/// <summary>
		/// Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_type")]
		public System.Nullable<V1MerchantAccount_type> Account_type { get; set; }
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_address")]
		public Address Business_address { get; set; }
		
		/// <summary>
		/// The name of the merchant's business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_name")]
		public string Business_name { get; set; }
		
		/// <summary>
		/// Represents a phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_phone")]
		public V1PhoneNumber Business_phone { get; set; }
		
		/// <summary>
		/// The type of business operated by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business_type")]
		public System.Nullable<V1MerchantBusiness_type> Business_type { get; set; }
		
		/// <summary>
		/// The country associated with the merchant account, in ISO 3166-1-alpha-2 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The email address associated with the merchant account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The merchant account's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The language associated with the merchant account, in BCP 47 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_code")]
		public string Language_code { get; set; }
		
		/// <summary>
		/// Additional information for a single-location account specified by its associated business account, if it has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_details")]
		public V1MerchantLocation_details Location_details { get; set; }
		
		/// <summary>
		/// The URL of the merchant's online store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="market_url")]
		public string Market_url { get; set; }
		
		/// <summary>
		/// The name associated with the merchant account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_address ")]
		public Address Shipping_address_ { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1MerchantAccount_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS = 1,
	}
	
	/// <summary>
	/// Represents a phone number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1PhoneNumber
	{
		
		/// <summary>
		/// The phone number's international calling code. For US phone numbers, this value is +1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="calling_code")]
		public string Calling_code { get; set; }
		
		/// <summary>
		/// The phone number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1MerchantBusiness_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPAREL_AND_ACCESSORY_SHOPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ART_DEALERS_GALLERIES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ART_DESIGN_AND_PHOTOGRAPHY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAR_CLUB_LOUNGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEAUTY_AND_BARBER_SHOPS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOK_STORES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_SERVICES = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATERING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARITIBLE_ORGS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEANING_SERVICES = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSULTANT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTRACTORS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERY_SERVICES = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENTISTRY = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDUCATION = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOOD_TRUCK_CART = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FURNITURE_HOME_AND_OFFICE_EQUIPMENT = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FURNITURE_HOME_GOODS = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOTELS_AND_LODGING = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDIVIDUAL_USE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JEWELRY_AND_WATCHES = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANDSCAPING_AND_HORTICULTURAL_SERVICES = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANGUAGE_SCHOOLS = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGAL_SERVICES = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_PRACTITIONERS = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMBERSHIP_ORGANIZATIONS = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_AND_ENTERTAINMENT = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTDOOR_MARKETS = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_SERVICES = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POLITICAL_ORGANIZATIONS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFESSIONAL_SERVICES = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REAL_ESTATE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECREATION_SERVICES = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPAIR_SHOPS_AND_RELATED_SERVICES = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTAURANTS = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL_SHOPS = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHOOLS_AND_EDUCATIONAL_SERVICES = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPORTING_GOODS = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAXICABS_AND_LIMOUSINES = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TICKET_SALES = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOURISM = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAVEL_TOURISM = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VETERINARY_SERVICES = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_DEV_DESIGN = 49,
	}
	
	public class V1MerchantLocation_details
	{
		
		/// <summary>
		/// The nickname assigned to the single-location account by the parent business. This value appears in the parent business's multi-location dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1ModifierList
	{
		
		/// <summary>
		/// The modifier list's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The options included in the modifier list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_options")]
		public V1ModifierOption[] Modifier_options { get; set; }
		
		/// <summary>
		/// The modifier list's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection_type")]
		public CatalogModifierListSelection_type Selection_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1ModifierOption
	{
		
		/// <summary>
		/// The modifier option's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the modifier list the option belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_list_id")]
		public string Modifier_list_id { get; set; }
		
		/// <summary>
		/// The modifier option's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="on_by_default")]
		public System.Nullable<System.Boolean> On_by_default { get; set; }
		
		/// <summary>
		/// Indicates the modifier option's list position when displayed in Square Register and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinal")]
		public System.Nullable<System.Int32> Ordinal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_money")]
		public V1Money Price_money { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Order
	{
		
		/// <summary>
		/// For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="btc_price_satoshi")]
		public System.Nullable<System.Double> Btc_price_satoshi { get; set; }
		
		/// <summary>
		/// For Bitcoin transactions, the address that the buyer sent Bitcoin to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="btc_receive_address")]
		public string Btc_receive_address { get; set; }
		
		/// <summary>
		/// The email address of the order's buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_email")]
		public string Buyer_email { get; set; }
		
		/// <summary>
		/// A note provided by the buyer when the order was created, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyer_note")]
		public string Buyer_note { get; set; }
		
		/// <summary>
		/// A note provided by the merchant when the order's state was set to CANCELED, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled_note")]
		public string Canceled_note { get; set; }
		
		/// <summary>
		/// A note provided by the merchant when the order's state was set to COMPLETED, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_note")]
		public string Completed_note { get; set; }
		
		/// <summary>
		/// The time when the order was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The time when the order expires if no action is taken, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public string Expires_at { get; set; }
		
		/// <summary>
		/// The order's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The history of actions associated with the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_history")]
		public V1OrderHistoryEntry[] Order_history { get; set; }
		
		/// <summary>
		/// The unique identifier of the payment associated with the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// The promo code provided by the buyer, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promo_code")]
		public string Promo_code { get; set; }
		
		/// <summary>
		/// The name of the order's buyer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// The phone number to use for the order's delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_phone_number")]
		public string Recipient_phone_number { get; set; }
		
		/// <summary>
		/// A note provided by the merchant when the order's state was set to REFUNDED, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_note")]
		public string Refunded_note { get; set; }
		
		/// <summary>
		/// Represents a physical address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<V1OrderState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_money")]
		public V1Money Subtotal_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tender")]
		public V1Tender Tender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_discount_money")]
		public V1Money Total_discount_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_price_money")]
		public V1Money Total_price_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_shipping_money")]
		public V1Money Total_shipping_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_tax_money")]
		public V1Money Total_tax_money { get; set; }
		
		/// <summary>
		/// The time when the order was last modified, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1OrderHistoryEntry
	{
		
		/// <summary>
		/// The type of action performed on the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<V1OrderHistoryEntryAction> Action { get; set; }
		
		/// <summary>
		/// The time when the action was performed, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1OrderHistoryEntryAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER_PLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECLINED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_RECEIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUNDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1OrderState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUNDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Tender
	{
		
		/// <summary>
		/// The brand of credit card provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_brand")]
		public System.Nullable<V1TenderCard_brand> Card_brand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="change_back_money")]
		public V1Money Change_back_money { get; set; }
		
		/// <summary>
		/// The ID of the employee that processed the tender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// The tender's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry_method")]
		public System.Nullable<V1TenderEntry_method> Entry_method { get; set; }
		
		/// <summary>
		/// The tender's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A human-readable description of the tender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The last four digits of the provided credit card's account number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pan_suffix")]
		public string Pan_suffix { get; set; }
		
		/// <summary>
		/// Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_note")]
		public string Payment_note { get; set; }
		
		/// <summary>
		/// The URL of the receipt for the tender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_url")]
		public string Receipt_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_money")]
		public V1Money Refunded_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tendered_money")]
		public V1Money Tendered_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public V1Money Total_money { get; set; }
		
		/// <summary>
		/// The type of tender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<V1TenderType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1TenderCard_brand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_BRAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER_CARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMERICAN_EXPRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER_DINERS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JCB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHINA_UNIONPAY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_GIFT_CARD = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1TenderEntry_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCANNED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_CASH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_WALLET = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWIPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_FORM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1TenderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT_CARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_CARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SALE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_WALLET = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_GIFT_CARD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Page
	{
		
		/// <summary>
		/// The cells included on the page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public V1PageCell[] Cells { get; set; }
		
		/// <summary>
		/// The page's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The page's name, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The page's position in the merchant's list of pages. Always an integer between 0 and 4, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_index")]
		public System.Nullable<System.Int32> Page_index { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1PageCell
	{
		
		/// <summary>
		/// The column of the cell. Always an integer between 0 and 4, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public System.Nullable<System.Int32> Column { get; set; }
		
		/// <summary>
		/// The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_id")]
		public string Object_id { get; set; }
		
		/// <summary>
		/// The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_type")]
		public string[] Object_type { get; set; }
		
		/// <summary>
		/// The unique identifier of the page the cell is included on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_id")]
		public string Page_id { get; set; }
		
		/// <summary>
		/// For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeholder_type")]
		public string[] Placeholder_type { get; set; }
		
		/// <summary>
		/// The row of the cell. Always an integer between 0 and 4, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="row")]
		public System.Nullable<System.Int32> Row { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Payment
	{
		
		/// <summary>
		/// All of the additive taxes associated with the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additive_tax")]
		public V1PaymentTax[] Additive_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additive_tax_money")]
		public V1Money Additive_tax_money { get; set; }
		
		/// <summary>
		/// The time when the payment was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The unique identifier of the Square account that took the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator_id")]
		public string Creator_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device Device { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount_money")]
		public V1Money Discount_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_sales_money")]
		public V1Money Gross_sales_money { get; set; }
		
		/// <summary>
		/// The payment's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// All of the inclusive taxes associated with the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusive_tax")]
		public V1PaymentTax[] Inclusive_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inclusive_tax_money")]
		public V1Money Inclusive_tax_money { get; set; }
		
		/// <summary>
		/// The items purchased in the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemizations")]
		public V1PaymentItemization[] Itemizations { get; set; }
		
		/// <summary>
		/// The unique identifier of the merchant that took the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_sales_money")]
		public V1Money Net_sales_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_total_money")]
		public V1Money Net_total_money { get; set; }
		
		/// <summary>
		/// The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_url")]
		public string Payment_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_fee_money")]
		public V1Money Processing_fee_money { get; set; }
		
		/// <summary>
		/// The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment's tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_url")]
		public string Receipt_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_money")]
		public V1Money Refunded_money { get; set; }
		
		/// <summary>
		/// All of the refunds applied to the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunds")]
		public V1Refund[] Refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swedish_rounding_money")]
		public V1Money Swedish_rounding_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tax_money")]
		public V1Money Tax_money { get; set; }
		
		/// <summary>
		/// All of the additive taxes associated with the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tender")]
		public V1Tender[] Tender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tip_money")]
		public V1Money Tip_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_collected_money")]
		public V1Money Total_collected_money { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1PaymentTax
	{
		
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public V1Money Applied_money { get; set; }
		
		/// <summary>
		/// Any errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fee_id")]
		public string Fee_id { get; set; }
		
		/// <summary>
		/// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusion_type")]
		public CatalogTaxInclusion_type Inclusion_type { get; set; }
		
		/// <summary>
		/// The merchant-defined name of the tax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public string Rate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1PaymentItemization
	{
		
		[System.Runtime.Serialization.DataMember(Name="discount_money")]
		public V1Money Discount_money { get; set; }
		
		/// <summary>
		/// All discounts applied to this itemization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discounts")]
		public V1PaymentDiscount[] Discounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_sales_money")]
		public V1Money Gross_sales_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="item_detail")]
		public V1PaymentItemDetail Item_detail { get; set; }
		
		/// <summary>
		/// The name of the item variation purchased, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_variation_name")]
		public string Item_variation_name { get; set; }
		
		/// <summary>
		/// The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemization_type")]
		public System.Nullable<V1PaymentItemizationItemization_type> Itemization_type { get; set; }
		
		/// <summary>
		/// All modifier options applied to this itemization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiers")]
		public V1PaymentModifier[] Modifiers { get; set; }
		
		/// <summary>
		/// The item's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_sales_money")]
		public V1Money Net_sales_money { get; set; }
		
		/// <summary>
		/// Notes entered by the merchant about the item at the time of payment, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The quantity of the item purchased. This can be a decimal value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="single_quantity_money")]
		public V1Money Single_quantity_money { get; set; }
		
		/// <summary>
		/// All taxes applied to this itemization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public V1PaymentTax[] Taxes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public V1Money Total_money { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1PaymentDiscount
	{
		
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public V1Money Applied_money { get; set; }
		
		/// <summary>
		/// The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_id")]
		public string Discount_id { get; set; }
		
		/// <summary>
		/// The discount's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1PaymentItemDetail
	{
		
		/// <summary>
		/// The name of the item's merchant-defined category, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_name")]
		public string Category_name { get; set; }
		
		/// <summary>
		/// The unique ID of the item purchased, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_id")]
		public string Item_id { get; set; }
		
		/// <summary>
		/// The unique ID of the item variation purchased, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_variation_id")]
		public string Item_variation_id { get; set; }
		
		/// <summary>
		///  The item's merchant-defined SKU, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1PaymentItemizationItemization_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_AMOUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIFT_CARD_ACTIVATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIFT_CARD_RELOAD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIFT_CARD_UNKNOWN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1PaymentModifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="applied_money")]
		public V1Money Applied_money { get; set; }
		
		/// <summary>
		/// TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifier_option_id")]
		public string Modifier_option_id { get; set; }
		
		/// <summary>
		/// The modifier option's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Refund
	{
		
		/// <summary>
		/// The time when the merchant initiated the refund for Square to process, in ISO 8601 format..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant_id")]
		public string Merchant_id { get; set; }
		
		/// <summary>
		/// The Square-issued ID of the payment the refund is applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processed_at")]
		public string Processed_at { get; set; }
		
		/// <summary>
		/// The merchant-specified reason for the refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_additive_tax_money")]
		public V1Money Refunded_additive_tax_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_discount_money")]
		public V1Money Refunded_discount_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_inclusive_tax_money")]
		public V1Money Refunded_inclusive_tax_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_money")]
		public V1Money Refunded_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_processing_fee_money")]
		public V1Money Refunded_processing_fee_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_tip_money")]
		public V1Money Refunded_tip_money { get; set; }
		
		/// <summary>
		/// The type of refund 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public V1CreateRefundRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Settlement
	{
		
		/// <summary>
		/// The Square-issued unique identifier for the bank account associated with the settlement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_account_id")]
		public string Bank_account_id { get; set; }
		
		/// <summary>
		/// The entries included in this settlement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public V1SettlementEntry[] Entries { get; set; }
		
		/// <summary>
		/// The settlement's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initiated_at")]
		public string Initiated_at { get; set; }
		
		/// <summary>
		/// The settlement's current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<V1SettlementStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_money")]
		public V1Money Total_money { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1SettlementEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount_money")]
		public V1Money Amount_money { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fee_money")]
		public V1Money Fee_money { get; set; }
		
		/// <summary>
		/// The settlement's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public string Payment_id { get; set; }
		
		/// <summary>
		/// The settlement's current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<V1SettlementEntryType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1SettlementEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADJUSTMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BALANCE_CHARGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREE_PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLD_ADJUSTMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAID_SERVICE_FEE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAID_SERVICE_FEE_REFUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDEMPTION_CODE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURNED_PAYOUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_CAPITAL_ADVANCE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_CAPITAL_PAYMENT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_CAPITAL_REVERSED_PAYMENT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_FEE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_FEE_REFUND = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCENTED_PAYMENT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURNED_ACH_ENTRY = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURNED_SQUARE_275 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE_275 = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1SettlementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENT = 1,
	}
	
	/// <summary>
	/// Represents a timecard for an employee.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1Timecard
	{
		
		/// <summary>
		/// The ID of the location the employee clocked in from, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockin_location_id")]
		public string Clockin_location_id { get; set; }
		
		/// <summary>
		/// The clock-in time for the timecard, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockin_time")]
		public string Clockin_time { get; set; }
		
		/// <summary>
		/// The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockout_location_id")]
		public string Clockout_location_id { get; set; }
		
		/// <summary>
		/// The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockout_time")]
		public string Clockout_time { get; set; }
		
		/// <summary>
		/// The time when the timecard was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// If true, the timecard was deleted by the merchant, and it is no longer valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The ID of the employee the timecard is associated with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="employee_id")]
		public string Employee_id { get; set; }
		
		/// <summary>
		/// The timecard's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The time when the timecard was most recently updated, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1TimecardEvent
	{
		
		/// <summary>
		/// The time the employee clocked in, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockin_time")]
		public string Clockin_time { get; set; }
		
		/// <summary>
		/// The time the employee clocked out, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockout_time")]
		public string Clockout_time { get; set; }
		
		/// <summary>
		/// The time when the event was created, in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The ID of the timecard to list events for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public System.Nullable<V1TimecardEventEvent_type> Event_type { get; set; }
		
		/// <summary>
		/// The event's unique ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1TimecardEventEvent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_CREATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_EDIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_DELETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_CLOCKIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_CLOCKOUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASHBOARD_SUPERVISOR_CLOSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASHBOARD_EDIT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASHBOARD_DELETE = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1UpdateModifierListRequest
	{
		
		/// <summary>
		/// The modifier list's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether multiple options from the modifier list can be applied to a single item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection_type")]
		public CatalogModifierListSelection_type Selection_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class V1UpdateOrderRequest
	{
		
		/// <summary>
		/// The action to perform on the order (COMPLETE, CANCEL, or REFUND).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public V1UpdateOrderRequestAction Action { get; set; }
		
		/// <summary>
		/// A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled_note")]
		public string Canceled_note { get; set; }
		
		/// <summary>
		/// A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_note")]
		public string Completed_note { get; set; }
		
		/// <summary>
		/// A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_note")]
		public string Refunded_note { get; set; }
		
		/// <summary>
		/// The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipped_tracking_number")]
		public string Shipped_tracking_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum V1UpdateOrderRequestAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a business's information.
		/// Get a business's information.
		/// RetrieveBusiness v1/me
		/// </summary>
		/// <returns>Success</returns>
		public async Task<V1Merchant> RetrieveBusinessAsync()
		{
			var requestUri = "v1/me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Merchant>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides summary information for all of a business's employees.
		/// Provides summary information for all of a business's employees.
		/// ListEmployees v1/me/employees
		/// </summary>
		/// <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC </param>
		/// <param name="begin_updated_at">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format</param>
		/// <param name="end_updated_at">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="begin_created_at">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="end_created_at">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).</param>
		/// <param name="external_id">If provided, the endpoint returns only employee entities with the specified external_id.</param>
		/// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
		/// Maximum: 200
		// </param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Employee[]> ListEmployeesAsync(ListEmployeesOrder order, string begin_updated_at, string end_updated_at, string begin_created_at, string end_created_at, V1EmployeeStatus status, string external_id, int limit, string batch_token)
		{
			var requestUri = "v1/me/employees?order=" + order+"&begin_updated_at=" + (begin_updated_at==null? "" : System.Uri.EscapeDataString(begin_updated_at))+"&end_updated_at=" + (end_updated_at==null? "" : System.Uri.EscapeDataString(end_updated_at))+"&begin_created_at=" + (begin_created_at==null? "" : System.Uri.EscapeDataString(begin_created_at))+"&end_created_at=" + (end_created_at==null? "" : System.Uri.EscapeDataString(end_created_at))+"&status=" + status+"&external_id=" + (external_id==null? "" : System.Uri.EscapeDataString(external_id))+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Employee[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an employee for a business.
		/// Creates an employee for a business.
		/// CreateEmployee v1/me/employees
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Employee> CreateEmployeeAsync(V1Employee requestBody)
		{
			var requestUri = "v1/me/employees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Employee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the details for a single employee.
		/// Provides the details for a single employee.
		/// RetrieveEmployee v1/me/employees/{employee_id}
		/// </summary>
		/// <param name="employee_id">The employee's ID.</param>
		/// <returns>Success</returns>
		public async Task<V1Employee> RetrieveEmployeeAsync(string employee_id)
		{
			var requestUri = "v1/me/employees/"+ (employee_id==null? "" : System.Uri.EscapeDataString(employee_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Employee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V1 UpdateEmployee
		/// UpdateEmployee v1/me/employees/{employee_id}
		/// </summary>
		/// <param name="employee_id">The ID of the role to modify.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Employee> UpdateEmployeeAsync(string employee_id, V1Employee requestBody)
		{
			var requestUri = "v1/me/employees/"+ (employee_id==null? "" : System.Uri.EscapeDataString(employee_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Employee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides details for a business's locations, including their IDs.
		/// Provides details for a business's locations, including their IDs.
		/// V1LocationsGet v1/me/locations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<V1Merchant[]> V1LocationsGetAsync()
		{
			var requestUri = "v1/me/locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Merchant[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides summary information for all of a business's employee roles.
		/// Provides summary information for all of a business's employee roles.
		/// ListEmployeeRoles v1/me/roles
		/// </summary>
		/// <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC </param>
		/// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
		/// Maximum: 200
		// </param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1EmployeeRole[]> ListEmployeeRolesAsync(ListEmployeesOrder order, int limit, string batch_token)
		{
			var requestUri = "v1/me/roles?order=" + order+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1EmployeeRole[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an employee role you can then assign to employees.
		/// Creates an employee role you can then assign to employees.
		/// CreateEmployeeRole v1/me/roles
		/// </summary>
		/// <param name="requestBody">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
		/// <returns>Success</returns>
		public async Task<V1EmployeeRole> CreateEmployeeRoleAsync(V1EmployeeRole requestBody)
		{
			var requestUri = "v1/me/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1EmployeeRole>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the details for a single employee role.
		/// Provides the details for a single employee role.
		/// RetrieveEmployeeRole v1/me/roles/{role_id}
		/// </summary>
		/// <param name="role_id">The role's ID.</param>
		/// <returns>Success</returns>
		public async Task<V1EmployeeRole> RetrieveEmployeeRoleAsync(string role_id)
		{
			var requestUri = "v1/me/roles/"+ (role_id==null? "" : System.Uri.EscapeDataString(role_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1EmployeeRole>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of an employee role.
		/// Modifies the details of an employee role.
		/// UpdateEmployeeRole v1/me/roles/{role_id}
		/// </summary>
		/// <param name="role_id">The ID of the role to modify.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1EmployeeRole> UpdateEmployeeRoleAsync(string role_id, V1EmployeeRole requestBody)
		{
			var requestUri = "v1/me/roles/"+ (role_id==null? "" : System.Uri.EscapeDataString(role_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1EmployeeRole>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides summary information for all of a business's employee timecards.
		/// Provides summary information for all of a business's employee timecards.
		/// ListTimecards v1/me/timecards
		/// </summary>
		/// <param name="order">The order in which timecards are listed in the response, based on their created_at field.</param>
		/// <param name="employee_id">If provided, the endpoint returns only timecards for the employee with the specified ID.</param>
		/// <param name="begin_clockin_time">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="end_clockin_time">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="begin_clockout_time">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="end_clockout_time">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="begin_updated_at">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="end_updated_at">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.</param>
		/// <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned.</param>
		/// <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
		/// Maximum: 200
		// </param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Timecard[]> ListTimecardsAsync(ListEmployeesOrder order, string employee_id, string begin_clockin_time, string end_clockin_time, string begin_clockout_time, string end_clockout_time, string begin_updated_at, string end_updated_at, bool deleted, int limit, string batch_token)
		{
			var requestUri = "v1/me/timecards?order=" + order+"&employee_id=" + (employee_id==null? "" : System.Uri.EscapeDataString(employee_id))+"&begin_clockin_time=" + (begin_clockin_time==null? "" : System.Uri.EscapeDataString(begin_clockin_time))+"&end_clockin_time=" + (end_clockin_time==null? "" : System.Uri.EscapeDataString(end_clockin_time))+"&begin_clockout_time=" + (begin_clockout_time==null? "" : System.Uri.EscapeDataString(begin_clockout_time))+"&end_clockout_time=" + (end_clockout_time==null? "" : System.Uri.EscapeDataString(end_clockout_time))+"&begin_updated_at=" + (begin_updated_at==null? "" : System.Uri.EscapeDataString(begin_updated_at))+"&end_updated_at=" + (end_updated_at==null? "" : System.Uri.EscapeDataString(end_updated_at))+"&deleted="+deleted+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Timecard[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a timecard for an employee. Each timecard corresponds to a single shift.
		/// Creates a timecard for an employee. Each timecard corresponds to a single shift.
		/// CreateTimecard v1/me/timecards
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Timecard> CreateTimecardAsync(V1Timecard requestBody)
		{
			var requestUri = "v1/me/timecards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Timecard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the details for a single timecard.
		/// Provides the details for a single timecard.
		/// RetrieveTimecard v1/me/timecards/{timecard_id}
		/// </summary>
		/// <param name="timecard_id">The timecard's ID.</param>
		/// <returns>Success</returns>
		public async Task<V1Timecard> RetrieveTimecardAsync(string timecard_id)
		{
			var requestUri = "v1/me/timecards/"+ (timecard_id==null? "" : System.Uri.EscapeDataString(timecard_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Timecard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
		/// Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
		/// UpdateTimecard v1/me/timecards/{timecard_id}
		/// </summary>
		/// <param name="timecard_id">TThe ID of the timecard to modify.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Timecard> UpdateTimecardAsync(string timecard_id, V1Timecard requestBody)
		{
			var requestUri = "v1/me/timecards/"+ (timecard_id==null? "" : System.Uri.EscapeDataString(timecard_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Timecard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
		/// Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
		/// DeleteTimecard v1/me/timecards/{timecard_id}
		/// </summary>
		/// <param name="timecard_id">The ID of the timecard to delete.</param>
		/// <returns>Success</returns>
		public async Task<string> DeleteTimecardAsync(string timecard_id)
		{
			var requestUri = "v1/me/timecards/"+ (timecard_id==null? "" : System.Uri.EscapeDataString(timecard_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides summary information for all events associated with a particular timecard.
		/// Provides summary information for all events associated with a particular timecard.
		/// ListTimecardEvents v1/me/timecards/{timecard_id}/events
		/// </summary>
		/// <param name="timecard_id">The ID of the timecard to list events for.</param>
		/// <returns>Success</returns>
		public async Task<V1TimecardEvent[]> ListTimecardEventsAsync(string timecard_id)
		{
			var requestUri = "v1/me/timecards/"+ (timecard_id==null? "" : System.Uri.EscapeDataString(timecard_id))+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1TimecardEvent[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
		/// Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
		/// ListBankAccounts v1/{location_id}/bank-accounts
		/// </summary>
		/// <param name="location_id">The ID of the location to list bank accounts for.</param>
		/// <returns>Success</returns>
		public async Task<V1BankAccount[]> ListBankAccountsAsync(string location_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/bank-accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1BankAccount[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
		/// Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
		/// RetrieveBankAccount v1/{location_id}/bank-accounts/{bank_account_id}
		/// </summary>
		/// <param name="location_id">The ID of the bank account's associated location.</param>
		/// <param name="bank_account_id">The bank account's Square-issued ID. You obtain this value from Settlement objects returned.</param>
		/// <returns>Success</returns>
		public async Task<V1BankAccount> RetrieveBankAccountAsync(string location_id, string bank_account_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/bank-accounts/"+ (bank_account_id==null? "" : System.Uri.EscapeDataString(bank_account_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1BankAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
		/// Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
		/// ListCashDrawerShifts v1/{location_id}/cash-drawer-shifts
		/// </summary>
		/// <param name="location_id">The ID of the location to list cash drawer shifts for.</param>
		/// <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days.</param>
		/// <param name="end_time">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time.</param>
		/// <returns>Success</returns>
		public async Task<V1CashDrawerShift[]> ListCashDrawerShiftsAsync(string location_id, ListEmployeesOrder order, string begin_time, string end_time)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/cash-drawer-shifts&order=" + order+"&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1CashDrawerShift[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
		/// Provides the details for a single cash drawer shift, including all events that occurred during the shift.
		/// RetrieveCashDrawerShift v1/{location_id}/cash-drawer-shifts/{shift_id}
		/// </summary>
		/// <param name="location_id">The ID of the location to list cash drawer shifts for.</param>
		/// <param name="shift_id">The shift's ID.</param>
		/// <returns>Success</returns>
		public async Task<V1CashDrawerShift> RetrieveCashDrawerShiftAsync(string location_id, string shift_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/cash-drawer-shifts/"+ (shift_id==null? "" : System.Uri.EscapeDataString(shift_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1CashDrawerShift>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of a location's item categories.
		/// Lists all of a location's item categories.
		/// ListCategories v1/{location_id}/categories
		/// </summary>
		/// <param name="location_id">The ID of the location to list categories for.</param>
		/// <returns>Success</returns>
		public async Task<V1Category[]> ListCategoriesAsync(string location_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Category[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an item category.
		/// Creates an item category.
		/// CreateCategory v1/{location_id}/categories
		/// </summary>
		/// <param name="location_id">The ID of the location to create an item for.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Category> CreateCategoryAsync(string location_id, V1Category requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Category>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of an existing item category.
		/// Modifies the details of an existing item category.
		/// UpdateCategory v1/{location_id}/categories/{category_id}
		/// </summary>
		/// <param name="location_id">The ID of the category's associated location.</param>
		/// <param name="category_id">The ID of the category to edit.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Category> UpdateCategoryAsync(string location_id, string category_id, V1Category requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Category>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing item category.
		/// Deletes an existing item category.
		/// DeleteCategory v1/{location_id}/categories/{category_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="category_id">The ID of the category to delete.</param>
		/// <returns>Success</returns>
		public async Task<V1Category> DeleteCategoryAsync(string location_id, string category_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Category>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of a location's discounts.
		/// Lists all of a location's discounts.
		/// ListDiscounts v1/{location_id}/discounts
		/// </summary>
		/// <param name="location_id">The ID of the location to list categories for.</param>
		/// <returns>Success</returns>
		public async Task<V1Discount[]> ListDiscountsAsync(string location_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/discounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Discount[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a discount.
		/// Creates a discount.
		/// CreateDiscount v1/{location_id}/discounts
		/// </summary>
		/// <param name="location_id">The ID of the location to create an item for.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Discount> CreateDiscountAsync(string location_id, V1Discount requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/discounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Discount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of an existing discount.
		/// Modifies the details of an existing discount.
		/// UpdateDiscount v1/{location_id}/discounts/{discount_id}
		/// </summary>
		/// <param name="location_id">The ID of the category's associated location.</param>
		/// <param name="discount_id">The ID of the discount to edit.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Discount> UpdateDiscountAsync(string location_id, string discount_id, V1Discount requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/discounts/"+ (discount_id==null? "" : System.Uri.EscapeDataString(discount_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Discount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing discount.
		/// Deletes an existing discount.
		/// DeleteDiscount v1/{location_id}/discounts/{discount_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="discount_id">The ID of the discount to delete.</param>
		/// <returns>Success</returns>
		public async Task<V1Discount> DeleteDiscountAsync(string location_id, string discount_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/discounts/"+ (discount_id==null? "" : System.Uri.EscapeDataString(discount_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Discount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of a location's fees (taxes).
		/// Lists all of a location's fees (taxes).
		/// ListFees v1/{location_id}/fees
		/// </summary>
		/// <param name="location_id">The ID of the location to list fees for.</param>
		/// <returns>Success</returns>
		public async Task<V1Fee[]> ListFeesAsync(string location_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/fees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Fee[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a fee (tax).
		/// Creates a fee (tax).
		/// CreateFee v1/{location_id}/fees
		/// </summary>
		/// <param name="location_id">The ID of the location to create a fee for.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Fee> CreateFeeAsync(string location_id, V1Fee requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/fees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Fee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of an existing fee (tax).
		/// Modifies the details of an existing fee (tax).
		/// UpdateFee v1/{location_id}/fees/{fee_id}
		/// </summary>
		/// <param name="location_id">The ID of the fee's associated location.</param>
		/// <param name="fee_id">The ID of the fee to edit.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Fee> UpdateFeeAsync(string location_id, string fee_id, V1Fee requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/fees/"+ (fee_id==null? "" : System.Uri.EscapeDataString(fee_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Fee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing fee (tax).
		/// Deletes an existing fee (tax).
		/// DeleteFee v1/{location_id}/fees/{fee_id}
		/// </summary>
		/// <param name="location_id">The ID of the fee's associated location.</param>
		/// <param name="fee_id">The ID of the fee to delete.</param>
		/// <returns>Success</returns>
		public async Task<V1Fee> DeleteFeeAsync(string location_id, string fee_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/fees/"+ (fee_id==null? "" : System.Uri.EscapeDataString(fee_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Fee>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides inventory information for all of a merchant's inventory-enabled item variations.
		/// Provides inventory information for all of a merchant's inventory-enabled item variations.
		/// ListInventory v1/{location_id}/inventory
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000.
		/// Maximum: 1000
		// </param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1InventoryEntry[]> ListInventoryAsync(string location_id, int limit, string batch_token)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/inventory&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1InventoryEntry[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adjusts an item variation's current available inventory.
		/// Adjusts an item variation's current available inventory.
		/// AdjustInventory v1/{location_id}/inventory/{variation_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="variation_id">The ID of the variation to adjust inventory information for.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1InventoryEntry> AdjustInventoryAsync(string location_id, string variation_id, V1AdjustInventoryRequest requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/inventory/"+ (variation_id==null? "" : System.Uri.EscapeDataString(variation_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1InventoryEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides summary information for all of a location's items.
		/// Provides summary information for all of a location's items.
		/// ListItems v1/{location_id}/items
		/// </summary>
		/// <param name="location_id">The ID of the location to list items for.</param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Item[]> ListItemsAsync(string location_id, string batch_token)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Item[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an item and at least one variation for it.
		/// Creates an item and at least one variation for it.
		/// CreateItem v1/{location_id}/items
		/// </summary>
		/// <param name="location_id">The ID of the location to create an item for.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Item> CreateItemAsync(string location_id, V1Item requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Item>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the details for a single item, including associated modifier lists and fees.
		/// Provides the details for a single item, including associated modifier lists and fees.
		/// RetrieveItem v1/{location_id}/items/{item_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="item_id">The item's ID.</param>
		/// <returns>Success</returns>
		public async Task<V1Item> RetrieveItemAsync(string location_id, string item_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Item>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the core details of an existing item.
		/// Modifies the core details of an existing item.
		/// UpdateItem v1/{location_id}/items/{item_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="item_id">The ID of the item to modify.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Item> UpdateItemAsync(string location_id, string item_id, V1Item requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Item>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing item and all item variations associated with it.
		/// Deletes an existing item and all item variations associated with it.
		/// DeleteItem v1/{location_id}/items/{item_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="item_id">The ID of the item to modify.</param>
		/// <returns>Success</returns>
		public async Task<V1Item> DeleteItemAsync(string location_id, string item_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Item>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
		/// Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
		/// ApplyFee v1/{location_id}/items/{item_id}/fees/{fee_id}
		/// </summary>
		/// <param name="location_id">The ID of the fee's associated location.</param>
		/// <param name="item_id">The ID of the item to add the fee to.</param>
		/// <param name="fee_id">The ID of the fee to apply.</param>
		/// <returns>Success</returns>
		public async Task<V1Item> ApplyFeeAsync(string location_id, string item_id, string fee_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id))+"/fees/"+ (fee_id==null? "" : System.Uri.EscapeDataString(fee_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Item>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
		/// Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
		/// RemoveFee v1/{location_id}/items/{item_id}/fees/{fee_id}
		/// </summary>
		/// <param name="location_id">The ID of the fee's associated location.</param>
		/// <param name="item_id">The ID of the item to add the fee to.</param>
		/// <param name="fee_id">The ID of the fee to apply.</param>
		/// <returns>Success</returns>
		public async Task<V1Item> RemoveFeeAsync(string location_id, string item_id, string fee_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id))+"/fees/"+ (fee_id==null? "" : System.Uri.EscapeDataString(fee_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Item>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
		/// Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
		/// ApplyModifierList v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="modifier_list_id">The ID of the modifier list to apply.</param>
		/// <param name="item_id">The ID of the item to add the modifier list to.</param>
		/// <returns>Success</returns>
		public async Task<V1Item> ApplyModifierListAsync(string location_id, string modifier_list_id, string item_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id))+"/modifier-lists/"+ (modifier_list_id==null? "" : System.Uri.EscapeDataString(modifier_list_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Item>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
		/// Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
		/// RemoveModifierList v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="modifier_list_id">The ID of the modifier list to remove.</param>
		/// <param name="item_id">The ID of the item to remove the modifier list from.</param>
		/// <returns>Success</returns>
		public async Task<V1Item> RemoveModifierListAsync(string location_id, string modifier_list_id, string item_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id))+"/modifier-lists/"+ (modifier_list_id==null? "" : System.Uri.EscapeDataString(modifier_list_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Item>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an item variation for an existing item.
		/// Creates an item variation for an existing item.
		/// CreateVariation v1/{location_id}/items/{item_id}/variations
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="item_id">The item's ID.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Variation> CreateVariationAsync(string location_id, string item_id, V1Variation requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id))+"/variations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Variation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of an existing item variation.
		/// Modifies the details of an existing item variation.
		/// UpdateVariation v1/{location_id}/items/{item_id}/variations/{variation_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="item_id">The ID of the item to modify.</param>
		/// <param name="variation_id">The ID of the variation to modify.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Variation> UpdateVariationAsync(string location_id, string item_id, string variation_id, V1Variation requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id))+"/variations/"+ (variation_id==null? "" : System.Uri.EscapeDataString(variation_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Variation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing item variation from an item.
		/// Deletes an existing item variation from an item.
		/// DeleteVariation v1/{location_id}/items/{item_id}/variations/{variation_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="item_id">The ID of the item to delete.</param>
		/// <param name="variation_id">The ID of the variation to delete.</param>
		/// <returns>Success</returns>
		public async Task<V1Variation> DeleteVariationAsync(string location_id, string item_id, string variation_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/items/"+ (item_id==null? "" : System.Uri.EscapeDataString(item_id))+"/variations/"+ (variation_id==null? "" : System.Uri.EscapeDataString(variation_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Variation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of a location's modifier lists.
		/// Lists all of a location's modifier lists.
		/// ListModifierLists v1/{location_id}/modifier-lists
		/// </summary>
		/// <param name="location_id">The ID of the location to list modifier lists for.</param>
		/// <returns>Success</returns>
		public async Task<V1ModifierList[]> ListModifierListsAsync(string location_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/modifier-lists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1ModifierList[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an item modifier list and at least one modifier option for it.
		/// Creates an item modifier list and at least one modifier option for it.
		/// CreateModifierList v1/{location_id}/modifier-lists
		/// </summary>
		/// <param name="location_id">The ID of the location to create a modifier list for.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1ModifierList> CreateModifierListAsync(string location_id, V1ModifierList requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/modifier-lists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1ModifierList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the details for a single modifier list.
		/// Provides the details for a single modifier list.
		/// RetrieveModifierList v1/{location_id}/modifier-lists/{modifier_list_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="modifier_list_id">The modifier list's ID.</param>
		/// <returns>Success</returns>
		public async Task<V1ModifierList> RetrieveModifierListAsync(string location_id, string modifier_list_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/modifier-lists/"+ (modifier_list_id==null? "" : System.Uri.EscapeDataString(modifier_list_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1ModifierList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of an existing item modifier list.
		/// Modifies the details of an existing item modifier list.
		/// UpdateModifierList v1/{location_id}/modifier-lists/{modifier_list_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="modifier_list_id">The ID of the modifier list to edit.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1ModifierList> UpdateModifierListAsync(string location_id, string modifier_list_id, V1UpdateModifierListRequest requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/modifier-lists/"+ (modifier_list_id==null? "" : System.Uri.EscapeDataString(modifier_list_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1ModifierList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing item modifier list and all modifier options associated with it.
		/// Deletes an existing item modifier list and all modifier options associated with it.
		/// DeleteModifierList v1/{location_id}/modifier-lists/{modifier_list_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="modifier_list_id">The ID of the modifier list to delete.</param>
		/// <returns>Success</returns>
		public async Task<V1ModifierList> DeleteModifierListAsync(string location_id, string modifier_list_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/modifier-lists/"+ (modifier_list_id==null? "" : System.Uri.EscapeDataString(modifier_list_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1ModifierList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an item modifier option and adds it to a modifier list.
		/// Creates an item modifier option and adds it to a modifier list.
		/// CreateModifierOption v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="modifier_list_id">The ID of the modifier list to edit.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1ModifierOption> CreateModifierOptionAsync(string location_id, string modifier_list_id, V1ModifierOption requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/modifier-lists/"+ (modifier_list_id==null? "" : System.Uri.EscapeDataString(modifier_list_id))+"/modifier-options";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1ModifierOption>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of an existing item modifier option.
		/// Modifies the details of an existing item modifier option.
		/// UpdateModifierOption v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="modifier_list_id">The ID of the modifier list to edit.</param>
		/// <param name="modifier_option_id">The ID of the modifier list to edit.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1ModifierOption> UpdateModifierOptionAsync(string location_id, string modifier_list_id, string modifier_option_id, V1ModifierOption requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/modifier-lists/"+ (modifier_list_id==null? "" : System.Uri.EscapeDataString(modifier_list_id))+"/modifier-options/"+ (modifier_option_id==null? "" : System.Uri.EscapeDataString(modifier_option_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1ModifierOption>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing item modifier option from a modifier list.
		/// Deletes an existing item modifier option from a modifier list.
		/// DeleteModifierOption v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}
		/// </summary>
		/// <param name="location_id">The ID of the item's associated location.</param>
		/// <param name="modifier_list_id">The ID of the modifier list to delete.</param>
		/// <param name="modifier_option_id">The ID of the modifier list to edit.</param>
		/// <returns>Success</returns>
		public async Task<V1ModifierOption> DeleteModifierOptionAsync(string location_id, string modifier_list_id, string modifier_option_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/modifier-lists/"+ (modifier_list_id==null? "" : System.Uri.EscapeDataString(modifier_list_id))+"/modifier-options/"+ (modifier_option_id==null? "" : System.Uri.EscapeDataString(modifier_option_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1ModifierOption>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides summary information for a merchant's online store orders.
		/// Provides summary information for a merchant's online store orders.
		/// ListOrders v1/{location_id}/orders
		/// </summary>
		/// <param name="location_id">The ID of the location to list online store orders for.</param>
		/// <param name="order">TThe order in which payments are listed in the response.</param>
		/// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200.
		/// Maximum: 200
		// </param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Order[]> ListOrdersAsync(string location_id, ListEmployeesOrder order, int limit, string batch_token)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/orders&order=" + order+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Order[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides comprehensive information for a single online store order, including the order's history.
		/// Provides comprehensive information for a single online store order, including the order's history.
		/// RetrieveOrder v1/{location_id}/orders/{order_id}
		/// </summary>
		/// <param name="location_id">The ID of the order's associated location.</param>
		/// <param name="order_id">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
		/// <returns>Success</returns>
		public async Task<V1Order> RetrieveOrderAsync(string location_id, string order_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/orders/"+ (order_id==null? "" : System.Uri.EscapeDataString(order_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
		/// Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
		/// UpdateOrder v1/{location_id}/orders/{order_id}
		/// </summary>
		/// <param name="location_id">The ID of the order's associated location.</param>
		/// <param name="order_id">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Order> UpdateOrderAsync(string location_id, string order_id, V1UpdateOrderRequest requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/orders/"+ (order_id==null? "" : System.Uri.EscapeDataString(order_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all of a location's Favorites pages in Square Register.
		/// Lists all of a location's Favorites pages in Square Register.
		/// ListPages v1/{location_id}/pages
		/// </summary>
		/// <param name="location_id">The ID of the location to list Favorites pages for.</param>
		/// <returns>Success</returns>
		public async Task<V1Page[]> ListPagesAsync(string location_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/pages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Page[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Favorites page in Square Register.
		/// Creates a Favorites page in Square Register.
		/// CreatePage v1/{location_id}/pages
		/// </summary>
		/// <param name="location_id">The ID of the location to create an item for.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Page> CreatePageAsync(string location_id, V1Page requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/pages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of a Favorites page in Square Register.
		/// Modifies the details of a Favorites page in Square Register.
		/// UpdatePage v1/{location_id}/pages/{page_id}
		/// </summary>
		/// <param name="location_id">The ID of the Favorites page's associated location</param>
		/// <param name="page_id">The ID of the page to modify.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Page> UpdatePageAsync(string location_id, string page_id, V1Page requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/pages/"+ (page_id==null? "" : System.Uri.EscapeDataString(page_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing Favorites page and all of its cells.
		/// Deletes an existing Favorites page and all of its cells.
		/// DeletePage v1/{location_id}/pages/{page_id}
		/// </summary>
		/// <param name="location_id">The ID of the Favorites page's associated location.</param>
		/// <param name="page_id">The ID of the page to delete.</param>
		/// <returns>Success</returns>
		public async Task<V1Page> DeletePageAsync(string location_id, string page_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/pages/"+ (page_id==null? "" : System.Uri.EscapeDataString(page_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a cell of a Favorites page in Square Register.
		/// Modifies a cell of a Favorites page in Square Register.
		/// UpdatePageCell v1/{location_id}/pages/{page_id}/cells
		/// </summary>
		/// <param name="location_id">The ID of the Favorites page's associated location.</param>
		/// <param name="page_id">The ID of the page the cell belongs to.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Page> UpdatePageCellAsync(string location_id, string page_id, V1PageCell requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/pages/"+ (page_id==null? "" : System.Uri.EscapeDataString(page_id))+"/cells";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a cell from a Favorites page in Square Register.
		/// Deletes a cell from a Favorites page in Square Register.
		/// DeletePageCell v1/{location_id}/pages/{page_id}/cells
		/// </summary>
		/// <param name="location_id">The ID of the Favorites page's associated location.</param>
		/// <param name="page_id">The ID of the page to delete.</param>
		/// <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row.</param>
		/// <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column.</param>
		/// <returns>Success</returns>
		public async Task<V1Page> DeletePageCellAsync(string location_id, string page_id, string row, string column)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/pages/"+ (page_id==null? "" : System.Uri.EscapeDataString(page_id))+"/cells&row=" + (row==null? "" : System.Uri.EscapeDataString(row))+"&column=" + (column==null? "" : System.Uri.EscapeDataString(column));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
		/// Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
		/// ListPayments v1/{location_id}/payments
		/// </summary>
		/// <param name="location_id">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
		/// <param name="order">The order in which payments are listed in the response.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</param>
		/// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200.
		/// Maximum: 200
		// </param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Payment[]> ListPaymentsAsync(string location_id, ListEmployeesOrder order, string begin_time, string end_time, int limit, string batch_token)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/payments&order=" + order+"&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Payment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides comprehensive information for a single payment.
		/// Provides comprehensive information for a single payment.
		/// RetrievePayment v1/{location_id}/payments/{payment_id}
		/// </summary>
		/// <param name="location_id">The ID of the payment's associated location.</param>
		/// <param name="payment_id">The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Payment> RetrievePaymentAsync(string location_id, string payment_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/payments/"+ (payment_id==null? "" : System.Uri.EscapeDataString(payment_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Payment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
		/// Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
		/// V1TransactionsGetByLocation_idAndOrderAndBegin_timeAndEnd_timeAndLimitAndBatch_token v1/{location_id}/refunds
		/// </summary>
		/// <param name="location_id">The ID of the location to list refunds for.</param>
		/// <param name="order">TThe order in which payments are listed in the response.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</param>
		/// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200.
		/// Maximum: 200
		// </param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Refund[]> V1TransactionsGetByLocation_idAndOrderAndBegin_timeAndEnd_timeAndLimitAndBatch_tokenAsync(string location_id, ListEmployeesOrder order, string begin_time, string end_time, int limit, string batch_token)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/refunds&order=" + order+"&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&limit="+limit+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Refund[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
		/// Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
		/// V1TransactionsPostByLocation_id v1/{location_id}/refunds
		/// </summary>
		/// <param name="location_id">The ID of the original payment's associated location.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<V1Refund> V1TransactionsPostByLocation_idAsync(string location_id, V1CreateRefundRequest requestBody)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/refunds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Refund>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length.
		/// Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length.
		/// ListSettlements v1/{location_id}/settlements
		/// </summary>
		/// <param name="location_id">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
		/// <param name="order">TThe order in which payments are listed in the response.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</param>
		/// <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200.
		/// Maximum: 200
		// </param>
		/// <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).</param>
		/// <param name="batch_token">A pagination cursor to retrieve the next set of results for your
		///original query to the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Settlement[]> ListSettlementsAsync(string location_id, ListEmployeesOrder order, string begin_time, string end_time, int limit, ListSettlementsStatus status, string batch_token)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/settlements&order=" + order+"&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&limit="+limit+"&status=" + status+"&batch_token=" + (batch_token==null? "" : System.Uri.EscapeDataString(batch_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Settlement[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
		/// Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
		/// RetrieveSettlement v1/{location_id}/settlements/{settlement_id}
		/// </summary>
		/// <param name="location_id">The ID of the settlements's associated location.</param>
		/// <param name="settlement_id">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
		/// <returns>Success</returns>
		public async Task<V1Settlement> RetrieveSettlementAsync(string location_id, string settlement_id)
		{
			var requestUri = "v1/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/settlements/"+ (settlement_id==null? "" : System.Uri.EscapeDataString(settlement_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<V1Settlement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// BatchDeleteCatalogObjects
		/// Deletes a set of [CatalogItem](#type-catalogitem)s based on the
		/// provided list of target IDs and returns a set of successfully deleted IDs in
		/// the response. Deletion is a cascading event such that all children of the
		/// targeted object are also deleted. For example, deleting a CatalogItem will
		/// also delete all of its [CatalogItemVariation](#type-catalogitemvariation)
		/// children.
		/// 
		/// `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted
		/// IDs can be deleted. The response will only include IDs that were
		/// actually deleted.
		/// BatchDeleteCatalogObjects v2/catalog/batch-delete
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchDeleteCatalogObjectsResponse> BatchDeleteCatalogObjectsAsync(BatchDeleteCatalogObjectsRequest requestBody)
		{
			var requestUri = "v2/catalog/batch-delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeleteCatalogObjectsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BatchRetrieveCatalogObjects
		/// Returns a set of objects based on the provided ID.
		/// Each [CatalogItem](#type-catalogitem) returned in the set includes all of its
		/// child information including: all of its
		/// [CatalogItemVariation](#type-catalogitemvariation) objects, references to
		/// its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of
		/// any [CatalogTax](#type-catalogtax) objects that apply to it.
		/// BatchRetrieveCatalogObjects v2/catalog/batch-retrieve
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchRetrieveCatalogObjectsResponse> BatchRetrieveCatalogObjectsAsync(BatchRetrieveCatalogObjectsRequest requestBody)
		{
			var requestUri = "v2/catalog/batch-retrieve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchRetrieveCatalogObjectsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// BatchUpsertCatalogObjects
		/// Creates or updates up to 10,000 target objects based on the provided
		/// list of objects. The target objects are grouped into batches and each batch is
		/// inserted/updated in an all-or-nothing manner. If an object within a batch is
		/// malformed in some way, or violates a database constraint, the entire batch
		/// containing that item will be disregarded. However, other batches in the same
		/// request may still succeed. Each batch may contain up to 1,000 objects, and
		/// batches will be processed in order as long as the total object count for the
		/// request (items, variations, modifier lists, discounts, and taxes) is no more
		/// than 10,000.
		/// BatchUpsertCatalogObjects v2/catalog/batch-upsert
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<BatchUpsertCatalogObjectsResponse> BatchUpsertCatalogObjectsAsync(BatchUpsertCatalogObjectsRequest requestBody)
		{
			var requestUri = "v2/catalog/batch-upsert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpsertCatalogObjectsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CatalogInfo
		/// Returns information about the Square Catalog API, such as batch size
		/// limits for `BatchUpsertCatalogObjects`.
		/// CatalogInfo v2/catalog/info
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CatalogInfoResponse> CatalogInfoAsync()
		{
			var requestUri = "v2/catalog/info";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CatalogInfoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListCatalog
		/// Returns a list of [CatalogObject](#type-catalogobject)s that includes
		/// all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem)
		/// and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter
		/// is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types:
		/// `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
		/// ListCatalog v2/catalog/list
		/// </summary>
		/// <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request.
		///See [Paginating results](#paginatingresults) for more information.</param>
		/// <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example
		///`ITEM,ITEM_VARIATION,CATEGORY`.
		///
		///The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype)
		///enumeration, namely `"ITEM"`, `"ITEM_VARIATION"`, `"CATEGORY"`, `"DISCOUNT"`, `"TAX"`,
		///`"MODIFIER"`, or `"MODIFIER_LIST"`.</param>
		/// <returns>Success</returns>
		public async Task<ListCatalogResponse> ListCatalogAsync(string cursor, string types)
		{
			var requestUri = "v2/catalog/list?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&types=" + (types==null? "" : System.Uri.EscapeDataString(types));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCatalogResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpsertCatalogObject
		/// Creates or updates the target [CatalogObject](#type-catalogobject).
		/// UpsertCatalogObject v2/catalog/object
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpsertCatalogObjectResponse> UpsertCatalogObjectAsync(UpsertCatalogObjectRequest requestBody)
		{
			var requestUri = "v2/catalog/object";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpsertCatalogObjectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveCatalogObject
		/// Returns a single [CatalogItem](#type-catalogitem) as a
		/// [CatalogObject](#type-catalogobject) based on the provided ID. The returned
		/// object includes all of the relevant [CatalogItem](#type-catalogitem)
		/// information including: [CatalogItemVariation](#type-catalogitemvariation)
		/// children, references to its
		/// [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of
		/// any [CatalogTax](#type-catalogtax) objects that apply to it.
		/// RetrieveCatalogObject v2/catalog/object/{object_id}
		/// </summary>
		/// <param name="object_id">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
		/// <param name="include_related_objects">If `true`, the response will include additional objects that are related to the
		///requested object, as follows:
		///
		///If the `object` field of the response contains a [CatalogItem](#type-catalogitem),
		///its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and
		///[CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the
		///response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation),
		///its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of
		///the response.
		///
		///Default value: `false`</param>
		/// <returns>Success</returns>
		public async Task<RetrieveCatalogObjectResponse> RetrieveCatalogObjectAsync(string object_id, bool include_related_objects)
		{
			var requestUri = "v2/catalog/object/"+ (object_id==null? "" : System.Uri.EscapeDataString(object_id))+"&include_related_objects="+include_related_objects;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveCatalogObjectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteCatalogObject
		/// Deletes a single [CatalogObject](#type-catalogobject) based on the
		/// provided ID and returns the set of successfully deleted IDs in the response.
		/// Deletion is a cascading event such that all children of the targeted object
		/// are also deleted. For example, deleting a [CatalogItem](#type-catalogitem)
		/// will also delete all of its
		/// [CatalogItemVariation](#type-catalogitemvariation) children.
		/// DeleteCatalogObject v2/catalog/object/{object_id}
		/// </summary>
		/// <param name="object_id">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other
		///objects in the graph that depend on that object will be deleted as well (for example, deleting a
		///[CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
		/// <returns>Success</returns>
		public async Task<DeleteCatalogObjectResponse> DeleteCatalogObjectAsync(string object_id)
		{
			var requestUri = "v2/catalog/object/"+ (object_id==null? "" : System.Uri.EscapeDataString(object_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCatalogObjectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SearchCatalogObjects
		/// Queries the targeted catalog using a variety of query types
		/// ([CatalogQuerySortedAttribute](#type-catalogquerysortedattribute),
		/// ([CatalogQueryExact](#type-catalogqueryexact),
		/// ([CatalogQueryRange](#type-catalogqueryrange),
		/// ([CatalogQueryText](#type-catalogquerytext),
		/// ([CatalogQueryItemsForTax](#type-catalogqueryitemsfortax),
		/// ([CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist)).
		/// SearchCatalogObjects v2/catalog/search
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<SearchCatalogObjectsResponse> SearchCatalogObjectsAsync(SearchCatalogObjectsRequest requestBody)
		{
			var requestUri = "v2/catalog/search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchCatalogObjectsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// UpdateItemModifierLists
		/// Updates the [CatalogModifierList](#type-catalogmodifierlist) objects
		/// that apply to the targeted [CatalogItem](#type-catalogitem) without having
		/// to perform an upsert on the entire item.
		/// UpdateItemModifierLists v2/catalog/update-item-modifier-lists
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateItemModifierListsResponse> UpdateItemModifierListsAsync(UpdateItemModifierListsRequest requestBody)
		{
			var requestUri = "v2/catalog/update-item-modifier-lists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateItemModifierListsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// UpdateItemTaxes
		/// Updates the [CatalogTax](#type-catalogtax) objects that apply to the
		/// targeted [CatalogItem](#type-catalogitem) without having to perform an
		/// upsert on the entire item.
		/// UpdateItemTaxes v2/catalog/update-item-taxes
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateItemTaxesResponse> UpdateItemTaxesAsync(UpdateItemTaxesRequest requestBody)
		{
			var requestUri = "v2/catalog/update-item-taxes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateItemTaxesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListCustomers
		/// Lists a business's customers.
		/// ListCustomers v2/customers
		/// </summary>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](#paginatingresults) for more information.</param>
		/// <returns>Success</returns>
		public async Task<ListCustomersResponse> ListCustomersAsync(string cursor)
		{
			var requestUri = "v2/customers?cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCustomersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateCustomer
		/// Creates a new customer for a business, which can have associated cards on file.
		/// 
		/// You must provide __at least one__ of the following values in your request to this
		/// endpoint:
		/// 
		/// - `given_name`
		/// - `family_name`
		/// - `company_name`
		/// - `email_address`
		/// - `phone_number`
		/// 
		/// This endpoint does not accept an idempotency key. If you accidentally create
		/// a duplicate customer, you can delete it with the
		/// [DeleteCustomer](#endpoint-deletecustomer) endpoint.
		/// CreateCustomer v2/customers
		/// </summary>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateCustomerResponse> CreateCustomerAsync(CreateCustomerRequest requestBody)
		{
			var requestUri = "v2/customers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveCustomer
		/// Returns details for a single customer.
		/// RetrieveCustomer v2/customers/{customer_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveCustomerResponse> RetrieveCustomerAsync(string customer_id)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UpdateCustomer
		/// Updates the details of an existing customer.
		/// The ID of the customer may change if the customer has been merged into another customer.
		/// 
		/// You cannot edit a customer's cards on file with this endpoint. To make changes
		/// to a card on file, you must delete the existing card on file with the
		/// [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the
		/// [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
		/// UpdateCustomer v2/customers/{customer_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer to update.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<UpdateCustomerResponse> UpdateCustomerAsync(string customer_id, UpdateCustomerRequest requestBody)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteCustomer
		/// Deletes a customer from a business, along with any linked cards on file.
		/// DeleteCustomer v2/customers/{customer_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteCustomerResponse> DeleteCustomerAsync(string customer_id)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCustomerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateCustomerCard
		/// Adds a card on file to an existing customer. In the United States
		/// Square takes care of automatically updating any cards on file that might
		/// have expired since you first attached them to a customer.
		/// CreateCustomerCard v2/customers/{customer_id}/cards
		/// </summary>
		/// <param name="customer_id">The ID of the customer to link the card on file to.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateCustomerCardResponse> CreateCustomerCardAsync(string customer_id, CreateCustomerCardRequest requestBody)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id))+"/cards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCustomerCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DeleteCustomerCard
		/// Removes a card on file from a customer.
		/// DeleteCustomerCard v2/customers/{customer_id}/cards/{card_id}
		/// </summary>
		/// <param name="customer_id">The ID of the customer that the card on file belongs to.</param>
		/// <param name="card_id">The ID of the card on file to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteCustomerCardResponse> DeleteCustomerCardAsync(string customer_id, string card_id)
		{
			var requestUri = "v2/customers/"+ (customer_id==null? "" : System.Uri.EscapeDataString(customer_id))+"/cards/"+ (card_id==null? "" : System.Uri.EscapeDataString(card_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCustomerCardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListLocations
		/// Provides the details for all of a business's locations.
		/// 
		/// Most other Connect API endpoints have a required `location_id` path parameter.
		/// The `id` field of the [`Location`](#type-location) objects returned by this
		/// endpoint correspond to that `location_id` parameter.
		/// LocationsGet v2/locations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListLocationsResponse> LocationsGetAsync()
		{
			var requestUri = "v2/locations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateCheckout
		/// Creates a [Checkout](#type-checkout) response that links a
		/// `checkoutId` and `checkout_page_url` that customers can be directed to in
		/// order to provide their payment information using a payment processing
		/// workflow hosted on connect.squareup.com.
		/// CreateCheckout v2/locations/{location_id}/checkouts
		/// </summary>
		/// <param name="location_id">The ID of the business location to associate the checkout with.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateCheckoutResponse> CreateCheckoutAsync(string location_id, CreateCheckoutRequest requestBody)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/checkouts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCheckoutResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ListRefunds
		/// Lists refunds for one of a business's locations.
		/// 
		/// Refunds with a `status` of `PENDING` are not currently included in this
		/// endpoint's response.
		/// 
		/// Max results per [page](#paginatingresults): 50
		/// TransactionsGetByLocation_idAndBegin_timeAndEnd_timeAndSort_orderAndCursor v2/locations/{location_id}/refunds
		/// </summary>
		/// <param name="location_id">The ID of the location to list refunds for.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time.</param>
		/// <param name="sort_order">The order in which results are listed in the response (`ASC` for
		///oldest first, `DESC` for newest first).
		///
		///Default value: `DESC`</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](#paginatingresults) for more information.</param>
		/// <returns>Success</returns>
		public async Task<ListRefundsResponse> TransactionsGetByLocation_idAndBegin_timeAndEnd_timeAndSort_orderAndCursorAsync(string location_id, string begin_time, string end_time, CatalogQuerySortedAttributeSort_order sort_order, string cursor)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/refunds&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&sort_order=" + sort_order+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRefundsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTransactions
		/// Lists transactions for a particular location.
		/// 
		/// Max results per [page](#paginatingresults): 50
		/// ListTransactions v2/locations/{location_id}/transactions
		/// </summary>
		/// <param name="location_id">The ID of the location to list transactions for.</param>
		/// <param name="begin_time">The beginning of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time minus one year.</param>
		/// <param name="end_time">The end of the requested reporting period, in RFC 3339 format.
		///
		///See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.
		///
		///Default value: The current time.</param>
		/// <param name="sort_order">The order in which results are listed in the response (`ASC` for
		///oldest first, `DESC` for newest first).
		///
		///Default value: `DESC`</param>
		/// <param name="cursor">A pagination cursor returned by a previous call to this endpoint.
		///Provide this to retrieve the next set of results for your original query.
		///
		///See [Paginating results](#paginatingresults) for more information.</param>
		/// <returns>Success</returns>
		public async Task<ListTransactionsResponse> ListTransactionsAsync(string location_id, string begin_time, string end_time, CatalogQuerySortedAttributeSort_order sort_order, string cursor)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions&begin_time=" + (begin_time==null? "" : System.Uri.EscapeDataString(begin_time))+"&end_time=" + (end_time==null? "" : System.Uri.EscapeDataString(end_time))+"&sort_order=" + sort_order+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTransactionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charge
		/// Charges a card represented by a card nonce or a customer's card on file.
		/// 
		/// Your request to this endpoint must include _either_:
		/// 
		/// - A value for the `card_nonce` parameter (to charge a card nonce generated
		/// with the `SqPaymentForm`)
		/// - Values for the `customer_card_id` and `customer_id` parameters (to charge
		/// a customer's card on file)
		/// 
		/// In order for an e-commerce payment to potentially qualify for
		/// [Square chargeback protection](https://squareup.com/help/article/5394), you
		/// _must_ provide values for the following parameters in your request:
		/// 
		/// - `buyer_email_address`
		/// - At least one of `billing_address` or `shipping_address`
		/// 
		/// When this response is returned, the amount of Square's processing fee might not yet be
		/// calculated. To obtain the processing fee, wait about ten seconds and call
		/// [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money`
		/// field of each [Tender included](#type-tender) in the transaction.
		/// Charge v2/locations/{location_id}/transactions
		/// </summary>
		/// <param name="location_id">The ID of the location to associate the created transaction with.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<ChargeResponse> ChargeAsync(string location_id, ChargeRequest requestBody)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// RetrieveTransaction
		/// Retrieves details for a single transaction.
		/// RetrieveTransaction v2/locations/{location_id}/transactions/{transaction_id}
		/// </summary>
		/// <param name="location_id">The ID of the transaction's associated location.</param>
		/// <param name="transaction_id">The ID of the transaction to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<RetrieveTransactionResponse> RetrieveTransactionAsync(string location_id, string transaction_id)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CaptureTransaction
		/// Captures a transaction that was created with the [Charge](#endpoint-charge)
		/// endpoint with a `delay_capture` value of `true`.
		/// 
		/// See [Delayed capture transactions](/articles/delayed-capture-transactions/)
		/// for more information.
		/// CaptureTransaction v2/locations/{location_id}/transactions/{transaction_id}/capture
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CaptureTransactionResponse> CaptureTransactionAsync(string location_id, string transaction_id)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id))+"/capture";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaptureTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateRefund
		/// Initiates a refund for a previously charged tender.
		/// 
		/// You must issue a refund within 120 days of the associated payment. See
		/// (this article)[https://squareup.com/help/us/en/article/5060] for more information
		/// on refund behavior.
		/// TransactionsPostByLocation_idAndTransaction_id v2/locations/{location_id}/transactions/{transaction_id}/refund
		/// </summary>
		/// <param name="location_id">The ID of the original transaction's associated location.</param>
		/// <param name="transaction_id">The ID of the original transaction that includes the tender to refund.</param>
		/// <param name="requestBody">An object containing the fields to POST for the request.
		///
		///See the corresponding object definition for field details.</param>
		/// <returns>Success</returns>
		public async Task<CreateRefundResponse> TransactionsPostByLocation_idAndTransaction_idAsync(string location_id, string transaction_id, CreateRefundRequest requestBody)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id))+"/refund";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRefundResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// VoidTransaction
		/// Cancels a transaction that was created with the [Charge](#endpoint-charge)
		/// endpoint with a `delay_capture` value of `true`.
		/// 
		/// See [Delayed capture transactions](/articles/delayed-capture-transactions/)
		/// for more information.
		/// VoidTransaction v2/locations/{location_id}/transactions/{transaction_id}/void
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VoidTransactionResponse> VoidTransactionAsync(string location_id, string transaction_id)
		{
			var requestUri = "v2/locations/"+ (location_id==null? "" : System.Uri.EscapeDataString(location_id))+"/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id))+"/void";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VoidTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ListEmployeesOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	public enum ListSettlementsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
