//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BasicAuthentication : HttpAuthentication
	{
		
		/// <summary>
		/// Gets or sets the password, return value will always be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Gets or sets the username.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClientCertAuthentication : HttpAuthentication
	{
		
		/// <summary>
		/// Gets or sets the certificate expiration date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateExpirationDate")]
		public System.Nullable<System.DateTimeOffset> CertificateExpirationDate { get; set; }
		
		/// <summary>
		/// Gets or sets the certificate subject name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateSubjectName")]
		public string CertificateSubjectName { get; set; }
		
		/// <summary>
		/// Gets or sets the certificate thumbprint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateThumbprint")]
		public string CertificateThumbprint { get; set; }
		
		/// <summary>
		/// Gets or sets the certificate password, return value will always be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Gets or sets the pfx certificate. Accepts certification in base64 encoding, return value will always be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pfx")]
		public string Pfx { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HttpAuthentication
	{
		
		/// <summary>
		/// Gets or sets the HTTP authentication type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public HttpAuthenticationType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum HttpAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientCertificate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActiveDirectoryOAuth = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HttpRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public HttpAuthentication Authentication { get; set; }
		
		/// <summary>
		/// Gets or sets the request body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Gets or sets the headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
		
		/// <summary>
		/// Gets or sets the method of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Gets or sets the URI of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorAction")]
		public JobErrorAction ErrorAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queueMessage")]
		public StorageQueueMessage QueueMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public HttpRequest Request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retryPolicy")]
		public RetryPolicy RetryPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceBusQueueMessage")]
		public ServiceBusQueueMessage ServiceBusQueueMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceBusTopicMessage")]
		public ServiceBusTopicMessage ServiceBusTopicMessage { get; set; }
		
		/// <summary>
		/// Gets or sets the job action type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<JobActionType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Http = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Https = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StorageQueue = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceBusQueue = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceBusTopic = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobCollectionDefinition
	{
		
		/// <summary>
		/// Gets the job collection resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Gets or sets the storage account location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Gets or sets the job collection resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobCollectionProperties Properties { get; set; }
		
		/// <summary>
		/// Gets or sets the tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Gets the job collection resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobCollectionListResult
	{
		
		/// <summary>
		/// Gets or sets the URL to get the next set of job collections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets the job collections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobCollectionDefinition[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobCollectionProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public JobCollectionQuota Quota { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// Gets or sets the state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<JobCollectionPropertiesState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobCollectionPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobCollectionQuota
	{
		
		/// <summary>
		/// Gets or set the maximum job count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxJobCount")]
		public System.Nullable<System.Int32> MaxJobCount { get; set; }
		
		/// <summary>
		/// Gets or sets the maximum job occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxJobOccurrence")]
		public System.Nullable<System.Int32> MaxJobOccurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxRecurrence")]
		public JobMaxRecurrence MaxRecurrence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobDefinition
	{
		
		/// <summary>
		/// Gets the job resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Gets the job resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobProperties Properties { get; set; }
		
		/// <summary>
		/// Gets the job resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobErrorAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="queueMessage")]
		public StorageQueueMessage QueueMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public HttpRequest Request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retryPolicy")]
		public RetryPolicy RetryPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceBusQueueMessage")]
		public ServiceBusQueueMessage ServiceBusQueueMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceBusTopicMessage")]
		public ServiceBusTopicMessage ServiceBusTopicMessage { get; set; }
		
		/// <summary>
		/// Gets or sets the job error action type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public JobActionType Type { get; set; }
	}
	
	/// <summary>
	/// Gets the job execution status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Postponed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobHistoryDefinition
	{
		
		/// <summary>
		/// Gets the job history identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Gets the job history name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobHistoryDefinitionProperties Properties { get; set; }
		
		/// <summary>
		/// Gets the job history resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobHistoryDefinitionProperties
	{
		
		/// <summary>
		/// Gets the job history action name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public System.Nullable<JobHistoryDefinitionPropertiesActionName> ActionName { get; set; }
		
		/// <summary>
		/// Gets the end time for this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Gets the expected execution time for this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedExecutionTime")]
		public System.Nullable<System.DateTimeOffset> ExpectedExecutionTime { get; set; }
		
		/// <summary>
		/// Gets the message for the job history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Gets the repeat count for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatCount")]
		public System.Nullable<System.Int32> RepeatCount { get; set; }
		
		/// <summary>
		/// Gets the retry count for job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public System.Nullable<System.Int32> RetryCount { get; set; }
		
		/// <summary>
		/// Gets the start time for this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Gets the job execution status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobExecutionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobHistoryDefinitionPropertiesActionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MainAction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorAction = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobHistoryFilter
	{
		
		/// <summary>
		/// Gets the job execution status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobExecutionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobHistoryListResult
	{
		
		/// <summary>
		/// Gets or sets the URL to get the next set of job histories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets or sets the job histories under job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobHistoryDefinition[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobListResult
	{
		
		/// <summary>
		/// Gets or sets the URL to get the next set of jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets or sets all jobs under job collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobDefinition[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobMaxRecurrence
	{
		
		/// <summary>
		/// Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<JobMaxRecurrenceFrequency> Frequency { get; set; }
		
		/// <summary>
		/// Gets or sets the interval between retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobMaxRecurrenceFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public JobAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public JobRecurrence Recurrence { get; set; }
		
		/// <summary>
		/// Gets or sets the job start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Gets or set the job state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<JobPropertiesState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Faulted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobRecurrence
	{
		
		/// <summary>
		/// Gets or sets the maximum number of times that the job should run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Gets or sets the time at which the job will complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public JobMaxRecurrenceFrequency Frequency { get; set; }
		
		/// <summary>
		/// Gets or sets the interval between retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public JobRecurrenceSchedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobRecurrenceSchedule
	{
		
		/// <summary>
		/// Gets or sets the hours of the day that the job should execute at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public int[] Hours { get; set; }
		
		/// <summary>
		/// Gets or sets the minutes of the hour that the job should execute at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public int[] Minutes { get; set; }
		
		/// <summary>
		/// Gets or sets the days of the month that the job should execute on. Must be between 1 and 31.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthDays")]
		public int[] MonthDays { get; set; }
		
		/// <summary>
		/// Gets or sets the occurrences of days within a month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyOccurrences")]
		public JobRecurrenceScheduleMonthlyOccurrence[] MonthlyOccurrences { get; set; }
		
		/// <summary>
		/// Gets or sets the days of the week that the job should execute on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekDays")]
		public string[] WeekDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobRecurrenceScheduleMonthlyOccurrence
	{
		
		/// <summary>
		/// Gets or sets the occurrence. Must be between -5 and 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Occurrence { get; set; }
		
		/// <summary>
		/// Gets or sets the day. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<JobRecurrenceScheduleMonthlyOccurrenceDay> Day { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobRecurrenceScheduleMonthlyOccurrenceDay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tuesday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wednesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thursday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Friday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Saturday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sunday = 6,
	}
	
	/// <summary>
	/// Gets or set the job state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Faulted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStateFilter
	{
		
		/// <summary>
		/// Gets or set the job state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public JobPropertiesState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStatus
	{
		
		/// <summary>
		/// Gets the number of times this job has executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionCount")]
		public System.Nullable<System.Int32> ExecutionCount { get; set; }
		
		/// <summary>
		/// Gets the number of times this job has failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureCount")]
		public System.Nullable<System.Int32> FailureCount { get; set; }
		
		/// <summary>
		/// Gets the number of faulted occurrences (occurrences that were retried and failed as many times as the retry policy states).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faultedCount")]
		public System.Nullable<System.Int32> FaultedCount { get; set; }
		
		/// <summary>
		/// Gets the time the last occurrence executed in ISO-8601 format.  Could be empty if job has not run yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastExecutionTime")]
		public System.Nullable<System.DateTimeOffset> LastExecutionTime { get; set; }
		
		/// <summary>
		/// Gets the time of the next occurrence in ISO-8601 format. Could be empty if the job is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextExecutionTime")]
		public System.Nullable<System.DateTimeOffset> NextExecutionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OAuthAuthentication : HttpAuthentication
	{
		
		/// <summary>
		/// Gets or sets the audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audience")]
		public string Audience { get; set; }
		
		/// <summary>
		/// Gets or sets the client identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Gets or sets the secret, return value will always be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		/// <summary>
		/// Gets or sets the tenant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenant")]
		public string Tenant { get; set; }
	}
	
	/// <summary>
	/// Gets or sets the frequency of recurrence (minute, hour, day, week, month).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecurrenceFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetryPolicy
	{
		
		/// <summary>
		/// Gets or sets the number of times a retry should be attempted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryCount")]
		public System.Nullable<System.Int32> RetryCount { get; set; }
		
		/// <summary>
		/// Gets or sets the retry interval between retries, specify duration in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryInterval")]
		public string RetryInterval { get; set; }
		
		/// <summary>
		/// Gets or sets the retry strategy to be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryType")]
		public System.Nullable<RetryPolicyRetryType> RetryType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RetryPolicyRetryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fixed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusAuthentication
	{
		
		/// <summary>
		/// Gets or sets the SAS key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasKey")]
		public string SasKey { get; set; }
		
		/// <summary>
		/// Gets or sets the SAS key name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasKeyName")]
		public string SasKeyName { get; set; }
		
		/// <summary>
		/// Gets or sets the authentication type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ServiceBusAuthenticationType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServiceBusAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedAccessKey = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusBrokeredMessageProperties
	{
		
		/// <summary>
		/// Gets or sets the content type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Gets or sets the correlation ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// Gets or sets the force persistence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forcePersistence")]
		public System.Nullable<System.Boolean> ForcePersistence { get; set; }
		
		/// <summary>
		/// Gets or sets the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Gets or sets the message ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// Gets or sets the partition key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionKey")]
		public string PartitionKey { get; set; }
		
		/// <summary>
		/// Gets or sets the reply to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyTo")]
		public string ReplyTo { get; set; }
		
		/// <summary>
		/// Gets or sets the reply to session ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyToSessionId")]
		public string ReplyToSessionId { get; set; }
		
		/// <summary>
		/// Gets or sets the scheduled enqueue time UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledEnqueueTimeUtc")]
		public System.Nullable<System.DateTimeOffset> ScheduledEnqueueTimeUtc { get; set; }
		
		/// <summary>
		/// Gets or sets the session ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Gets or sets the time to live.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeToLive")]
		public string TimeToLive { get; set; }
		
		/// <summary>
		/// Gets or sets the to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Gets or sets the via partition key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viaPartitionKey")]
		public string ViaPartitionKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public ServiceBusAuthentication Authentication { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="brokeredMessageProperties")]
		public ServiceBusBrokeredMessageProperties BrokeredMessageProperties { get; set; }
		
		/// <summary>
		/// Gets or sets the custom message properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMessageProperties")]
		public System.Collections.Generic.Dictionary<string, string> CustomMessageProperties { get; set; }
		
		/// <summary>
		/// Gets or sets the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Gets or sets the namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// Gets or sets the transport type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportType")]
		public System.Nullable<ServiceBusMessageTransportType> TransportType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServiceBusMessageTransportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetMessaging = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMQP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusQueueMessage : ServiceBusMessage
	{
		
		/// <summary>
		/// Gets or sets the queue name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueName")]
		public string QueueName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceBusTopicMessage : ServiceBusMessage
	{
		
		/// <summary>
		/// Gets or sets the topic path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicPath")]
		public string TopicPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// Gets or set the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<SkuName> Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P10Premium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P20Premium = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageQueueMessage
	{
		
		/// <summary>
		/// Gets or sets the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Gets or sets the queue name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueName")]
		public string QueueName { get; set; }
		
		/// <summary>
		/// Gets or sets the SAS key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasToken")]
		public string SasToken { get; set; }
		
		/// <summary>
		/// Gets or sets the storage account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccount")]
		public string StorageAccount { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets all job collections under specified subscription.
		/// JobCollections_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Scheduler/jobCollections
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The job collections have been successfully returned.</returns>
		public async Task<JobCollectionListResult> JobCollections_ListBySubscriptionAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Scheduler/jobCollections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobCollectionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all job collections under specified resource group.
		/// JobCollections_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The job collections have been successfully returned.</returns>
		public async Task<JobCollectionListResult> JobCollections_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobCollectionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a job collection.
		/// JobCollections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The job collection has been successfully returned.</returns>
		public async Task<JobCollectionDefinition> JobCollections_GetAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobCollectionDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provisions a new job collection or updates an existing job collection.
		/// JobCollections_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The job collection definition.</param>
		/// <returns>The job collection has been successfully updated.</returns>
		public async Task<JobCollectionDefinition> JobCollections_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string api_version, JobCollectionDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobCollectionDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a job collection.
		/// JobCollections_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The job collection has been successfully deleted.</returns>
		public async Task JobCollections_DeleteAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches an existing job collection.
		/// JobCollections_Patch subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The job collection definition.</param>
		/// <returns>The job collection has been successfully patched.</returns>
		public async Task<JobCollectionDefinition> JobCollections_PatchAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string api_version, JobCollectionDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobCollectionDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disables all of the jobs in the job collection.
		/// JobCollections_Disable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/disable
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>All of the jobs in the job collection have been successfully disabled.</returns>
		public async Task JobCollections_DisableAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"/disable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables all of the jobs in the job collection.
		/// JobCollections_Enable subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/enable
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>All of the jobs in the job collection have been successfully enabled.</returns>
		public async Task JobCollections_EnableAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"/enable&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all jobs under the specified job collection.
		/// Jobs_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">The number of jobs to request, in the of range of [1..100].
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="skip">The (0-based) index of the job history list from which to begin requesting entries.</param>
		/// <param name="filter">The filter to apply on the job state.</param>
		/// <returns>The job has been successfully returned.</returns>
		public async Task<JobListResult> Jobs_ListAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string api_version, int top, int skip, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"/jobs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$skip="+skip+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a job.
		/// Jobs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="jobName">The job name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The job has been successfully returned.</returns>
		public async Task<JobDefinition> Jobs_GetAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string jobName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provisions a new job or updates an existing job.
		/// Jobs_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="jobName">The job name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The job definition.</param>
		/// <returns>The job has been successfully updated.</returns>
		public async Task<JobDefinition> Jobs_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string jobName, string api_version, JobDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a job.
		/// Jobs_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="jobName">The job name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The job has been successfully deleted.</returns>
		public async Task Jobs_DeleteAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string jobName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches an existing job.
		/// Jobs_Patch subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="jobName">The job name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The job definition.</param>
		/// <returns>The job has been successfully patched.</returns>
		public async Task<JobDefinition> Jobs_PatchAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string jobName, string api_version, JobDefinition requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists job history.
		/// Jobs_ListJobHistory subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/history
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="jobName">The job name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="top">the number of job history to request, in the of range of [1..100].
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="skip">The (0-based) index of the job history list from which to begin requesting entries.</param>
		/// <param name="filter">The filter to apply on the job state.</param>
		/// <returns>The job histories have been successfully returned.</returns>
		public async Task<JobHistoryListResult> Jobs_ListJobHistoryAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string jobName, string api_version, int top, int skip, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/history&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$top="+top+"&$skip="+skip+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JobHistoryListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs a job.
		/// Jobs_Run subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/run
		/// </summary>
		/// <param name="subscriptionId">The subscription id.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="jobCollectionName">The job collection name.</param>
		/// <param name="jobName">The job name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The job has been successfully run.</returns>
		public async Task Jobs_RunAsync(string subscriptionId, string resourceGroupName, string jobCollectionName, string jobName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Scheduler/jobCollections/"+ (jobCollectionName==null? "" : System.Uri.EscapeDataString(jobCollectionName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/run&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
