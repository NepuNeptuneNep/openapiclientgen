//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Resource provider available operation model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableOperation
	{
		
		/// <summary>
		/// Resource provider available operation display model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public AvailableOperationDisplay Display { get; set; }
		
		/// <summary>
		/// Indicating whether the operation is a data action or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDataAction")]
		public System.Nullable<System.Boolean> IsDataAction { get; set; }
		
		/// <summary>
		/// {resourceProviderNamespace}/{resourceType}/{read|write|delete|action}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public System.Nullable<AvailableOperationOrigin> Origin { get; set; }
		
		/// <summary>
		/// Available operation display property service specification model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AvailableOperationDisplayPropertyServiceSpecification Properties { get; set; }
	}
	
	/// <summary>
	/// Resource provider available operation display model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableOperationDisplay
	{
		
		/// <summary>
		/// Description of the operation for display purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the operation for display purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Name of the provider for display purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Name of the resource type for display purposes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AvailableOperationOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user,system")]
		usersystem = 2,
	}
	
	/// <summary>
	/// Available operation display property service specification model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableOperationDisplayPropertyServiceSpecification
	{
		
		/// <summary>
		/// List of available operation display property service specification metrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceSpecification")]
		public AvailableOperationDisplayPropertyServiceSpecificationMetricsList ServiceSpecification { get; set; }
	}
	
	/// <summary>
	/// Available operation display property service specification metrics item
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableOperationDisplayPropertyServiceSpecificationMetricsItem
	{
		
		/// <summary>
		/// Metric's aggregation type for e.g. (Average, Total)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public AvailableOperationDisplayPropertyServiceSpecificationMetricsItemAggregationType AggregationType { get; set; }
		
		/// <summary>
		/// Metric's description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayDescription")]
		public string DisplayDescription { get; set; }
		
		/// <summary>
		/// Human readable metric's name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Metric's name/id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Metric's unit
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AvailableOperationDisplayPropertyServiceSpecificationMetricsItemAggregationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 1,
	}
	
	/// <summary>
	/// List of available operation display property service specification metrics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableOperationDisplayPropertyServiceSpecificationMetricsList
	{
		
		/// <summary>
		/// Metric specifications of operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricSpecifications")]
		public AvailableOperationDisplayPropertyServiceSpecificationMetricsItem[] MetricSpecifications { get; set; }
	}
	
	/// <summary>
	/// List of available operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailableOperationsListResponse
	{
		
		/// <summary>
		/// Link for next list of available operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Returns a list of available operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AvailableOperation[] Value { get; set; }
	}
	
	/// <summary>
	/// General error model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CSRPError
	{
		
		/// <summary>
		/// Error properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CSRPErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// Error properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CSRPErrorBody
	{
		
		/// <summary>
		/// Error's code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error's details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CSRPErrorBody[] Details { get; set; }
		
		/// <summary>
		/// Error's message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Error's target
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Host name model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomizationHostName
	{
		
		/// <summary>
		/// Hostname
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of host name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CustomizationHostNameType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomizationHostNameType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_DEFINED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFIX_BASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_MACHINE_NAME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_NAME = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomizationIPAddress
	{
		
		/// <summary>
		/// Argument when Custom ip type is selected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="argument")]
		public string Argument { get; set; }
		
		/// <summary>
		/// Defined Ip Address when Fixed ip type is selected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Customization Specification ip type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CustomizationIPAddressType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomizationIPAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DHCP_IP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_IP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_DEFINED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomizationIPSettings
	{
		
		/// <summary>
		/// The list of gateways
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateway")]
		public string[] Gateway { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public CustomizationIPAddress Ip { get; set; }
		
		/// <summary>
		/// Adapter subnet mask
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetMask")]
		public string SubnetMask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomizationIdentity
	{
		
		/// <summary>
		/// Windows Text Identity. Prepared data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Host name model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostName")]
		public CustomizationHostName HostName { get; set; }
		
		/// <summary>
		/// Identity type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CustomizationIdentityType> Type { get; set; }
		
		/// <summary>
		/// Windows Identity. User data customization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userData")]
		public CustomizationIdentityUserData UserData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomizationIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS_TEXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX = 2,
	}
	
	public class CustomizationIdentityUserData
	{
		
		/// <summary>
		/// Is password predefined in customization policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPasswordPredefined")]
		public System.Nullable<System.Boolean> IsPasswordPredefined { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomizationNicSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="adapter")]
		public CustomizationIPSettings Adapter { get; set; }
		
		/// <summary>
		/// NIC mac address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
	}
	
	/// <summary>
	/// List of customization polices response model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomizationPoliciesListResponse
	{
		
		/// <summary>
		/// Link for next list of the Customization policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of the customization policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CustomizationPolicy[] Value { get; set; }
	}
	
	/// <summary>
	/// The virtual machine customization policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomizationPolicy
	{
		
		/// <summary>
		/// Customization policy azure id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Customization policy name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties of Customization policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CustomizationPolicyProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The properties of Customization policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomizationPolicyProperties
	{
		
		/// <summary>
		/// Policy description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Private cloud id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCloudId")]
		public string PrivateCloudId { get; set; }
		
		/// <summary>
		/// The specification for Customization Policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specification")]
		public CustomizationSpecification Specification { get; set; }
		
		/// <summary>
		/// The type of customization (Linux or Windows)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CustomizationPolicyPropertiesType> Type { get; set; }
		
		/// <summary>
		/// Policy version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The specification for Customization Policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomizationSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public CustomizationIdentity Identity { get; set; }
		
		/// <summary>
		/// Network interface settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nicSettings")]
		public CustomizationNicSetting[] NicSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CustomizationPolicyPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 1,
	}
	
	/// <summary>
	/// Dedicated cloud node model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DedicatedCloudNode
	{
		
		/// <summary>
		/// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/dedicatedCloudNodes/{dedicatedCloudNodeName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure region
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// {dedicatedCloudNodeName}
		/// Pattern: ^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of dedicated cloud node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DedicatedCloudNodeProperties Properties { get; set; }
		
		/// <summary>
		/// The purchase SKU for CloudSimple paid resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// Tags model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// {resourceProviderNamespace}/{resourceType}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of dedicated nodes response model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DedicatedCloudNodeListResponse
	{
		
		/// <summary>
		/// Link for next list of DedicatedCloudNode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the DedicatedCloudNode list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DedicatedCloudNode[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of dedicated cloud node
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DedicatedCloudNodeProperties
	{
		
		/// <summary>
		/// Availability Zone id, e.g. "az1"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		/// <summary>
		/// Availability Zone name, e.g. "Availability Zone 1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneName")]
		public string AvailabilityZoneName { get; set; }
		
		/// <summary>
		/// VMWare Cloud Rack Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudRackName")]
		public string CloudRackName { get; set; }
		
		/// <summary>
		/// date time the resource was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public object Created { get; set; }
		
		/// <summary>
		/// count of nodes to create
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodesCount")]
		public int NodesCount { get; set; }
		
		/// <summary>
		/// Placement Group id, e.g. "n1"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="placementGroupId")]
		public string PlacementGroupId { get; set; }
		
		/// <summary>
		/// Placement Name, e.g. "Placement Group 1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementGroupName")]
		public string PlacementGroupName { get; set; }
		
		/// <summary>
		/// Private Cloud Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCloudId")]
		public string PrivateCloudId { get; set; }
		
		/// <summary>
		/// Resource Pool Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCloudName")]
		public string PrivateCloudName { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// purchase id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchaseId")]
		public string PurchaseId { get; set; }
		
		/// <summary>
		/// The purchase SKU for CloudSimple paid resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuDescription")]
		public SkuDescription SkuDescription { get; set; }
		
		/// <summary>
		/// Node status, indicates is private cloud set up on this node or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<DedicatedCloudNodePropertiesStatus> Status { get; set; }
		
		/// <summary>
		/// VMWare Cluster Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmwareClusterName")]
		public string VmwareClusterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DedicatedCloudNodePropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unused = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		used = 1,
	}
	
	/// <summary>
	/// Dedicated cloud service model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DedicatedCloudService
	{
		
		/// <summary>
		/// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/dedicatedCloudServices/{dedicatedCloudServiceName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure region
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// {dedicatedCloudServiceName}
		/// Pattern: ^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of dedicated cloud service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DedicatedCloudServiceProperties Properties { get; set; }
		
		/// <summary>
		/// Tags model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// {resourceProviderNamespace}/{resourceType}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of dedicated cloud services
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DedicatedCloudServiceListResponse
	{
		
		/// <summary>
		/// Link for next list of DedicatedCloudNode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the DedicatedCloudService list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DedicatedCloudService[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of dedicated cloud service
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DedicatedCloudServiceProperties
	{
		
		/// <summary>
		/// gateway Subnet for the account. It will collect the subnet address and always treat it as /28
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gatewaySubnet")]
		public string GatewaySubnet { get; set; }
		
		/// <summary>
		/// indicates whether account onboarded or not in a given region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAccountOnboarded")]
		public System.Nullable<DedicatedCloudServicePropertiesIsAccountOnboarded> IsAccountOnboarded { get; set; }
		
		/// <summary>
		/// total nodes purchased
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public System.Nullable<System.Int32> Nodes { get; set; }
		
		/// <summary>
		/// link to a service management web portal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceURL")]
		public string ServiceURL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DedicatedCloudServicePropertiesIsAccountOnboarded
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notOnBoarded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		onBoarded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		onBoardingFailed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		onBoarding = 3,
	}
	
	/// <summary>
	/// Guest OS Customization properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GuestOSCustomization
	{
		
		/// <summary>
		/// List of dns servers to use
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsServers")]
		public string[] DnsServers { get; set; }
		
		/// <summary>
		/// Virtual Machine hostname
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostName")]
		public string HostName { get; set; }
		
		/// <summary>
		/// Password for login
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// id of customization policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyId")]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Username for login
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Guest OS nic customization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GuestOSNICCustomization
	{
		
		/// <summary>
		/// IP address allocation method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocation")]
		public System.Nullable<GuestOSNICCustomizationAllocation> Allocation { get; set; }
		
		/// <summary>
		/// List of dns servers to use
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsServers")]
		public string[] DnsServers { get; set; }
		
		/// <summary>
		/// Gateway addresses assigned to nic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateway")]
		public string[] Gateway { get; set; }
		
		/// <summary>
		/// Pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mask")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")]
		public string Mask { get; set; }
		
		/// <summary>
		/// Pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryWinsServer")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")]
		public string PrimaryWinsServer { get; set; }
		
		/// <summary>
		/// Pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryWinsServer")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")]
		public string SecondaryWinsServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GuestOSNICCustomizationAllocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="static")]
		_static = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamic = 1,
	}
	
	/// <summary>
	/// Operation error model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationError
	{
		
		/// <summary>
		/// Error's code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error's message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Operation status response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResource
	{
		
		/// <summary>
		/// End time of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Operation error model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public OperationError Error { get; set; }
		
		/// <summary>
		/// Operation Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Operation ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start time of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Operation status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// General patch payload modal
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PatchPayload
	{
		
		/// <summary>
		/// Tags model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Private cloud model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateCloud
	{
		
		/// <summary>
		/// Azure Id, e.g. "/subscriptions/4da99247-a172-4ed6-8ae9-ebed2d12f839/providers/Microsoft.VMwareCloudSimple/privateClouds/cloud123"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Location where private cloud created, e.g "westus"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Private cloud name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of private
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PrivateCloudProperties Properties { get; set; }
		
		/// <summary>
		/// Azure Resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PrivateCloudType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PrivateCloudType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.VMwareCloudSimple/privateClouds")]
		Microsoft_VMwareCloudSimple_privateClouds = 0,
	}
	
	/// <summary>
	/// List of private clouds
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateCloudList
	{
		
		/// <summary>
		/// Link for next list of Private Clouds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// the list of private clouds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PrivateCloud[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of private
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateCloudProperties
	{
		
		/// <summary>
		/// Availability Zone id, e.g. "az1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		/// <summary>
		/// Availability Zone name, e.g. "Availability Zone 1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneName")]
		public string AvailabilityZoneName { get; set; }
		
		/// <summary>
		/// Number of clusters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clustersNumber")]
		public System.Nullable<System.Int32> ClustersNumber { get; set; }
		
		/// <summary>
		/// User's emails who created cloud
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// When private cloud was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdOn")]
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		/// <summary>
		/// Array of DNS servers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsServers")]
		public string[] DnsServers { get; set; }
		
		/// <summary>
		/// Expiration date of PC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public string Expires { get; set; }
		
		/// <summary>
		/// Nsx Type, e.g. "Advanced"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nsxType")]
		public string NsxType { get; set; }
		
		/// <summary>
		/// Placement Group id, e.g. "n1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementGroupId")]
		public string PlacementGroupId { get; set; }
		
		/// <summary>
		/// Placement Group name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placementGroupName")]
		public string PlacementGroupName { get; set; }
		
		/// <summary>
		/// Id of a private cloud
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCloudId")]
		public string PrivateCloudId { get; set; }
		
		/// <summary>
		/// The list of Resource Pools
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePools")]
		public ResourcePool[] ResourcePools { get; set; }
		
		/// <summary>
		/// Private Cloud state, e.g. "operational"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Number of cores
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCpuCores")]
		public System.Nullable<System.Int32> TotalCpuCores { get; set; }
		
		/// <summary>
		/// Number of nodes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalNodes")]
		public System.Nullable<System.Int32> TotalNodes { get; set; }
		
		/// <summary>
		/// Memory size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRam")]
		public System.Nullable<System.Int32> TotalRam { get; set; }
		
		/// <summary>
		/// Disk space in TB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalStorage")]
		public System.Nullable<System.Double> TotalStorage { get; set; }
		
		/// <summary>
		/// Virtualization type e.g. "vSphere"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// e.g. "6.5u2"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vSphereVersion")]
		public string VSphereVersion { get; set; }
		
		/// <summary>
		/// FQDN for vcenter access
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcenterFqdn")]
		public string VcenterFqdn { get; set; }
		
		/// <summary>
		/// Vcenter ip address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcenterRefid")]
		public string VcenterRefid { get; set; }
		
		/// <summary>
		/// The list of Virtual Machine Templates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineTemplates")]
		public VirtualMachineTemplate[] VirtualMachineTemplates { get; set; }
		
		/// <summary>
		/// The list of Virtual Networks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworks")]
		public VirtualNetwork[] VirtualNetworks { get; set; }
		
		/// <summary>
		/// Is Vrops enabled/disabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vrOpsEnabled")]
		public System.Nullable<System.Boolean> VrOpsEnabled { get; set; }
	}
	
	/// <summary>
	/// Resource pool model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourcePool
	{
		
		/// <summary>
		/// resource pool id (privateCloudId:vsphereId)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// {ResourcePoolName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Private Cloud Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCloudId")]
		public string PrivateCloudId { get; set; }
		
		/// <summary>
		/// Properties of resource pool
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ResourcePoolProperties Properties { get; set; }
		
		/// <summary>
		/// {resourceProviderNamespace}/{resourceType}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Virtual machine template model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineTemplate
	{
		
		/// <summary>
		/// virtual machine template id (privateCloudId:vsphereId)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// {virtualMachineTemplateName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of virtual machine template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VirtualMachineTemplateProperties Properties { get; set; }
		
		/// <summary>
		/// {resourceProviderNamespace}/{resourceType}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Virtual network model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetwork
	{
		
		/// <summary>
		/// can be used in vm creation/deletion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignable")]
		public System.Nullable<System.Boolean> Assignable { get; set; }
		
		/// <summary>
		/// virtual network id (privateCloudId:vsphereId)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// {VirtualNetworkName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of virtual network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VirtualNetworkProperties Properties { get; set; }
		
		/// <summary>
		/// {resourceProviderNamespace}/{resourceType}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties of resource pool
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourcePoolProperties
	{
		
		/// <summary>
		/// Hierarchical resource pool name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
	}
	
	/// <summary>
	/// List of resource pools response model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourcePoolsListResponse
	{
		
		/// <summary>
		/// Link for next list of ResourcePoolsList
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the Resource pools list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ResourcePool[] Value { get; set; }
	}
	
	/// <summary>
	/// The purchase SKU for CloudSimple paid resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The capacity of the SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public string Capacity { get; set; }
		
		/// <summary>
		/// dedicatedCloudNode example: 8 x Ten-Core Intel® Xeon® Processor E5-2640 v4 2.40GHz 25MB Cache (90W); 12 x 64GB PC4-19200 2400MHz DDR4 ECC Registered DIMM, ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// If the service has different generations of hardware, for the same SKU, then that can be captured here
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The name of the SKU for VMWare CloudSimple Node
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tier of the SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// SKU availability model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuAvailability
	{
		
		/// <summary>
		/// CloudSimple Availability Zone id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dedicatedAvailabilityZoneId")]
		public string DedicatedAvailabilityZoneId { get; set; }
		
		/// <summary>
		/// CloudSimple Availability Zone Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dedicatedAvailabilityZoneName")]
		public string DedicatedAvailabilityZoneName { get; set; }
		
		/// <summary>
		/// CloudSimple Placement Group Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dedicatedPlacementGroupId")]
		public string DedicatedPlacementGroupId { get; set; }
		
		/// <summary>
		/// CloudSimple Placement Group name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dedicatedPlacementGroupName")]
		public string DedicatedPlacementGroupName { get; set; }
		
		/// <summary>
		/// indicates how many resources of a given SKU is available in a AZ->PG
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public int Limit { get; set; }
		
		/// <summary>
		/// resource type e.g. DedicatedCloudNodes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// sku id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuId")]
		public string SkuId { get; set; }
		
		/// <summary>
		/// sku name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
	}
	
	/// <summary>
	/// List of SKU availabilities
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuAvailabilityListResponse
	{
		
		/// <summary>
		/// Link for next list of DedicatedCloudNode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the DedicatedPlacementGroupSkuAvailability list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SkuAvailability[] Value { get; set; }
	}
	
	/// <summary>
	/// The purchase SKU for CloudSimple paid resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuDescription
	{
		
		/// <summary>
		/// SKU's id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// SKU's name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Tags model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Tags
	{
	}
	
	/// <summary>
	/// Usage model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Usage
	{
		
		/// <summary>
		/// The current usage value
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public int CurrentValue { get; set; } = 0;
		
		/// <summary>
		/// limit of a given sku in a region for a subscription. The maximum permitted value for the usage quota. If there is no limit, this value will be -1
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public int Limit { get; set; } = 0;
		
		/// <summary>
		/// User name model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public UsageName Name { get; set; }
		
		/// <summary>
		/// The usages' unit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<UsageUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UsageUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 5,
	}
	
	/// <summary>
	/// List of usages
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageListResponse
	{
		
		/// <summary>
		/// Link for next list of DedicatedCloudNode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of usages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Usage[] Value { get; set; }
	}
	
	/// <summary>
	/// User name model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageName
	{
		
		/// <summary>
		/// e.g. "Virtual Machines"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// resource type or resource type sku name, e.g. virtualMachines
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Virtual disk model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualDisk
	{
		
		/// <summary>
		/// Disk's Controller id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="controllerId")]
		public string ControllerId { get; set; }
		
		/// <summary>
		/// Disk's independence mode type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="independenceMode")]
		public VirtualDiskIndependenceMode IndependenceMode { get; set; }
		
		/// <summary>
		/// Disk's total size
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public int TotalSize { get; set; }
		
		/// <summary>
		/// Disk's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualDiskId")]
		public string VirtualDiskId { get; set; }
		
		/// <summary>
		/// Disk's display name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualDiskName")]
		public string VirtualDiskName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum VirtualDiskIndependenceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		persistent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		independent_persistent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		independent_nonpersistent = 2,
	}
	
	/// <summary>
	/// Virtual disk controller model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualDiskController
	{
		
		/// <summary>
		/// Controller's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The display name of Controller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// dik controller subtype (VMWARE_PARAVIRTUAL, BUS_PARALLEL, LSI_PARALLEL, LSI_SAS)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subType")]
		public string SubType { get; set; }
		
		/// <summary>
		/// disk controller type (SCSI)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Virtual machine model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachine
	{
		
		/// <summary>
		/// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/virtualMachines/{virtualMachineName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure region
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// {virtualMachineName}
		/// Pattern: ^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of virtual machine
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public VirtualMachineProperties Properties { get; set; }
		
		/// <summary>
		/// Tags model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// {resourceProviderNamespace}/{resourceType}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of virtual machines
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineListResponse
	{
		
		/// <summary>
		/// Link for next list of VirtualMachines
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the VirtualMachine list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VirtualMachine[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of virtual machine
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineProperties
	{
		
		/// <summary>
		/// The amount of memory
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amountOfRam")]
		public int AmountOfRam { get; set; }
		
		/// <summary>
		/// The list of Virtual Disks' Controllers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controllers")]
		public VirtualDiskController[] Controllers { get; set; }
		
		/// <summary>
		/// Guest OS Customization properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customization")]
		public GuestOSCustomization Customization { get; set; }
		
		/// <summary>
		/// The list of Virtual Disks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public VirtualDisk[] Disks { get; set; }
		
		/// <summary>
		/// The DNS name of Virtual Machine in VCenter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsname")]
		public string Dnsname { get; set; }
		
		/// <summary>
		/// Expose Guest OS or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposeToGuestVM")]
		public System.Nullable<System.Boolean> ExposeToGuestVM { get; set; }
		
		/// <summary>
		/// The path to virtual machine folder in VCenter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public string Folder { get; set; }
		
		/// <summary>
		/// The name of Guest OS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestOS")]
		public string GuestOS { get; set; }
		
		/// <summary>
		/// The Guest OS type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestOSType")]
		public System.Nullable<VirtualMachinePropertiesGuestOSType> GuestOSType { get; set; }
		
		/// <summary>
		/// The list of Virtual NICs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nics")]
		public VirtualNic[] Nics { get; set; }
		
		/// <summary>
		/// The number of CPU cores
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfCores")]
		public int NumberOfCores { get; set; }
		
		/// <summary>
		/// Password for login. Deprecated - use customization property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Private Cloud Id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privateCloudId")]
		public string PrivateCloudId { get; set; }
		
		/// <summary>
		/// The provisioning status of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// The public ip of Virtual Machine
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIP")]
		public string PublicIP { get; set; }
		
		/// <summary>
		/// Resource pool model
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePool")]
		public ResourcePool ResourcePool { get; set; }
		
		/// <summary>
		/// The status of Virtual machine
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<VirtualMachinePropertiesStatus> Status { get; set; }
		
		/// <summary>
		/// Virtual Machine Template Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
		
		/// <summary>
		/// Username for login. Deprecated - use customization property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// The list of Virtual VSphere Networks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vSphereNetworks")]
		public string[] VSphereNetworks { get; set; }
		
		/// <summary>
		/// The internal id of Virtual Machine in VCenter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
		
		/// <summary>
		/// VMware tools version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmwaretools")]
		public string Vmwaretools { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum VirtualMachinePropertiesGuestOSType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		linux = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		windows = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 2,
	}
	
	/// <summary>
	/// Virtual NIC model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNic
	{
		
		/// <summary>
		/// Guest OS nic customization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customization")]
		public GuestOSNICCustomization Customization { get; set; }
		
		/// <summary>
		/// NIC ip address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddresses")]
		public string[] IpAddresses { get; set; }
		
		/// <summary>
		/// NIC MAC address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Virtual network model
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public VirtualNetwork Network { get; set; }
		
		/// <summary>
		/// NIC type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nicType")]
		public VirtualNicNicType NicType { get; set; }
		
		/// <summary>
		/// Is NIC powered on/off on boot
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="powerOnBoot")]
		public System.Nullable<System.Boolean> PowerOnBoot { get; set; }
		
		/// <summary>
		/// NIC id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNicId")]
		public string VirtualNicId { get; set; }
		
		/// <summary>
		/// NIC name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNicName")]
		public string VirtualNicName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum VirtualNicNicType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E1000 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E1000E = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCNET32 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VMXNET = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VMXNET2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VMXNET3 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum VirtualMachinePropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		suspended = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		poweredoff = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		updating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deallocating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
	}
	
	/// <summary>
	/// List of virtual machine stop modes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineStopMode
	{
		
		/// <summary>
		/// mode indicates a type of stop operation - reboot, suspend, shutdown or power-off
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<VirtualMachineStopModeMode> Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum VirtualMachineStopModeMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reboot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		suspend = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shutdown = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		poweroff = 3,
	}
	
	/// <summary>
	/// List of virtual machine templates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineTemplateListResponse
	{
		
		/// <summary>
		/// Link for next list of VirtualMachineTemplate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the VM template list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VirtualMachineTemplate[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of virtual machine template
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineTemplateProperties
	{
		
		/// <summary>
		/// The amount of memory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amountOfRam")]
		public System.Nullable<System.Int32> AmountOfRam { get; set; }
		
		/// <summary>
		/// The list of Virtual Disk Controllers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controllers")]
		public VirtualDiskController[] Controllers { get; set; }
		
		/// <summary>
		/// The description of Virtual Machine Template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The list of Virtual Disks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public VirtualDisk[] Disks { get; set; }
		
		/// <summary>
		/// Expose Guest OS or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposeToGuestVM")]
		public System.Nullable<System.Boolean> ExposeToGuestVM { get; set; }
		
		/// <summary>
		/// The Guest OS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestOS")]
		public string GuestOS { get; set; }
		
		/// <summary>
		/// The Guest OS types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestOSType")]
		public string GuestOSType { get; set; }
		
		/// <summary>
		/// The list of Virtual NICs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nics")]
		public VirtualNic[] Nics { get; set; }
		
		/// <summary>
		/// The number of CPU cores
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfCores")]
		public System.Nullable<System.Int32> NumberOfCores { get; set; }
		
		/// <summary>
		/// path to folder
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The Private Cloud Id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privateCloudId")]
		public string PrivateCloudId { get; set; }
		
		/// <summary>
		/// The list of VSphere networks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vSphereNetworks")]
		public string[] VSphereNetworks { get; set; }
		
		/// <summary>
		/// The tags from VSphere
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vSphereTags")]
		public string[] VSphereTags { get; set; }
		
		/// <summary>
		/// The VMware tools version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmwaretools")]
		public string Vmwaretools { get; set; }
	}
	
	/// <summary>
	/// List of virtual networks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkListResponse
	{
		
		/// <summary>
		/// Link for next list of VirtualNetwork
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Results of the VirtualNetwork list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VirtualNetwork[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of virtual network
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkProperties
	{
		
		/// <summary>
		/// The Private Cloud id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCloudId")]
		public string PrivateCloudId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Implements list of available operations
		/// Return list of operations
		/// Operations_List providers/Microsoft.VMwareCloudSimple/operations
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<AvailableOperationsListResponse> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.VMwareCloudSimple/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailableOperationsListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements list of dedicated cloud nodes within subscription method
		/// Returns list of dedicate cloud nodes within subscription
		/// DedicatedCloudNodes_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="filter">The filter to apply on the list operation</param>
		/// <param name="top">The maximum number of record sets to return</param>
		/// <param name="skipToken">to be used by nextLink implementation</param>
		/// <returns>successful operation</returns>
		public async Task<DedicatedCloudNodeListResponse> DedicatedCloudNodes_ListBySubscriptionAsync(string subscriptionId, string api_version, string filter, int top, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudNodeListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements list of dedicatedCloudService objects within subscription method
		/// Returns list of dedicated cloud services within a subscription
		/// DedicatedCloudServices_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="filter">The filter to apply on the list operation</param>
		/// <param name="top">The maximum number of record sets to return</param>
		/// <param name="skipToken">to be used by nextLink implementation</param>
		/// <returns>successful operation</returns>
		public async Task<DedicatedCloudServiceListResponse> DedicatedCloudServices_ListBySubscriptionAsync(string subscriptionId, string api_version, string filter, int top, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudServiceListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements SkuAvailability List method
		/// Returns list of available resources in region
		/// SkusAvailability_List subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/availabilities
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="skuId">sku id, if no sku is passed availability for all skus will be returned</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<SkuAvailabilityListResponse> SkusAvailability_ListAsync(string subscriptionId, string regionId, string skuId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/availabilities&skuId=" + (skuId==null? "" : System.Uri.EscapeDataString(skuId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SkuAvailabilityListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements get of async operation
		/// Return an async operation
		/// Operations_Get subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/operationResults/{operationId}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="operationId">operation id</param>
		/// <returns>Successful operation</returns>
		public async Task<OperationResource> Operations_GetAsync(string subscriptionId, string api_version, string regionId, string operationId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/operationResults/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OperationResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements private cloud list GET method
		/// Returns list of private clouds in particular region
		/// PrivateClouds_List subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<PrivateCloudList> PrivateClouds_ListAsync(string subscriptionId, string regionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateCloudList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements private cloud GET method
		/// Returns private cloud by its name
		/// PrivateClouds_Get subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="pcName">The private cloud name</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<PrivateCloud> PrivateClouds_GetAsync(string subscriptionId, string pcName, string regionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds/"+ (pcName==null? "" : System.Uri.EscapeDataString(pcName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrivateCloud>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements get of customization policies list
		/// Returns list of customization policies in region for private cloud
		/// CustomizationPolicies_List subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/customizationPolicies
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="pcName">The private cloud name</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="filter">The filter to apply on the list operation. only type is allowed here as a filter e.g. $filter=type eq 'xxxx'</param>
		/// <returns>successful operation</returns>
		public async Task<CustomizationPoliciesListResponse> CustomizationPolicies_ListAsync(string subscriptionId, string regionId, string pcName, string api_version, string filter)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds/"+ (pcName==null? "" : System.Uri.EscapeDataString(pcName))+"/customizationPolicies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomizationPoliciesListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements get of customization policy
		/// Returns customization policy by its name
		/// CustomizationPolicies_Get subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/customizationPolicies/{customizationPolicyName}
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="pcName">The private cloud name</param>
		/// <param name="customizationPolicyName">customization policy name</param>
		/// <returns>successful operation</returns>
		public async Task<CustomizationPolicy> CustomizationPolicies_GetAsync(string api_version, string subscriptionId, string regionId, string pcName, string customizationPolicyName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds/"+ (pcName==null? "" : System.Uri.EscapeDataString(pcName))+"/customizationPolicies/"+ (customizationPolicyName==null? "" : System.Uri.EscapeDataString(customizationPolicyName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomizationPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements get of resource pools list
		/// Returns list of resource pools in region for private cloud
		/// ResourcePools_List subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/resourcePools
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="pcName">The private cloud name</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<ResourcePoolsListResponse> ResourcePools_ListAsync(string subscriptionId, string regionId, string pcName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds/"+ (pcName==null? "" : System.Uri.EscapeDataString(pcName))+"/resourcePools&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourcePoolsListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements get of resource pool
		/// Returns resource pool templates by its name
		/// ResourcePools_Get subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/resourcePools/{resourcePoolName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="pcName">The private cloud name</param>
		/// <param name="resourcePoolName">resource pool id (vsphereId)</param>
		/// <returns>successful operation</returns>
		public async Task<ResourcePool> ResourcePools_GetAsync(string subscriptionId, string api_version, string regionId, string pcName, string resourcePoolName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds/"+ (pcName==null? "" : System.Uri.EscapeDataString(pcName))+"/resourcePools/"+ (resourcePoolName==null? "" : System.Uri.EscapeDataString(resourcePoolName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourcePool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements list of available VM templates
		/// Returns list of virtual machine templates in region for private cloud
		/// VirtualMachineTemplates_List subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/virtualMachineTemplates
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="pcName">The private cloud name</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="resourcePoolName">Resource pool used to derive vSphere cluster which contains VM templates</param>
		/// <returns>successful operation</returns>
		public async Task<VirtualMachineTemplateListResponse> VirtualMachineTemplates_ListAsync(string subscriptionId, string api_version, string pcName, string regionId, string resourcePoolName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds/"+ (pcName==null? "" : System.Uri.EscapeDataString(pcName))+"/virtualMachineTemplates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&resourcePoolName=" + (resourcePoolName==null? "" : System.Uri.EscapeDataString(resourcePoolName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualMachineTemplateListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements virtual machine template GET method
		/// Returns virtual machine templates by its name
		/// VirtualMachineTemplates_Get subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/virtualMachineTemplates/{virtualMachineTemplateName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="pcName">The private cloud name</param>
		/// <param name="virtualMachineTemplateName">virtual machine template id (vsphereId)</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<VirtualMachineTemplate> VirtualMachineTemplates_GetAsync(string subscriptionId, string regionId, string pcName, string virtualMachineTemplateName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds/"+ (pcName==null? "" : System.Uri.EscapeDataString(pcName))+"/virtualMachineTemplates/"+ (virtualMachineTemplateName==null? "" : System.Uri.EscapeDataString(virtualMachineTemplateName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualMachineTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements list available virtual networks within a subscription method
		/// Return list of virtual networks in location for private cloud
		/// VirtualNetworks_List subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/virtualNetworks
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="pcName">The private cloud name</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="resourcePoolName">Resource pool used to derive vSphere cluster which contains virtual networks</param>
		/// <returns>successful operation</returns>
		public async Task<VirtualNetworkListResponse> VirtualNetworks_ListAsync(string subscriptionId, string regionId, string pcName, string api_version, string resourcePoolName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds/"+ (pcName==null? "" : System.Uri.EscapeDataString(pcName))+"/virtualNetworks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&resourcePoolName=" + (resourcePoolName==null? "" : System.Uri.EscapeDataString(resourcePoolName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualNetworkListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements virtual network GET method
		/// Return virtual network by its name
		/// VirtualNetworks_Get subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/virtualNetworks/{virtualNetworkName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="pcName">The private cloud name</param>
		/// <param name="virtualNetworkName">virtual network id (vsphereId)</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<VirtualNetwork> VirtualNetworks_GetAsync(string subscriptionId, string regionId, string pcName, string virtualNetworkName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/privateClouds/"+ (pcName==null? "" : System.Uri.EscapeDataString(pcName))+"/virtualNetworks/"+ (virtualNetworkName==null? "" : System.Uri.EscapeDataString(virtualNetworkName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualNetwork>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements Usages List method
		/// Returns list of usage in region
		/// Usages_List subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/usages
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="regionId">The region Id (westus, eastus)</param>
		/// <param name="filter">The filter to apply on the list operation. only name.value is allowed here as a filter e.g. $filter=name.value eq 'xxxx'</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<UsageListResponse> Usages_ListAsync(string subscriptionId, string regionId, string filter, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/locations/"+ (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"/usages&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsageListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements list virtual machine within subscription method
		/// Returns list virtual machine within subscription
		/// VirtualMachines_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/virtualMachines
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="filter">The filter to apply on the list operation</param>
		/// <param name="top">The maximum number of record sets to return</param>
		/// <param name="skipToken">to be used by nextLink implementation</param>
		/// <returns>successful operation</returns>
		public async Task<VirtualMachineListResponse> VirtualMachines_ListBySubscriptionAsync(string subscriptionId, string api_version, string filter, int top, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VMwareCloudSimple/virtualMachines&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualMachineListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements list of dedicated cloud nodes within RG method
		/// Returns list of dedicate cloud nodes within resource group
		/// DedicatedCloudNodes_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="filter">The filter to apply on the list operation</param>
		/// <param name="top">The maximum number of record sets to return</param>
		/// <param name="skipToken">to be used by nextLink implementation</param>
		/// <returns>successful operation</returns>
		public async Task<DedicatedCloudNodeListResponse> DedicatedCloudNodes_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string filter, int top, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudNodeListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements dedicated cloud node GET method
		/// Returns dedicated cloud node
		/// DedicatedCloudNodes_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="dedicatedCloudNodeName">dedicated cloud node name</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<DedicatedCloudNode> DedicatedCloudNodes_GetAsync(string subscriptionId, string resourceGroupName, string dedicatedCloudNodeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/"+ (dedicatedCloudNodeName==null? "" : System.Uri.EscapeDataString(dedicatedCloudNodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudNode>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements dedicated cloud node PUT method
		/// Returns dedicated cloud node by its name
		/// DedicatedCloudNodes_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="dedicatedCloudNodeName">dedicated cloud node name</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Create Dedicated Cloud Node request</param>
		/// <returns>If resource is created or updated successfully, 200 should be returned</returns>
		public async Task<DedicatedCloudNode> DedicatedCloudNodes_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string dedicatedCloudNodeName, string api_version, DedicatedCloudNode requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/"+ (dedicatedCloudNodeName==null? "" : System.Uri.EscapeDataString(dedicatedCloudNodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudNode>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Implements dedicated cloud node DELETE method
		/// Delete dedicated cloud node
		/// DedicatedCloudNodes_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="dedicatedCloudNodeName">dedicated cloud node name</param>
		/// <param name="api_version">Client API version.</param>
		public async Task DedicatedCloudNodes_DeleteAsync(string subscriptionId, string resourceGroupName, string dedicatedCloudNodeName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/"+ (dedicatedCloudNodeName==null? "" : System.Uri.EscapeDataString(dedicatedCloudNodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements dedicated cloud node PATCH method
		/// Patches dedicated node properties
		/// DedicatedCloudNodes_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="dedicatedCloudNodeName">dedicated cloud node name</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Patch Dedicated Cloud Node request</param>
		/// <returns>If resource is created or updated successfully, 200 should be returned</returns>
		public async Task<DedicatedCloudNode> DedicatedCloudNodes_UpdateAsync(string subscriptionId, string resourceGroupName, string dedicatedCloudNodeName, string api_version, PatchPayload requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/"+ (dedicatedCloudNodeName==null? "" : System.Uri.EscapeDataString(dedicatedCloudNodeName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudNode>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Implements list of dedicatedCloudService objects within RG method
		/// Returns list of dedicated cloud services within a resource group
		/// DedicatedCloudServices_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="filter">The filter to apply on the list operation</param>
		/// <param name="top">The maximum number of record sets to return</param>
		/// <param name="skipToken">to be used by nextLink implementation</param>
		/// <returns>successful operation</returns>
		public async Task<DedicatedCloudServiceListResponse> DedicatedCloudServices_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string filter, int top, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudServiceListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements dedicatedCloudService GET method
		/// Returns Dedicate Cloud Service
		/// DedicatedCloudServices_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="dedicatedCloudServiceName">dedicated cloud Service name</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<DedicatedCloudService> DedicatedCloudServices_GetAsync(string subscriptionId, string resourceGroupName, string dedicatedCloudServiceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/"+ (dedicatedCloudServiceName==null? "" : System.Uri.EscapeDataString(dedicatedCloudServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements dedicated cloud service PUT method
		/// Create dedicate cloud service
		/// DedicatedCloudServices_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="dedicatedCloudServiceName">dedicated cloud Service name</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Create Dedicated Cloud Service request</param>
		/// <returns>If resource is created or updated successfully, 200 should be returned</returns>
		public async Task<DedicatedCloudService> DedicatedCloudServices_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string dedicatedCloudServiceName, string api_version, DedicatedCloudService requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/"+ (dedicatedCloudServiceName==null? "" : System.Uri.EscapeDataString(dedicatedCloudServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Implements dedicatedCloudService DELETE method
		/// Delete dedicate cloud service
		/// DedicatedCloudServices_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="dedicatedCloudServiceName">dedicated cloud service name</param>
		/// <param name="api_version">Client API version.</param>
		public async Task DedicatedCloudServices_DeleteAsync(string subscriptionId, string resourceGroupName, string dedicatedCloudServiceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/"+ (dedicatedCloudServiceName==null? "" : System.Uri.EscapeDataString(dedicatedCloudServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements dedicatedCloudService PATCH method
		/// Patch dedicated cloud service's properties
		/// DedicatedCloudServices_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="dedicatedCloudServiceName">dedicated cloud service name</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Patch Dedicated Cloud Service request</param>
		/// <returns>If resource is created or updated successfully, 200 should be returned</returns>
		public async Task<DedicatedCloudService> DedicatedCloudServices_UpdateAsync(string subscriptionId, string resourceGroupName, string dedicatedCloudServiceName, string api_version, PatchPayload requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/"+ (dedicatedCloudServiceName==null? "" : System.Uri.EscapeDataString(dedicatedCloudServiceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DedicatedCloudService>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Implements list virtual machine within RG method
		/// Returns list of virtual machine within resource group
		/// VirtualMachines_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="filter">The filter to apply on the list operation</param>
		/// <param name="top">The maximum number of record sets to return</param>
		/// <param name="skipToken">to be used by nextLink implementation</param>
		/// <returns>successful operation</returns>
		public async Task<VirtualMachineListResponse> VirtualMachines_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string filter, int top, string skipToken)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/virtualMachines&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top+"&$skipToken=" + (skipToken==null? "" : System.Uri.EscapeDataString(skipToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualMachineListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements virtual machine GET method
		/// Get virtual machine
		/// VirtualMachines_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="virtualMachineName">virtual machine name</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>successful operation</returns>
		public async Task<VirtualMachine> VirtualMachines_GetAsync(string subscriptionId, string resourceGroupName, string virtualMachineName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/virtualMachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualMachine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements virtual machine PUT method
		/// Create Or Update Virtual Machine
		/// VirtualMachines_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="virtualMachineName">virtual machine name</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Create or Update Virtual Machine request</param>
		/// <returns>If resource is created or updated successfully, 200 should be returned</returns>
		public async Task<VirtualMachine> VirtualMachines_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string virtualMachineName, string api_version, VirtualMachine requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/virtualMachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualMachine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Implements virtual machine DELETE method
		/// Delete virtual machine
		/// VirtualMachines_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="virtualMachineName">virtual machine name</param>
		/// <param name="api_version">Client API version.</param>
		public async Task VirtualMachines_DeleteAsync(string subscriptionId, string resourceGroupName, string virtualMachineName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/virtualMachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements virtual machine PATCH method
		/// Patch virtual machine properties
		/// VirtualMachines_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="virtualMachineName">virtual machine name</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">Patch virtual machine request</param>
		/// <returns>If resource is created or updated successfully, 200 should be returned</returns>
		public async Task<VirtualMachine> VirtualMachines_UpdateAsync(string subscriptionId, string resourceGroupName, string virtualMachineName, string api_version, PatchPayload requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/virtualMachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VirtualMachine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Implements a start method for a virtual machine
		/// Power on virtual machine
		/// VirtualMachines_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/start
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="virtualMachineName">virtual machine name</param>
		/// <param name="api_version">Client API version.</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_StartAsync(string subscriptionId, string resourceGroupName, string virtualMachineName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/virtualMachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"/start&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Implements shutdown, poweroff, and suspend method for a virtual machine
		/// Power off virtual machine, options: shutdown, poweroff, and suspend
		/// VirtualMachines_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/stop
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group</param>
		/// <param name="virtualMachineName">virtual machine name</param>
		/// <param name="mode">query stop mode parameter (reboot, shutdown, etc...)</param>
		/// <param name="api_version">Client API version.</param>
		/// <param name="requestBody">body stop mode parameter (reboot, shutdown, etc...)</param>
		/// <returns>OK</returns>
		public async Task VirtualMachines_StopAsync(string subscriptionId, string resourceGroupName, string virtualMachineName, VirtualMachineStopModeMode mode, string api_version, VirtualMachineStopMode requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.VMwareCloudSimple/virtualMachines/"+ (virtualMachineName==null? "" : System.Uri.EscapeDataString(virtualMachineName))+"/stop&mode=" + mode+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
