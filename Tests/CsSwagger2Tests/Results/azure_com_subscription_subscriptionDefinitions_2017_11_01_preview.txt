//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes the format of Error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The subscription definition used to create the subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionDefinition
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The subscription definition properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SubscriptionDefinitionProperties Properties { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Subscription Definition List operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionDefinitionList
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of subscriptionDefinitions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SubscriptionDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The subscription definition properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionDefinitionProperties
	{
		
		/// <summary>
		/// The etag the subscription definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The offer type of the subscription. For example, MS-AZR-0017P (EnterpriseAgreement) and MS-AZR-0148P (EnterpriseAgreement devTest) are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerType")]
		public string OfferType { get; set; }
		
		/// <summary>
		/// The display name of the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionDisplayName")]
		public string SubscriptionDisplayName { get; set; }
		
		/// <summary>
		/// The ID of the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Microsoft.Subscription API operations.
		/// SubscriptionDefinitionsOperationMetadata_list providers/Microsoft.Subscription/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2015-06-01</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> SubscriptionDefinitionsOperationMetadata_listAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Subscription/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List an Azure subscription definition by subscriptionId.
		/// SubscriptionDefinitions_List providers/Microsoft.Subscription/subscriptionDefinitions
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2015-06-01</param>
		/// <returns>Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters.</returns>
		public async Task<SubscriptionDefinitionList> SubscriptionDefinitions_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Subscription/subscriptionDefinitions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SubscriptionDefinitionList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an Azure subscription definition.
		/// SubscriptionDefinitions_Get providers/Microsoft.Subscription/subscriptionDefinitions/{subscriptionDefinitionName}
		/// </summary>
		/// <param name="subscriptionDefinitionName">The name of the Azure subscription definition.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2015-06-01</param>
		/// <returns>Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters.</returns>
		public async Task<SubscriptionDefinition> SubscriptionDefinitions_GetAsync(string subscriptionDefinitionName, string api_version)
		{
			var requestUri = "providers/Microsoft.Subscription/subscriptionDefinitions/"+ (subscriptionDefinitionName==null? "" : System.Uri.EscapeDataString(subscriptionDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SubscriptionDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an Azure subscription definition.
		/// SubscriptionDefinitions_Create providers/Microsoft.Subscription/subscriptionDefinitions/{subscriptionDefinitionName}
		/// </summary>
		/// <param name="subscriptionDefinitionName">The name of the Azure subscription definition.</param>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2015-06-01</param>
		/// <param name="requestBody">The subscription definition creation.</param>
		/// <returns>Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters.</returns>
		public async Task<SubscriptionDefinition> SubscriptionDefinitions_CreateAsync(string subscriptionDefinitionName, string api_version, SubscriptionDefinition requestBody)
		{
			var requestUri = "providers/Microsoft.Subscription/subscriptionDefinitions/"+ (subscriptionDefinitionName==null? "" : System.Uri.EscapeDataString(subscriptionDefinitionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SubscriptionDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the status of the subscription definition PUT operation. The URI of this API is returned in the Location field of the response header.
		/// SubscriptionDefinitions_GetOperationStatus providers/Microsoft.Subscription/subscriptionOperations/{operationId}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. Current version is 2015-06-01</param>
		/// <param name="operationId">The operation ID, which can be found from the Location field in the generate recommendation response header.</param>
		/// <returns>Successful completion of the asynchronous operation</returns>
		public async Task<SubscriptionDefinition> SubscriptionDefinitions_GetOperationStatusAsync(string api_version, string operationId)
		{
			var requestUri = "providers/Microsoft.Subscription/subscriptionOperations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SubscriptionDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
